// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l2_xpu_infra_mgr.proto

#include "l2_xpu_infra_mgr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
constexpr LogicalBridge::LogicalBridge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , status_(nullptr){}
struct LogicalBridgeDefaultTypeInternal {
  constexpr LogicalBridgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalBridgeDefaultTypeInternal() {}
  union {
    LogicalBridge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalBridgeDefaultTypeInternal _LogicalBridge_default_instance_;
constexpr LogicalBridgeSpec::LogicalBridgeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vlan_id_(0u)
  , vni_(0u){}
struct LogicalBridgeSpecDefaultTypeInternal {
  constexpr LogicalBridgeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalBridgeSpecDefaultTypeInternal() {}
  union {
    LogicalBridgeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalBridgeSpecDefaultTypeInternal _LogicalBridgeSpec_default_instance_;
constexpr LogicalBridgeStatus::LogicalBridgeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_status_(0)
{}
struct LogicalBridgeStatusDefaultTypeInternal {
  constexpr LogicalBridgeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalBridgeStatusDefaultTypeInternal() {}
  union {
    LogicalBridgeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalBridgeStatusDefaultTypeInternal _LogicalBridgeStatus_default_instance_;
constexpr CreateLogicalBridgeRequest::CreateLogicalBridgeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logical_bridge_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logical_bridge_(nullptr){}
struct CreateLogicalBridgeRequestDefaultTypeInternal {
  constexpr CreateLogicalBridgeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateLogicalBridgeRequestDefaultTypeInternal() {}
  union {
    CreateLogicalBridgeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateLogicalBridgeRequestDefaultTypeInternal _CreateLogicalBridgeRequest_default_instance_;
constexpr ListLogicalBridgesRequest::ListLogicalBridgesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListLogicalBridgesRequestDefaultTypeInternal {
  constexpr ListLogicalBridgesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListLogicalBridgesRequestDefaultTypeInternal() {}
  union {
    ListLogicalBridgesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListLogicalBridgesRequestDefaultTypeInternal _ListLogicalBridgesRequest_default_instance_;
constexpr ListLogicalBridgesResponse::ListLogicalBridgesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logical_bridges_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListLogicalBridgesResponseDefaultTypeInternal {
  constexpr ListLogicalBridgesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListLogicalBridgesResponseDefaultTypeInternal() {}
  union {
    ListLogicalBridgesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListLogicalBridgesResponseDefaultTypeInternal _ListLogicalBridgesResponse_default_instance_;
constexpr GetLogicalBridgeRequest::GetLogicalBridgeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetLogicalBridgeRequestDefaultTypeInternal {
  constexpr GetLogicalBridgeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogicalBridgeRequestDefaultTypeInternal() {}
  union {
    GetLogicalBridgeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogicalBridgeRequestDefaultTypeInternal _GetLogicalBridgeRequest_default_instance_;
constexpr DeleteLogicalBridgeRequest::DeleteLogicalBridgeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_missing_(false){}
struct DeleteLogicalBridgeRequestDefaultTypeInternal {
  constexpr DeleteLogicalBridgeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteLogicalBridgeRequestDefaultTypeInternal() {}
  union {
    DeleteLogicalBridgeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteLogicalBridgeRequestDefaultTypeInternal _DeleteLogicalBridgeRequest_default_instance_;
constexpr UpdateLogicalBridgeRequest::UpdateLogicalBridgeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logical_bridge_(nullptr)
  , update_mask_(nullptr)
  , allow_missing_(false){}
struct UpdateLogicalBridgeRequestDefaultTypeInternal {
  constexpr UpdateLogicalBridgeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateLogicalBridgeRequestDefaultTypeInternal() {}
  union {
    UpdateLogicalBridgeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateLogicalBridgeRequestDefaultTypeInternal _UpdateLogicalBridgeRequest_default_instance_;
constexpr BridgePort::BridgePort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , status_(nullptr){}
struct BridgePortDefaultTypeInternal {
  constexpr BridgePortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BridgePortDefaultTypeInternal() {}
  union {
    BridgePort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BridgePortDefaultTypeInternal _BridgePort_default_instance_;
constexpr BridgePortSpec::BridgePortSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logical_bridges_()
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ptype_(0)
{}
struct BridgePortSpecDefaultTypeInternal {
  constexpr BridgePortSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BridgePortSpecDefaultTypeInternal() {}
  union {
    BridgePortSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BridgePortSpecDefaultTypeInternal _BridgePortSpec_default_instance_;
constexpr BridgePortStatus::BridgePortStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_status_(0)
{}
struct BridgePortStatusDefaultTypeInternal {
  constexpr BridgePortStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BridgePortStatusDefaultTypeInternal() {}
  union {
    BridgePortStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BridgePortStatusDefaultTypeInternal _BridgePortStatus_default_instance_;
constexpr CreateBridgePortRequest::CreateBridgePortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bridge_port_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bridge_port_(nullptr){}
struct CreateBridgePortRequestDefaultTypeInternal {
  constexpr CreateBridgePortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateBridgePortRequestDefaultTypeInternal() {}
  union {
    CreateBridgePortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateBridgePortRequestDefaultTypeInternal _CreateBridgePortRequest_default_instance_;
constexpr ListBridgePortsRequest::ListBridgePortsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListBridgePortsRequestDefaultTypeInternal {
  constexpr ListBridgePortsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListBridgePortsRequestDefaultTypeInternal() {}
  union {
    ListBridgePortsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListBridgePortsRequestDefaultTypeInternal _ListBridgePortsRequest_default_instance_;
constexpr ListBridgePortsResponse::ListBridgePortsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bridge_ports_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListBridgePortsResponseDefaultTypeInternal {
  constexpr ListBridgePortsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListBridgePortsResponseDefaultTypeInternal() {}
  union {
    ListBridgePortsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListBridgePortsResponseDefaultTypeInternal _ListBridgePortsResponse_default_instance_;
constexpr GetBridgePortRequest::GetBridgePortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBridgePortRequestDefaultTypeInternal {
  constexpr GetBridgePortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBridgePortRequestDefaultTypeInternal() {}
  union {
    GetBridgePortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBridgePortRequestDefaultTypeInternal _GetBridgePortRequest_default_instance_;
constexpr DeleteBridgePortRequest::DeleteBridgePortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_missing_(false){}
struct DeleteBridgePortRequestDefaultTypeInternal {
  constexpr DeleteBridgePortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteBridgePortRequestDefaultTypeInternal() {}
  union {
    DeleteBridgePortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteBridgePortRequestDefaultTypeInternal _DeleteBridgePortRequest_default_instance_;
constexpr UpdateBridgePortRequest::UpdateBridgePortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bridge_port_(nullptr)
  , update_mask_(nullptr)
  , allow_missing_(false){}
struct UpdateBridgePortRequestDefaultTypeInternal {
  constexpr UpdateBridgePortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateBridgePortRequestDefaultTypeInternal() {}
  union {
    UpdateBridgePortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateBridgePortRequestDefaultTypeInternal _UpdateBridgePortRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto = nullptr;

const uint32_t TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec, vlan_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec, vni_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus, oper_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, logical_bridge_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest, logical_bridge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, logical_bridges_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest, allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, logical_bridge_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest, allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePort, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePort, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePort, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec, mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec, ptype_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec, logical_bridges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus, oper_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, bridge_port_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest, bridge_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, bridge_ports_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest, allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, bridge_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest, allow_missing_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge)},
  { 9, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec)},
  { 17, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus)},
  { 24, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest)},
  { 32, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest)},
  { 40, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse)},
  { 48, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest)},
  { 55, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest)},
  { 63, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest)},
  { 72, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::BridgePort)},
  { 81, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec)},
  { 90, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus)},
  { 97, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest)},
  { 105, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest)},
  { 113, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse)},
  { 121, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest)},
  { 128, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest)},
  { 136, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_LogicalBridge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_LogicalBridgeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_LogicalBridgeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_CreateLogicalBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListLogicalBridgesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListLogicalBridgesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_GetLogicalBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_DeleteLogicalBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_UpdateLogicalBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_BridgePort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_BridgePortSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_BridgePortStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_CreateBridgePortRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListBridgePortsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListBridgePortsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_GetBridgePortRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_DeleteBridgePortRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_UpdateBridgePortRequest_default_instance_),
};

const char descriptor_table_protodef_l2_5fxpu_5finfra_5fmgr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026l2_xpu_infra_mgr.proto\022 opi_api.networ"
  "k.evpn_gw.v1alpha1\032\034google/api/annotatio"
  "ns.proto\032\027google/api/client.proto\032\033googl"
  "e/protobuf/empty.proto\032\037google/api/field"
  "_behavior.proto\032 google/protobuf/field_m"
  "ask.proto\032\031google/api/resource.proto\"\302\002\n"
  "\rLogicalBridge\022G\n\004name\030\001 \001(\tB9\340A\003\340A\005\372A0\n"
  ".opi_api.network.evpn_gw.v1alpha1/Logica"
  "lBridge\022F\n\004spec\030\002 \001(\01323.opi_api.network."
  "evpn_gw.v1alpha1.LogicalBridgeSpecB\003\340A\002\022"
  "J\n\006status\030\003 \001(\01325.opi_api.network.evpn_g"
  "w.v1alpha1.LogicalBridgeStatusB\003\340A\003:T\352AQ"
  "\n.opi_api.network.evpn_gw.v1alpha1/Logic"
  "alBridge\022\037logicalBridges/{logical_bridge"
  "}\";\n\021LogicalBridgeSpec\022\024\n\007vlan_id\030\001 \001(\rB"
  "\003\340A\002\022\020\n\003vni\030\002 \001(\rB\003\340A\001\"_\n\023LogicalBridgeS"
  "tatus\022H\n\013oper_status\030\001 \001(\0162..opi_api.net"
  "work.evpn_gw.v1alpha1.LBOperStatusB\003\340A\003\""
  "\205\001\n\032CreateLogicalBridgeRequest\022\031\n\021logica"
  "l_bridge_id\030\001 \001(\t\022L\n\016logical_bridge\030\002 \001("
  "\0132/.opi_api.network.evpn_gw.v1alpha1.Log"
  "icalBridgeB\003\340A\002\"B\n\031ListLogicalBridgesReq"
  "uest\022\021\n\tpage_size\030\001 \001(\005\022\022\n\npage_token\030\002 "
  "\001(\t\"\177\n\032ListLogicalBridgesResponse\022H\n\017log"
  "ical_bridges\030\001 \003(\0132/.opi_api.network.evp"
  "n_gw.v1alpha1.LogicalBridge\022\027\n\017next_page"
  "_token\030\002 \001(\t\"_\n\027GetLogicalBridgeRequest\022"
  "D\n\004name\030\001 \001(\tB6\340A\002\372A0\n.opi_api.network.e"
  "vpn_gw.v1alpha1/LogicalBridge\"y\n\032DeleteL"
  "ogicalBridgeRequest\022D\n\004name\030\001 \001(\tB6\340A\002\372A"
  "0\n.opi_api.network.evpn_gw.v1alpha1/Logi"
  "calBridge\022\025\n\rallow_missing\030\002 \001(\010\"\255\001\n\032Upd"
  "ateLogicalBridgeRequest\022G\n\016logical_bridg"
  "e\030\001 \001(\0132/.opi_api.network.evpn_gw.v1alph"
  "a1.LogicalBridge\022/\n\013update_mask\030\002 \001(\0132\032."
  "google.protobuf.FieldMask\022\025\n\rallow_missi"
  "ng\030\003 \001(\010\"\255\002\n\nBridgePort\022D\n\004name\030\001 \001(\tB6\340"
  "A\003\340A\005\372A-\n+opi_api.network.evpn_gw.v1alph"
  "a1/BridgePort\022C\n\004spec\030\002 \001(\01320.opi_api.ne"
  "twork.evpn_gw.v1alpha1.BridgePortSpecB\003\340"
  "A\002\022G\n\006status\030\003 \001(\01322.opi_api.network.evp"
  "n_gw.v1alpha1.BridgePortStatusB\003\340A\003:K\352AH"
  "\n+opi_api.network.evpn_gw.v1alpha1/Bridg"
  "ePort\022\031bridgePorts/{bridge_port}\"\216\001\n\016Bri"
  "dgePortSpec\022\030\n\013mac_address\030\001 \001(\014B\003\340A\002\022D\n"
  "\005ptype\030\002 \001(\01620.opi_api.network.evpn_gw.v"
  "1alpha1.BridgePortTypeB\003\340A\002\022\034\n\017logical_b"
  "ridges\030\003 \003(\tB\003\340A\001\"\\\n\020BridgePortStatus\022H\n"
  "\013oper_status\030\001 \001(\0162..opi_api.network.evp"
  "n_gw.v1alpha1.BPOperStatusB\003\340A\003\"y\n\027Creat"
  "eBridgePortRequest\022\026\n\016bridge_port_id\030\001 \001"
  "(\t\022F\n\013bridge_port\030\002 \001(\0132,.opi_api.networ"
  "k.evpn_gw.v1alpha1.BridgePortB\003\340A\002\"\?\n\026Li"
  "stBridgePortsRequest\022\021\n\tpage_size\030\001 \001(\005\022"
  "\022\n\npage_token\030\002 \001(\t\"v\n\027ListBridgePortsRe"
  "sponse\022B\n\014bridge_ports\030\001 \003(\0132,.opi_api.n"
  "etwork.evpn_gw.v1alpha1.BridgePort\022\027\n\017ne"
  "xt_page_token\030\002 \001(\t\"Y\n\024GetBridgePortRequ"
  "est\022A\n\004name\030\001 \001(\tB3\340A\002\372A-\n+opi_api.netwo"
  "rk.evpn_gw.v1alpha1/BridgePort\"s\n\027Delete"
  "BridgePortRequest\022A\n\004name\030\001 \001(\tB3\340A\002\372A-\n"
  "+opi_api.network.evpn_gw.v1alpha1/Bridge"
  "Port\022\025\n\rallow_missing\030\002 \001(\010\"\244\001\n\027UpdateBr"
  "idgePortRequest\022A\n\013bridge_port\030\001 \001(\0132,.o"
  "pi_api.network.evpn_gw.v1alpha1.BridgePo"
  "rt\022/\n\013update_mask\030\002 \001(\0132\032.google.protobu"
  "f.FieldMask\022\025\n\rallow_missing\030\003 \001(\010*^\n\014LB"
  "OperStatus\022\036\n\032LB_OPER_STATUS_UNSPECIFIED"
  "\020\000\022\025\n\021LB_OPER_STATUS_UP\020\001\022\027\n\023LB_OPER_STA"
  "TUS_DOWN\020\002*^\n\014BPOperStatus\022\036\n\032BP_OPER_ST"
  "ATUS_UNSPECIFIED\020\000\022\025\n\021BP_OPER_STATUS_UP\020"
  "\001\022\027\n\023BP_OPER_STATUS_DOWN\020\002*4\n\016BridgePort"
  "Type\022\013\n\007UNKNOWN\020\000\022\n\n\006ACCESS\020\001\022\t\n\005TRUNK\020\002"
  "2\311\007\n\024LogicalBridgeService\022\323\001\n\023CreateLogi"
  "calBridge\022<.opi_api.network.evpn_gw.v1al"
  "pha1.CreateLogicalBridgeRequest\032/.opi_ap"
  "i.network.evpn_gw.v1alpha1.LogicalBridge"
  "\"M\202\323\344\223\002$\"\022/v1/logicalBridges:\016logical_br"
  "idge\332A logical_bridge,logical_bridge_id\022"
  "\253\001\n\022ListLogicalBridges\022;.opi_api.network"
  ".evpn_gw.v1alpha1.ListLogicalBridgesRequ"
  "est\032<.opi_api.network.evpn_gw.v1alpha1.L"
  "istLogicalBridgesResponse\"\032\202\323\344\223\002\024\022\022/v1/l"
  "ogicalBridges\022\252\001\n\020GetLogicalBridge\0229.opi"
  "_api.network.evpn_gw.v1alpha1.GetLogical"
  "BridgeRequest\032/.opi_api.network.evpn_gw."
  "v1alpha1.LogicalBridge\"*\202\323\344\223\002\035\022\033/v1/{nam"
  "e=logicalBridges/*}\332A\004name\022\227\001\n\023DeleteLog"
  "icalBridge\022<.opi_api.network.evpn_gw.v1a"
  "lpha1.DeleteLogicalBridgeRequest\032\026.googl"
  "e.protobuf.Empty\"*\202\323\344\223\002\035*\033/v1/{name=logi"
  "calBridges/*}\332A\004name\022\345\001\n\023UpdateLogicalBr"
  "idge\022<.opi_api.network.evpn_gw.v1alpha1."
  "UpdateLogicalBridgeRequest\032/.opi_api.net"
  "work.evpn_gw.v1alpha1.LogicalBridge\"_\202\323\344"
  "\223\002<2*/v1/{logical_bridge.name=logicalBri"
  "dges/*}:\016logical_bridge\332A\032logical_bridge"
  ",update_mask2\373\006\n\021BridgePortService\022\276\001\n\020C"
  "reateBridgePort\0229.opi_api.network.evpn_g"
  "w.v1alpha1.CreateBridgePortRequest\032,.opi"
  "_api.network.evpn_gw.v1alpha1.BridgePort"
  "\"A\202\323\344\223\002\036\"\017/v1/bridgePorts:\013bridge_port\332A"
  "\032bridge_port,bridge_port_id\022\237\001\n\017ListBrid"
  "gePorts\0228.opi_api.network.evpn_gw.v1alph"
  "a1.ListBridgePortsRequest\0329.opi_api.netw"
  "ork.evpn_gw.v1alpha1.ListBridgePortsResp"
  "onse\"\027\202\323\344\223\002\021\022\017/v1/bridgePorts\022\236\001\n\rGetBri"
  "dgePort\0226.opi_api.network.evpn_gw.v1alph"
  "a1.GetBridgePortRequest\032,.opi_api.networ"
  "k.evpn_gw.v1alpha1.BridgePort\"\'\202\323\344\223\002\032\022\030/"
  "v1/{name=bridgePorts/*}\332A\004name\022\216\001\n\020Delet"
  "eBridgePort\0229.opi_api.network.evpn_gw.v1"
  "alpha1.DeleteBridgePortRequest\032\026.google."
  "protobuf.Empty\"\'\202\323\344\223\002\032*\030/v1/{name=bridge"
  "Ports/*}\332A\004name\022\320\001\n\020UpdateBridgePort\0229.o"
  "pi_api.network.evpn_gw.v1alpha1.UpdateBr"
  "idgePortRequest\032,.opi_api.network.evpn_g"
  "w.v1alpha1.BridgePort\"S\202\323\344\223\00232$/v1/{brid"
  "ge_port.name=bridgePorts/*}:\013bridge_port"
  "\332A\027bridge_port,update_maskBw\n opi_api.ne"
  "twork.evpn_gw.v1alpha1B\022L2XpuInfraMgrPro"
  "toP\001Z=github.com/opiproject/opi-api/netw"
  "ork/evpn-gw/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto = {
  false, false, 4915, descriptor_table_protodef_l2_5fxpu_5finfra_5fmgr_2eproto, "l2_xpu_infra_mgr.proto", 
  &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once, descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_deps, 6, 18,
  schemas, file_default_instances, TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto::offsets,
  file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto, file_level_enum_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto, file_level_service_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter() {
  return &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_l2_5fxpu_5finfra_5fmgr_2eproto(&descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto);
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LBOperStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto);
  return file_level_enum_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto[0];
}
bool LBOperStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BPOperStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto);
  return file_level_enum_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto[1];
}
bool BPOperStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BridgePortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto);
  return file_level_enum_descriptors_l2_5fxpu_5finfra_5fmgr_2eproto[2];
}
bool BridgePortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogicalBridge::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec& spec(const LogicalBridge* msg);
  static const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus& status(const LogicalBridge* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec&
LogicalBridge::_Internal::spec(const LogicalBridge* msg) {
  return *msg->spec_;
}
const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus&
LogicalBridge::_Internal::status(const LogicalBridge* msg) {
  return *msg->status_;
}
LogicalBridge::LogicalBridge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
}
LogicalBridge::LogicalBridge(const LogicalBridge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
}

inline void LogicalBridge::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

LogicalBridge::~LogicalBridge() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalBridge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void LogicalBridge::ArenaDtor(void* object) {
  LogicalBridge* _this = reinterpret_cast< LogicalBridge* >(object);
  (void)_this;
}
void LogicalBridge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalBridge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalBridge::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalBridge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalBridge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  return target;
}

size_t LogicalBridge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalBridge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalBridge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalBridge::GetClassData() const { return &_class_data_; }

void LogicalBridge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalBridge *>(to)->MergeFrom(
      static_cast<const LogicalBridge &>(from));
}


void LogicalBridge::MergeFrom(const LogicalBridge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalBridge::CopyFrom(const LogicalBridge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalBridge::IsInitialized() const {
  return true;
}

void LogicalBridge::InternalSwap(LogicalBridge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalBridge, status_)
      + sizeof(LogicalBridge::status_)
      - PROTOBUF_FIELD_OFFSET(LogicalBridge, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalBridge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[0]);
}

// ===================================================================

class LogicalBridgeSpec::_Internal {
 public:
};

LogicalBridgeSpec::LogicalBridgeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
}
LogicalBridgeSpec::LogicalBridgeSpec(const LogicalBridgeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vlan_id_, &from.vlan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vni_) -
    reinterpret_cast<char*>(&vlan_id_)) + sizeof(vni_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
}

inline void LogicalBridgeSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vlan_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vni_) -
    reinterpret_cast<char*>(&vlan_id_)) + sizeof(vni_));
}

LogicalBridgeSpec::~LogicalBridgeSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalBridgeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogicalBridgeSpec::ArenaDtor(void* object) {
  LogicalBridgeSpec* _this = reinterpret_cast< LogicalBridgeSpec* >(object);
  (void)_this;
}
void LogicalBridgeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalBridgeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalBridgeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vlan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vni_) -
      reinterpret_cast<char*>(&vlan_id_)) + sizeof(vni_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalBridgeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vlan_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vlan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vni = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vni_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalBridgeSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vlan_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vlan_id(), target);
  }

  // uint32 vni = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_vni() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vni(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  return target;
}

size_t LogicalBridgeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vlan_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vlan_id());
  }

  // uint32 vni = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_vni() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vni());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalBridgeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalBridgeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalBridgeSpec::GetClassData() const { return &_class_data_; }

void LogicalBridgeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalBridgeSpec *>(to)->MergeFrom(
      static_cast<const LogicalBridgeSpec &>(from));
}


void LogicalBridgeSpec::MergeFrom(const LogicalBridgeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vlan_id() != 0) {
    _internal_set_vlan_id(from._internal_vlan_id());
  }
  if (from._internal_vni() != 0) {
    _internal_set_vni(from._internal_vni());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalBridgeSpec::CopyFrom(const LogicalBridgeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalBridgeSpec::IsInitialized() const {
  return true;
}

void LogicalBridgeSpec::InternalSwap(LogicalBridgeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalBridgeSpec, vni_)
      + sizeof(LogicalBridgeSpec::vni_)
      - PROTOBUF_FIELD_OFFSET(LogicalBridgeSpec, vlan_id_)>(
          reinterpret_cast<char*>(&vlan_id_),
          reinterpret_cast<char*>(&other->vlan_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalBridgeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[1]);
}

// ===================================================================

class LogicalBridgeStatus::_Internal {
 public:
};

LogicalBridgeStatus::LogicalBridgeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
}
LogicalBridgeStatus::LogicalBridgeStatus(const LogicalBridgeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_status_ = from.oper_status_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
}

inline void LogicalBridgeStatus::SharedCtor() {
oper_status_ = 0;
}

LogicalBridgeStatus::~LogicalBridgeStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogicalBridgeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogicalBridgeStatus::ArenaDtor(void* object) {
  LogicalBridgeStatus* _this = reinterpret_cast< LogicalBridgeStatus* >(object);
  (void)_this;
}
void LogicalBridgeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalBridgeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogicalBridgeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oper_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalBridgeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.LBOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_status(static_cast<::opi_api::network::evpn_gw::v1alpha1::LBOperStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalBridgeStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.LBOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_oper_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  return target;
}

size_t LogicalBridgeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.LBOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_oper_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalBridgeStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogicalBridgeStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalBridgeStatus::GetClassData() const { return &_class_data_; }

void LogicalBridgeStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogicalBridgeStatus *>(to)->MergeFrom(
      static_cast<const LogicalBridgeStatus &>(from));
}


void LogicalBridgeStatus::MergeFrom(const LogicalBridgeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper_status() != 0) {
    _internal_set_oper_status(from._internal_oper_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalBridgeStatus::CopyFrom(const LogicalBridgeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalBridgeStatus::IsInitialized() const {
  return true;
}

void LogicalBridgeStatus::InternalSwap(LogicalBridgeStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oper_status_, other->oper_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalBridgeStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[2]);
}

// ===================================================================

class CreateLogicalBridgeRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& logical_bridge(const CreateLogicalBridgeRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge&
CreateLogicalBridgeRequest::_Internal::logical_bridge(const CreateLogicalBridgeRequest* msg) {
  return *msg->logical_bridge_;
}
CreateLogicalBridgeRequest::CreateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
}
CreateLogicalBridgeRequest::CreateLogicalBridgeRequest(const CreateLogicalBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logical_bridge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    logical_bridge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logical_bridge_id().empty()) {
    logical_bridge_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logical_bridge_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_logical_bridge()) {
    logical_bridge_ = new ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge(*from.logical_bridge_);
  } else {
    logical_bridge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
}

inline void CreateLogicalBridgeRequest::SharedCtor() {
logical_bridge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  logical_bridge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
logical_bridge_ = nullptr;
}

CreateLogicalBridgeRequest::~CreateLogicalBridgeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateLogicalBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  logical_bridge_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete logical_bridge_;
}

void CreateLogicalBridgeRequest::ArenaDtor(void* object) {
  CreateLogicalBridgeRequest* _this = reinterpret_cast< CreateLogicalBridgeRequest* >(object);
  (void)_this;
}
void CreateLogicalBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLogicalBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateLogicalBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_bridge_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && logical_bridge_ != nullptr) {
    delete logical_bridge_;
  }
  logical_bridge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLogicalBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string logical_bridge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_logical_bridge_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_bridge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateLogicalBridgeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string logical_bridge_id = 1;
  if (!this->_internal_logical_bridge_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logical_bridge_id().data(), static_cast<int>(this->_internal_logical_bridge_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logical_bridge_id(), target);
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_logical_bridge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logical_bridge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  return target;
}

size_t CreateLogicalBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logical_bridge_id = 1;
  if (!this->_internal_logical_bridge_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logical_bridge_id());
  }

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_logical_bridge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logical_bridge_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateLogicalBridgeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateLogicalBridgeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateLogicalBridgeRequest::GetClassData() const { return &_class_data_; }

void CreateLogicalBridgeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateLogicalBridgeRequest *>(to)->MergeFrom(
      static_cast<const CreateLogicalBridgeRequest &>(from));
}


void CreateLogicalBridgeRequest::MergeFrom(const CreateLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logical_bridge_id().empty()) {
    _internal_set_logical_bridge_id(from._internal_logical_bridge_id());
  }
  if (from._internal_has_logical_bridge()) {
    _internal_mutable_logical_bridge()->::opi_api::network::evpn_gw::v1alpha1::LogicalBridge::MergeFrom(from._internal_logical_bridge());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateLogicalBridgeRequest::CopyFrom(const CreateLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLogicalBridgeRequest::IsInitialized() const {
  return true;
}

void CreateLogicalBridgeRequest::InternalSwap(CreateLogicalBridgeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logical_bridge_id_, lhs_arena,
      &other->logical_bridge_id_, rhs_arena
  );
  swap(logical_bridge_, other->logical_bridge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLogicalBridgeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[3]);
}

// ===================================================================

class ListLogicalBridgesRequest::_Internal {
 public:
};

ListLogicalBridgesRequest::ListLogicalBridgesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
}
ListLogicalBridgesRequest::ListLogicalBridgesRequest(const ListLogicalBridgesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
}

inline void ListLogicalBridgesRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListLogicalBridgesRequest::~ListLogicalBridgesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListLogicalBridgesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListLogicalBridgesRequest::ArenaDtor(void* object) {
  ListLogicalBridgesRequest* _this = reinterpret_cast< ListLogicalBridgesRequest* >(object);
  (void)_this;
}
void ListLogicalBridgesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLogicalBridgesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListLogicalBridgesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLogicalBridgesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListLogicalBridgesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  return target;
}

size_t ListLogicalBridgesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListLogicalBridgesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListLogicalBridgesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListLogicalBridgesRequest::GetClassData() const { return &_class_data_; }

void ListLogicalBridgesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListLogicalBridgesRequest *>(to)->MergeFrom(
      static_cast<const ListLogicalBridgesRequest &>(from));
}


void ListLogicalBridgesRequest::MergeFrom(const ListLogicalBridgesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListLogicalBridgesRequest::CopyFrom(const ListLogicalBridgesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLogicalBridgesRequest::IsInitialized() const {
  return true;
}

void ListLogicalBridgesRequest::InternalSwap(ListLogicalBridgesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLogicalBridgesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[4]);
}

// ===================================================================

class ListLogicalBridgesResponse::_Internal {
 public:
};

ListLogicalBridgesResponse::ListLogicalBridgesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logical_bridges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
}
ListLogicalBridgesResponse::ListLogicalBridgesResponse(const ListLogicalBridgesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logical_bridges_(from.logical_bridges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
}

inline void ListLogicalBridgesResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListLogicalBridgesResponse::~ListLogicalBridgesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListLogicalBridgesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListLogicalBridgesResponse::ArenaDtor(void* object) {
  ListLogicalBridgesResponse* _this = reinterpret_cast< ListLogicalBridgesResponse* >(object);
  (void)_this;
}
void ListLogicalBridgesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLogicalBridgesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListLogicalBridgesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_bridges_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLogicalBridgesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_bridges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListLogicalBridgesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logical_bridges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_logical_bridges(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  return target;
}

size_t ListLogicalBridgesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridges = 1;
  total_size += 1UL * this->_internal_logical_bridges_size();
  for (const auto& msg : this->logical_bridges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListLogicalBridgesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListLogicalBridgesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListLogicalBridgesResponse::GetClassData() const { return &_class_data_; }

void ListLogicalBridgesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListLogicalBridgesResponse *>(to)->MergeFrom(
      static_cast<const ListLogicalBridgesResponse &>(from));
}


void ListLogicalBridgesResponse::MergeFrom(const ListLogicalBridgesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  logical_bridges_.MergeFrom(from.logical_bridges_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListLogicalBridgesResponse::CopyFrom(const ListLogicalBridgesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLogicalBridgesResponse::IsInitialized() const {
  return true;
}

void ListLogicalBridgesResponse::InternalSwap(ListLogicalBridgesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logical_bridges_.InternalSwap(&other->logical_bridges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLogicalBridgesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[5]);
}

// ===================================================================

class GetLogicalBridgeRequest::_Internal {
 public:
};

GetLogicalBridgeRequest::GetLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
}
GetLogicalBridgeRequest::GetLogicalBridgeRequest(const GetLogicalBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
}

inline void GetLogicalBridgeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLogicalBridgeRequest::~GetLogicalBridgeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLogicalBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLogicalBridgeRequest::ArenaDtor(void* object) {
  GetLogicalBridgeRequest* _this = reinterpret_cast< GetLogicalBridgeRequest* >(object);
  (void)_this;
}
void GetLogicalBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLogicalBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLogicalBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLogicalBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLogicalBridgeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  return target;
}

size_t GetLogicalBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLogicalBridgeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLogicalBridgeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLogicalBridgeRequest::GetClassData() const { return &_class_data_; }

void GetLogicalBridgeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLogicalBridgeRequest *>(to)->MergeFrom(
      static_cast<const GetLogicalBridgeRequest &>(from));
}


void GetLogicalBridgeRequest::MergeFrom(const GetLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogicalBridgeRequest::CopyFrom(const GetLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogicalBridgeRequest::IsInitialized() const {
  return true;
}

void GetLogicalBridgeRequest::InternalSwap(GetLogicalBridgeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLogicalBridgeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[6]);
}

// ===================================================================

class DeleteLogicalBridgeRequest::_Internal {
 public:
};

DeleteLogicalBridgeRequest::DeleteLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
}
DeleteLogicalBridgeRequest::DeleteLogicalBridgeRequest(const DeleteLogicalBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  allow_missing_ = from.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
}

inline void DeleteLogicalBridgeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
allow_missing_ = false;
}

DeleteLogicalBridgeRequest::~DeleteLogicalBridgeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteLogicalBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteLogicalBridgeRequest::ArenaDtor(void* object) {
  DeleteLogicalBridgeRequest* _this = reinterpret_cast< DeleteLogicalBridgeRequest* >(object);
  (void)_this;
}
void DeleteLogicalBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLogicalBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteLogicalBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLogicalBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteLogicalBridgeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  return target;
}

size_t DeleteLogicalBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteLogicalBridgeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteLogicalBridgeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteLogicalBridgeRequest::GetClassData() const { return &_class_data_; }

void DeleteLogicalBridgeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteLogicalBridgeRequest *>(to)->MergeFrom(
      static_cast<const DeleteLogicalBridgeRequest &>(from));
}


void DeleteLogicalBridgeRequest::MergeFrom(const DeleteLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_allow_missing() != 0) {
    _internal_set_allow_missing(from._internal_allow_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteLogicalBridgeRequest::CopyFrom(const DeleteLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLogicalBridgeRequest::IsInitialized() const {
  return true;
}

void DeleteLogicalBridgeRequest::InternalSwap(DeleteLogicalBridgeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(allow_missing_, other->allow_missing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLogicalBridgeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[7]);
}

// ===================================================================

class UpdateLogicalBridgeRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& logical_bridge(const UpdateLogicalBridgeRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateLogicalBridgeRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge&
UpdateLogicalBridgeRequest::_Internal::logical_bridge(const UpdateLogicalBridgeRequest* msg) {
  return *msg->logical_bridge_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateLogicalBridgeRequest::_Internal::update_mask(const UpdateLogicalBridgeRequest* msg) {
  return *msg->update_mask_;
}
void UpdateLogicalBridgeRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateLogicalBridgeRequest::UpdateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
}
UpdateLogicalBridgeRequest::UpdateLogicalBridgeRequest(const UpdateLogicalBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logical_bridge()) {
    logical_bridge_ = new ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge(*from.logical_bridge_);
  } else {
    logical_bridge_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  allow_missing_ = from.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
}

inline void UpdateLogicalBridgeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logical_bridge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_missing_) -
    reinterpret_cast<char*>(&logical_bridge_)) + sizeof(allow_missing_));
}

UpdateLogicalBridgeRequest::~UpdateLogicalBridgeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateLogicalBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete logical_bridge_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateLogicalBridgeRequest::ArenaDtor(void* object) {
  UpdateLogicalBridgeRequest* _this = reinterpret_cast< UpdateLogicalBridgeRequest* >(object);
  (void)_this;
}
void UpdateLogicalBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLogicalBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateLogicalBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && logical_bridge_ != nullptr) {
    delete logical_bridge_;
  }
  logical_bridge_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLogicalBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_bridge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateLogicalBridgeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 1;
  if (this->_internal_has_logical_bridge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logical_bridge(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  // bool allow_missing = 3;
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  return target;
}

size_t UpdateLogicalBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 1;
  if (this->_internal_has_logical_bridge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logical_bridge_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  // bool allow_missing = 3;
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateLogicalBridgeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateLogicalBridgeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateLogicalBridgeRequest::GetClassData() const { return &_class_data_; }

void UpdateLogicalBridgeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateLogicalBridgeRequest *>(to)->MergeFrom(
      static_cast<const UpdateLogicalBridgeRequest &>(from));
}


void UpdateLogicalBridgeRequest::MergeFrom(const UpdateLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logical_bridge()) {
    _internal_mutable_logical_bridge()->::opi_api::network::evpn_gw::v1alpha1::LogicalBridge::MergeFrom(from._internal_logical_bridge());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  if (from._internal_allow_missing() != 0) {
    _internal_set_allow_missing(from._internal_allow_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLogicalBridgeRequest::CopyFrom(const UpdateLogicalBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLogicalBridgeRequest::IsInitialized() const {
  return true;
}

void UpdateLogicalBridgeRequest::InternalSwap(UpdateLogicalBridgeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLogicalBridgeRequest, allow_missing_)
      + sizeof(UpdateLogicalBridgeRequest::allow_missing_)
      - PROTOBUF_FIELD_OFFSET(UpdateLogicalBridgeRequest, logical_bridge_)>(
          reinterpret_cast<char*>(&logical_bridge_),
          reinterpret_cast<char*>(&other->logical_bridge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLogicalBridgeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[8]);
}

// ===================================================================

class BridgePort::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec& spec(const BridgePort* msg);
  static const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus& status(const BridgePort* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec&
BridgePort::_Internal::spec(const BridgePort* msg) {
  return *msg->spec_;
}
const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus&
BridgePort::_Internal::status(const BridgePort* msg) {
  return *msg->status_;
}
BridgePort::BridgePort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePort)
}
BridgePort::BridgePort(const BridgePort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePort)
}

inline void BridgePort::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

BridgePort::~BridgePort() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BridgePort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void BridgePort::ArenaDtor(void* object) {
  BridgePort* _this = reinterpret_cast< BridgePort* >(object);
  (void)_this;
}
void BridgePort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgePort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BridgePort::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgePort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.BridgePort.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.BridgePortSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.BridgePortStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgePort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.BridgePort.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  return target;
}

size_t BridgePort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgePort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BridgePort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgePort::GetClassData() const { return &_class_data_; }

void BridgePort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BridgePort *>(to)->MergeFrom(
      static_cast<const BridgePort &>(from));
}


void BridgePort::MergeFrom(const BridgePort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgePort::CopyFrom(const BridgePort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgePort::IsInitialized() const {
  return true;
}

void BridgePort::InternalSwap(BridgePort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BridgePort, status_)
      + sizeof(BridgePort::status_)
      - PROTOBUF_FIELD_OFFSET(BridgePort, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgePort::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[9]);
}

// ===================================================================

class BridgePortSpec::_Internal {
 public:
};

BridgePortSpec::BridgePortSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logical_bridges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
}
BridgePortSpec::BridgePortSpec(const BridgePortSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logical_bridges_(from.logical_bridges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  ptype_ = from.ptype_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
}

inline void BridgePortSpec::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ptype_ = 0;
}

BridgePortSpec::~BridgePortSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BridgePortSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BridgePortSpec::ArenaDtor(void* object) {
  BridgePortSpec* _this = reinterpret_cast< BridgePortSpec* >(object);
  (void)_this;
}
void BridgePortSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgePortSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BridgePortSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_bridges_.Clear();
  mac_address_.ClearToEmpty();
  ptype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgePortSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mac_address = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.BridgePortType ptype = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ptype(static_cast<::opi_api::network::evpn_gw::v1alpha1::BridgePortType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string logical_bridges = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logical_bridges();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgePortSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mac_address = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mac_address(), target);
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortType ptype = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_ptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ptype(), target);
  }

  // repeated string logical_bridges = 3 [(.google.api.field_behavior) = OPTIONAL];
  for (int i = 0, n = this->_internal_logical_bridges_size(); i < n; i++) {
    const auto& s = this->_internal_logical_bridges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  return target;
}

size_t BridgePortSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logical_bridges = 3 [(.google.api.field_behavior) = OPTIONAL];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logical_bridges_.size());
  for (int i = 0, n = logical_bridges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logical_bridges_.Get(i));
  }

  // bytes mac_address = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortType ptype = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_ptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgePortSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BridgePortSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgePortSpec::GetClassData() const { return &_class_data_; }

void BridgePortSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BridgePortSpec *>(to)->MergeFrom(
      static_cast<const BridgePortSpec &>(from));
}


void BridgePortSpec::MergeFrom(const BridgePortSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  logical_bridges_.MergeFrom(from.logical_bridges_);
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_ptype() != 0) {
    _internal_set_ptype(from._internal_ptype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgePortSpec::CopyFrom(const BridgePortSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgePortSpec::IsInitialized() const {
  return true;
}

void BridgePortSpec::InternalSwap(BridgePortSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logical_bridges_.InternalSwap(&other->logical_bridges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  swap(ptype_, other->ptype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgePortSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[10]);
}

// ===================================================================

class BridgePortStatus::_Internal {
 public:
};

BridgePortStatus::BridgePortStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
}
BridgePortStatus::BridgePortStatus(const BridgePortStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oper_status_ = from.oper_status_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
}

inline void BridgePortStatus::SharedCtor() {
oper_status_ = 0;
}

BridgePortStatus::~BridgePortStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BridgePortStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BridgePortStatus::ArenaDtor(void* object) {
  BridgePortStatus* _this = reinterpret_cast< BridgePortStatus* >(object);
  (void)_this;
}
void BridgePortStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgePortStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BridgePortStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oper_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgePortStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.BPOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_status(static_cast<::opi_api::network::evpn_gw::v1alpha1::BPOperStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgePortStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.BPOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_oper_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  return target;
}

size_t BridgePortStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.BPOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_oper_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgePortStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BridgePortStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgePortStatus::GetClassData() const { return &_class_data_; }

void BridgePortStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BridgePortStatus *>(to)->MergeFrom(
      static_cast<const BridgePortStatus &>(from));
}


void BridgePortStatus::MergeFrom(const BridgePortStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper_status() != 0) {
    _internal_set_oper_status(from._internal_oper_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgePortStatus::CopyFrom(const BridgePortStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgePortStatus::IsInitialized() const {
  return true;
}

void BridgePortStatus::InternalSwap(BridgePortStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oper_status_, other->oper_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgePortStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[11]);
}

// ===================================================================

class CreateBridgePortRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& bridge_port(const CreateBridgePortRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::BridgePort&
CreateBridgePortRequest::_Internal::bridge_port(const CreateBridgePortRequest* msg) {
  return *msg->bridge_port_;
}
CreateBridgePortRequest::CreateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
}
CreateBridgePortRequest::CreateBridgePortRequest(const CreateBridgePortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bridge_port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bridge_port_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_port_id().empty()) {
    bridge_port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bridge_port_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bridge_port()) {
    bridge_port_ = new ::opi_api::network::evpn_gw::v1alpha1::BridgePort(*from.bridge_port_);
  } else {
    bridge_port_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
}

inline void CreateBridgePortRequest::SharedCtor() {
bridge_port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bridge_port_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bridge_port_ = nullptr;
}

CreateBridgePortRequest::~CreateBridgePortRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateBridgePortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bridge_port_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bridge_port_;
}

void CreateBridgePortRequest::ArenaDtor(void* object) {
  CreateBridgePortRequest* _this = reinterpret_cast< CreateBridgePortRequest* >(object);
  (void)_this;
}
void CreateBridgePortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateBridgePortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateBridgePortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridge_port_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bridge_port_ != nullptr) {
    delete bridge_port_;
  }
  bridge_port_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBridgePortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bridge_port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bridge_port_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bridge_port(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateBridgePortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bridge_port_id = 1;
  if (!this->_internal_bridge_port_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridge_port_id().data(), static_cast<int>(this->_internal_bridge_port_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bridge_port_id(), target);
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_bridge_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bridge_port(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  return target;
}

size_t CreateBridgePortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridge_port_id = 1;
  if (!this->_internal_bridge_port_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridge_port_id());
  }

  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_bridge_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bridge_port_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateBridgePortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateBridgePortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateBridgePortRequest::GetClassData() const { return &_class_data_; }

void CreateBridgePortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateBridgePortRequest *>(to)->MergeFrom(
      static_cast<const CreateBridgePortRequest &>(from));
}


void CreateBridgePortRequest::MergeFrom(const CreateBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bridge_port_id().empty()) {
    _internal_set_bridge_port_id(from._internal_bridge_port_id());
  }
  if (from._internal_has_bridge_port()) {
    _internal_mutable_bridge_port()->::opi_api::network::evpn_gw::v1alpha1::BridgePort::MergeFrom(from._internal_bridge_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateBridgePortRequest::CopyFrom(const CreateBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBridgePortRequest::IsInitialized() const {
  return true;
}

void CreateBridgePortRequest::InternalSwap(CreateBridgePortRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bridge_port_id_, lhs_arena,
      &other->bridge_port_id_, rhs_arena
  );
  swap(bridge_port_, other->bridge_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBridgePortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[12]);
}

// ===================================================================

class ListBridgePortsRequest::_Internal {
 public:
};

ListBridgePortsRequest::ListBridgePortsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
}
ListBridgePortsRequest::ListBridgePortsRequest(const ListBridgePortsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
}

inline void ListBridgePortsRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListBridgePortsRequest::~ListBridgePortsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListBridgePortsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListBridgePortsRequest::ArenaDtor(void* object) {
  ListBridgePortsRequest* _this = reinterpret_cast< ListBridgePortsRequest* >(object);
  (void)_this;
}
void ListBridgePortsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBridgePortsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListBridgePortsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBridgePortsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListBridgePortsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  return target;
}

size_t ListBridgePortsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListBridgePortsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListBridgePortsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListBridgePortsRequest::GetClassData() const { return &_class_data_; }

void ListBridgePortsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListBridgePortsRequest *>(to)->MergeFrom(
      static_cast<const ListBridgePortsRequest &>(from));
}


void ListBridgePortsRequest::MergeFrom(const ListBridgePortsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListBridgePortsRequest::CopyFrom(const ListBridgePortsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBridgePortsRequest::IsInitialized() const {
  return true;
}

void ListBridgePortsRequest::InternalSwap(ListBridgePortsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBridgePortsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[13]);
}

// ===================================================================

class ListBridgePortsResponse::_Internal {
 public:
};

ListBridgePortsResponse::ListBridgePortsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bridge_ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
}
ListBridgePortsResponse::ListBridgePortsResponse(const ListBridgePortsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bridge_ports_(from.bridge_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
}

inline void ListBridgePortsResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListBridgePortsResponse::~ListBridgePortsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListBridgePortsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListBridgePortsResponse::ArenaDtor(void* object) {
  ListBridgePortsResponse* _this = reinterpret_cast< ListBridgePortsResponse* >(object);
  (void)_this;
}
void ListBridgePortsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBridgePortsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListBridgePortsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridge_ports_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBridgePortsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bridge_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListBridgePortsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_ports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bridge_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bridge_ports(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  return target;
}

size_t ListBridgePortsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_ports = 1;
  total_size += 1UL * this->_internal_bridge_ports_size();
  for (const auto& msg : this->bridge_ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListBridgePortsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListBridgePortsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListBridgePortsResponse::GetClassData() const { return &_class_data_; }

void ListBridgePortsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListBridgePortsResponse *>(to)->MergeFrom(
      static_cast<const ListBridgePortsResponse &>(from));
}


void ListBridgePortsResponse::MergeFrom(const ListBridgePortsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bridge_ports_.MergeFrom(from.bridge_ports_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListBridgePortsResponse::CopyFrom(const ListBridgePortsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBridgePortsResponse::IsInitialized() const {
  return true;
}

void ListBridgePortsResponse::InternalSwap(ListBridgePortsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bridge_ports_.InternalSwap(&other->bridge_ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBridgePortsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[14]);
}

// ===================================================================

class GetBridgePortRequest::_Internal {
 public:
};

GetBridgePortRequest::GetBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
}
GetBridgePortRequest::GetBridgePortRequest(const GetBridgePortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
}

inline void GetBridgePortRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBridgePortRequest::~GetBridgePortRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBridgePortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBridgePortRequest::ArenaDtor(void* object) {
  GetBridgePortRequest* _this = reinterpret_cast< GetBridgePortRequest* >(object);
  (void)_this;
}
void GetBridgePortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBridgePortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBridgePortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBridgePortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBridgePortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  return target;
}

size_t GetBridgePortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBridgePortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBridgePortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBridgePortRequest::GetClassData() const { return &_class_data_; }

void GetBridgePortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBridgePortRequest *>(to)->MergeFrom(
      static_cast<const GetBridgePortRequest &>(from));
}


void GetBridgePortRequest::MergeFrom(const GetBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBridgePortRequest::CopyFrom(const GetBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBridgePortRequest::IsInitialized() const {
  return true;
}

void GetBridgePortRequest::InternalSwap(GetBridgePortRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBridgePortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[15]);
}

// ===================================================================

class DeleteBridgePortRequest::_Internal {
 public:
};

DeleteBridgePortRequest::DeleteBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
}
DeleteBridgePortRequest::DeleteBridgePortRequest(const DeleteBridgePortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  allow_missing_ = from.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
}

inline void DeleteBridgePortRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
allow_missing_ = false;
}

DeleteBridgePortRequest::~DeleteBridgePortRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteBridgePortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteBridgePortRequest::ArenaDtor(void* object) {
  DeleteBridgePortRequest* _this = reinterpret_cast< DeleteBridgePortRequest* >(object);
  (void)_this;
}
void DeleteBridgePortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteBridgePortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBridgePortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBridgePortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBridgePortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  return target;
}

size_t DeleteBridgePortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBridgePortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBridgePortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBridgePortRequest::GetClassData() const { return &_class_data_; }

void DeleteBridgePortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBridgePortRequest *>(to)->MergeFrom(
      static_cast<const DeleteBridgePortRequest &>(from));
}


void DeleteBridgePortRequest::MergeFrom(const DeleteBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_allow_missing() != 0) {
    _internal_set_allow_missing(from._internal_allow_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBridgePortRequest::CopyFrom(const DeleteBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBridgePortRequest::IsInitialized() const {
  return true;
}

void DeleteBridgePortRequest::InternalSwap(DeleteBridgePortRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(allow_missing_, other->allow_missing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBridgePortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[16]);
}

// ===================================================================

class UpdateBridgePortRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& bridge_port(const UpdateBridgePortRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateBridgePortRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::BridgePort&
UpdateBridgePortRequest::_Internal::bridge_port(const UpdateBridgePortRequest* msg) {
  return *msg->bridge_port_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateBridgePortRequest::_Internal::update_mask(const UpdateBridgePortRequest* msg) {
  return *msg->update_mask_;
}
void UpdateBridgePortRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateBridgePortRequest::UpdateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
}
UpdateBridgePortRequest::UpdateBridgePortRequest(const UpdateBridgePortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bridge_port()) {
    bridge_port_ = new ::opi_api::network::evpn_gw::v1alpha1::BridgePort(*from.bridge_port_);
  } else {
    bridge_port_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  allow_missing_ = from.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
}

inline void UpdateBridgePortRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bridge_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_missing_) -
    reinterpret_cast<char*>(&bridge_port_)) + sizeof(allow_missing_));
}

UpdateBridgePortRequest::~UpdateBridgePortRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateBridgePortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bridge_port_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateBridgePortRequest::ArenaDtor(void* object) {
  UpdateBridgePortRequest* _this = reinterpret_cast< UpdateBridgePortRequest* >(object);
  (void)_this;
}
void UpdateBridgePortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBridgePortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateBridgePortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bridge_port_ != nullptr) {
    delete bridge_port_;
  }
  bridge_port_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBridgePortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bridge_port(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBridgePortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 1;
  if (this->_internal_has_bridge_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bridge_port(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  // bool allow_missing = 3;
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  return target;
}

size_t UpdateBridgePortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 1;
  if (this->_internal_has_bridge_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bridge_port_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  // bool allow_missing = 3;
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBridgePortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateBridgePortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBridgePortRequest::GetClassData() const { return &_class_data_; }

void UpdateBridgePortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateBridgePortRequest *>(to)->MergeFrom(
      static_cast<const UpdateBridgePortRequest &>(from));
}


void UpdateBridgePortRequest::MergeFrom(const UpdateBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bridge_port()) {
    _internal_mutable_bridge_port()->::opi_api::network::evpn_gw::v1alpha1::BridgePort::MergeFrom(from._internal_bridge_port());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  if (from._internal_allow_missing() != 0) {
    _internal_set_allow_missing(from._internal_allow_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBridgePortRequest::CopyFrom(const UpdateBridgePortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBridgePortRequest::IsInitialized() const {
  return true;
}

void UpdateBridgePortRequest::InternalSwap(UpdateBridgePortRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBridgePortRequest, allow_missing_)
      + sizeof(UpdateBridgePortRequest::allow_missing_)
      - PROTOBUF_FIELD_OFFSET(UpdateBridgePortRequest, bridge_port_)>(
          reinterpret_cast<char*>(&bridge_port_),
          reinterpret_cast<char*>(&other->bridge_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBridgePortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l2_5fxpu_5finfra_5fmgr_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::BridgePort* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
