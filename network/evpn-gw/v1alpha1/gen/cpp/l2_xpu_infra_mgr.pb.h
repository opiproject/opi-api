// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l2_xpu_infra_mgr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_l2_5fxpu_5finfra_5fmgr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_l2_5fxpu_5finfra_5fmgr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_l2_5fxpu_5finfra_5fmgr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_l2_5fxpu_5finfra_5fmgr_2eproto;
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
class BridgePort;
struct BridgePortDefaultTypeInternal;
extern BridgePortDefaultTypeInternal _BridgePort_default_instance_;
class BridgePortSpec;
struct BridgePortSpecDefaultTypeInternal;
extern BridgePortSpecDefaultTypeInternal _BridgePortSpec_default_instance_;
class BridgePortStatus;
struct BridgePortStatusDefaultTypeInternal;
extern BridgePortStatusDefaultTypeInternal _BridgePortStatus_default_instance_;
class CreateBridgePortRequest;
struct CreateBridgePortRequestDefaultTypeInternal;
extern CreateBridgePortRequestDefaultTypeInternal _CreateBridgePortRequest_default_instance_;
class CreateLogicalBridgeRequest;
struct CreateLogicalBridgeRequestDefaultTypeInternal;
extern CreateLogicalBridgeRequestDefaultTypeInternal _CreateLogicalBridgeRequest_default_instance_;
class DeleteBridgePortRequest;
struct DeleteBridgePortRequestDefaultTypeInternal;
extern DeleteBridgePortRequestDefaultTypeInternal _DeleteBridgePortRequest_default_instance_;
class DeleteLogicalBridgeRequest;
struct DeleteLogicalBridgeRequestDefaultTypeInternal;
extern DeleteLogicalBridgeRequestDefaultTypeInternal _DeleteLogicalBridgeRequest_default_instance_;
class GetBridgePortRequest;
struct GetBridgePortRequestDefaultTypeInternal;
extern GetBridgePortRequestDefaultTypeInternal _GetBridgePortRequest_default_instance_;
class GetLogicalBridgeRequest;
struct GetLogicalBridgeRequestDefaultTypeInternal;
extern GetLogicalBridgeRequestDefaultTypeInternal _GetLogicalBridgeRequest_default_instance_;
class ListBridgePortsRequest;
struct ListBridgePortsRequestDefaultTypeInternal;
extern ListBridgePortsRequestDefaultTypeInternal _ListBridgePortsRequest_default_instance_;
class ListBridgePortsResponse;
struct ListBridgePortsResponseDefaultTypeInternal;
extern ListBridgePortsResponseDefaultTypeInternal _ListBridgePortsResponse_default_instance_;
class ListLogicalBridgesRequest;
struct ListLogicalBridgesRequestDefaultTypeInternal;
extern ListLogicalBridgesRequestDefaultTypeInternal _ListLogicalBridgesRequest_default_instance_;
class ListLogicalBridgesResponse;
struct ListLogicalBridgesResponseDefaultTypeInternal;
extern ListLogicalBridgesResponseDefaultTypeInternal _ListLogicalBridgesResponse_default_instance_;
class LogicalBridge;
struct LogicalBridgeDefaultTypeInternal;
extern LogicalBridgeDefaultTypeInternal _LogicalBridge_default_instance_;
class LogicalBridgeSpec;
struct LogicalBridgeSpecDefaultTypeInternal;
extern LogicalBridgeSpecDefaultTypeInternal _LogicalBridgeSpec_default_instance_;
class LogicalBridgeStatus;
struct LogicalBridgeStatusDefaultTypeInternal;
extern LogicalBridgeStatusDefaultTypeInternal _LogicalBridgeStatus_default_instance_;
class UpdateBridgePortRequest;
struct UpdateBridgePortRequestDefaultTypeInternal;
extern UpdateBridgePortRequestDefaultTypeInternal _UpdateBridgePortRequest_default_instance_;
class UpdateLogicalBridgeRequest;
struct UpdateLogicalBridgeRequestDefaultTypeInternal;
extern UpdateLogicalBridgeRequestDefaultTypeInternal _UpdateLogicalBridgeRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::evpn_gw::v1alpha1::BridgePort* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePort>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::CreateBridgePortRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::CreateLogicalBridgeRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::DeleteBridgePortRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::DeleteLogicalBridgeRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::GetBridgePortRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::GetLogicalBridgeRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListBridgePortsResponse>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListLogicalBridgesResponse>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::UpdateBridgePortRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::UpdateLogicalBridgeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

enum LBOperStatus : int {
  LB_OPER_STATUS_UNSPECIFIED = 0,
  LB_OPER_STATUS_UP = 1,
  LB_OPER_STATUS_DOWN = 2,
  LBOperStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LBOperStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LBOperStatus_IsValid(int value);
constexpr LBOperStatus LBOperStatus_MIN = LB_OPER_STATUS_UNSPECIFIED;
constexpr LBOperStatus LBOperStatus_MAX = LB_OPER_STATUS_DOWN;
constexpr int LBOperStatus_ARRAYSIZE = LBOperStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LBOperStatus_descriptor();
template<typename T>
inline const std::string& LBOperStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LBOperStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LBOperStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LBOperStatus_descriptor(), enum_t_value);
}
inline bool LBOperStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LBOperStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LBOperStatus>(
    LBOperStatus_descriptor(), name, value);
}
enum BPOperStatus : int {
  BP_OPER_STATUS_UNSPECIFIED = 0,
  BP_OPER_STATUS_UP = 1,
  BP_OPER_STATUS_DOWN = 2,
  BPOperStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BPOperStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BPOperStatus_IsValid(int value);
constexpr BPOperStatus BPOperStatus_MIN = BP_OPER_STATUS_UNSPECIFIED;
constexpr BPOperStatus BPOperStatus_MAX = BP_OPER_STATUS_DOWN;
constexpr int BPOperStatus_ARRAYSIZE = BPOperStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BPOperStatus_descriptor();
template<typename T>
inline const std::string& BPOperStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BPOperStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BPOperStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BPOperStatus_descriptor(), enum_t_value);
}
inline bool BPOperStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BPOperStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BPOperStatus>(
    BPOperStatus_descriptor(), name, value);
}
enum BridgePortType : int {
  UNKNOWN = 0,
  ACCESS = 1,
  TRUNK = 2,
  BridgePortType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BridgePortType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BridgePortType_IsValid(int value);
constexpr BridgePortType BridgePortType_MIN = UNKNOWN;
constexpr BridgePortType BridgePortType_MAX = TRUNK;
constexpr int BridgePortType_ARRAYSIZE = BridgePortType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BridgePortType_descriptor();
template<typename T>
inline const std::string& BridgePortType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BridgePortType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BridgePortType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BridgePortType_descriptor(), enum_t_value);
}
inline bool BridgePortType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BridgePortType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BridgePortType>(
    BridgePortType_descriptor(), name, value);
}
// ===================================================================

class LogicalBridge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.LogicalBridge) */ {
 public:
  inline LogicalBridge() : LogicalBridge(nullptr) {}
  ~LogicalBridge() override;
  explicit constexpr LogicalBridge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalBridge(const LogicalBridge& from);
  LogicalBridge(LogicalBridge&& from) noexcept
    : LogicalBridge() {
    *this = ::std::move(from);
  }

  inline LogicalBridge& operator=(const LogicalBridge& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalBridge& operator=(LogicalBridge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalBridge& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalBridge* internal_default_instance() {
    return reinterpret_cast<const LogicalBridge*>(
               &_LogicalBridge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogicalBridge& a, LogicalBridge& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalBridge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalBridge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalBridge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalBridge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicalBridge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogicalBridge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalBridge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.LogicalBridge";
  }
  protected:
  explicit LogicalBridge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* release_spec();
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* spec);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec& _internal_spec() const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* spec);
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* unsafe_arena_release_spec();

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* release_status();
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* mutable_status();
  void set_allocated_status(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* status);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus& _internal_status() const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* status);
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.LogicalBridge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* spec_;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class LogicalBridgeSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec) */ {
 public:
  inline LogicalBridgeSpec() : LogicalBridgeSpec(nullptr) {}
  ~LogicalBridgeSpec() override;
  explicit constexpr LogicalBridgeSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalBridgeSpec(const LogicalBridgeSpec& from);
  LogicalBridgeSpec(LogicalBridgeSpec&& from) noexcept
    : LogicalBridgeSpec() {
    *this = ::std::move(from);
  }

  inline LogicalBridgeSpec& operator=(const LogicalBridgeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalBridgeSpec& operator=(LogicalBridgeSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalBridgeSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalBridgeSpec* internal_default_instance() {
    return reinterpret_cast<const LogicalBridgeSpec*>(
               &_LogicalBridgeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogicalBridgeSpec& a, LogicalBridgeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalBridgeSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalBridgeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalBridgeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalBridgeSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicalBridgeSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogicalBridgeSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalBridgeSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec";
  }
  protected:
  explicit LogicalBridgeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVlanIdFieldNumber = 1,
    kVniFieldNumber = 2,
  };
  // uint32 vlan_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_vlan_id();
  uint32_t vlan_id() const;
  void set_vlan_id(uint32_t value);
  private:
  uint32_t _internal_vlan_id() const;
  void _internal_set_vlan_id(uint32_t value);
  public:

  // uint32 vni = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_vni();
  uint32_t vni() const;
  void set_vni(uint32_t value);
  private:
  uint32_t _internal_vni() const;
  void _internal_set_vni(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t vlan_id_;
  uint32_t vni_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class LogicalBridgeStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus) */ {
 public:
  inline LogicalBridgeStatus() : LogicalBridgeStatus(nullptr) {}
  ~LogicalBridgeStatus() override;
  explicit constexpr LogicalBridgeStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalBridgeStatus(const LogicalBridgeStatus& from);
  LogicalBridgeStatus(LogicalBridgeStatus&& from) noexcept
    : LogicalBridgeStatus() {
    *this = ::std::move(from);
  }

  inline LogicalBridgeStatus& operator=(const LogicalBridgeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalBridgeStatus& operator=(LogicalBridgeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalBridgeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalBridgeStatus* internal_default_instance() {
    return reinterpret_cast<const LogicalBridgeStatus*>(
               &_LogicalBridgeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogicalBridgeStatus& a, LogicalBridgeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalBridgeStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalBridgeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalBridgeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalBridgeStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicalBridgeStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogicalBridgeStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalBridgeStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus";
  }
  protected:
  explicit LogicalBridgeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperStatusFieldNumber = 1,
  };
  // .opi_api.network.evpn_gw.v1alpha1.LBOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_oper_status();
  ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus oper_status() const;
  void set_oper_status(::opi_api::network::evpn_gw::v1alpha1::LBOperStatus value);
  private:
  ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus _internal_oper_status() const;
  void _internal_set_oper_status(::opi_api::network::evpn_gw::v1alpha1::LBOperStatus value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class CreateLogicalBridgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest) */ {
 public:
  inline CreateLogicalBridgeRequest() : CreateLogicalBridgeRequest(nullptr) {}
  ~CreateLogicalBridgeRequest() override;
  explicit constexpr CreateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLogicalBridgeRequest(const CreateLogicalBridgeRequest& from);
  CreateLogicalBridgeRequest(CreateLogicalBridgeRequest&& from) noexcept
    : CreateLogicalBridgeRequest() {
    *this = ::std::move(from);
  }

  inline CreateLogicalBridgeRequest& operator=(const CreateLogicalBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLogicalBridgeRequest& operator=(CreateLogicalBridgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLogicalBridgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLogicalBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLogicalBridgeRequest*>(
               &_CreateLogicalBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateLogicalBridgeRequest& a, CreateLogicalBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLogicalBridgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLogicalBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLogicalBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateLogicalBridgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLogicalBridgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateLogicalBridgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLogicalBridgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest";
  }
  protected:
  explicit CreateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalBridgeIdFieldNumber = 1,
    kLogicalBridgeFieldNumber = 2,
  };
  // string logical_bridge_id = 1;
  void clear_logical_bridge_id();
  const std::string& logical_bridge_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logical_bridge_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logical_bridge_id();
  PROTOBUF_NODISCARD std::string* release_logical_bridge_id();
  void set_allocated_logical_bridge_id(std::string* logical_bridge_id);
  private:
  const std::string& _internal_logical_bridge_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logical_bridge_id(const std::string& value);
  std::string* _internal_mutable_logical_bridge_id();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_logical_bridge() const;
  private:
  bool _internal_has_logical_bridge() const;
  public:
  void clear_logical_bridge();
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& logical_bridge() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* release_logical_bridge();
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* mutable_logical_bridge();
  void set_allocated_logical_bridge(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& _internal_logical_bridge() const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _internal_mutable_logical_bridge();
  public:
  void unsafe_arena_set_allocated_logical_bridge(
      ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge);
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* unsafe_arena_release_logical_bridge();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logical_bridge_id_;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListLogicalBridgesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest) */ {
 public:
  inline ListLogicalBridgesRequest() : ListLogicalBridgesRequest(nullptr) {}
  ~ListLogicalBridgesRequest() override;
  explicit constexpr ListLogicalBridgesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLogicalBridgesRequest(const ListLogicalBridgesRequest& from);
  ListLogicalBridgesRequest(ListLogicalBridgesRequest&& from) noexcept
    : ListLogicalBridgesRequest() {
    *this = ::std::move(from);
  }

  inline ListLogicalBridgesRequest& operator=(const ListLogicalBridgesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogicalBridgesRequest& operator=(ListLogicalBridgesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLogicalBridgesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLogicalBridgesRequest* internal_default_instance() {
    return reinterpret_cast<const ListLogicalBridgesRequest*>(
               &_ListLogicalBridgesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListLogicalBridgesRequest& a, ListLogicalBridgesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogicalBridgesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogicalBridgesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLogicalBridgesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLogicalBridgesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListLogicalBridgesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListLogicalBridgesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogicalBridgesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest";
  }
  protected:
  explicit ListLogicalBridgesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListLogicalBridgesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse) */ {
 public:
  inline ListLogicalBridgesResponse() : ListLogicalBridgesResponse(nullptr) {}
  ~ListLogicalBridgesResponse() override;
  explicit constexpr ListLogicalBridgesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLogicalBridgesResponse(const ListLogicalBridgesResponse& from);
  ListLogicalBridgesResponse(ListLogicalBridgesResponse&& from) noexcept
    : ListLogicalBridgesResponse() {
    *this = ::std::move(from);
  }

  inline ListLogicalBridgesResponse& operator=(const ListLogicalBridgesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogicalBridgesResponse& operator=(ListLogicalBridgesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLogicalBridgesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLogicalBridgesResponse* internal_default_instance() {
    return reinterpret_cast<const ListLogicalBridgesResponse*>(
               &_ListLogicalBridgesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListLogicalBridgesResponse& a, ListLogicalBridgesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogicalBridgesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogicalBridgesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLogicalBridgesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLogicalBridgesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListLogicalBridgesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListLogicalBridgesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogicalBridgesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse";
  }
  protected:
  explicit ListLogicalBridgesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalBridgesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridges = 1;
  int logical_bridges_size() const;
  private:
  int _internal_logical_bridges_size() const;
  public:
  void clear_logical_bridges();
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* mutable_logical_bridges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >*
      mutable_logical_bridges();
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& _internal_logical_bridges(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _internal_add_logical_bridges();
  public:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& logical_bridges(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* add_logical_bridges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >&
      logical_bridges() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge > logical_bridges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class GetLogicalBridgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest) */ {
 public:
  inline GetLogicalBridgeRequest() : GetLogicalBridgeRequest(nullptr) {}
  ~GetLogicalBridgeRequest() override;
  explicit constexpr GetLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogicalBridgeRequest(const GetLogicalBridgeRequest& from);
  GetLogicalBridgeRequest(GetLogicalBridgeRequest&& from) noexcept
    : GetLogicalBridgeRequest() {
    *this = ::std::move(from);
  }

  inline GetLogicalBridgeRequest& operator=(const GetLogicalBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogicalBridgeRequest& operator=(GetLogicalBridgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogicalBridgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogicalBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogicalBridgeRequest*>(
               &_GetLogicalBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLogicalBridgeRequest& a, GetLogicalBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogicalBridgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogicalBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLogicalBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLogicalBridgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLogicalBridgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLogicalBridgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogicalBridgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest";
  }
  protected:
  explicit GetLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class DeleteLogicalBridgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest) */ {
 public:
  inline DeleteLogicalBridgeRequest() : DeleteLogicalBridgeRequest(nullptr) {}
  ~DeleteLogicalBridgeRequest() override;
  explicit constexpr DeleteLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteLogicalBridgeRequest(const DeleteLogicalBridgeRequest& from);
  DeleteLogicalBridgeRequest(DeleteLogicalBridgeRequest&& from) noexcept
    : DeleteLogicalBridgeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLogicalBridgeRequest& operator=(const DeleteLogicalBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLogicalBridgeRequest& operator=(DeleteLogicalBridgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLogicalBridgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLogicalBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLogicalBridgeRequest*>(
               &_DeleteLogicalBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteLogicalBridgeRequest& a, DeleteLogicalBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLogicalBridgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLogicalBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLogicalBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteLogicalBridgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteLogicalBridgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteLogicalBridgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLogicalBridgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest";
  }
  protected:
  explicit DeleteLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class UpdateLogicalBridgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest) */ {
 public:
  inline UpdateLogicalBridgeRequest() : UpdateLogicalBridgeRequest(nullptr) {}
  ~UpdateLogicalBridgeRequest() override;
  explicit constexpr UpdateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateLogicalBridgeRequest(const UpdateLogicalBridgeRequest& from);
  UpdateLogicalBridgeRequest(UpdateLogicalBridgeRequest&& from) noexcept
    : UpdateLogicalBridgeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLogicalBridgeRequest& operator=(const UpdateLogicalBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLogicalBridgeRequest& operator=(UpdateLogicalBridgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateLogicalBridgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateLogicalBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLogicalBridgeRequest*>(
               &_UpdateLogicalBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateLogicalBridgeRequest& a, UpdateLogicalBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLogicalBridgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLogicalBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateLogicalBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateLogicalBridgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateLogicalBridgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateLogicalBridgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLogicalBridgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest";
  }
  protected:
  explicit UpdateLogicalBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalBridgeFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 1;
  bool has_logical_bridge() const;
  private:
  bool _internal_has_logical_bridge() const;
  public:
  void clear_logical_bridge();
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& logical_bridge() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* release_logical_bridge();
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* mutable_logical_bridge();
  void set_allocated_logical_bridge(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& _internal_logical_bridge() const;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _internal_mutable_logical_bridge();
  public:
  void unsafe_arena_set_allocated_logical_bridge(
      ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge);
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* unsafe_arena_release_logical_bridge();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class BridgePort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.BridgePort) */ {
 public:
  inline BridgePort() : BridgePort(nullptr) {}
  ~BridgePort() override;
  explicit constexpr BridgePort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BridgePort(const BridgePort& from);
  BridgePort(BridgePort&& from) noexcept
    : BridgePort() {
    *this = ::std::move(from);
  }

  inline BridgePort& operator=(const BridgePort& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgePort& operator=(BridgePort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgePort& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgePort* internal_default_instance() {
    return reinterpret_cast<const BridgePort*>(
               &_BridgePort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BridgePort& a, BridgePort& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgePort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgePort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgePort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgePort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BridgePort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BridgePort& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgePort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.BridgePort";
  }
  protected:
  explicit BridgePort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* release_spec();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* spec);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec& _internal_spec() const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* spec);
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* unsafe_arena_release_spec();

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* release_status();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* mutable_status();
  void set_allocated_status(::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* status);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus& _internal_status() const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* status);
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.BridgePort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* spec_;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class BridgePortSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec) */ {
 public:
  inline BridgePortSpec() : BridgePortSpec(nullptr) {}
  ~BridgePortSpec() override;
  explicit constexpr BridgePortSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BridgePortSpec(const BridgePortSpec& from);
  BridgePortSpec(BridgePortSpec&& from) noexcept
    : BridgePortSpec() {
    *this = ::std::move(from);
  }

  inline BridgePortSpec& operator=(const BridgePortSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgePortSpec& operator=(BridgePortSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgePortSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgePortSpec* internal_default_instance() {
    return reinterpret_cast<const BridgePortSpec*>(
               &_BridgePortSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BridgePortSpec& a, BridgePortSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgePortSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgePortSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgePortSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgePortSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BridgePortSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BridgePortSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgePortSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.BridgePortSpec";
  }
  protected:
  explicit BridgePortSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalBridgesFieldNumber = 3,
    kMacAddressFieldNumber = 1,
    kPtypeFieldNumber = 2,
  };
  // repeated string logical_bridges = 3 [(.google.api.field_behavior) = OPTIONAL];
  int logical_bridges_size() const;
  private:
  int _internal_logical_bridges_size() const;
  public:
  void clear_logical_bridges();
  const std::string& logical_bridges(int index) const;
  std::string* mutable_logical_bridges(int index);
  void set_logical_bridges(int index, const std::string& value);
  void set_logical_bridges(int index, std::string&& value);
  void set_logical_bridges(int index, const char* value);
  void set_logical_bridges(int index, const char* value, size_t size);
  std::string* add_logical_bridges();
  void add_logical_bridges(const std::string& value);
  void add_logical_bridges(std::string&& value);
  void add_logical_bridges(const char* value);
  void add_logical_bridges(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logical_bridges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logical_bridges();
  private:
  const std::string& _internal_logical_bridges(int index) const;
  std::string* _internal_add_logical_bridges();
  public:

  // bytes mac_address = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.BridgePortType ptype = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_ptype();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortType ptype() const;
  void set_ptype(::opi_api::network::evpn_gw::v1alpha1::BridgePortType value);
  private:
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortType _internal_ptype() const;
  void _internal_set_ptype(::opi_api::network::evpn_gw::v1alpha1::BridgePortType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logical_bridges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  int ptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class BridgePortStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus) */ {
 public:
  inline BridgePortStatus() : BridgePortStatus(nullptr) {}
  ~BridgePortStatus() override;
  explicit constexpr BridgePortStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BridgePortStatus(const BridgePortStatus& from);
  BridgePortStatus(BridgePortStatus&& from) noexcept
    : BridgePortStatus() {
    *this = ::std::move(from);
  }

  inline BridgePortStatus& operator=(const BridgePortStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgePortStatus& operator=(BridgePortStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgePortStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgePortStatus* internal_default_instance() {
    return reinterpret_cast<const BridgePortStatus*>(
               &_BridgePortStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BridgePortStatus& a, BridgePortStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgePortStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgePortStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgePortStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgePortStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BridgePortStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BridgePortStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgePortStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.BridgePortStatus";
  }
  protected:
  explicit BridgePortStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperStatusFieldNumber = 1,
  };
  // .opi_api.network.evpn_gw.v1alpha1.BPOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_oper_status();
  ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus oper_status() const;
  void set_oper_status(::opi_api::network::evpn_gw::v1alpha1::BPOperStatus value);
  private:
  ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus _internal_oper_status() const;
  void _internal_set_oper_status(::opi_api::network::evpn_gw::v1alpha1::BPOperStatus value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int oper_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class CreateBridgePortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest) */ {
 public:
  inline CreateBridgePortRequest() : CreateBridgePortRequest(nullptr) {}
  ~CreateBridgePortRequest() override;
  explicit constexpr CreateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBridgePortRequest(const CreateBridgePortRequest& from);
  CreateBridgePortRequest(CreateBridgePortRequest&& from) noexcept
    : CreateBridgePortRequest() {
    *this = ::std::move(from);
  }

  inline CreateBridgePortRequest& operator=(const CreateBridgePortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBridgePortRequest& operator=(CreateBridgePortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBridgePortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBridgePortRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBridgePortRequest*>(
               &_CreateBridgePortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateBridgePortRequest& a, CreateBridgePortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBridgePortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBridgePortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBridgePortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBridgePortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBridgePortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBridgePortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBridgePortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest";
  }
  protected:
  explicit CreateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgePortIdFieldNumber = 1,
    kBridgePortFieldNumber = 2,
  };
  // string bridge_port_id = 1;
  void clear_bridge_port_id();
  const std::string& bridge_port_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bridge_port_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bridge_port_id();
  PROTOBUF_NODISCARD std::string* release_bridge_port_id();
  void set_allocated_bridge_port_id(std::string* bridge_port_id);
  private:
  const std::string& _internal_bridge_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bridge_port_id(const std::string& value);
  std::string* _internal_mutable_bridge_port_id();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bridge_port() const;
  private:
  bool _internal_has_bridge_port() const;
  public:
  void clear_bridge_port();
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& bridge_port() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::BridgePort* release_bridge_port();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* mutable_bridge_port();
  void set_allocated_bridge_port(::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& _internal_bridge_port() const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _internal_mutable_bridge_port();
  public:
  void unsafe_arena_set_allocated_bridge_port(
      ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port);
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* unsafe_arena_release_bridge_port();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridge_port_id_;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListBridgePortsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest) */ {
 public:
  inline ListBridgePortsRequest() : ListBridgePortsRequest(nullptr) {}
  ~ListBridgePortsRequest() override;
  explicit constexpr ListBridgePortsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBridgePortsRequest(const ListBridgePortsRequest& from);
  ListBridgePortsRequest(ListBridgePortsRequest&& from) noexcept
    : ListBridgePortsRequest() {
    *this = ::std::move(from);
  }

  inline ListBridgePortsRequest& operator=(const ListBridgePortsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBridgePortsRequest& operator=(ListBridgePortsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBridgePortsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBridgePortsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBridgePortsRequest*>(
               &_ListBridgePortsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListBridgePortsRequest& a, ListBridgePortsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBridgePortsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBridgePortsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBridgePortsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBridgePortsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBridgePortsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBridgePortsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBridgePortsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest";
  }
  protected:
  explicit ListBridgePortsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListBridgePortsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse) */ {
 public:
  inline ListBridgePortsResponse() : ListBridgePortsResponse(nullptr) {}
  ~ListBridgePortsResponse() override;
  explicit constexpr ListBridgePortsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBridgePortsResponse(const ListBridgePortsResponse& from);
  ListBridgePortsResponse(ListBridgePortsResponse&& from) noexcept
    : ListBridgePortsResponse() {
    *this = ::std::move(from);
  }

  inline ListBridgePortsResponse& operator=(const ListBridgePortsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBridgePortsResponse& operator=(ListBridgePortsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBridgePortsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBridgePortsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBridgePortsResponse*>(
               &_ListBridgePortsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListBridgePortsResponse& a, ListBridgePortsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBridgePortsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBridgePortsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBridgePortsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBridgePortsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBridgePortsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBridgePortsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBridgePortsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse";
  }
  protected:
  explicit ListBridgePortsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgePortsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_ports = 1;
  int bridge_ports_size() const;
  private:
  int _internal_bridge_ports_size() const;
  public:
  void clear_bridge_ports();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* mutable_bridge_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >*
      mutable_bridge_ports();
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& _internal_bridge_ports(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _internal_add_bridge_ports();
  public:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& bridge_ports(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* add_bridge_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >&
      bridge_ports() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::BridgePort > bridge_ports_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class GetBridgePortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest) */ {
 public:
  inline GetBridgePortRequest() : GetBridgePortRequest(nullptr) {}
  ~GetBridgePortRequest() override;
  explicit constexpr GetBridgePortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBridgePortRequest(const GetBridgePortRequest& from);
  GetBridgePortRequest(GetBridgePortRequest&& from) noexcept
    : GetBridgePortRequest() {
    *this = ::std::move(from);
  }

  inline GetBridgePortRequest& operator=(const GetBridgePortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBridgePortRequest& operator=(GetBridgePortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBridgePortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBridgePortRequest* internal_default_instance() {
    return reinterpret_cast<const GetBridgePortRequest*>(
               &_GetBridgePortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetBridgePortRequest& a, GetBridgePortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBridgePortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBridgePortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBridgePortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBridgePortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBridgePortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBridgePortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBridgePortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest";
  }
  protected:
  explicit GetBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class DeleteBridgePortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest) */ {
 public:
  inline DeleteBridgePortRequest() : DeleteBridgePortRequest(nullptr) {}
  ~DeleteBridgePortRequest() override;
  explicit constexpr DeleteBridgePortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBridgePortRequest(const DeleteBridgePortRequest& from);
  DeleteBridgePortRequest(DeleteBridgePortRequest&& from) noexcept
    : DeleteBridgePortRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBridgePortRequest& operator=(const DeleteBridgePortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBridgePortRequest& operator=(DeleteBridgePortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBridgePortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBridgePortRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBridgePortRequest*>(
               &_DeleteBridgePortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteBridgePortRequest& a, DeleteBridgePortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBridgePortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBridgePortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBridgePortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBridgePortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBridgePortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBridgePortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBridgePortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest";
  }
  protected:
  explicit DeleteBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class UpdateBridgePortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest) */ {
 public:
  inline UpdateBridgePortRequest() : UpdateBridgePortRequest(nullptr) {}
  ~UpdateBridgePortRequest() override;
  explicit constexpr UpdateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBridgePortRequest(const UpdateBridgePortRequest& from);
  UpdateBridgePortRequest(UpdateBridgePortRequest&& from) noexcept
    : UpdateBridgePortRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBridgePortRequest& operator=(const UpdateBridgePortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBridgePortRequest& operator=(UpdateBridgePortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBridgePortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBridgePortRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBridgePortRequest*>(
               &_UpdateBridgePortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateBridgePortRequest& a, UpdateBridgePortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBridgePortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBridgePortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBridgePortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBridgePortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBridgePortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBridgePortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBridgePortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest";
  }
  protected:
  explicit UpdateBridgePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgePortFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 1;
  bool has_bridge_port() const;
  private:
  bool _internal_has_bridge_port() const;
  public:
  void clear_bridge_port();
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& bridge_port() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::BridgePort* release_bridge_port();
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* mutable_bridge_port();
  void set_allocated_bridge_port(::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& _internal_bridge_port() const;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _internal_mutable_bridge_port();
  public:
  void unsafe_arena_set_allocated_bridge_port(
      ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port);
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* unsafe_arena_release_bridge_port();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l2_5fxpu_5finfra_5fmgr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogicalBridge

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void LogicalBridge::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LogicalBridge::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogicalBridge::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name)
}
inline std::string* LogicalBridge::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name)
  return _s;
}
inline const std::string& LogicalBridge::_internal_name() const {
  return name_.Get();
}
inline void LogicalBridge::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogicalBridge::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogicalBridge::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogicalBridge::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.name)
}

// .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool LogicalBridge::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool LogicalBridge::has_spec() const {
  return _internal_has_spec();
}
inline void LogicalBridge::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec& LogicalBridge::_internal_spec() const {
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec&>(
      ::opi_api::network::evpn_gw::v1alpha1::_LogicalBridgeSpec_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec& LogicalBridge::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec)
  return _internal_spec();
}
inline void LogicalBridge::unsafe_arena_set_allocated_spec(
    ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec)
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* LogicalBridge::release_spec() {
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* LogicalBridge::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec)
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* LogicalBridge::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* LogicalBridge::mutable_spec() {
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec)
  return _msg;
}
inline void LogicalBridge::set_allocated_spec(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec)
}

// .opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool LogicalBridge::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LogicalBridge::has_status() const {
  return _internal_has_status();
}
inline void LogicalBridge::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus& LogicalBridge::_internal_status() const {
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus&>(
      ::opi_api::network::evpn_gw::v1alpha1::_LogicalBridgeStatus_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus& LogicalBridge::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status)
  return _internal_status();
}
inline void LogicalBridge::unsafe_arena_set_allocated_status(
    ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status)
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* LogicalBridge::release_status() {
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* LogicalBridge::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status)
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* LogicalBridge::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* LogicalBridge::mutable_status() {
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status)
  return _msg;
}
inline void LogicalBridge::set_allocated_status(::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::LogicalBridgeStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status)
}

// -------------------------------------------------------------------

// LogicalBridgeSpec

// uint32 vlan_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void LogicalBridgeSpec::clear_vlan_id() {
  vlan_id_ = 0u;
}
inline uint32_t LogicalBridgeSpec::_internal_vlan_id() const {
  return vlan_id_;
}
inline uint32_t LogicalBridgeSpec::vlan_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec.vlan_id)
  return _internal_vlan_id();
}
inline void LogicalBridgeSpec::_internal_set_vlan_id(uint32_t value) {
  
  vlan_id_ = value;
}
inline void LogicalBridgeSpec::set_vlan_id(uint32_t value) {
  _internal_set_vlan_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec.vlan_id)
}

// uint32 vni = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void LogicalBridgeSpec::clear_vni() {
  vni_ = 0u;
}
inline uint32_t LogicalBridgeSpec::_internal_vni() const {
  return vni_;
}
inline uint32_t LogicalBridgeSpec::vni() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec.vni)
  return _internal_vni();
}
inline void LogicalBridgeSpec::_internal_set_vni(uint32_t value) {
  
  vni_ = value;
}
inline void LogicalBridgeSpec::set_vni(uint32_t value) {
  _internal_set_vni(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec.vni)
}

// -------------------------------------------------------------------

// LogicalBridgeStatus

// .opi_api.network.evpn_gw.v1alpha1.LBOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void LogicalBridgeStatus::clear_oper_status() {
  oper_status_ = 0;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus LogicalBridgeStatus::_internal_oper_status() const {
  return static_cast< ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus >(oper_status_);
}
inline ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus LogicalBridgeStatus::oper_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus.oper_status)
  return _internal_oper_status();
}
inline void LogicalBridgeStatus::_internal_set_oper_status(::opi_api::network::evpn_gw::v1alpha1::LBOperStatus value) {
  
  oper_status_ = value;
}
inline void LogicalBridgeStatus::set_oper_status(::opi_api::network::evpn_gw::v1alpha1::LBOperStatus value) {
  _internal_set_oper_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus.oper_status)
}

// -------------------------------------------------------------------

// CreateLogicalBridgeRequest

// string logical_bridge_id = 1;
inline void CreateLogicalBridgeRequest::clear_logical_bridge_id() {
  logical_bridge_id_.ClearToEmpty();
}
inline const std::string& CreateLogicalBridgeRequest::logical_bridge_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id)
  return _internal_logical_bridge_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLogicalBridgeRequest::set_logical_bridge_id(ArgT0&& arg0, ArgT... args) {
 
 logical_bridge_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id)
}
inline std::string* CreateLogicalBridgeRequest::mutable_logical_bridge_id() {
  std::string* _s = _internal_mutable_logical_bridge_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id)
  return _s;
}
inline const std::string& CreateLogicalBridgeRequest::_internal_logical_bridge_id() const {
  return logical_bridge_id_.Get();
}
inline void CreateLogicalBridgeRequest::_internal_set_logical_bridge_id(const std::string& value) {
  
  logical_bridge_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateLogicalBridgeRequest::_internal_mutable_logical_bridge_id() {
  
  return logical_bridge_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateLogicalBridgeRequest::release_logical_bridge_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id)
  return logical_bridge_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateLogicalBridgeRequest::set_allocated_logical_bridge_id(std::string* logical_bridge_id) {
  if (logical_bridge_id != nullptr) {
    
  } else {
    
  }
  logical_bridge_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logical_bridge_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (logical_bridge_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    logical_bridge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge_id)
}

// .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateLogicalBridgeRequest::_internal_has_logical_bridge() const {
  return this != internal_default_instance() && logical_bridge_ != nullptr;
}
inline bool CreateLogicalBridgeRequest::has_logical_bridge() const {
  return _internal_has_logical_bridge();
}
inline void CreateLogicalBridgeRequest::clear_logical_bridge() {
  if (GetArenaForAllocation() == nullptr && logical_bridge_ != nullptr) {
    delete logical_bridge_;
  }
  logical_bridge_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& CreateLogicalBridgeRequest::_internal_logical_bridge() const {
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* p = logical_bridge_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge&>(
      ::opi_api::network::evpn_gw::v1alpha1::_LogicalBridge_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& CreateLogicalBridgeRequest::logical_bridge() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge)
  return _internal_logical_bridge();
}
inline void CreateLogicalBridgeRequest::unsafe_arena_set_allocated_logical_bridge(
    ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_bridge_);
  }
  logical_bridge_ = logical_bridge;
  if (logical_bridge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge)
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* CreateLogicalBridgeRequest::release_logical_bridge() {
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* temp = logical_bridge_;
  logical_bridge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* CreateLogicalBridgeRequest::unsafe_arena_release_logical_bridge() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge)
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* temp = logical_bridge_;
  logical_bridge_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* CreateLogicalBridgeRequest::_internal_mutable_logical_bridge() {
  
  if (logical_bridge_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(GetArenaForAllocation());
    logical_bridge_ = p;
  }
  return logical_bridge_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* CreateLogicalBridgeRequest::mutable_logical_bridge() {
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _msg = _internal_mutable_logical_bridge();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge)
  return _msg;
}
inline void CreateLogicalBridgeRequest::set_allocated_logical_bridge(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logical_bridge_;
  }
  if (logical_bridge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>::GetOwningArena(logical_bridge);
    if (message_arena != submessage_arena) {
      logical_bridge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_bridge, submessage_arena);
    }
    
  } else {
    
  }
  logical_bridge_ = logical_bridge;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge)
}

// -------------------------------------------------------------------

// ListLogicalBridgesRequest

// int32 page_size = 1;
inline void ListLogicalBridgesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListLogicalBridgesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListLogicalBridgesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_size)
  return _internal_page_size();
}
inline void ListLogicalBridgesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListLogicalBridgesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_size)
}

// string page_token = 2;
inline void ListLogicalBridgesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListLogicalBridgesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListLogicalBridgesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token)
}
inline std::string* ListLogicalBridgesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token)
  return _s;
}
inline const std::string& ListLogicalBridgesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListLogicalBridgesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListLogicalBridgesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListLogicalBridgesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListLogicalBridgesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest.page_token)
}

// -------------------------------------------------------------------

// ListLogicalBridgesResponse

// repeated .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridges = 1;
inline int ListLogicalBridgesResponse::_internal_logical_bridges_size() const {
  return logical_bridges_.size();
}
inline int ListLogicalBridgesResponse::logical_bridges_size() const {
  return _internal_logical_bridges_size();
}
inline void ListLogicalBridgesResponse::clear_logical_bridges() {
  logical_bridges_.Clear();
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* ListLogicalBridgesResponse::mutable_logical_bridges(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges)
  return logical_bridges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >*
ListLogicalBridgesResponse::mutable_logical_bridges() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges)
  return &logical_bridges_;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& ListLogicalBridgesResponse::_internal_logical_bridges(int index) const {
  return logical_bridges_.Get(index);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& ListLogicalBridgesResponse::logical_bridges(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges)
  return _internal_logical_bridges(index);
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* ListLogicalBridgesResponse::_internal_add_logical_bridges() {
  return logical_bridges_.Add();
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* ListLogicalBridgesResponse::add_logical_bridges() {
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _add = _internal_add_logical_bridges();
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge >&
ListLogicalBridgesResponse::logical_bridges() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges)
  return logical_bridges_;
}

// string next_page_token = 2;
inline void ListLogicalBridgesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListLogicalBridgesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListLogicalBridgesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token)
}
inline std::string* ListLogicalBridgesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token)
  return _s;
}
inline const std::string& ListLogicalBridgesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListLogicalBridgesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListLogicalBridgesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListLogicalBridgesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListLogicalBridgesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetLogicalBridgeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetLogicalBridgeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetLogicalBridgeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLogicalBridgeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name)
}
inline std::string* GetLogicalBridgeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name)
  return _s;
}
inline const std::string& GetLogicalBridgeRequest::_internal_name() const {
  return name_.Get();
}
inline void GetLogicalBridgeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetLogicalBridgeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetLogicalBridgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetLogicalBridgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest.name)
}

// -------------------------------------------------------------------

// DeleteLogicalBridgeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteLogicalBridgeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteLogicalBridgeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteLogicalBridgeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name)
}
inline std::string* DeleteLogicalBridgeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name)
  return _s;
}
inline const std::string& DeleteLogicalBridgeRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteLogicalBridgeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteLogicalBridgeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteLogicalBridgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteLogicalBridgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.name)
}

// bool allow_missing = 2;
inline void DeleteLogicalBridgeRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteLogicalBridgeRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteLogicalBridgeRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteLogicalBridgeRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteLogicalBridgeRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateLogicalBridgeRequest

// .opi_api.network.evpn_gw.v1alpha1.LogicalBridge logical_bridge = 1;
inline bool UpdateLogicalBridgeRequest::_internal_has_logical_bridge() const {
  return this != internal_default_instance() && logical_bridge_ != nullptr;
}
inline bool UpdateLogicalBridgeRequest::has_logical_bridge() const {
  return _internal_has_logical_bridge();
}
inline void UpdateLogicalBridgeRequest::clear_logical_bridge() {
  if (GetArenaForAllocation() == nullptr && logical_bridge_ != nullptr) {
    delete logical_bridge_;
  }
  logical_bridge_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& UpdateLogicalBridgeRequest::_internal_logical_bridge() const {
  const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* p = logical_bridge_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge&>(
      ::opi_api::network::evpn_gw::v1alpha1::_LogicalBridge_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge& UpdateLogicalBridgeRequest::logical_bridge() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge)
  return _internal_logical_bridge();
}
inline void UpdateLogicalBridgeRequest::unsafe_arena_set_allocated_logical_bridge(
    ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_bridge_);
  }
  logical_bridge_ = logical_bridge;
  if (logical_bridge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge)
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* UpdateLogicalBridgeRequest::release_logical_bridge() {
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* temp = logical_bridge_;
  logical_bridge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* UpdateLogicalBridgeRequest::unsafe_arena_release_logical_bridge() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge)
  
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* temp = logical_bridge_;
  logical_bridge_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* UpdateLogicalBridgeRequest::_internal_mutable_logical_bridge() {
  
  if (logical_bridge_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>(GetArenaForAllocation());
    logical_bridge_ = p;
  }
  return logical_bridge_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* UpdateLogicalBridgeRequest::mutable_logical_bridge() {
  ::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* _msg = _internal_mutable_logical_bridge();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge)
  return _msg;
}
inline void UpdateLogicalBridgeRequest::set_allocated_logical_bridge(::opi_api::network::evpn_gw::v1alpha1::LogicalBridge* logical_bridge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logical_bridge_;
  }
  if (logical_bridge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::LogicalBridge>::GetOwningArena(logical_bridge);
    if (message_arena != submessage_arena) {
      logical_bridge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_bridge, submessage_arena);
    }
    
  } else {
    
  }
  logical_bridge_ = logical_bridge;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateLogicalBridgeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateLogicalBridgeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateLogicalBridgeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateLogicalBridgeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateLogicalBridgeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateLogicalBridgeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateLogicalBridgeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateLogicalBridgeRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateLogicalBridgeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask)
  return _msg;
}
inline void UpdateLogicalBridgeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask)
}

// bool allow_missing = 3;
inline void UpdateLogicalBridgeRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool UpdateLogicalBridgeRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool UpdateLogicalBridgeRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateLogicalBridgeRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void UpdateLogicalBridgeRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.allow_missing)
}

// -------------------------------------------------------------------

// BridgePort

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void BridgePort::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BridgePort::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePort.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BridgePort::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePort.name)
}
inline std::string* BridgePort::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePort.name)
  return _s;
}
inline const std::string& BridgePort::_internal_name() const {
  return name_.Get();
}
inline void BridgePort::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BridgePort::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BridgePort::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.BridgePort.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BridgePort::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePort.name)
}

// .opi_api.network.evpn_gw.v1alpha1.BridgePortSpec spec = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool BridgePort::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool BridgePort::has_spec() const {
  return _internal_has_spec();
}
inline void BridgePort::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec& BridgePort::_internal_spec() const {
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec&>(
      ::opi_api::network::evpn_gw::v1alpha1::_BridgePortSpec_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec& BridgePort::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePort.spec)
  return _internal_spec();
}
inline void BridgePort::unsafe_arena_set_allocated_spec(
    ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePort.spec)
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* BridgePort::release_spec() {
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* BridgePort::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.BridgePort.spec)
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* BridgePort::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* BridgePort::mutable_spec() {
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePort.spec)
  return _msg;
}
inline void BridgePort::set_allocated_spec(::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::BridgePortSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePort.spec)
}

// .opi_api.network.evpn_gw.v1alpha1.BridgePortStatus status = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool BridgePort::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BridgePort::has_status() const {
  return _internal_has_status();
}
inline void BridgePort::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus& BridgePort::_internal_status() const {
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus&>(
      ::opi_api::network::evpn_gw::v1alpha1::_BridgePortStatus_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus& BridgePort::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePort.status)
  return _internal_status();
}
inline void BridgePort::unsafe_arena_set_allocated_status(
    ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePort.status)
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* BridgePort::release_status() {
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* BridgePort::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.BridgePort.status)
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* BridgePort::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* BridgePort::mutable_status() {
  ::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePort.status)
  return _msg;
}
inline void BridgePort::set_allocated_status(::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::BridgePortStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePort.status)
}

// -------------------------------------------------------------------

// BridgePortSpec

// bytes mac_address = 1 [(.google.api.field_behavior) = REQUIRED];
inline void BridgePortSpec::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& BridgePortSpec::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BridgePortSpec::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.mac_address)
}
inline std::string* BridgePortSpec::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.mac_address)
  return _s;
}
inline const std::string& BridgePortSpec::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void BridgePortSpec::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BridgePortSpec::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BridgePortSpec::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BridgePortSpec::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.mac_address)
}

// .opi_api.network.evpn_gw.v1alpha1.BridgePortType ptype = 2 [(.google.api.field_behavior) = REQUIRED];
inline void BridgePortSpec::clear_ptype() {
  ptype_ = 0;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortType BridgePortSpec::_internal_ptype() const {
  return static_cast< ::opi_api::network::evpn_gw::v1alpha1::BridgePortType >(ptype_);
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePortType BridgePortSpec::ptype() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.ptype)
  return _internal_ptype();
}
inline void BridgePortSpec::_internal_set_ptype(::opi_api::network::evpn_gw::v1alpha1::BridgePortType value) {
  
  ptype_ = value;
}
inline void BridgePortSpec::set_ptype(::opi_api::network::evpn_gw::v1alpha1::BridgePortType value) {
  _internal_set_ptype(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.ptype)
}

// repeated string logical_bridges = 3 [(.google.api.field_behavior) = OPTIONAL];
inline int BridgePortSpec::_internal_logical_bridges_size() const {
  return logical_bridges_.size();
}
inline int BridgePortSpec::logical_bridges_size() const {
  return _internal_logical_bridges_size();
}
inline void BridgePortSpec::clear_logical_bridges() {
  logical_bridges_.Clear();
}
inline std::string* BridgePortSpec::add_logical_bridges() {
  std::string* _s = _internal_add_logical_bridges();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
  return _s;
}
inline const std::string& BridgePortSpec::_internal_logical_bridges(int index) const {
  return logical_bridges_.Get(index);
}
inline const std::string& BridgePortSpec::logical_bridges(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
  return _internal_logical_bridges(index);
}
inline std::string* BridgePortSpec::mutable_logical_bridges(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
  return logical_bridges_.Mutable(index);
}
inline void BridgePortSpec::set_logical_bridges(int index, const std::string& value) {
  logical_bridges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::set_logical_bridges(int index, std::string&& value) {
  logical_bridges_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::set_logical_bridges(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logical_bridges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::set_logical_bridges(int index, const char* value, size_t size) {
  logical_bridges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline std::string* BridgePortSpec::_internal_add_logical_bridges() {
  return logical_bridges_.Add();
}
inline void BridgePortSpec::add_logical_bridges(const std::string& value) {
  logical_bridges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::add_logical_bridges(std::string&& value) {
  logical_bridges_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::add_logical_bridges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logical_bridges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline void BridgePortSpec::add_logical_bridges(const char* value, size_t size) {
  logical_bridges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BridgePortSpec::logical_bridges() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
  return logical_bridges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BridgePortSpec::mutable_logical_bridges() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.logical_bridges)
  return &logical_bridges_;
}

// -------------------------------------------------------------------

// BridgePortStatus

// .opi_api.network.evpn_gw.v1alpha1.BPOperStatus oper_status = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void BridgePortStatus::clear_oper_status() {
  oper_status_ = 0;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus BridgePortStatus::_internal_oper_status() const {
  return static_cast< ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus >(oper_status_);
}
inline ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus BridgePortStatus::oper_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus.oper_status)
  return _internal_oper_status();
}
inline void BridgePortStatus::_internal_set_oper_status(::opi_api::network::evpn_gw::v1alpha1::BPOperStatus value) {
  
  oper_status_ = value;
}
inline void BridgePortStatus::set_oper_status(::opi_api::network::evpn_gw::v1alpha1::BPOperStatus value) {
  _internal_set_oper_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.BridgePortStatus.oper_status)
}

// -------------------------------------------------------------------

// CreateBridgePortRequest

// string bridge_port_id = 1;
inline void CreateBridgePortRequest::clear_bridge_port_id() {
  bridge_port_id_.ClearToEmpty();
}
inline const std::string& CreateBridgePortRequest::bridge_port_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id)
  return _internal_bridge_port_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBridgePortRequest::set_bridge_port_id(ArgT0&& arg0, ArgT... args) {
 
 bridge_port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id)
}
inline std::string* CreateBridgePortRequest::mutable_bridge_port_id() {
  std::string* _s = _internal_mutable_bridge_port_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id)
  return _s;
}
inline const std::string& CreateBridgePortRequest::_internal_bridge_port_id() const {
  return bridge_port_id_.Get();
}
inline void CreateBridgePortRequest::_internal_set_bridge_port_id(const std::string& value) {
  
  bridge_port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBridgePortRequest::_internal_mutable_bridge_port_id() {
  
  return bridge_port_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBridgePortRequest::release_bridge_port_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id)
  return bridge_port_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBridgePortRequest::set_allocated_bridge_port_id(std::string* bridge_port_id) {
  if (bridge_port_id != nullptr) {
    
  } else {
    
  }
  bridge_port_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridge_port_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bridge_port_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bridge_port_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port_id)
}

// .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBridgePortRequest::_internal_has_bridge_port() const {
  return this != internal_default_instance() && bridge_port_ != nullptr;
}
inline bool CreateBridgePortRequest::has_bridge_port() const {
  return _internal_has_bridge_port();
}
inline void CreateBridgePortRequest::clear_bridge_port() {
  if (GetArenaForAllocation() == nullptr && bridge_port_ != nullptr) {
    delete bridge_port_;
  }
  bridge_port_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& CreateBridgePortRequest::_internal_bridge_port() const {
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort* p = bridge_port_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::BridgePort&>(
      ::opi_api::network::evpn_gw::v1alpha1::_BridgePort_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& CreateBridgePortRequest::bridge_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port)
  return _internal_bridge_port();
}
inline void CreateBridgePortRequest::unsafe_arena_set_allocated_bridge_port(
    ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_port_);
  }
  bridge_port_ = bridge_port;
  if (bridge_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port)
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* CreateBridgePortRequest::release_bridge_port() {
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* temp = bridge_port_;
  bridge_port_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* CreateBridgePortRequest::unsafe_arena_release_bridge_port() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port)
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* temp = bridge_port_;
  bridge_port_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* CreateBridgePortRequest::_internal_mutable_bridge_port() {
  
  if (bridge_port_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePort>(GetArenaForAllocation());
    bridge_port_ = p;
  }
  return bridge_port_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* CreateBridgePortRequest::mutable_bridge_port() {
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _msg = _internal_mutable_bridge_port();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port)
  return _msg;
}
inline void CreateBridgePortRequest::set_allocated_bridge_port(::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bridge_port_;
  }
  if (bridge_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::BridgePort>::GetOwningArena(bridge_port);
    if (message_arena != submessage_arena) {
      bridge_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_port, submessage_arena);
    }
    
  } else {
    
  }
  bridge_port_ = bridge_port;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port)
}

// -------------------------------------------------------------------

// ListBridgePortsRequest

// int32 page_size = 1;
inline void ListBridgePortsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBridgePortsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBridgePortsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_size)
  return _internal_page_size();
}
inline void ListBridgePortsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBridgePortsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_size)
}

// string page_token = 2;
inline void ListBridgePortsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBridgePortsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBridgePortsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token)
}
inline std::string* ListBridgePortsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token)
  return _s;
}
inline const std::string& ListBridgePortsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBridgePortsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBridgePortsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBridgePortsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBridgePortsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBridgePortsResponse

// repeated .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_ports = 1;
inline int ListBridgePortsResponse::_internal_bridge_ports_size() const {
  return bridge_ports_.size();
}
inline int ListBridgePortsResponse::bridge_ports_size() const {
  return _internal_bridge_ports_size();
}
inline void ListBridgePortsResponse::clear_bridge_ports() {
  bridge_ports_.Clear();
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* ListBridgePortsResponse::mutable_bridge_ports(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports)
  return bridge_ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >*
ListBridgePortsResponse::mutable_bridge_ports() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports)
  return &bridge_ports_;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& ListBridgePortsResponse::_internal_bridge_ports(int index) const {
  return bridge_ports_.Get(index);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& ListBridgePortsResponse::bridge_ports(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports)
  return _internal_bridge_ports(index);
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* ListBridgePortsResponse::_internal_add_bridge_ports() {
  return bridge_ports_.Add();
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* ListBridgePortsResponse::add_bridge_ports() {
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _add = _internal_add_bridge_ports();
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::BridgePort >&
ListBridgePortsResponse::bridge_ports() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports)
  return bridge_ports_;
}

// string next_page_token = 2;
inline void ListBridgePortsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBridgePortsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBridgePortsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token)
}
inline std::string* ListBridgePortsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBridgePortsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBridgePortsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBridgePortsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBridgePortsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBridgePortsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetBridgePortRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBridgePortRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetBridgePortRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBridgePortRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name)
}
inline std::string* GetBridgePortRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name)
  return _s;
}
inline const std::string& GetBridgePortRequest::_internal_name() const {
  return name_.Get();
}
inline void GetBridgePortRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBridgePortRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBridgePortRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBridgePortRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest.name)
}

// -------------------------------------------------------------------

// DeleteBridgePortRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBridgePortRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteBridgePortRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBridgePortRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name)
}
inline std::string* DeleteBridgePortRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name)
  return _s;
}
inline const std::string& DeleteBridgePortRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteBridgePortRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteBridgePortRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteBridgePortRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteBridgePortRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.name)
}

// bool allow_missing = 2;
inline void DeleteBridgePortRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteBridgePortRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteBridgePortRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteBridgePortRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteBridgePortRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateBridgePortRequest

// .opi_api.network.evpn_gw.v1alpha1.BridgePort bridge_port = 1;
inline bool UpdateBridgePortRequest::_internal_has_bridge_port() const {
  return this != internal_default_instance() && bridge_port_ != nullptr;
}
inline bool UpdateBridgePortRequest::has_bridge_port() const {
  return _internal_has_bridge_port();
}
inline void UpdateBridgePortRequest::clear_bridge_port() {
  if (GetArenaForAllocation() == nullptr && bridge_port_ != nullptr) {
    delete bridge_port_;
  }
  bridge_port_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& UpdateBridgePortRequest::_internal_bridge_port() const {
  const ::opi_api::network::evpn_gw::v1alpha1::BridgePort* p = bridge_port_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::BridgePort&>(
      ::opi_api::network::evpn_gw::v1alpha1::_BridgePort_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::BridgePort& UpdateBridgePortRequest::bridge_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port)
  return _internal_bridge_port();
}
inline void UpdateBridgePortRequest::unsafe_arena_set_allocated_bridge_port(
    ::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_port_);
  }
  bridge_port_ = bridge_port;
  if (bridge_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port)
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* UpdateBridgePortRequest::release_bridge_port() {
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* temp = bridge_port_;
  bridge_port_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* UpdateBridgePortRequest::unsafe_arena_release_bridge_port() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port)
  
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* temp = bridge_port_;
  bridge_port_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* UpdateBridgePortRequest::_internal_mutable_bridge_port() {
  
  if (bridge_port_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::BridgePort>(GetArenaForAllocation());
    bridge_port_ = p;
  }
  return bridge_port_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::BridgePort* UpdateBridgePortRequest::mutable_bridge_port() {
  ::opi_api::network::evpn_gw::v1alpha1::BridgePort* _msg = _internal_mutable_bridge_port();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port)
  return _msg;
}
inline void UpdateBridgePortRequest::set_allocated_bridge_port(::opi_api::network::evpn_gw::v1alpha1::BridgePort* bridge_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bridge_port_;
  }
  if (bridge_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::BridgePort>::GetOwningArena(bridge_port);
    if (message_arena != submessage_arena) {
      bridge_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_port, submessage_arena);
    }
    
  } else {
    
  }
  bridge_port_ = bridge_port;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBridgePortRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBridgePortRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBridgePortRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBridgePortRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBridgePortRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBridgePortRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBridgePortRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBridgePortRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBridgePortRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask)
  return _msg;
}
inline void UpdateBridgePortRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask)
}

// bool allow_missing = 3;
inline void UpdateBridgePortRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool UpdateBridgePortRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool UpdateBridgePortRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateBridgePortRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void UpdateBridgePortRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.allow_missing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus>() {
  return ::opi_api::network::evpn_gw::v1alpha1::LBOperStatus_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus>() {
  return ::opi_api::network::evpn_gw::v1alpha1::BPOperStatus_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::evpn_gw::v1alpha1::BridgePortType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::evpn_gw::v1alpha1::BridgePortType>() {
  return ::opi_api::network::evpn_gw::v1alpha1::BridgePortType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_l2_5fxpu_5finfra_5fmgr_2eproto
