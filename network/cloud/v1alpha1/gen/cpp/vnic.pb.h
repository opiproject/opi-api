// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vnic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vnic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vnic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "networktypes.pb.h"
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vnic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vnic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vnic_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class Vnic;
struct VnicDefaultTypeInternal;
extern VnicDefaultTypeInternal _Vnic_default_instance_;
class VnicSpec;
struct VnicSpecDefaultTypeInternal;
extern VnicSpecDefaultTypeInternal _VnicSpec_default_instance_;
class VnicStatus;
struct VnicStatusDefaultTypeInternal;
extern VnicStatusDefaultTypeInternal _VnicStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::Vnic* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vnic>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VnicSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VnicSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VnicStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VnicStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class Vnic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Vnic) */ {
 public:
  inline Vnic() : Vnic(nullptr) {}
  ~Vnic() override;
  explicit constexpr Vnic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vnic(const Vnic& from);
  Vnic(Vnic&& from) noexcept
    : Vnic() {
    *this = ::std::move(from);
  }

  inline Vnic& operator=(const Vnic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vnic& operator=(Vnic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vnic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vnic* internal_default_instance() {
    return reinterpret_cast<const Vnic*>(
               &_Vnic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vnic& a, Vnic& b) {
    a.Swap(&b);
  }
  inline void Swap(Vnic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vnic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vnic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vnic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vnic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vnic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vnic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Vnic";
  }
  protected:
  explicit Vnic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.cloud.v1alpha1.VnicSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::VnicSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VnicSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::VnicSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::VnicSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::VnicSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::VnicSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::VnicSpec* spec);
  ::opi_api::network::cloud::v1alpha1::VnicSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.VnicStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::VnicStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VnicStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::VnicStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::VnicStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::VnicStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::VnicStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::VnicStatus* status);
  ::opi_api::network::cloud::v1alpha1::VnicStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Vnic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::network::cloud::v1alpha1::VnicSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::VnicStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vnic_2eproto;
};
// -------------------------------------------------------------------

class VnicSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VnicSpec) */ {
 public:
  inline VnicSpec() : VnicSpec(nullptr) {}
  ~VnicSpec() override;
  explicit constexpr VnicSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VnicSpec(const VnicSpec& from);
  VnicSpec(VnicSpec&& from) noexcept
    : VnicSpec() {
    *this = ::std::move(from);
  }

  inline VnicSpec& operator=(const VnicSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline VnicSpec& operator=(VnicSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VnicSpec& default_instance() {
    return *internal_default_instance();
  }
  enum IfinfoCase {
    kHostIfNameRef = 11,
    kTunnelNameRef = 12,
    IFINFO_NOT_SET = 0,
  };

  static inline const VnicSpec* internal_default_instance() {
    return reinterpret_cast<const VnicSpec*>(
               &_VnicSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VnicSpec& a, VnicSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(VnicSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VnicSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VnicSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VnicSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VnicSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VnicSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VnicSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VnicSpec";
  }
  protected:
  explicit VnicSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIngressV4SecurityPolicyNameRefFieldNumber = 7,
    kIngressV6SecurityPolicyNameRefFieldNumber = 8,
    kEgressV4SecurityPolicyNameRefFieldNumber = 9,
    kEgressV6SecurityPolicyNameRefFieldNumber = 10,
    kSubnetNameRefFieldNumber = 1,
    kMacAddressFieldNumber = 3,
    kPublicMacAddressFieldNumber = 14,
    kPrimaryVnicNameRefFieldNumber = 18,
    kV4RouteTableNameRefFieldNumber = 19,
    kV6RouteTableNameRefFieldNumber = 20,
    kVnicEncapFieldNumber = 2,
    kFabricEncapFieldNumber = 5,
    kServiceIpFieldNumber = 21,
    kSourceGuardEnableFieldNumber = 4,
    kVnfFieldNumber = 6,
    kAllowInternetAccessFieldNumber = 15,
    kMaxSessionsFieldNumber = 13,
    kMaxCpsFieldNumber = 16,
    kCpsBurstFieldNumber = 17,
    kMaxTcpSessionsFieldNumber = 22,
    kMaxUdpSessionsFieldNumber = 23,
    kMaxIcmpSessionsFieldNumber = 24,
    kMaxOtherSessionsFieldNumber = 25,
    kHostIfNameRefFieldNumber = 11,
    kTunnelNameRefFieldNumber = 12,
  };
  // repeated string ingress_v4_security_policy_name_ref = 7;
  int ingress_v4_security_policy_name_ref_size() const;
  private:
  int _internal_ingress_v4_security_policy_name_ref_size() const;
  public:
  void clear_ingress_v4_security_policy_name_ref();
  const std::string& ingress_v4_security_policy_name_ref(int index) const;
  std::string* mutable_ingress_v4_security_policy_name_ref(int index);
  void set_ingress_v4_security_policy_name_ref(int index, const std::string& value);
  void set_ingress_v4_security_policy_name_ref(int index, std::string&& value);
  void set_ingress_v4_security_policy_name_ref(int index, const char* value);
  void set_ingress_v4_security_policy_name_ref(int index, const char* value, size_t size);
  std::string* add_ingress_v4_security_policy_name_ref();
  void add_ingress_v4_security_policy_name_ref(const std::string& value);
  void add_ingress_v4_security_policy_name_ref(std::string&& value);
  void add_ingress_v4_security_policy_name_ref(const char* value);
  void add_ingress_v4_security_policy_name_ref(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ingress_v4_security_policy_name_ref() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ingress_v4_security_policy_name_ref();
  private:
  const std::string& _internal_ingress_v4_security_policy_name_ref(int index) const;
  std::string* _internal_add_ingress_v4_security_policy_name_ref();
  public:

  // repeated string ingress_v6_security_policy_name_ref = 8;
  int ingress_v6_security_policy_name_ref_size() const;
  private:
  int _internal_ingress_v6_security_policy_name_ref_size() const;
  public:
  void clear_ingress_v6_security_policy_name_ref();
  const std::string& ingress_v6_security_policy_name_ref(int index) const;
  std::string* mutable_ingress_v6_security_policy_name_ref(int index);
  void set_ingress_v6_security_policy_name_ref(int index, const std::string& value);
  void set_ingress_v6_security_policy_name_ref(int index, std::string&& value);
  void set_ingress_v6_security_policy_name_ref(int index, const char* value);
  void set_ingress_v6_security_policy_name_ref(int index, const char* value, size_t size);
  std::string* add_ingress_v6_security_policy_name_ref();
  void add_ingress_v6_security_policy_name_ref(const std::string& value);
  void add_ingress_v6_security_policy_name_ref(std::string&& value);
  void add_ingress_v6_security_policy_name_ref(const char* value);
  void add_ingress_v6_security_policy_name_ref(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ingress_v6_security_policy_name_ref() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ingress_v6_security_policy_name_ref();
  private:
  const std::string& _internal_ingress_v6_security_policy_name_ref(int index) const;
  std::string* _internal_add_ingress_v6_security_policy_name_ref();
  public:

  // repeated string egress_v4_security_policy_name_ref = 9;
  int egress_v4_security_policy_name_ref_size() const;
  private:
  int _internal_egress_v4_security_policy_name_ref_size() const;
  public:
  void clear_egress_v4_security_policy_name_ref();
  const std::string& egress_v4_security_policy_name_ref(int index) const;
  std::string* mutable_egress_v4_security_policy_name_ref(int index);
  void set_egress_v4_security_policy_name_ref(int index, const std::string& value);
  void set_egress_v4_security_policy_name_ref(int index, std::string&& value);
  void set_egress_v4_security_policy_name_ref(int index, const char* value);
  void set_egress_v4_security_policy_name_ref(int index, const char* value, size_t size);
  std::string* add_egress_v4_security_policy_name_ref();
  void add_egress_v4_security_policy_name_ref(const std::string& value);
  void add_egress_v4_security_policy_name_ref(std::string&& value);
  void add_egress_v4_security_policy_name_ref(const char* value);
  void add_egress_v4_security_policy_name_ref(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& egress_v4_security_policy_name_ref() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_egress_v4_security_policy_name_ref();
  private:
  const std::string& _internal_egress_v4_security_policy_name_ref(int index) const;
  std::string* _internal_add_egress_v4_security_policy_name_ref();
  public:

  // repeated string egress_v6_security_policy_name_ref = 10;
  int egress_v6_security_policy_name_ref_size() const;
  private:
  int _internal_egress_v6_security_policy_name_ref_size() const;
  public:
  void clear_egress_v6_security_policy_name_ref();
  const std::string& egress_v6_security_policy_name_ref(int index) const;
  std::string* mutable_egress_v6_security_policy_name_ref(int index);
  void set_egress_v6_security_policy_name_ref(int index, const std::string& value);
  void set_egress_v6_security_policy_name_ref(int index, std::string&& value);
  void set_egress_v6_security_policy_name_ref(int index, const char* value);
  void set_egress_v6_security_policy_name_ref(int index, const char* value, size_t size);
  std::string* add_egress_v6_security_policy_name_ref();
  void add_egress_v6_security_policy_name_ref(const std::string& value);
  void add_egress_v6_security_policy_name_ref(std::string&& value);
  void add_egress_v6_security_policy_name_ref(const char* value);
  void add_egress_v6_security_policy_name_ref(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& egress_v6_security_policy_name_ref() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_egress_v6_security_policy_name_ref();
  private:
  const std::string& _internal_egress_v6_security_policy_name_ref(int index) const;
  std::string* _internal_add_egress_v6_security_policy_name_ref();
  public:

  // string subnet_name_ref = 1;
  void clear_subnet_name_ref();
  const std::string& subnet_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnet_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnet_name_ref();
  PROTOBUF_NODISCARD std::string* release_subnet_name_ref();
  void set_allocated_subnet_name_ref(std::string* subnet_name_ref);
  private:
  const std::string& _internal_subnet_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnet_name_ref(const std::string& value);
  std::string* _internal_mutable_subnet_name_ref();
  public:

  // bytes mac_address = 3;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // bytes public_mac_address = 14;
  void clear_public_mac_address();
  const std::string& public_mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_mac_address();
  PROTOBUF_NODISCARD std::string* release_public_mac_address();
  void set_allocated_public_mac_address(std::string* public_mac_address);
  private:
  const std::string& _internal_public_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_mac_address(const std::string& value);
  std::string* _internal_mutable_public_mac_address();
  public:

  // string primary_vnic_name_ref = 18;
  void clear_primary_vnic_name_ref();
  const std::string& primary_vnic_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_vnic_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_vnic_name_ref();
  PROTOBUF_NODISCARD std::string* release_primary_vnic_name_ref();
  void set_allocated_primary_vnic_name_ref(std::string* primary_vnic_name_ref);
  private:
  const std::string& _internal_primary_vnic_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_vnic_name_ref(const std::string& value);
  std::string* _internal_mutable_primary_vnic_name_ref();
  public:

  // string v4_route_table_name_ref = 19;
  void clear_v4_route_table_name_ref();
  const std::string& v4_route_table_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v4_route_table_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v4_route_table_name_ref();
  PROTOBUF_NODISCARD std::string* release_v4_route_table_name_ref();
  void set_allocated_v4_route_table_name_ref(std::string* v4_route_table_name_ref);
  private:
  const std::string& _internal_v4_route_table_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v4_route_table_name_ref(const std::string& value);
  std::string* _internal_mutable_v4_route_table_name_ref();
  public:

  // string v6_route_table_name_ref = 20;
  void clear_v6_route_table_name_ref();
  const std::string& v6_route_table_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v6_route_table_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v6_route_table_name_ref();
  PROTOBUF_NODISCARD std::string* release_v6_route_table_name_ref();
  void set_allocated_v6_route_table_name_ref(std::string* v6_route_table_name_ref);
  private:
  const std::string& _internal_v6_route_table_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v6_route_table_name_ref(const std::string& value);
  std::string* _internal_mutable_v6_route_table_name_ref();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 2;
  bool has_vnic_encap() const;
  private:
  bool _internal_has_vnic_encap() const;
  public:
  void clear_vnic_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& vnic_encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_vnic_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_vnic_encap();
  void set_allocated_vnic_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* vnic_encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_vnic_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_vnic_encap();
  public:
  void unsafe_arena_set_allocated_vnic_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* vnic_encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_vnic_encap();

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 5;
  bool has_fabric_encap() const;
  private:
  bool _internal_has_fabric_encap() const;
  public:
  void clear_fabric_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_fabric_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_fabric_encap();
  void set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_fabric_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_fabric_encap();
  public:
  void unsafe_arena_set_allocated_fabric_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_fabric_encap();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 21;
  bool has_service_ip() const;
  private:
  bool _internal_has_service_ip() const;
  public:
  void clear_service_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& service_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_service_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_service_ip();
  void set_allocated_service_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* service_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_service_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_service_ip();
  public:
  void unsafe_arena_set_allocated_service_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* service_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_service_ip();

  // bool source_guard_enable = 4;
  void clear_source_guard_enable();
  bool source_guard_enable() const;
  void set_source_guard_enable(bool value);
  private:
  bool _internal_source_guard_enable() const;
  void _internal_set_source_guard_enable(bool value);
  public:

  // bool vnf = 6;
  void clear_vnf();
  bool vnf() const;
  void set_vnf(bool value);
  private:
  bool _internal_vnf() const;
  void _internal_set_vnf(bool value);
  public:

  // bool allow_internet_access = 15;
  void clear_allow_internet_access();
  bool allow_internet_access() const;
  void set_allow_internet_access(bool value);
  private:
  bool _internal_allow_internet_access() const;
  void _internal_set_allow_internet_access(bool value);
  public:

  // int32 max_sessions = 13;
  void clear_max_sessions();
  int32_t max_sessions() const;
  void set_max_sessions(int32_t value);
  private:
  int32_t _internal_max_sessions() const;
  void _internal_set_max_sessions(int32_t value);
  public:

  // int32 max_cps = 16;
  void clear_max_cps();
  int32_t max_cps() const;
  void set_max_cps(int32_t value);
  private:
  int32_t _internal_max_cps() const;
  void _internal_set_max_cps(int32_t value);
  public:

  // int32 cps_burst = 17;
  void clear_cps_burst();
  int32_t cps_burst() const;
  void set_cps_burst(int32_t value);
  private:
  int32_t _internal_cps_burst() const;
  void _internal_set_cps_burst(int32_t value);
  public:

  // int32 max_tcp_sessions = 22;
  void clear_max_tcp_sessions();
  int32_t max_tcp_sessions() const;
  void set_max_tcp_sessions(int32_t value);
  private:
  int32_t _internal_max_tcp_sessions() const;
  void _internal_set_max_tcp_sessions(int32_t value);
  public:

  // int32 max_udp_sessions = 23;
  void clear_max_udp_sessions();
  int32_t max_udp_sessions() const;
  void set_max_udp_sessions(int32_t value);
  private:
  int32_t _internal_max_udp_sessions() const;
  void _internal_set_max_udp_sessions(int32_t value);
  public:

  // int32 max_icmp_sessions = 24;
  void clear_max_icmp_sessions();
  int32_t max_icmp_sessions() const;
  void set_max_icmp_sessions(int32_t value);
  private:
  int32_t _internal_max_icmp_sessions() const;
  void _internal_set_max_icmp_sessions(int32_t value);
  public:

  // int32 max_other_sessions = 25;
  void clear_max_other_sessions();
  int32_t max_other_sessions() const;
  void set_max_other_sessions(int32_t value);
  private:
  int32_t _internal_max_other_sessions() const;
  void _internal_set_max_other_sessions(int32_t value);
  public:

  // string host_if_name_ref = 11;
  bool has_host_if_name_ref() const;
  private:
  bool _internal_has_host_if_name_ref() const;
  public:
  void clear_host_if_name_ref();
  const std::string& host_if_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_if_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_if_name_ref();
  PROTOBUF_NODISCARD std::string* release_host_if_name_ref();
  void set_allocated_host_if_name_ref(std::string* host_if_name_ref);
  private:
  const std::string& _internal_host_if_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_if_name_ref(const std::string& value);
  std::string* _internal_mutable_host_if_name_ref();
  public:

  // string tunnel_name_ref = 12;
  bool has_tunnel_name_ref() const;
  private:
  bool _internal_has_tunnel_name_ref() const;
  public:
  void clear_tunnel_name_ref();
  const std::string& tunnel_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tunnel_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tunnel_name_ref();
  PROTOBUF_NODISCARD std::string* release_tunnel_name_ref();
  void set_allocated_tunnel_name_ref(std::string* tunnel_name_ref);
  private:
  const std::string& _internal_tunnel_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tunnel_name_ref(const std::string& value);
  std::string* _internal_mutable_tunnel_name_ref();
  public:

  void clear_ifinfo();
  IfinfoCase ifinfo_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VnicSpec)
 private:
  class _Internal;
  void set_has_host_if_name_ref();
  void set_has_tunnel_name_ref();

  inline bool has_ifinfo() const;
  inline void clear_has_ifinfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ingress_v4_security_policy_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ingress_v6_security_policy_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> egress_v4_security_policy_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> egress_v6_security_policy_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnet_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_vnic_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v4_route_table_name_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v6_route_table_name_ref_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* vnic_encap_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* service_ip_;
  bool source_guard_enable_;
  bool vnf_;
  bool allow_internet_access_;
  int32_t max_sessions_;
  int32_t max_cps_;
  int32_t cps_burst_;
  int32_t max_tcp_sessions_;
  int32_t max_udp_sessions_;
  int32_t max_icmp_sessions_;
  int32_t max_other_sessions_;
  union IfinfoUnion {
    constexpr IfinfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_if_name_ref_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tunnel_name_ref_;
  } ifinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_vnic_2eproto;
};
// -------------------------------------------------------------------

class VnicStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VnicStatus) */ {
 public:
  inline VnicStatus() : VnicStatus(nullptr) {}
  ~VnicStatus() override;
  explicit constexpr VnicStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VnicStatus(const VnicStatus& from);
  VnicStatus(VnicStatus&& from) noexcept
    : VnicStatus() {
    *this = ::std::move(from);
  }

  inline VnicStatus& operator=(const VnicStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline VnicStatus& operator=(VnicStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VnicStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const VnicStatus* internal_default_instance() {
    return reinterpret_cast<const VnicStatus*>(
               &_VnicStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VnicStatus& a, VnicStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(VnicStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VnicStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VnicStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VnicStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VnicStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VnicStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VnicStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VnicStatus";
  }
  protected:
  explicit VnicStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondaryVnicNameRefFieldNumber = 11,
    kHwIdxFieldNumber = 1,
    kNexthopHwIdxFieldNumber = 2,
    kMaxOtherSessionLimitHitFieldNumber = 17,
    kCpsCoppHwIdxFieldNumber = 10,
    kMaxSessionLimitHitFieldNumber = 13,
    kMaxTcpSessionLimitHitFieldNumber = 14,
    kMaxUdpSessionLimitHitFieldNumber = 15,
    kMaxIcmpSessionLimitHitFieldNumber = 16,
  };
  // string secondary_vnic_name_ref = 11;
  void clear_secondary_vnic_name_ref();
  const std::string& secondary_vnic_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondary_vnic_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondary_vnic_name_ref();
  PROTOBUF_NODISCARD std::string* release_secondary_vnic_name_ref();
  void set_allocated_secondary_vnic_name_ref(std::string* secondary_vnic_name_ref);
  private:
  const std::string& _internal_secondary_vnic_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondary_vnic_name_ref(const std::string& value);
  std::string* _internal_mutable_secondary_vnic_name_ref();
  public:

  // int32 hw_idx = 1;
  void clear_hw_idx();
  int32_t hw_idx() const;
  void set_hw_idx(int32_t value);
  private:
  int32_t _internal_hw_idx() const;
  void _internal_set_hw_idx(int32_t value);
  public:

  // int32 nexthop_hw_idx = 2;
  void clear_nexthop_hw_idx();
  int32_t nexthop_hw_idx() const;
  void set_nexthop_hw_idx(int32_t value);
  private:
  int32_t _internal_nexthop_hw_idx() const;
  void _internal_set_nexthop_hw_idx(int32_t value);
  public:

  // bool max_other_session_limit_hit = 17;
  void clear_max_other_session_limit_hit();
  bool max_other_session_limit_hit() const;
  void set_max_other_session_limit_hit(bool value);
  private:
  bool _internal_max_other_session_limit_hit() const;
  void _internal_set_max_other_session_limit_hit(bool value);
  public:

  // int32 cps_copp_hw_idx = 10;
  void clear_cps_copp_hw_idx();
  int32_t cps_copp_hw_idx() const;
  void set_cps_copp_hw_idx(int32_t value);
  private:
  int32_t _internal_cps_copp_hw_idx() const;
  void _internal_set_cps_copp_hw_idx(int32_t value);
  public:

  // bool max_session_limit_hit = 13;
  void clear_max_session_limit_hit();
  bool max_session_limit_hit() const;
  void set_max_session_limit_hit(bool value);
  private:
  bool _internal_max_session_limit_hit() const;
  void _internal_set_max_session_limit_hit(bool value);
  public:

  // bool max_tcp_session_limit_hit = 14;
  void clear_max_tcp_session_limit_hit();
  bool max_tcp_session_limit_hit() const;
  void set_max_tcp_session_limit_hit(bool value);
  private:
  bool _internal_max_tcp_session_limit_hit() const;
  void _internal_set_max_tcp_session_limit_hit(bool value);
  public:

  // bool max_udp_session_limit_hit = 15;
  void clear_max_udp_session_limit_hit();
  bool max_udp_session_limit_hit() const;
  void set_max_udp_session_limit_hit(bool value);
  private:
  bool _internal_max_udp_session_limit_hit() const;
  void _internal_set_max_udp_session_limit_hit(bool value);
  public:

  // bool max_icmp_session_limit_hit = 16;
  void clear_max_icmp_session_limit_hit();
  bool max_icmp_session_limit_hit() const;
  void set_max_icmp_session_limit_hit(bool value);
  private:
  bool _internal_max_icmp_session_limit_hit() const;
  void _internal_set_max_icmp_session_limit_hit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VnicStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_vnic_name_ref_;
  int32_t hw_idx_;
  int32_t nexthop_hw_idx_;
  bool max_other_session_limit_hit_;
  int32_t cps_copp_hw_idx_;
  bool max_session_limit_hit_;
  bool max_tcp_session_limit_hit_;
  bool max_udp_session_limit_hit_;
  bool max_icmp_session_limit_hit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vnic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vnic

// string name = 1;
inline void Vnic::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Vnic::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Vnic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vnic::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.Vnic.name)
}
inline std::string* Vnic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Vnic.name)
  return _s;
}
inline const std::string& Vnic::_internal_name() const {
  return name_.Get();
}
inline void Vnic::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vnic::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vnic::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Vnic.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vnic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Vnic.name)
}

// .opi_api.network.cloud.v1alpha1.VnicSpec spec = 2;
inline bool Vnic::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Vnic::has_spec() const {
  return _internal_has_spec();
}
inline void Vnic::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VnicSpec& Vnic::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::VnicSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VnicSpec&>(
      ::opi_api::network::cloud::v1alpha1::_VnicSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VnicSpec& Vnic::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Vnic.spec)
  return _internal_spec();
}
inline void Vnic::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::VnicSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Vnic.spec)
}
inline ::opi_api::network::cloud::v1alpha1::VnicSpec* Vnic::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::VnicSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VnicSpec* Vnic::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Vnic.spec)
  
  ::opi_api::network::cloud::v1alpha1::VnicSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VnicSpec* Vnic::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VnicSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::VnicSpec* Vnic::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::VnicSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Vnic.spec)
  return _msg;
}
inline void Vnic::set_allocated_spec(::opi_api::network::cloud::v1alpha1::VnicSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VnicSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Vnic.spec)
}

// .opi_api.network.cloud.v1alpha1.VnicStatus status = 3;
inline bool Vnic::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Vnic::has_status() const {
  return _internal_has_status();
}
inline void Vnic::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VnicStatus& Vnic::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::VnicStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VnicStatus&>(
      ::opi_api::network::cloud::v1alpha1::_VnicStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VnicStatus& Vnic::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Vnic.status)
  return _internal_status();
}
inline void Vnic::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::VnicStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Vnic.status)
}
inline ::opi_api::network::cloud::v1alpha1::VnicStatus* Vnic::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::VnicStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VnicStatus* Vnic::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Vnic.status)
  
  ::opi_api::network::cloud::v1alpha1::VnicStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VnicStatus* Vnic::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VnicStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::VnicStatus* Vnic::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::VnicStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Vnic.status)
  return _msg;
}
inline void Vnic::set_allocated_status(::opi_api::network::cloud::v1alpha1::VnicStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VnicStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Vnic.status)
}

// -------------------------------------------------------------------

// VnicSpec

// string subnet_name_ref = 1;
inline void VnicSpec::clear_subnet_name_ref() {
  subnet_name_ref_.ClearToEmpty();
}
inline const std::string& VnicSpec::subnet_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref)
  return _internal_subnet_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_subnet_name_ref(ArgT0&& arg0, ArgT... args) {
 
 subnet_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref)
}
inline std::string* VnicSpec::mutable_subnet_name_ref() {
  std::string* _s = _internal_mutable_subnet_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_subnet_name_ref() const {
  return subnet_name_ref_.Get();
}
inline void VnicSpec::_internal_set_subnet_name_ref(const std::string& value) {
  
  subnet_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_subnet_name_ref() {
  
  return subnet_name_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_subnet_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref)
  return subnet_name_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_subnet_name_ref(std::string* subnet_name_ref) {
  if (subnet_name_ref != nullptr) {
    
  } else {
    
  }
  subnet_name_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnet_name_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnet_name_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnet_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref)
}

// .opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 2;
inline bool VnicSpec::_internal_has_vnic_encap() const {
  return this != internal_default_instance() && vnic_encap_ != nullptr;
}
inline bool VnicSpec::has_vnic_encap() const {
  return _internal_has_vnic_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VnicSpec::_internal_vnic_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = vnic_encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VnicSpec::vnic_encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.vnic_encap)
  return _internal_vnic_encap();
}
inline void VnicSpec::unsafe_arena_set_allocated_vnic_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* vnic_encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_encap_);
  }
  vnic_encap_ = vnic_encap;
  if (vnic_encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.vnic_encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::release_vnic_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = vnic_encap_;
  vnic_encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::unsafe_arena_release_vnic_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.vnic_encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = vnic_encap_;
  vnic_encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::_internal_mutable_vnic_encap() {
  
  if (vnic_encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    vnic_encap_ = p;
  }
  return vnic_encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::mutable_vnic_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_vnic_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.vnic_encap)
  return _msg;
}
inline void VnicSpec::set_allocated_vnic_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* vnic_encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_encap_);
  }
  if (vnic_encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_encap));
    if (message_arena != submessage_arena) {
      vnic_encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic_encap, submessage_arena);
    }
    
  } else {
    
  }
  vnic_encap_ = vnic_encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.vnic_encap)
}

// bytes mac_address = 3;
inline void VnicSpec::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& VnicSpec::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.mac_address)
}
inline std::string* VnicSpec::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.mac_address)
  return _s;
}
inline const std::string& VnicSpec::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void VnicSpec::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.mac_address)
}

// bool source_guard_enable = 4;
inline void VnicSpec::clear_source_guard_enable() {
  source_guard_enable_ = false;
}
inline bool VnicSpec::_internal_source_guard_enable() const {
  return source_guard_enable_;
}
inline bool VnicSpec::source_guard_enable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.source_guard_enable)
  return _internal_source_guard_enable();
}
inline void VnicSpec::_internal_set_source_guard_enable(bool value) {
  
  source_guard_enable_ = value;
}
inline void VnicSpec::set_source_guard_enable(bool value) {
  _internal_set_source_guard_enable(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.source_guard_enable)
}

// .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 5;
inline bool VnicSpec::_internal_has_fabric_encap() const {
  return this != internal_default_instance() && fabric_encap_ != nullptr;
}
inline bool VnicSpec::has_fabric_encap() const {
  return _internal_has_fabric_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VnicSpec::_internal_fabric_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = fabric_encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VnicSpec::fabric_encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.fabric_encap)
  return _internal_fabric_encap();
}
inline void VnicSpec::unsafe_arena_set_allocated_fabric_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  fabric_encap_ = fabric_encap;
  if (fabric_encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.fabric_encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::release_fabric_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::unsafe_arena_release_fabric_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.fabric_encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::_internal_mutable_fabric_encap() {
  
  if (fabric_encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    fabric_encap_ = p;
  }
  return fabric_encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VnicSpec::mutable_fabric_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_fabric_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.fabric_encap)
  return _msg;
}
inline void VnicSpec::set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  if (fabric_encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap));
    if (message_arena != submessage_arena) {
      fabric_encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fabric_encap, submessage_arena);
    }
    
  } else {
    
  }
  fabric_encap_ = fabric_encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.fabric_encap)
}

// bool vnf = 6;
inline void VnicSpec::clear_vnf() {
  vnf_ = false;
}
inline bool VnicSpec::_internal_vnf() const {
  return vnf_;
}
inline bool VnicSpec::vnf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.vnf)
  return _internal_vnf();
}
inline void VnicSpec::_internal_set_vnf(bool value) {
  
  vnf_ = value;
}
inline void VnicSpec::set_vnf(bool value) {
  _internal_set_vnf(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.vnf)
}

// repeated string ingress_v4_security_policy_name_ref = 7;
inline int VnicSpec::_internal_ingress_v4_security_policy_name_ref_size() const {
  return ingress_v4_security_policy_name_ref_.size();
}
inline int VnicSpec::ingress_v4_security_policy_name_ref_size() const {
  return _internal_ingress_v4_security_policy_name_ref_size();
}
inline void VnicSpec::clear_ingress_v4_security_policy_name_ref() {
  ingress_v4_security_policy_name_ref_.Clear();
}
inline std::string* VnicSpec::add_ingress_v4_security_policy_name_ref() {
  std::string* _s = _internal_add_ingress_v4_security_policy_name_ref();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_ingress_v4_security_policy_name_ref(int index) const {
  return ingress_v4_security_policy_name_ref_.Get(index);
}
inline const std::string& VnicSpec::ingress_v4_security_policy_name_ref(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
  return _internal_ingress_v4_security_policy_name_ref(index);
}
inline std::string* VnicSpec::mutable_ingress_v4_security_policy_name_ref(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
  return ingress_v4_security_policy_name_ref_.Mutable(index);
}
inline void VnicSpec::set_ingress_v4_security_policy_name_ref(int index, const std::string& value) {
  ingress_v4_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v4_security_policy_name_ref(int index, std::string&& value) {
  ingress_v4_security_policy_name_ref_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v4_security_policy_name_ref(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ingress_v4_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v4_security_policy_name_ref(int index, const char* value, size_t size) {
  ingress_v4_security_policy_name_ref_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline std::string* VnicSpec::_internal_add_ingress_v4_security_policy_name_ref() {
  return ingress_v4_security_policy_name_ref_.Add();
}
inline void VnicSpec::add_ingress_v4_security_policy_name_ref(const std::string& value) {
  ingress_v4_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v4_security_policy_name_ref(std::string&& value) {
  ingress_v4_security_policy_name_ref_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v4_security_policy_name_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ingress_v4_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v4_security_policy_name_ref(const char* value, size_t size) {
  ingress_v4_security_policy_name_ref_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VnicSpec::ingress_v4_security_policy_name_ref() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
  return ingress_v4_security_policy_name_ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VnicSpec::mutable_ingress_v4_security_policy_name_ref() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref)
  return &ingress_v4_security_policy_name_ref_;
}

// repeated string ingress_v6_security_policy_name_ref = 8;
inline int VnicSpec::_internal_ingress_v6_security_policy_name_ref_size() const {
  return ingress_v6_security_policy_name_ref_.size();
}
inline int VnicSpec::ingress_v6_security_policy_name_ref_size() const {
  return _internal_ingress_v6_security_policy_name_ref_size();
}
inline void VnicSpec::clear_ingress_v6_security_policy_name_ref() {
  ingress_v6_security_policy_name_ref_.Clear();
}
inline std::string* VnicSpec::add_ingress_v6_security_policy_name_ref() {
  std::string* _s = _internal_add_ingress_v6_security_policy_name_ref();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_ingress_v6_security_policy_name_ref(int index) const {
  return ingress_v6_security_policy_name_ref_.Get(index);
}
inline const std::string& VnicSpec::ingress_v6_security_policy_name_ref(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
  return _internal_ingress_v6_security_policy_name_ref(index);
}
inline std::string* VnicSpec::mutable_ingress_v6_security_policy_name_ref(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
  return ingress_v6_security_policy_name_ref_.Mutable(index);
}
inline void VnicSpec::set_ingress_v6_security_policy_name_ref(int index, const std::string& value) {
  ingress_v6_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v6_security_policy_name_ref(int index, std::string&& value) {
  ingress_v6_security_policy_name_ref_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v6_security_policy_name_ref(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ingress_v6_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_ingress_v6_security_policy_name_ref(int index, const char* value, size_t size) {
  ingress_v6_security_policy_name_ref_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline std::string* VnicSpec::_internal_add_ingress_v6_security_policy_name_ref() {
  return ingress_v6_security_policy_name_ref_.Add();
}
inline void VnicSpec::add_ingress_v6_security_policy_name_ref(const std::string& value) {
  ingress_v6_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v6_security_policy_name_ref(std::string&& value) {
  ingress_v6_security_policy_name_ref_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v6_security_policy_name_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ingress_v6_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_ingress_v6_security_policy_name_ref(const char* value, size_t size) {
  ingress_v6_security_policy_name_ref_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VnicSpec::ingress_v6_security_policy_name_ref() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
  return ingress_v6_security_policy_name_ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VnicSpec::mutable_ingress_v6_security_policy_name_ref() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref)
  return &ingress_v6_security_policy_name_ref_;
}

// repeated string egress_v4_security_policy_name_ref = 9;
inline int VnicSpec::_internal_egress_v4_security_policy_name_ref_size() const {
  return egress_v4_security_policy_name_ref_.size();
}
inline int VnicSpec::egress_v4_security_policy_name_ref_size() const {
  return _internal_egress_v4_security_policy_name_ref_size();
}
inline void VnicSpec::clear_egress_v4_security_policy_name_ref() {
  egress_v4_security_policy_name_ref_.Clear();
}
inline std::string* VnicSpec::add_egress_v4_security_policy_name_ref() {
  std::string* _s = _internal_add_egress_v4_security_policy_name_ref();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_egress_v4_security_policy_name_ref(int index) const {
  return egress_v4_security_policy_name_ref_.Get(index);
}
inline const std::string& VnicSpec::egress_v4_security_policy_name_ref(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
  return _internal_egress_v4_security_policy_name_ref(index);
}
inline std::string* VnicSpec::mutable_egress_v4_security_policy_name_ref(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
  return egress_v4_security_policy_name_ref_.Mutable(index);
}
inline void VnicSpec::set_egress_v4_security_policy_name_ref(int index, const std::string& value) {
  egress_v4_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v4_security_policy_name_ref(int index, std::string&& value) {
  egress_v4_security_policy_name_ref_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v4_security_policy_name_ref(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  egress_v4_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v4_security_policy_name_ref(int index, const char* value, size_t size) {
  egress_v4_security_policy_name_ref_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline std::string* VnicSpec::_internal_add_egress_v4_security_policy_name_ref() {
  return egress_v4_security_policy_name_ref_.Add();
}
inline void VnicSpec::add_egress_v4_security_policy_name_ref(const std::string& value) {
  egress_v4_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v4_security_policy_name_ref(std::string&& value) {
  egress_v4_security_policy_name_ref_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v4_security_policy_name_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  egress_v4_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v4_security_policy_name_ref(const char* value, size_t size) {
  egress_v4_security_policy_name_ref_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VnicSpec::egress_v4_security_policy_name_ref() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
  return egress_v4_security_policy_name_ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VnicSpec::mutable_egress_v4_security_policy_name_ref() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref)
  return &egress_v4_security_policy_name_ref_;
}

// repeated string egress_v6_security_policy_name_ref = 10;
inline int VnicSpec::_internal_egress_v6_security_policy_name_ref_size() const {
  return egress_v6_security_policy_name_ref_.size();
}
inline int VnicSpec::egress_v6_security_policy_name_ref_size() const {
  return _internal_egress_v6_security_policy_name_ref_size();
}
inline void VnicSpec::clear_egress_v6_security_policy_name_ref() {
  egress_v6_security_policy_name_ref_.Clear();
}
inline std::string* VnicSpec::add_egress_v6_security_policy_name_ref() {
  std::string* _s = _internal_add_egress_v6_security_policy_name_ref();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_egress_v6_security_policy_name_ref(int index) const {
  return egress_v6_security_policy_name_ref_.Get(index);
}
inline const std::string& VnicSpec::egress_v6_security_policy_name_ref(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
  return _internal_egress_v6_security_policy_name_ref(index);
}
inline std::string* VnicSpec::mutable_egress_v6_security_policy_name_ref(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
  return egress_v6_security_policy_name_ref_.Mutable(index);
}
inline void VnicSpec::set_egress_v6_security_policy_name_ref(int index, const std::string& value) {
  egress_v6_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v6_security_policy_name_ref(int index, std::string&& value) {
  egress_v6_security_policy_name_ref_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v6_security_policy_name_ref(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  egress_v6_security_policy_name_ref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::set_egress_v6_security_policy_name_ref(int index, const char* value, size_t size) {
  egress_v6_security_policy_name_ref_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline std::string* VnicSpec::_internal_add_egress_v6_security_policy_name_ref() {
  return egress_v6_security_policy_name_ref_.Add();
}
inline void VnicSpec::add_egress_v6_security_policy_name_ref(const std::string& value) {
  egress_v6_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v6_security_policy_name_ref(std::string&& value) {
  egress_v6_security_policy_name_ref_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v6_security_policy_name_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  egress_v6_security_policy_name_ref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline void VnicSpec::add_egress_v6_security_policy_name_ref(const char* value, size_t size) {
  egress_v6_security_policy_name_ref_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VnicSpec::egress_v6_security_policy_name_ref() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
  return egress_v6_security_policy_name_ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VnicSpec::mutable_egress_v6_security_policy_name_ref() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref)
  return &egress_v6_security_policy_name_ref_;
}

// string host_if_name_ref = 11;
inline bool VnicSpec::_internal_has_host_if_name_ref() const {
  return ifinfo_case() == kHostIfNameRef;
}
inline bool VnicSpec::has_host_if_name_ref() const {
  return _internal_has_host_if_name_ref();
}
inline void VnicSpec::set_has_host_if_name_ref() {
  _oneof_case_[0] = kHostIfNameRef;
}
inline void VnicSpec::clear_host_if_name_ref() {
  if (_internal_has_host_if_name_ref()) {
    ifinfo_.host_if_name_ref_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_ifinfo();
  }
}
inline const std::string& VnicSpec::host_if_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref)
  return _internal_host_if_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline void VnicSpec::set_host_if_name_ref(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_host_if_name_ref()) {
    clear_ifinfo();
    set_has_host_if_name_ref();
    ifinfo_.host_if_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ifinfo_.host_if_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref)
}
inline std::string* VnicSpec::mutable_host_if_name_ref() {
  std::string* _s = _internal_mutable_host_if_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_host_if_name_ref() const {
  if (_internal_has_host_if_name_ref()) {
    return ifinfo_.host_if_name_ref_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VnicSpec::_internal_set_host_if_name_ref(const std::string& value) {
  if (!_internal_has_host_if_name_ref()) {
    clear_ifinfo();
    set_has_host_if_name_ref();
    ifinfo_.host_if_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ifinfo_.host_if_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_host_if_name_ref() {
  if (!_internal_has_host_if_name_ref()) {
    clear_ifinfo();
    set_has_host_if_name_ref();
    ifinfo_.host_if_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ifinfo_.host_if_name_ref_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_host_if_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref)
  if (_internal_has_host_if_name_ref()) {
    clear_has_ifinfo();
    return ifinfo_.host_if_name_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void VnicSpec::set_allocated_host_if_name_ref(std::string* host_if_name_ref) {
  if (has_ifinfo()) {
    clear_ifinfo();
  }
  if (host_if_name_ref != nullptr) {
    set_has_host_if_name_ref();
    ifinfo_.host_if_name_ref_.UnsafeSetDefault(host_if_name_ref);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(host_if_name_ref);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref)
}

// string tunnel_name_ref = 12;
inline bool VnicSpec::_internal_has_tunnel_name_ref() const {
  return ifinfo_case() == kTunnelNameRef;
}
inline bool VnicSpec::has_tunnel_name_ref() const {
  return _internal_has_tunnel_name_ref();
}
inline void VnicSpec::set_has_tunnel_name_ref() {
  _oneof_case_[0] = kTunnelNameRef;
}
inline void VnicSpec::clear_tunnel_name_ref() {
  if (_internal_has_tunnel_name_ref()) {
    ifinfo_.tunnel_name_ref_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_ifinfo();
  }
}
inline const std::string& VnicSpec::tunnel_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref)
  return _internal_tunnel_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline void VnicSpec::set_tunnel_name_ref(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_tunnel_name_ref()) {
    clear_ifinfo();
    set_has_tunnel_name_ref();
    ifinfo_.tunnel_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ifinfo_.tunnel_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref)
}
inline std::string* VnicSpec::mutable_tunnel_name_ref() {
  std::string* _s = _internal_mutable_tunnel_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_tunnel_name_ref() const {
  if (_internal_has_tunnel_name_ref()) {
    return ifinfo_.tunnel_name_ref_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VnicSpec::_internal_set_tunnel_name_ref(const std::string& value) {
  if (!_internal_has_tunnel_name_ref()) {
    clear_ifinfo();
    set_has_tunnel_name_ref();
    ifinfo_.tunnel_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ifinfo_.tunnel_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_tunnel_name_ref() {
  if (!_internal_has_tunnel_name_ref()) {
    clear_ifinfo();
    set_has_tunnel_name_ref();
    ifinfo_.tunnel_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ifinfo_.tunnel_name_ref_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_tunnel_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref)
  if (_internal_has_tunnel_name_ref()) {
    clear_has_ifinfo();
    return ifinfo_.tunnel_name_ref_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void VnicSpec::set_allocated_tunnel_name_ref(std::string* tunnel_name_ref) {
  if (has_ifinfo()) {
    clear_ifinfo();
  }
  if (tunnel_name_ref != nullptr) {
    set_has_tunnel_name_ref();
    ifinfo_.tunnel_name_ref_.UnsafeSetDefault(tunnel_name_ref);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(tunnel_name_ref);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref)
}

// int32 max_sessions = 13;
inline void VnicSpec::clear_max_sessions() {
  max_sessions_ = 0;
}
inline int32_t VnicSpec::_internal_max_sessions() const {
  return max_sessions_;
}
inline int32_t VnicSpec::max_sessions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_sessions)
  return _internal_max_sessions();
}
inline void VnicSpec::_internal_set_max_sessions(int32_t value) {
  
  max_sessions_ = value;
}
inline void VnicSpec::set_max_sessions(int32_t value) {
  _internal_set_max_sessions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_sessions)
}

// bytes public_mac_address = 14;
inline void VnicSpec::clear_public_mac_address() {
  public_mac_address_.ClearToEmpty();
}
inline const std::string& VnicSpec::public_mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.public_mac_address)
  return _internal_public_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_public_mac_address(ArgT0&& arg0, ArgT... args) {
 
 public_mac_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.public_mac_address)
}
inline std::string* VnicSpec::mutable_public_mac_address() {
  std::string* _s = _internal_mutable_public_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.public_mac_address)
  return _s;
}
inline const std::string& VnicSpec::_internal_public_mac_address() const {
  return public_mac_address_.Get();
}
inline void VnicSpec::_internal_set_public_mac_address(const std::string& value) {
  
  public_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_public_mac_address() {
  
  return public_mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_public_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.public_mac_address)
  return public_mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_public_mac_address(std::string* public_mac_address) {
  if (public_mac_address != nullptr) {
    
  } else {
    
  }
  public_mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.public_mac_address)
}

// bool allow_internet_access = 15;
inline void VnicSpec::clear_allow_internet_access() {
  allow_internet_access_ = false;
}
inline bool VnicSpec::_internal_allow_internet_access() const {
  return allow_internet_access_;
}
inline bool VnicSpec::allow_internet_access() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.allow_internet_access)
  return _internal_allow_internet_access();
}
inline void VnicSpec::_internal_set_allow_internet_access(bool value) {
  
  allow_internet_access_ = value;
}
inline void VnicSpec::set_allow_internet_access(bool value) {
  _internal_set_allow_internet_access(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.allow_internet_access)
}

// int32 max_cps = 16;
inline void VnicSpec::clear_max_cps() {
  max_cps_ = 0;
}
inline int32_t VnicSpec::_internal_max_cps() const {
  return max_cps_;
}
inline int32_t VnicSpec::max_cps() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_cps)
  return _internal_max_cps();
}
inline void VnicSpec::_internal_set_max_cps(int32_t value) {
  
  max_cps_ = value;
}
inline void VnicSpec::set_max_cps(int32_t value) {
  _internal_set_max_cps(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_cps)
}

// int32 cps_burst = 17;
inline void VnicSpec::clear_cps_burst() {
  cps_burst_ = 0;
}
inline int32_t VnicSpec::_internal_cps_burst() const {
  return cps_burst_;
}
inline int32_t VnicSpec::cps_burst() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.cps_burst)
  return _internal_cps_burst();
}
inline void VnicSpec::_internal_set_cps_burst(int32_t value) {
  
  cps_burst_ = value;
}
inline void VnicSpec::set_cps_burst(int32_t value) {
  _internal_set_cps_burst(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.cps_burst)
}

// string primary_vnic_name_ref = 18;
inline void VnicSpec::clear_primary_vnic_name_ref() {
  primary_vnic_name_ref_.ClearToEmpty();
}
inline const std::string& VnicSpec::primary_vnic_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref)
  return _internal_primary_vnic_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_primary_vnic_name_ref(ArgT0&& arg0, ArgT... args) {
 
 primary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref)
}
inline std::string* VnicSpec::mutable_primary_vnic_name_ref() {
  std::string* _s = _internal_mutable_primary_vnic_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_primary_vnic_name_ref() const {
  return primary_vnic_name_ref_.Get();
}
inline void VnicSpec::_internal_set_primary_vnic_name_ref(const std::string& value) {
  
  primary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_primary_vnic_name_ref() {
  
  return primary_vnic_name_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_primary_vnic_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref)
  return primary_vnic_name_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_primary_vnic_name_ref(std::string* primary_vnic_name_ref) {
  if (primary_vnic_name_ref != nullptr) {
    
  } else {
    
  }
  primary_vnic_name_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_vnic_name_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_vnic_name_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref)
}

// string v4_route_table_name_ref = 19;
inline void VnicSpec::clear_v4_route_table_name_ref() {
  v4_route_table_name_ref_.ClearToEmpty();
}
inline const std::string& VnicSpec::v4_route_table_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref)
  return _internal_v4_route_table_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_v4_route_table_name_ref(ArgT0&& arg0, ArgT... args) {
 
 v4_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref)
}
inline std::string* VnicSpec::mutable_v4_route_table_name_ref() {
  std::string* _s = _internal_mutable_v4_route_table_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_v4_route_table_name_ref() const {
  return v4_route_table_name_ref_.Get();
}
inline void VnicSpec::_internal_set_v4_route_table_name_ref(const std::string& value) {
  
  v4_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_v4_route_table_name_ref() {
  
  return v4_route_table_name_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_v4_route_table_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref)
  return v4_route_table_name_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_v4_route_table_name_ref(std::string* v4_route_table_name_ref) {
  if (v4_route_table_name_ref != nullptr) {
    
  } else {
    
  }
  v4_route_table_name_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v4_route_table_name_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v4_route_table_name_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    v4_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref)
}

// string v6_route_table_name_ref = 20;
inline void VnicSpec::clear_v6_route_table_name_ref() {
  v6_route_table_name_ref_.ClearToEmpty();
}
inline const std::string& VnicSpec::v6_route_table_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref)
  return _internal_v6_route_table_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicSpec::set_v6_route_table_name_ref(ArgT0&& arg0, ArgT... args) {
 
 v6_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref)
}
inline std::string* VnicSpec::mutable_v6_route_table_name_ref() {
  std::string* _s = _internal_mutable_v6_route_table_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref)
  return _s;
}
inline const std::string& VnicSpec::_internal_v6_route_table_name_ref() const {
  return v6_route_table_name_ref_.Get();
}
inline void VnicSpec::_internal_set_v6_route_table_name_ref(const std::string& value) {
  
  v6_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicSpec::_internal_mutable_v6_route_table_name_ref() {
  
  return v6_route_table_name_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicSpec::release_v6_route_table_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref)
  return v6_route_table_name_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicSpec::set_allocated_v6_route_table_name_ref(std::string* v6_route_table_name_ref) {
  if (v6_route_table_name_ref != nullptr) {
    
  } else {
    
  }
  v6_route_table_name_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v6_route_table_name_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v6_route_table_name_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    v6_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 21;
inline bool VnicSpec::_internal_has_service_ip() const {
  return this != internal_default_instance() && service_ip_ != nullptr;
}
inline bool VnicSpec::has_service_ip() const {
  return _internal_has_service_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& VnicSpec::_internal_service_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = service_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& VnicSpec::service_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.service_ip)
  return _internal_service_ip();
}
inline void VnicSpec::unsafe_arena_set_allocated_service_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* service_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_ip_);
  }
  service_ip_ = service_ip;
  if (service_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.service_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* VnicSpec::release_service_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = service_ip_;
  service_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* VnicSpec::unsafe_arena_release_service_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicSpec.service_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = service_ip_;
  service_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* VnicSpec::_internal_mutable_service_ip() {
  
  if (service_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    service_ip_ = p;
  }
  return service_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* VnicSpec::mutable_service_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_service_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicSpec.service_ip)
  return _msg;
}
inline void VnicSpec::set_allocated_service_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* service_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_ip_);
  }
  if (service_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_ip));
    if (message_arena != submessage_arena) {
      service_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_ip, submessage_arena);
    }
    
  } else {
    
  }
  service_ip_ = service_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicSpec.service_ip)
}

// int32 max_tcp_sessions = 22;
inline void VnicSpec::clear_max_tcp_sessions() {
  max_tcp_sessions_ = 0;
}
inline int32_t VnicSpec::_internal_max_tcp_sessions() const {
  return max_tcp_sessions_;
}
inline int32_t VnicSpec::max_tcp_sessions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_tcp_sessions)
  return _internal_max_tcp_sessions();
}
inline void VnicSpec::_internal_set_max_tcp_sessions(int32_t value) {
  
  max_tcp_sessions_ = value;
}
inline void VnicSpec::set_max_tcp_sessions(int32_t value) {
  _internal_set_max_tcp_sessions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_tcp_sessions)
}

// int32 max_udp_sessions = 23;
inline void VnicSpec::clear_max_udp_sessions() {
  max_udp_sessions_ = 0;
}
inline int32_t VnicSpec::_internal_max_udp_sessions() const {
  return max_udp_sessions_;
}
inline int32_t VnicSpec::max_udp_sessions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_udp_sessions)
  return _internal_max_udp_sessions();
}
inline void VnicSpec::_internal_set_max_udp_sessions(int32_t value) {
  
  max_udp_sessions_ = value;
}
inline void VnicSpec::set_max_udp_sessions(int32_t value) {
  _internal_set_max_udp_sessions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_udp_sessions)
}

// int32 max_icmp_sessions = 24;
inline void VnicSpec::clear_max_icmp_sessions() {
  max_icmp_sessions_ = 0;
}
inline int32_t VnicSpec::_internal_max_icmp_sessions() const {
  return max_icmp_sessions_;
}
inline int32_t VnicSpec::max_icmp_sessions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_icmp_sessions)
  return _internal_max_icmp_sessions();
}
inline void VnicSpec::_internal_set_max_icmp_sessions(int32_t value) {
  
  max_icmp_sessions_ = value;
}
inline void VnicSpec::set_max_icmp_sessions(int32_t value) {
  _internal_set_max_icmp_sessions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_icmp_sessions)
}

// int32 max_other_sessions = 25;
inline void VnicSpec::clear_max_other_sessions() {
  max_other_sessions_ = 0;
}
inline int32_t VnicSpec::_internal_max_other_sessions() const {
  return max_other_sessions_;
}
inline int32_t VnicSpec::max_other_sessions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicSpec.max_other_sessions)
  return _internal_max_other_sessions();
}
inline void VnicSpec::_internal_set_max_other_sessions(int32_t value) {
  
  max_other_sessions_ = value;
}
inline void VnicSpec::set_max_other_sessions(int32_t value) {
  _internal_set_max_other_sessions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicSpec.max_other_sessions)
}

inline bool VnicSpec::has_ifinfo() const {
  return ifinfo_case() != IFINFO_NOT_SET;
}
inline void VnicSpec::clear_has_ifinfo() {
  _oneof_case_[0] = IFINFO_NOT_SET;
}
inline VnicSpec::IfinfoCase VnicSpec::ifinfo_case() const {
  return VnicSpec::IfinfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VnicStatus

// bool max_session_limit_hit = 13;
inline void VnicStatus::clear_max_session_limit_hit() {
  max_session_limit_hit_ = false;
}
inline bool VnicStatus::_internal_max_session_limit_hit() const {
  return max_session_limit_hit_;
}
inline bool VnicStatus::max_session_limit_hit() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.max_session_limit_hit)
  return _internal_max_session_limit_hit();
}
inline void VnicStatus::_internal_set_max_session_limit_hit(bool value) {
  
  max_session_limit_hit_ = value;
}
inline void VnicStatus::set_max_session_limit_hit(bool value) {
  _internal_set_max_session_limit_hit(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.max_session_limit_hit)
}

// bool max_tcp_session_limit_hit = 14;
inline void VnicStatus::clear_max_tcp_session_limit_hit() {
  max_tcp_session_limit_hit_ = false;
}
inline bool VnicStatus::_internal_max_tcp_session_limit_hit() const {
  return max_tcp_session_limit_hit_;
}
inline bool VnicStatus::max_tcp_session_limit_hit() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.max_tcp_session_limit_hit)
  return _internal_max_tcp_session_limit_hit();
}
inline void VnicStatus::_internal_set_max_tcp_session_limit_hit(bool value) {
  
  max_tcp_session_limit_hit_ = value;
}
inline void VnicStatus::set_max_tcp_session_limit_hit(bool value) {
  _internal_set_max_tcp_session_limit_hit(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.max_tcp_session_limit_hit)
}

// bool max_udp_session_limit_hit = 15;
inline void VnicStatus::clear_max_udp_session_limit_hit() {
  max_udp_session_limit_hit_ = false;
}
inline bool VnicStatus::_internal_max_udp_session_limit_hit() const {
  return max_udp_session_limit_hit_;
}
inline bool VnicStatus::max_udp_session_limit_hit() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.max_udp_session_limit_hit)
  return _internal_max_udp_session_limit_hit();
}
inline void VnicStatus::_internal_set_max_udp_session_limit_hit(bool value) {
  
  max_udp_session_limit_hit_ = value;
}
inline void VnicStatus::set_max_udp_session_limit_hit(bool value) {
  _internal_set_max_udp_session_limit_hit(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.max_udp_session_limit_hit)
}

// bool max_icmp_session_limit_hit = 16;
inline void VnicStatus::clear_max_icmp_session_limit_hit() {
  max_icmp_session_limit_hit_ = false;
}
inline bool VnicStatus::_internal_max_icmp_session_limit_hit() const {
  return max_icmp_session_limit_hit_;
}
inline bool VnicStatus::max_icmp_session_limit_hit() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.max_icmp_session_limit_hit)
  return _internal_max_icmp_session_limit_hit();
}
inline void VnicStatus::_internal_set_max_icmp_session_limit_hit(bool value) {
  
  max_icmp_session_limit_hit_ = value;
}
inline void VnicStatus::set_max_icmp_session_limit_hit(bool value) {
  _internal_set_max_icmp_session_limit_hit(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.max_icmp_session_limit_hit)
}

// bool max_other_session_limit_hit = 17;
inline void VnicStatus::clear_max_other_session_limit_hit() {
  max_other_session_limit_hit_ = false;
}
inline bool VnicStatus::_internal_max_other_session_limit_hit() const {
  return max_other_session_limit_hit_;
}
inline bool VnicStatus::max_other_session_limit_hit() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.max_other_session_limit_hit)
  return _internal_max_other_session_limit_hit();
}
inline void VnicStatus::_internal_set_max_other_session_limit_hit(bool value) {
  
  max_other_session_limit_hit_ = value;
}
inline void VnicStatus::set_max_other_session_limit_hit(bool value) {
  _internal_set_max_other_session_limit_hit(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.max_other_session_limit_hit)
}

// int32 hw_idx = 1;
inline void VnicStatus::clear_hw_idx() {
  hw_idx_ = 0;
}
inline int32_t VnicStatus::_internal_hw_idx() const {
  return hw_idx_;
}
inline int32_t VnicStatus::hw_idx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.hw_idx)
  return _internal_hw_idx();
}
inline void VnicStatus::_internal_set_hw_idx(int32_t value) {
  
  hw_idx_ = value;
}
inline void VnicStatus::set_hw_idx(int32_t value) {
  _internal_set_hw_idx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.hw_idx)
}

// int32 nexthop_hw_idx = 2;
inline void VnicStatus::clear_nexthop_hw_idx() {
  nexthop_hw_idx_ = 0;
}
inline int32_t VnicStatus::_internal_nexthop_hw_idx() const {
  return nexthop_hw_idx_;
}
inline int32_t VnicStatus::nexthop_hw_idx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.nexthop_hw_idx)
  return _internal_nexthop_hw_idx();
}
inline void VnicStatus::_internal_set_nexthop_hw_idx(int32_t value) {
  
  nexthop_hw_idx_ = value;
}
inline void VnicStatus::set_nexthop_hw_idx(int32_t value) {
  _internal_set_nexthop_hw_idx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.nexthop_hw_idx)
}

// int32 cps_copp_hw_idx = 10;
inline void VnicStatus::clear_cps_copp_hw_idx() {
  cps_copp_hw_idx_ = 0;
}
inline int32_t VnicStatus::_internal_cps_copp_hw_idx() const {
  return cps_copp_hw_idx_;
}
inline int32_t VnicStatus::cps_copp_hw_idx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.cps_copp_hw_idx)
  return _internal_cps_copp_hw_idx();
}
inline void VnicStatus::_internal_set_cps_copp_hw_idx(int32_t value) {
  
  cps_copp_hw_idx_ = value;
}
inline void VnicStatus::set_cps_copp_hw_idx(int32_t value) {
  _internal_set_cps_copp_hw_idx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.cps_copp_hw_idx)
}

// string secondary_vnic_name_ref = 11;
inline void VnicStatus::clear_secondary_vnic_name_ref() {
  secondary_vnic_name_ref_.ClearToEmpty();
}
inline const std::string& VnicStatus::secondary_vnic_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref)
  return _internal_secondary_vnic_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VnicStatus::set_secondary_vnic_name_ref(ArgT0&& arg0, ArgT... args) {
 
 secondary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref)
}
inline std::string* VnicStatus::mutable_secondary_vnic_name_ref() {
  std::string* _s = _internal_mutable_secondary_vnic_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref)
  return _s;
}
inline const std::string& VnicStatus::_internal_secondary_vnic_name_ref() const {
  return secondary_vnic_name_ref_.Get();
}
inline void VnicStatus::_internal_set_secondary_vnic_name_ref(const std::string& value) {
  
  secondary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VnicStatus::_internal_mutable_secondary_vnic_name_ref() {
  
  return secondary_vnic_name_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VnicStatus::release_secondary_vnic_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref)
  return secondary_vnic_name_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VnicStatus::set_allocated_secondary_vnic_name_ref(std::string* secondary_vnic_name_ref) {
  if (secondary_vnic_name_ref != nullptr) {
    
  } else {
    
  }
  secondary_vnic_name_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondary_vnic_name_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secondary_vnic_name_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secondary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vnic_2eproto
