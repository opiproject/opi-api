// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vnic.proto

#include "vnic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr Vnic::Vnic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , status_(nullptr){}
struct VnicDefaultTypeInternal {
  constexpr VnicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VnicDefaultTypeInternal() {}
  union {
    Vnic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VnicDefaultTypeInternal _Vnic_default_instance_;
constexpr VnicSpec::VnicSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ingress_v4_security_policy_name_ref_()
  , ingress_v6_security_policy_name_ref_()
  , egress_v4_security_policy_name_ref_()
  , egress_v6_security_policy_name_ref_()
  , subnet_name_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primary_vnic_name_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , v4_route_table_name_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , v6_route_table_name_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vnic_encap_(nullptr)
  , fabric_encap_(nullptr)
  , service_ip_(nullptr)
  , source_guard_enable_(false)
  , vnf_(false)
  , allow_internet_access_(false)
  , max_sessions_(0)
  , max_cps_(0)
  , cps_burst_(0)
  , max_tcp_sessions_(0)
  , max_udp_sessions_(0)
  , max_icmp_sessions_(0)
  , max_other_sessions_(0)
  , _oneof_case_{}{}
struct VnicSpecDefaultTypeInternal {
  constexpr VnicSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VnicSpecDefaultTypeInternal() {}
  union {
    VnicSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VnicSpecDefaultTypeInternal _VnicSpec_default_instance_;
constexpr VnicStatus::VnicStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secondary_vnic_name_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hw_idx_(0)
  , nexthop_hw_idx_(0)
  , max_other_session_limit_hit_(false)
  , cps_copp_hw_idx_(0)
  , max_session_limit_hit_(false)
  , max_tcp_session_limit_hit_(false)
  , max_udp_session_limit_hit_(false)
  , max_icmp_session_limit_hit_(false){}
struct VnicStatusDefaultTypeInternal {
  constexpr VnicStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VnicStatusDefaultTypeInternal() {}
  union {
    VnicStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VnicStatusDefaultTypeInternal _VnicStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vnic_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vnic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vnic_2eproto = nullptr;

const uint32_t TableStruct_vnic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vnic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vnic, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vnic, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vnic, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, subnet_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, vnic_encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, source_guard_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, fabric_encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, vnf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, ingress_v4_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, ingress_v6_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, egress_v4_security_policy_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, egress_v6_security_policy_name_ref_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_sessions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, public_mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, allow_internet_access_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_cps_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, cps_burst_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, primary_vnic_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, v4_route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, v6_route_table_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, service_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_tcp_sessions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_udp_sessions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_icmp_sessions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, max_other_sessions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicSpec, ifinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, max_session_limit_hit_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, max_tcp_session_limit_hit_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, max_udp_session_limit_hit_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, max_icmp_session_limit_hit_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, max_other_session_limit_hit_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, hw_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, nexthop_hw_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, cps_copp_hw_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VnicStatus, secondary_vnic_name_ref_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Vnic)},
  { 9, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VnicSpec)},
  { 41, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VnicStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Vnic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VnicSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VnicStatus_default_instance_),
};

const char descriptor_table_protodef_vnic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nvnic.proto\022\036opi_api.network.cloud.v1al"
  "pha1\032\022networktypes.proto\032\031google/api/res"
  "ource.proto\"\277\001\n\004Vnic\022\014\n\004name\030\001 \001(\t\0226\n\004sp"
  "ec\030\002 \001(\0132(.opi_api.network.cloud.v1alpha"
  "1.VnicSpec\022:\n\006status\030\003 \001(\0132*.opi_api.net"
  "work.cloud.v1alpha1.VnicStatus:5\352A2\n#opi"
  "_api.network.cloud.v1alpha1/vnic\022\013vnic/{"
  "vnic}\"\342\006\n\010VnicSpec\022\027\n\017subnet_name_ref\030\001 "
  "\001(\t\022@\n\nvnic_encap\030\002 \001(\0132,.opi_api.networ"
  "k.opinetcommon.v1alpha1.Encap\022\023\n\013mac_add"
  "ress\030\003 \001(\014\022\033\n\023source_guard_enable\030\004 \001(\010\022"
  "B\n\014fabric_encap\030\005 \001(\0132,.opi_api.network."
  "opinetcommon.v1alpha1.Encap\022\013\n\003vnf\030\006 \001(\010"
  "\022+\n#ingress_v4_security_policy_name_ref\030"
  "\007 \003(\t\022+\n#ingress_v6_security_policy_name"
  "_ref\030\010 \003(\t\022*\n\"egress_v4_security_policy_"
  "name_ref\030\t \003(\t\022*\n\"egress_v6_security_pol"
  "icy_name_ref\030\n \003(\t\022\032\n\020host_if_name_ref\030\013"
  " \001(\tH\000\022\031\n\017tunnel_name_ref\030\014 \001(\tH\000\022\024\n\014max"
  "_sessions\030\r \001(\005\022\032\n\022public_mac_address\030\016 "
  "\001(\014\022\035\n\025allow_internet_access\030\017 \001(\010\022\017\n\007ma"
  "x_cps\030\020 \001(\005\022\021\n\tcps_burst\030\021 \001(\005\022\035\n\025primar"
  "y_vnic_name_ref\030\022 \001(\t\022\037\n\027v4_route_table_"
  "name_ref\030\023 \001(\t\022\037\n\027v6_route_table_name_re"
  "f\030\024 \001(\t\022D\n\nservice_ip\030\025 \001(\01320.opi_api.ne"
  "twork.opinetcommon.v1alpha1.IPAddress\022\030\n"
  "\020max_tcp_sessions\030\026 \001(\005\022\030\n\020max_udp_sessi"
  "ons\030\027 \001(\005\022\031\n\021max_icmp_sessions\030\030 \001(\005\022\032\n\022"
  "max_other_sessions\030\031 \001(\005B\010\n\006ifinfo\"\234\002\n\nV"
  "nicStatus\022\035\n\025max_session_limit_hit\030\r \001(\010"
  "\022!\n\031max_tcp_session_limit_hit\030\016 \001(\010\022!\n\031m"
  "ax_udp_session_limit_hit\030\017 \001(\010\022\"\n\032max_ic"
  "mp_session_limit_hit\030\020 \001(\010\022#\n\033max_other_"
  "session_limit_hit\030\021 \001(\010\022\016\n\006hw_idx\030\001 \001(\005\022"
  "\026\n\016nexthop_hw_idx\030\002 \001(\005\022\027\n\017cps_copp_hw_i"
  "dx\030\n \001(\005\022\037\n\027secondary_vnic_name_ref\030\013 \001("
  "\tBj\n\036opi_api.network.cloud.v1alpha1B\tVni"
  "cProtoP\001Z;github.com/opiproject/opi-api/"
  "network/cloud/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vnic_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_networktypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vnic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vnic_2eproto = {
  false, false, 1557, descriptor_table_protodef_vnic_2eproto, "vnic.proto", 
  &descriptor_table_vnic_2eproto_once, descriptor_table_vnic_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_vnic_2eproto::offsets,
  file_level_metadata_vnic_2eproto, file_level_enum_descriptors_vnic_2eproto, file_level_service_descriptors_vnic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vnic_2eproto_getter() {
  return &descriptor_table_vnic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vnic_2eproto(&descriptor_table_vnic_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class Vnic::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::VnicSpec& spec(const Vnic* msg);
  static const ::opi_api::network::cloud::v1alpha1::VnicStatus& status(const Vnic* msg);
};

const ::opi_api::network::cloud::v1alpha1::VnicSpec&
Vnic::_Internal::spec(const Vnic* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::VnicStatus&
Vnic::_Internal::status(const Vnic* msg) {
  return *msg->status_;
}
Vnic::Vnic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Vnic)
}
Vnic::Vnic(const Vnic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::VnicSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::VnicStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Vnic)
}

inline void Vnic::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Vnic::~Vnic() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Vnic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vnic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Vnic::ArenaDtor(void* object) {
  Vnic* _this = reinterpret_cast< Vnic* >(object);
  (void)_this;
}
void Vnic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vnic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vnic::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Vnic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vnic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.Vnic.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VnicSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VnicStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vnic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Vnic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.Vnic.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.cloud.v1alpha1.VnicSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VnicStatus status = 3;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Vnic)
  return target;
}

size_t Vnic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Vnic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.cloud.v1alpha1.VnicSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.VnicStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vnic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vnic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vnic::GetClassData() const { return &_class_data_; }

void Vnic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vnic *>(to)->MergeFrom(
      static_cast<const Vnic &>(from));
}


void Vnic::MergeFrom(const Vnic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Vnic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::VnicSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::VnicStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vnic::CopyFrom(const Vnic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Vnic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vnic::IsInitialized() const {
  return true;
}

void Vnic::InternalSwap(Vnic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vnic, status_)
      + sizeof(Vnic::status_)
      - PROTOBUF_FIELD_OFFSET(Vnic, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vnic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnic_2eproto_getter, &descriptor_table_vnic_2eproto_once,
      file_level_metadata_vnic_2eproto[0]);
}

// ===================================================================

class VnicSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& vnic_encap(const VnicSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap(const VnicSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& service_ip(const VnicSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::Encap&
VnicSpec::_Internal::vnic_encap(const VnicSpec* msg) {
  return *msg->vnic_encap_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
VnicSpec::_Internal::fabric_encap(const VnicSpec* msg) {
  return *msg->fabric_encap_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
VnicSpec::_Internal::service_ip(const VnicSpec* msg) {
  return *msg->service_ip_;
}
void VnicSpec::clear_vnic_encap() {
  if (GetArenaForAllocation() == nullptr && vnic_encap_ != nullptr) {
    delete vnic_encap_;
  }
  vnic_encap_ = nullptr;
}
void VnicSpec::clear_fabric_encap() {
  if (GetArenaForAllocation() == nullptr && fabric_encap_ != nullptr) {
    delete fabric_encap_;
  }
  fabric_encap_ = nullptr;
}
void VnicSpec::clear_service_ip() {
  if (GetArenaForAllocation() == nullptr && service_ip_ != nullptr) {
    delete service_ip_;
  }
  service_ip_ = nullptr;
}
VnicSpec::VnicSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ingress_v4_security_policy_name_ref_(arena),
  ingress_v6_security_policy_name_ref_(arena),
  egress_v4_security_policy_name_ref_(arena),
  egress_v6_security_policy_name_ref_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VnicSpec)
}
VnicSpec::VnicSpec(const VnicSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ingress_v4_security_policy_name_ref_(from.ingress_v4_security_policy_name_ref_),
      ingress_v6_security_policy_name_ref_(from.ingress_v6_security_policy_name_ref_),
      egress_v4_security_policy_name_ref_(from.egress_v4_security_policy_name_ref_),
      egress_v6_security_policy_name_ref_(from.egress_v6_security_policy_name_ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subnet_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subnet_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subnet_name_ref().empty()) {
    subnet_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subnet_name_ref(), 
      GetArenaForAllocation());
  }
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  public_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_mac_address().empty()) {
    public_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_mac_address(), 
      GetArenaForAllocation());
  }
  primary_vnic_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_vnic_name_ref().empty()) {
    primary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_vnic_name_ref(), 
      GetArenaForAllocation());
  }
  v4_route_table_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    v4_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v4_route_table_name_ref().empty()) {
    v4_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v4_route_table_name_ref(), 
      GetArenaForAllocation());
  }
  v6_route_table_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    v6_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v6_route_table_name_ref().empty()) {
    v6_route_table_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v6_route_table_name_ref(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vnic_encap()) {
    vnic_encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.vnic_encap_);
  } else {
    vnic_encap_ = nullptr;
  }
  if (from._internal_has_fabric_encap()) {
    fabric_encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.fabric_encap_);
  } else {
    fabric_encap_ = nullptr;
  }
  if (from._internal_has_service_ip()) {
    service_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.service_ip_);
  } else {
    service_ip_ = nullptr;
  }
  ::memcpy(&source_guard_enable_, &from.source_guard_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_other_sessions_) -
    reinterpret_cast<char*>(&source_guard_enable_)) + sizeof(max_other_sessions_));
  clear_has_ifinfo();
  switch (from.ifinfo_case()) {
    case kHostIfNameRef: {
      _internal_set_host_if_name_ref(from._internal_host_if_name_ref());
      break;
    }
    case kTunnelNameRef: {
      _internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VnicSpec)
}

inline void VnicSpec::SharedCtor() {
subnet_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subnet_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
primary_vnic_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
v4_route_table_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  v4_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
v6_route_table_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  v6_route_table_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vnic_encap_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_other_sessions_) -
    reinterpret_cast<char*>(&vnic_encap_)) + sizeof(max_other_sessions_));
clear_has_ifinfo();
}

VnicSpec::~VnicSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VnicSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VnicSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subnet_name_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_vnic_name_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v4_route_table_name_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v6_route_table_name_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vnic_encap_;
  if (this != internal_default_instance()) delete fabric_encap_;
  if (this != internal_default_instance()) delete service_ip_;
  if (has_ifinfo()) {
    clear_ifinfo();
  }
}

void VnicSpec::ArenaDtor(void* object) {
  VnicSpec* _this = reinterpret_cast< VnicSpec* >(object);
  (void)_this;
}
void VnicSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VnicSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VnicSpec::clear_ifinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  switch (ifinfo_case()) {
    case kHostIfNameRef: {
      ifinfo_.host_if_name_ref_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kTunnelNameRef: {
      ifinfo_.tunnel_name_ref_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IFINFO_NOT_SET;
}


void VnicSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingress_v4_security_policy_name_ref_.Clear();
  ingress_v6_security_policy_name_ref_.Clear();
  egress_v4_security_policy_name_ref_.Clear();
  egress_v6_security_policy_name_ref_.Clear();
  subnet_name_ref_.ClearToEmpty();
  mac_address_.ClearToEmpty();
  public_mac_address_.ClearToEmpty();
  primary_vnic_name_ref_.ClearToEmpty();
  v4_route_table_name_ref_.ClearToEmpty();
  v6_route_table_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && vnic_encap_ != nullptr) {
    delete vnic_encap_;
  }
  vnic_encap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fabric_encap_ != nullptr) {
    delete fabric_encap_;
  }
  fabric_encap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ip_ != nullptr) {
    delete service_ip_;
  }
  service_ip_ = nullptr;
  ::memset(&source_guard_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_other_sessions_) -
      reinterpret_cast<char*>(&source_guard_enable_)) + sizeof(max_other_sessions_));
  clear_ifinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VnicSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subnet_name_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subnet_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnic_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool source_guard_enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          source_guard_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fabric_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool vnf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          vnf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ingress_v4_security_policy_name_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ingress_v4_security_policy_name_ref();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ingress_v6_security_policy_name_ref = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ingress_v6_security_policy_name_ref();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string egress_v4_security_policy_name_ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_egress_v4_security_policy_name_ref();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string egress_v6_security_policy_name_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_egress_v6_security_policy_name_ref();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string host_if_name_ref = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_host_if_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tunnel_name_ref = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tunnel_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_sessions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          max_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_mac_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_public_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_internet_access = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          allow_internet_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_cps = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          max_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cps_burst = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          cps_burst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string primary_vnic_name_ref = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_primary_vnic_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string v4_route_table_name_ref = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_v4_route_table_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string v6_route_table_name_ref = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_v6_route_table_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_tcp_sessions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          max_tcp_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_udp_sessions = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          max_udp_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_icmp_sessions = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          max_icmp_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_other_sessions = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          max_other_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VnicSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subnet_name_ref = 1;
  if (!this->_internal_subnet_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subnet_name_ref().data(), static_cast<int>(this->_internal_subnet_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.subnet_name_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subnet_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 2;
  if (this->_internal_has_vnic_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vnic_encap(this), target, stream);
  }

  // bytes mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mac_address(), target);
  }

  // bool source_guard_enable = 4;
  if (this->_internal_source_guard_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_source_guard_enable(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 5;
  if (this->_internal_has_fabric_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fabric_encap(this), target, stream);
  }

  // bool vnf = 6;
  if (this->_internal_vnf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vnf(), target);
  }

  // repeated string ingress_v4_security_policy_name_ref = 7;
  for (int i = 0, n = this->_internal_ingress_v4_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_ingress_v4_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v4_security_policy_name_ref");
    target = stream->WriteString(7, s, target);
  }

  // repeated string ingress_v6_security_policy_name_ref = 8;
  for (int i = 0, n = this->_internal_ingress_v6_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_ingress_v6_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.ingress_v6_security_policy_name_ref");
    target = stream->WriteString(8, s, target);
  }

  // repeated string egress_v4_security_policy_name_ref = 9;
  for (int i = 0, n = this->_internal_egress_v4_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_egress_v4_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.egress_v4_security_policy_name_ref");
    target = stream->WriteString(9, s, target);
  }

  // repeated string egress_v6_security_policy_name_ref = 10;
  for (int i = 0, n = this->_internal_egress_v6_security_policy_name_ref_size(); i < n; i++) {
    const auto& s = this->_internal_egress_v6_security_policy_name_ref(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.egress_v6_security_policy_name_ref");
    target = stream->WriteString(10, s, target);
  }

  // string host_if_name_ref = 11;
  if (_internal_has_host_if_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_if_name_ref().data(), static_cast<int>(this->_internal_host_if_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.host_if_name_ref");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_host_if_name_ref(), target);
  }

  // string tunnel_name_ref = 12;
  if (_internal_has_tunnel_name_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tunnel_name_ref().data(), static_cast<int>(this->_internal_tunnel_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.tunnel_name_ref");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tunnel_name_ref(), target);
  }

  // int32 max_sessions = 13;
  if (this->_internal_max_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_sessions(), target);
  }

  // bytes public_mac_address = 14;
  if (!this->_internal_public_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_public_mac_address(), target);
  }

  // bool allow_internet_access = 15;
  if (this->_internal_allow_internet_access() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_allow_internet_access(), target);
  }

  // int32 max_cps = 16;
  if (this->_internal_max_cps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_max_cps(), target);
  }

  // int32 cps_burst = 17;
  if (this->_internal_cps_burst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_cps_burst(), target);
  }

  // string primary_vnic_name_ref = 18;
  if (!this->_internal_primary_vnic_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_vnic_name_ref().data(), static_cast<int>(this->_internal_primary_vnic_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.primary_vnic_name_ref");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_primary_vnic_name_ref(), target);
  }

  // string v4_route_table_name_ref = 19;
  if (!this->_internal_v4_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v4_route_table_name_ref().data(), static_cast<int>(this->_internal_v4_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.v4_route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_v4_route_table_name_ref(), target);
  }

  // string v6_route_table_name_ref = 20;
  if (!this->_internal_v6_route_table_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v6_route_table_name_ref().data(), static_cast<int>(this->_internal_v6_route_table_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicSpec.v6_route_table_name_ref");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_v6_route_table_name_ref(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 21;
  if (this->_internal_has_service_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::service_ip(this), target, stream);
  }

  // int32 max_tcp_sessions = 22;
  if (this->_internal_max_tcp_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_max_tcp_sessions(), target);
  }

  // int32 max_udp_sessions = 23;
  if (this->_internal_max_udp_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_max_udp_sessions(), target);
  }

  // int32 max_icmp_sessions = 24;
  if (this->_internal_max_icmp_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_max_icmp_sessions(), target);
  }

  // int32 max_other_sessions = 25;
  if (this->_internal_max_other_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_max_other_sessions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VnicSpec)
  return target;
}

size_t VnicSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ingress_v4_security_policy_name_ref = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ingress_v4_security_policy_name_ref_.size());
  for (int i = 0, n = ingress_v4_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ingress_v4_security_policy_name_ref_.Get(i));
  }

  // repeated string ingress_v6_security_policy_name_ref = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ingress_v6_security_policy_name_ref_.size());
  for (int i = 0, n = ingress_v6_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ingress_v6_security_policy_name_ref_.Get(i));
  }

  // repeated string egress_v4_security_policy_name_ref = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(egress_v4_security_policy_name_ref_.size());
  for (int i = 0, n = egress_v4_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      egress_v4_security_policy_name_ref_.Get(i));
  }

  // repeated string egress_v6_security_policy_name_ref = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(egress_v6_security_policy_name_ref_.size());
  for (int i = 0, n = egress_v6_security_policy_name_ref_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      egress_v6_security_policy_name_ref_.Get(i));
  }

  // string subnet_name_ref = 1;
  if (!this->_internal_subnet_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subnet_name_ref());
  }

  // bytes mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // bytes public_mac_address = 14;
  if (!this->_internal_public_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_mac_address());
  }

  // string primary_vnic_name_ref = 18;
  if (!this->_internal_primary_vnic_name_ref().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_vnic_name_ref());
  }

  // string v4_route_table_name_ref = 19;
  if (!this->_internal_v4_route_table_name_ref().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v4_route_table_name_ref());
  }

  // string v6_route_table_name_ref = 20;
  if (!this->_internal_v6_route_table_name_ref().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v6_route_table_name_ref());
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 2;
  if (this->_internal_has_vnic_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vnic_encap_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 5;
  if (this->_internal_has_fabric_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fabric_encap_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 21;
  if (this->_internal_has_service_ip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_ip_);
  }

  // bool source_guard_enable = 4;
  if (this->_internal_source_guard_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool vnf = 6;
  if (this->_internal_vnf() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_internet_access = 15;
  if (this->_internal_allow_internet_access() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_sessions = 13;
  if (this->_internal_max_sessions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_sessions());
  }

  // int32 max_cps = 16;
  if (this->_internal_max_cps() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_cps());
  }

  // int32 cps_burst = 17;
  if (this->_internal_cps_burst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cps_burst());
  }

  // int32 max_tcp_sessions = 22;
  if (this->_internal_max_tcp_sessions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_tcp_sessions());
  }

  // int32 max_udp_sessions = 23;
  if (this->_internal_max_udp_sessions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_udp_sessions());
  }

  // int32 max_icmp_sessions = 24;
  if (this->_internal_max_icmp_sessions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_icmp_sessions());
  }

  // int32 max_other_sessions = 25;
  if (this->_internal_max_other_sessions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_other_sessions());
  }

  switch (ifinfo_case()) {
    // string host_if_name_ref = 11;
    case kHostIfNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_if_name_ref());
      break;
    }
    // string tunnel_name_ref = 12;
    case kTunnelNameRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tunnel_name_ref());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VnicSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VnicSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VnicSpec::GetClassData() const { return &_class_data_; }

void VnicSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VnicSpec *>(to)->MergeFrom(
      static_cast<const VnicSpec &>(from));
}


void VnicSpec::MergeFrom(const VnicSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ingress_v4_security_policy_name_ref_.MergeFrom(from.ingress_v4_security_policy_name_ref_);
  ingress_v6_security_policy_name_ref_.MergeFrom(from.ingress_v6_security_policy_name_ref_);
  egress_v4_security_policy_name_ref_.MergeFrom(from.egress_v4_security_policy_name_ref_);
  egress_v6_security_policy_name_ref_.MergeFrom(from.egress_v6_security_policy_name_ref_);
  if (!from._internal_subnet_name_ref().empty()) {
    _internal_set_subnet_name_ref(from._internal_subnet_name_ref());
  }
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_public_mac_address().empty()) {
    _internal_set_public_mac_address(from._internal_public_mac_address());
  }
  if (!from._internal_primary_vnic_name_ref().empty()) {
    _internal_set_primary_vnic_name_ref(from._internal_primary_vnic_name_ref());
  }
  if (!from._internal_v4_route_table_name_ref().empty()) {
    _internal_set_v4_route_table_name_ref(from._internal_v4_route_table_name_ref());
  }
  if (!from._internal_v6_route_table_name_ref().empty()) {
    _internal_set_v6_route_table_name_ref(from._internal_v6_route_table_name_ref());
  }
  if (from._internal_has_vnic_encap()) {
    _internal_mutable_vnic_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_vnic_encap());
  }
  if (from._internal_has_fabric_encap()) {
    _internal_mutable_fabric_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_fabric_encap());
  }
  if (from._internal_has_service_ip()) {
    _internal_mutable_service_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_service_ip());
  }
  if (from._internal_source_guard_enable() != 0) {
    _internal_set_source_guard_enable(from._internal_source_guard_enable());
  }
  if (from._internal_vnf() != 0) {
    _internal_set_vnf(from._internal_vnf());
  }
  if (from._internal_allow_internet_access() != 0) {
    _internal_set_allow_internet_access(from._internal_allow_internet_access());
  }
  if (from._internal_max_sessions() != 0) {
    _internal_set_max_sessions(from._internal_max_sessions());
  }
  if (from._internal_max_cps() != 0) {
    _internal_set_max_cps(from._internal_max_cps());
  }
  if (from._internal_cps_burst() != 0) {
    _internal_set_cps_burst(from._internal_cps_burst());
  }
  if (from._internal_max_tcp_sessions() != 0) {
    _internal_set_max_tcp_sessions(from._internal_max_tcp_sessions());
  }
  if (from._internal_max_udp_sessions() != 0) {
    _internal_set_max_udp_sessions(from._internal_max_udp_sessions());
  }
  if (from._internal_max_icmp_sessions() != 0) {
    _internal_set_max_icmp_sessions(from._internal_max_icmp_sessions());
  }
  if (from._internal_max_other_sessions() != 0) {
    _internal_set_max_other_sessions(from._internal_max_other_sessions());
  }
  switch (from.ifinfo_case()) {
    case kHostIfNameRef: {
      _internal_set_host_if_name_ref(from._internal_host_if_name_ref());
      break;
    }
    case kTunnelNameRef: {
      _internal_set_tunnel_name_ref(from._internal_tunnel_name_ref());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VnicSpec::CopyFrom(const VnicSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VnicSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VnicSpec::IsInitialized() const {
  return true;
}

void VnicSpec::InternalSwap(VnicSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ingress_v4_security_policy_name_ref_.InternalSwap(&other->ingress_v4_security_policy_name_ref_);
  ingress_v6_security_policy_name_ref_.InternalSwap(&other->ingress_v6_security_policy_name_ref_);
  egress_v4_security_policy_name_ref_.InternalSwap(&other->egress_v4_security_policy_name_ref_);
  egress_v6_security_policy_name_ref_.InternalSwap(&other->egress_v6_security_policy_name_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subnet_name_ref_, lhs_arena,
      &other->subnet_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_mac_address_, lhs_arena,
      &other->public_mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &primary_vnic_name_ref_, lhs_arena,
      &other->primary_vnic_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &v4_route_table_name_ref_, lhs_arena,
      &other->v4_route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &v6_route_table_name_ref_, lhs_arena,
      &other->v6_route_table_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VnicSpec, max_other_sessions_)
      + sizeof(VnicSpec::max_other_sessions_)
      - PROTOBUF_FIELD_OFFSET(VnicSpec, vnic_encap_)>(
          reinterpret_cast<char*>(&vnic_encap_),
          reinterpret_cast<char*>(&other->vnic_encap_));
  swap(ifinfo_, other->ifinfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VnicSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnic_2eproto_getter, &descriptor_table_vnic_2eproto_once,
      file_level_metadata_vnic_2eproto[1]);
}

// ===================================================================

class VnicStatus::_Internal {
 public:
};

VnicStatus::VnicStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VnicStatus)
}
VnicStatus::VnicStatus(const VnicStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secondary_vnic_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secondary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secondary_vnic_name_ref().empty()) {
    secondary_vnic_name_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondary_vnic_name_ref(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hw_idx_, &from.hw_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_icmp_session_limit_hit_) -
    reinterpret_cast<char*>(&hw_idx_)) + sizeof(max_icmp_session_limit_hit_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VnicStatus)
}

inline void VnicStatus::SharedCtor() {
secondary_vnic_name_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secondary_vnic_name_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hw_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_icmp_session_limit_hit_) -
    reinterpret_cast<char*>(&hw_idx_)) + sizeof(max_icmp_session_limit_hit_));
}

VnicStatus::~VnicStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VnicStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VnicStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secondary_vnic_name_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VnicStatus::ArenaDtor(void* object) {
  VnicStatus* _this = reinterpret_cast< VnicStatus* >(object);
  (void)_this;
}
void VnicStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VnicStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VnicStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VnicStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_vnic_name_ref_.ClearToEmpty();
  ::memset(&hw_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_icmp_session_limit_hit_) -
      reinterpret_cast<char*>(&hw_idx_)) + sizeof(max_icmp_session_limit_hit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VnicStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hw_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nexthop_hw_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nexthop_hw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cps_copp_hw_idx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          cps_copp_hw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secondary_vnic_name_ref = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_secondary_vnic_name_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool max_session_limit_hit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          max_session_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool max_tcp_session_limit_hit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          max_tcp_session_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool max_udp_session_limit_hit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          max_udp_session_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool max_icmp_session_limit_hit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          max_icmp_session_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool max_other_session_limit_hit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          max_other_session_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VnicStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VnicStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hw_idx = 1;
  if (this->_internal_hw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hw_idx(), target);
  }

  // int32 nexthop_hw_idx = 2;
  if (this->_internal_nexthop_hw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nexthop_hw_idx(), target);
  }

  // int32 cps_copp_hw_idx = 10;
  if (this->_internal_cps_copp_hw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cps_copp_hw_idx(), target);
  }

  // string secondary_vnic_name_ref = 11;
  if (!this->_internal_secondary_vnic_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary_vnic_name_ref().data(), static_cast<int>(this->_internal_secondary_vnic_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.VnicStatus.secondary_vnic_name_ref");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_secondary_vnic_name_ref(), target);
  }

  // bool max_session_limit_hit = 13;
  if (this->_internal_max_session_limit_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_max_session_limit_hit(), target);
  }

  // bool max_tcp_session_limit_hit = 14;
  if (this->_internal_max_tcp_session_limit_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_max_tcp_session_limit_hit(), target);
  }

  // bool max_udp_session_limit_hit = 15;
  if (this->_internal_max_udp_session_limit_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_max_udp_session_limit_hit(), target);
  }

  // bool max_icmp_session_limit_hit = 16;
  if (this->_internal_max_icmp_session_limit_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_max_icmp_session_limit_hit(), target);
  }

  // bool max_other_session_limit_hit = 17;
  if (this->_internal_max_other_session_limit_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_max_other_session_limit_hit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VnicStatus)
  return target;
}

size_t VnicStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VnicStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string secondary_vnic_name_ref = 11;
  if (!this->_internal_secondary_vnic_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary_vnic_name_ref());
  }

  // int32 hw_idx = 1;
  if (this->_internal_hw_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_idx());
  }

  // int32 nexthop_hw_idx = 2;
  if (this->_internal_nexthop_hw_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nexthop_hw_idx());
  }

  // bool max_other_session_limit_hit = 17;
  if (this->_internal_max_other_session_limit_hit() != 0) {
    total_size += 2 + 1;
  }

  // int32 cps_copp_hw_idx = 10;
  if (this->_internal_cps_copp_hw_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cps_copp_hw_idx());
  }

  // bool max_session_limit_hit = 13;
  if (this->_internal_max_session_limit_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool max_tcp_session_limit_hit = 14;
  if (this->_internal_max_tcp_session_limit_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool max_udp_session_limit_hit = 15;
  if (this->_internal_max_udp_session_limit_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool max_icmp_session_limit_hit = 16;
  if (this->_internal_max_icmp_session_limit_hit() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VnicStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VnicStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VnicStatus::GetClassData() const { return &_class_data_; }

void VnicStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VnicStatus *>(to)->MergeFrom(
      static_cast<const VnicStatus &>(from));
}


void VnicStatus::MergeFrom(const VnicStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VnicStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secondary_vnic_name_ref().empty()) {
    _internal_set_secondary_vnic_name_ref(from._internal_secondary_vnic_name_ref());
  }
  if (from._internal_hw_idx() != 0) {
    _internal_set_hw_idx(from._internal_hw_idx());
  }
  if (from._internal_nexthop_hw_idx() != 0) {
    _internal_set_nexthop_hw_idx(from._internal_nexthop_hw_idx());
  }
  if (from._internal_max_other_session_limit_hit() != 0) {
    _internal_set_max_other_session_limit_hit(from._internal_max_other_session_limit_hit());
  }
  if (from._internal_cps_copp_hw_idx() != 0) {
    _internal_set_cps_copp_hw_idx(from._internal_cps_copp_hw_idx());
  }
  if (from._internal_max_session_limit_hit() != 0) {
    _internal_set_max_session_limit_hit(from._internal_max_session_limit_hit());
  }
  if (from._internal_max_tcp_session_limit_hit() != 0) {
    _internal_set_max_tcp_session_limit_hit(from._internal_max_tcp_session_limit_hit());
  }
  if (from._internal_max_udp_session_limit_hit() != 0) {
    _internal_set_max_udp_session_limit_hit(from._internal_max_udp_session_limit_hit());
  }
  if (from._internal_max_icmp_session_limit_hit() != 0) {
    _internal_set_max_icmp_session_limit_hit(from._internal_max_icmp_session_limit_hit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VnicStatus::CopyFrom(const VnicStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VnicStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VnicStatus::IsInitialized() const {
  return true;
}

void VnicStatus::InternalSwap(VnicStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secondary_vnic_name_ref_, lhs_arena,
      &other->secondary_vnic_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VnicStatus, max_icmp_session_limit_hit_)
      + sizeof(VnicStatus::max_icmp_session_limit_hit_)
      - PROTOBUF_FIELD_OFFSET(VnicStatus, hw_idx_)>(
          reinterpret_cast<char*>(&hw_idx_),
          reinterpret_cast<char*>(&other->hw_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VnicStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnic_2eproto_getter, &descriptor_table_vnic_2eproto_once,
      file_level_metadata_vnic_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Vnic* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Vnic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Vnic >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VnicSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VnicSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VnicSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VnicStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VnicStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VnicStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
