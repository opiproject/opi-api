// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// device's network configuration

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cloudrpc.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudInfraService_GetDeviceCapabilities_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDeviceCapabilities"
	CloudInfraService_CreateDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateDevice"
	CloudInfraService_DeleteDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteDevice"
	CloudInfraService_UpdateDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateDevice"
	CloudInfraService_ListDevices_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListDevices"
	CloudInfraService_GetDevice_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDevice"
	CloudInfraService_UpdatePort_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdatePort"
	CloudInfraService_ListPorts_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListPorts"
	CloudInfraService_GetPort_FullMethodName               = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetPort"
	CloudInfraService_CreateVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVnic"
	CloudInfraService_DeleteVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVnic"
	CloudInfraService_UpdateVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVnic"
	CloudInfraService_ListVnics_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVnics"
	CloudInfraService_GetVnic_FullMethodName               = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVnic"
	CloudInfraService_CreateInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateInterface"
	CloudInfraService_DeleteInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteInterface"
	CloudInfraService_UpdateInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateInterface"
	CloudInfraService_ListInterfaces_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListInterfaces"
	CloudInfraService_GetInterface_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetInterface"
	CloudInfraService_CreateRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRouteTable"
	CloudInfraService_DeleteRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRouteTable"
	CloudInfraService_UpdateRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRouteTable"
	CloudInfraService_ListRouteTables_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRouteTables"
	CloudInfraService_GetRouteTable_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRouteTable"
	CloudInfraService_CreateRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRoute"
	CloudInfraService_DeleteRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRoute"
	CloudInfraService_UpdateRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRoute"
	CloudInfraService_ListRoutes_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRoutes"
	CloudInfraService_GetRoute_FullMethodName              = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRoute"
	CloudInfraService_CreateUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateUnderlayRoute"
	CloudInfraService_DeleteUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteUnderlayRoute"
	CloudInfraService_UpdateUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateUnderlayRoute"
	CloudInfraService_ListUnderlayRoutes_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListUnderlayRoutes"
	CloudInfraService_GetUnderlayRoute_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetUnderlayRoute"
	CloudInfraService_CreateBgp_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgp"
	CloudInfraService_DeleteBgp_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgp"
	CloudInfraService_UpdateBgp_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgp"
	CloudInfraService_ListBgps_FullMethodName              = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgps"
	CloudInfraService_GetBgp_FullMethodName                = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgp"
	CloudInfraService_CreateBGPPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeer"
	CloudInfraService_DeleteBGPPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeer"
	CloudInfraService_UpdateBGPPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeer"
	CloudInfraService_ListBGPPeers_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeers"
	CloudInfraService_GetBGPPeer_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeer"
	CloudInfraService_CreateBGPPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeerAf"
	CloudInfraService_DeleteBGPPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeerAf"
	CloudInfraService_UpdateBGPPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeerAf"
	CloudInfraService_ListBGPPeerAfs_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeerAfs"
	CloudInfraService_GetBGPPeerAf_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeerAf"
	CloudInfraService_CreateMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateMapping"
	CloudInfraService_DeleteMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteMapping"
	CloudInfraService_UpdateMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateMapping"
	CloudInfraService_ListMappings_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListMappings"
	CloudInfraService_GetMapping_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetMapping"
	CloudInfraService_CreateNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHop"
	CloudInfraService_DeleteNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHop"
	CloudInfraService_UpdateNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHop"
	CloudInfraService_ListNextHop_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHop"
	CloudInfraService_GetNextHop_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHop"
	CloudInfraService_CreateNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHopGroup"
	CloudInfraService_DeleteNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHopGroup"
	CloudInfraService_UpdateNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHopGroup"
	CloudInfraService_ListNextHopGroups_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHopGroups"
	CloudInfraService_GetNextHopGroup_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHopGroup"
	CloudInfraService_CreateSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSubnet"
	CloudInfraService_DeleteSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSubnet"
	CloudInfraService_UpdateSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSubnet"
	CloudInfraService_ListSubnets_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSubnets"
	CloudInfraService_GetSubnet_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSubnet"
	CloudInfraService_CreateTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateTunnel"
	CloudInfraService_DeleteTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteTunnel"
	CloudInfraService_UpdateTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateTunnel"
	CloudInfraService_ListTunnels_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListTunnels"
	CloudInfraService_GetTunnel_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetTunnel"
	CloudInfraService_CreateVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVpc"
	CloudInfraService_DeleteVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVpc"
	CloudInfraService_UpdateVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVpc"
	CloudInfraService_ListVpcs_FullMethodName              = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVpcs"
	CloudInfraService_GetVpc_FullMethodName                = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVpc"
	CloudInfraService_CreateVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVPCPeer"
	CloudInfraService_DeleteVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVPCPeer"
	CloudInfraService_UpdateVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVPCPeer"
	CloudInfraService_ListVPCPeers_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVPCPeers"
	CloudInfraService_GetVPCPeer_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVPCPeer"
	CloudInfraService_CreateSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityPolicy"
	CloudInfraService_DeleteSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityPolicy"
	CloudInfraService_UpdateSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityPolicy"
	CloudInfraService_ListSecurityPolicys_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityPolicys"
	CloudInfraService_GetSecurityPolicy_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityPolicy"
	CloudInfraService_CreateSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityRule"
	CloudInfraService_DeleteSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityRule"
	CloudInfraService_UpdateSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityRule"
	CloudInfraService_ListSecurityRules_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityRules"
	CloudInfraService_GetSecurityRule_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityRule"
	CloudInfraService_CreateSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityProfile"
	CloudInfraService_DeleteSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityProfile"
	CloudInfraService_UpdateSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityProfile"
	CloudInfraService_ListSecurityProfiles_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityProfiles"
	CloudInfraService_GetSecurityProfile_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityProfile"
)

// CloudInfraServiceClient is the client API for CloudInfraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudInfraServiceClient interface {
	// device capabilities
	GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// port apis
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error)
	ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
	// vnic apis
	CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error)
	GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	// interface apis
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	// routetable apis
	CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	// route apis
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgp(ctx context.Context, in *CreateBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	DeleteBgp(ctx context.Context, in *DeleteBgpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBgp(ctx context.Context, in *UpdateBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	ListBgps(ctx context.Context, in *ListBgpsRequest, opts ...grpc.CallOption) (*ListBgpsResponse, error)
	GetBgp(ctx context.Context, in *GetBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	// bgppeer (optional) apis
	CreateBGPPeer(ctx context.Context, in *CreateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	DeleteBGPPeer(ctx context.Context, in *DeleteBGPPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBGPPeer(ctx context.Context, in *UpdateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	ListBGPPeers(ctx context.Context, in *ListBGPPeersRequest, opts ...grpc.CallOption) (*ListBGPPeersResponse, error)
	GetBGPPeer(ctx context.Context, in *GetBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	// bgppeeraf (optional) apis
	CreateBGPPeerAf(ctx context.Context, in *CreateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	DeleteBGPPeerAf(ctx context.Context, in *DeleteBGPPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBGPPeerAf(ctx context.Context, in *UpdateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	ListBGPPeerAfs(ctx context.Context, in *ListBGPPeerAfsRequest, opts ...grpc.CallOption) (*ListBGPPeerAfsResponse, error)
	GetBGPPeerAf(ctx context.Context, in *GetBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	// mapping apis
	CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error)
	GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	// nexthop apis
	CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	ListNextHop(ctx context.Context, in *ListNextHopRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error)
	GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// tunnel apis
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	// vpc apis
	CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error)
	GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error)
	GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error)
	GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
}

type cloudInfraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudInfraServiceClient(cc grpc.ClientConnInterface) CloudInfraServiceClient {
	return &cloudInfraServiceClient{cc}
}

func (c *cloudInfraServiceClient) GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error) {
	out := new(DeviceCapabilities)
	err := c.cc.Invoke(ctx, CloudInfraService_GetDeviceCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdatePort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error) {
	out := new(ListPortsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListPorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, CloudInfraService_GetPort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVnic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVnic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVnic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error) {
	out := new(ListVnicsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVnics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVnic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListInterfaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_GetInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListRouteTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_GetRouteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateUnderlayRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteUnderlayRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateUnderlayRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error) {
	out := new(ListUnderlayRoutesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListUnderlayRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_GetUnderlayRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBgp(ctx context.Context, in *CreateBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBgp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBgp(ctx context.Context, in *DeleteBgpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBgp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBgp(ctx context.Context, in *UpdateBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBgp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBgps(ctx context.Context, in *ListBgpsRequest, opts ...grpc.CallOption) (*ListBgpsResponse, error) {
	out := new(ListBgpsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBgps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBgp(ctx context.Context, in *GetBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBgp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBGPPeer(ctx context.Context, in *CreateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBGPPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBGPPeer(ctx context.Context, in *DeleteBGPPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBGPPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBGPPeer(ctx context.Context, in *UpdateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBGPPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBGPPeers(ctx context.Context, in *ListBGPPeersRequest, opts ...grpc.CallOption) (*ListBGPPeersResponse, error) {
	out := new(ListBGPPeersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBGPPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBGPPeer(ctx context.Context, in *GetBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBGPPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBGPPeerAf(ctx context.Context, in *CreateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBGPPeerAf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBGPPeerAf(ctx context.Context, in *DeleteBGPPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBGPPeerAf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBGPPeerAf(ctx context.Context, in *UpdateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBGPPeerAf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBGPPeerAfs(ctx context.Context, in *ListBGPPeerAfsRequest, opts ...grpc.CallOption) (*ListBGPPeerAfsResponse, error) {
	out := new(ListBGPPeerAfsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBGPPeerAfs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBGPPeerAf(ctx context.Context, in *GetBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBGPPeerAf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error) {
	out := new(ListMappingsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_GetMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateNextHop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteNextHop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateNextHop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHop(ctx context.Context, in *ListNextHopRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error) {
	out := new(ListNextHopsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListNextHop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_GetNextHop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateNextHopGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteNextHopGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateNextHopGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error) {
	out := new(ListNextHopGroupsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListNextHopGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_GetNextHopGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSubnets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error) {
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListTunnels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_GetTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error) {
	out := new(ListVpcsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVpcs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVPCPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVPCPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVPCPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error) {
	out := new(ListVPCPeersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVPCPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVPCPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error) {
	out := new(ListSecurityPolicysResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityPolicys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error) {
	out := new(ListSecurityRulesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error) {
	out := new(ListSecurityProfilesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudInfraServiceServer is the server API for CloudInfraService service.
// All implementations must embed UnimplementedCloudInfraServiceServer
// for forward compatibility
type CloudInfraServiceServer interface {
	// device capabilities
	GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// port apis
	UpdatePort(context.Context, *UpdatePortRequest) (*Port, error)
	ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error)
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	// vnic apis
	CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error)
	DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error)
	UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error)
	ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error)
	GetVnic(context.Context, *GetVnicRequest) (*Vnic, error)
	// interface apis
	CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error)
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error)
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error)
	// routetable apis
	CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error)
	DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error)
	UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error)
	ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error)
	// route apis
	CreateRoute(context.Context, *CreateRouteRequest) (*Route, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error)
	UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error)
	DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error)
	UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error)
	ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgp(context.Context, *CreateBgpRequest) (*Bgp, error)
	DeleteBgp(context.Context, *DeleteBgpRequest) (*emptypb.Empty, error)
	UpdateBgp(context.Context, *UpdateBgpRequest) (*Bgp, error)
	ListBgps(context.Context, *ListBgpsRequest) (*ListBgpsResponse, error)
	GetBgp(context.Context, *GetBgpRequest) (*Bgp, error)
	// bgppeer (optional) apis
	CreateBGPPeer(context.Context, *CreateBGPPeerRequest) (*BGPPeer, error)
	DeleteBGPPeer(context.Context, *DeleteBGPPeerRequest) (*emptypb.Empty, error)
	UpdateBGPPeer(context.Context, *UpdateBGPPeerRequest) (*BGPPeer, error)
	ListBGPPeers(context.Context, *ListBGPPeersRequest) (*ListBGPPeersResponse, error)
	GetBGPPeer(context.Context, *GetBGPPeerRequest) (*BGPPeer, error)
	// bgppeeraf (optional) apis
	CreateBGPPeerAf(context.Context, *CreateBGPPeerAfRequest) (*BGPPeerAf, error)
	DeleteBGPPeerAf(context.Context, *DeleteBGPPeerAfRequest) (*emptypb.Empty, error)
	UpdateBGPPeerAf(context.Context, *UpdateBGPPeerAfRequest) (*BGPPeerAf, error)
	ListBGPPeerAfs(context.Context, *ListBGPPeerAfsRequest) (*ListBGPPeerAfsResponse, error)
	GetBGPPeerAf(context.Context, *GetBGPPeerAfRequest) (*BGPPeerAf, error)
	// mapping apis
	CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error)
	DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error)
	UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error)
	ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error)
	GetMapping(context.Context, *GetMappingRequest) (*Mapping, error)
	// nexthop apis
	CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error)
	DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error)
	UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error)
	ListNextHop(context.Context, *ListNextHopRequest) (*ListNextHopsResponse, error)
	GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error)
	DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error)
	UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error)
	ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error)
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error)
	// tunnel apis
	CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error)
	ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error)
	// vpc apis
	CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error)
	DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error)
	UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error)
	ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error)
	GetVpc(context.Context, *GetVpcRequest) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error)
	DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error)
	UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error)
	ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error)
	GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error)
	DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error)
	UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error)
	ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error)
	DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error)
	UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error)
	ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error)
	GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error)
	DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error)
	UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error)
	ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error)
	mustEmbedUnimplementedCloudInfraServiceServer()
}

// UnimplementedCloudInfraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudInfraServiceServer struct {
}

func (UnimplementedCloudInfraServiceServer) GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCapabilities not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVnics not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVnic(context.Context, *GetVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteTables not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetRoute(context.Context, *GetRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnderlayRoutes not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBgp(context.Context, *CreateBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgp not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBgp(context.Context, *DeleteBgpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgp not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBgp(context.Context, *UpdateBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgp not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBgps(context.Context, *ListBgpsRequest) (*ListBgpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBgps not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBgp(context.Context, *GetBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgp not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBGPPeer(context.Context, *CreateBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBGPPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBGPPeer(context.Context, *DeleteBGPPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBGPPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBGPPeer(context.Context, *UpdateBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBGPPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBGPPeers(context.Context, *ListBGPPeersRequest) (*ListBGPPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBGPPeers not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBGPPeer(context.Context, *GetBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBGPPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBGPPeerAf(context.Context, *CreateBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBGPPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBGPPeerAf(context.Context, *DeleteBGPPeerAfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBGPPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBGPPeerAf(context.Context, *UpdateBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBGPPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBGPPeerAfs(context.Context, *ListBGPPeerAfsRequest) (*ListBGPPeerAfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBGPPeerAfs not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBGPPeerAf(context.Context, *GetBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBGPPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappings not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetMapping(context.Context, *GetMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListNextHop(context.Context, *ListNextHopRequest) (*ListNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHopGroups not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnels not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpcs not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVpc(context.Context, *GetVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCPeers not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityPolicys not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityRules not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityProfiles not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) mustEmbedUnimplementedCloudInfraServiceServer() {}

// UnsafeCloudInfraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudInfraServiceServer will
// result in compilation errors.
type UnsafeCloudInfraServiceServer interface {
	mustEmbedUnimplementedCloudInfraServiceServer()
}

func RegisterCloudInfraServiceServer(s grpc.ServiceRegistrar, srv CloudInfraServiceServer) {
	s.RegisterService(&CloudInfraService_ServiceDesc, srv)
}

func _CloudInfraService_GetDeviceCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetDeviceCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, req.(*GetDeviceCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, req.(*ListPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, req.(*CreateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, req.(*DeleteVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, req.(*UpdateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVnics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVnicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVnics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, req.(*ListVnicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, req.(*GetVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, req.(*DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, req.(*UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListRouteTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, req.(*GetRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, req.(*UpdateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, req.(*CreateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, req.(*DeleteUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, req.(*UpdateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListUnderlayRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnderlayRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListUnderlayRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, req.(*ListUnderlayRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, req.(*GetUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBgp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBgp(ctx, req.(*CreateBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBgp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBgp(ctx, req.(*DeleteBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBgp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBgp(ctx, req.(*UpdateBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBgps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBgpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBgps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBgps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBgps(ctx, req.(*ListBgpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBgp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBgp(ctx, req.(*GetBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBGPPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBGPPeer(ctx, req.(*CreateBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBGPPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBGPPeer(ctx, req.(*DeleteBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBGPPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBGPPeer(ctx, req.(*UpdateBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBGPPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBGPPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBGPPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBGPPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBGPPeers(ctx, req.(*ListBGPPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBGPPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBGPPeer(ctx, req.(*GetBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBGPPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBGPPeerAf(ctx, req.(*CreateBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBGPPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBGPPeerAf(ctx, req.(*DeleteBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBGPPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBGPPeerAf(ctx, req.(*UpdateBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBGPPeerAfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBGPPeerAfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBGPPeerAfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBGPPeerAfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBGPPeerAfs(ctx, req.(*ListBGPPeerAfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBGPPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBGPPeerAf(ctx, req.(*GetBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, req.(*CreateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, req.(*UpdateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, req.(*ListMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, req.(*GetMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, req.(*CreateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, req.(*DeleteNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, req.(*UpdateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, req.(*ListNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, req.(*GetNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, req.(*CreateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, req.(*DeleteNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, req.(*UpdateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListNextHopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, req.(*ListNextHopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, req.(*GetNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, req.(*ListTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, req.(*CreateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, req.(*DeleteVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, req.(*UpdateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVpcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, req.(*ListVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, req.(*GetVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, req.(*CreateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, req.(*DeleteVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, req.(*UpdateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVPCPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVPCPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, req.(*ListVPCPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, req.(*GetVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, req.(*CreateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, req.(*DeleteSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, req.(*UpdateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityPolicys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityPolicysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityPolicys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, req.(*ListSecurityPolicysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, req.(*GetSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, req.(*CreateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, req.(*DeleteSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, req.(*UpdateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, req.(*ListSecurityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, req.(*GetSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, req.(*CreateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, req.(*DeleteSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, req.(*UpdateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, req.(*ListSecurityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, req.(*GetSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudInfraService_ServiceDesc is the grpc.ServiceDesc for CloudInfraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudInfraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.cloud.v1alpha1.CloudInfraService",
	HandlerType: (*CloudInfraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceCapabilities",
			Handler:    _CloudInfraService_GetDeviceCapabilities_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _CloudInfraService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _CloudInfraService_DeleteDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _CloudInfraService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _CloudInfraService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _CloudInfraService_GetDevice_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _CloudInfraService_UpdatePort_Handler,
		},
		{
			MethodName: "ListPorts",
			Handler:    _CloudInfraService_ListPorts_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _CloudInfraService_GetPort_Handler,
		},
		{
			MethodName: "CreateVnic",
			Handler:    _CloudInfraService_CreateVnic_Handler,
		},
		{
			MethodName: "DeleteVnic",
			Handler:    _CloudInfraService_DeleteVnic_Handler,
		},
		{
			MethodName: "UpdateVnic",
			Handler:    _CloudInfraService_UpdateVnic_Handler,
		},
		{
			MethodName: "ListVnics",
			Handler:    _CloudInfraService_ListVnics_Handler,
		},
		{
			MethodName: "GetVnic",
			Handler:    _CloudInfraService_GetVnic_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _CloudInfraService_CreateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _CloudInfraService_DeleteInterface_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _CloudInfraService_UpdateInterface_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _CloudInfraService_ListInterfaces_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _CloudInfraService_GetInterface_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _CloudInfraService_CreateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _CloudInfraService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "UpdateRouteTable",
			Handler:    _CloudInfraService_UpdateRouteTable_Handler,
		},
		{
			MethodName: "ListRouteTables",
			Handler:    _CloudInfraService_ListRouteTables_Handler,
		},
		{
			MethodName: "GetRouteTable",
			Handler:    _CloudInfraService_GetRouteTable_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _CloudInfraService_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _CloudInfraService_DeleteRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _CloudInfraService_UpdateRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _CloudInfraService_ListRoutes_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _CloudInfraService_GetRoute_Handler,
		},
		{
			MethodName: "CreateUnderlayRoute",
			Handler:    _CloudInfraService_CreateUnderlayRoute_Handler,
		},
		{
			MethodName: "DeleteUnderlayRoute",
			Handler:    _CloudInfraService_DeleteUnderlayRoute_Handler,
		},
		{
			MethodName: "UpdateUnderlayRoute",
			Handler:    _CloudInfraService_UpdateUnderlayRoute_Handler,
		},
		{
			MethodName: "ListUnderlayRoutes",
			Handler:    _CloudInfraService_ListUnderlayRoutes_Handler,
		},
		{
			MethodName: "GetUnderlayRoute",
			Handler:    _CloudInfraService_GetUnderlayRoute_Handler,
		},
		{
			MethodName: "CreateBgp",
			Handler:    _CloudInfraService_CreateBgp_Handler,
		},
		{
			MethodName: "DeleteBgp",
			Handler:    _CloudInfraService_DeleteBgp_Handler,
		},
		{
			MethodName: "UpdateBgp",
			Handler:    _CloudInfraService_UpdateBgp_Handler,
		},
		{
			MethodName: "ListBgps",
			Handler:    _CloudInfraService_ListBgps_Handler,
		},
		{
			MethodName: "GetBgp",
			Handler:    _CloudInfraService_GetBgp_Handler,
		},
		{
			MethodName: "CreateBGPPeer",
			Handler:    _CloudInfraService_CreateBGPPeer_Handler,
		},
		{
			MethodName: "DeleteBGPPeer",
			Handler:    _CloudInfraService_DeleteBGPPeer_Handler,
		},
		{
			MethodName: "UpdateBGPPeer",
			Handler:    _CloudInfraService_UpdateBGPPeer_Handler,
		},
		{
			MethodName: "ListBGPPeers",
			Handler:    _CloudInfraService_ListBGPPeers_Handler,
		},
		{
			MethodName: "GetBGPPeer",
			Handler:    _CloudInfraService_GetBGPPeer_Handler,
		},
		{
			MethodName: "CreateBGPPeerAf",
			Handler:    _CloudInfraService_CreateBGPPeerAf_Handler,
		},
		{
			MethodName: "DeleteBGPPeerAf",
			Handler:    _CloudInfraService_DeleteBGPPeerAf_Handler,
		},
		{
			MethodName: "UpdateBGPPeerAf",
			Handler:    _CloudInfraService_UpdateBGPPeerAf_Handler,
		},
		{
			MethodName: "ListBGPPeerAfs",
			Handler:    _CloudInfraService_ListBGPPeerAfs_Handler,
		},
		{
			MethodName: "GetBGPPeerAf",
			Handler:    _CloudInfraService_GetBGPPeerAf_Handler,
		},
		{
			MethodName: "CreateMapping",
			Handler:    _CloudInfraService_CreateMapping_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _CloudInfraService_DeleteMapping_Handler,
		},
		{
			MethodName: "UpdateMapping",
			Handler:    _CloudInfraService_UpdateMapping_Handler,
		},
		{
			MethodName: "ListMappings",
			Handler:    _CloudInfraService_ListMappings_Handler,
		},
		{
			MethodName: "GetMapping",
			Handler:    _CloudInfraService_GetMapping_Handler,
		},
		{
			MethodName: "CreateNextHop",
			Handler:    _CloudInfraService_CreateNextHop_Handler,
		},
		{
			MethodName: "DeleteNextHop",
			Handler:    _CloudInfraService_DeleteNextHop_Handler,
		},
		{
			MethodName: "UpdateNextHop",
			Handler:    _CloudInfraService_UpdateNextHop_Handler,
		},
		{
			MethodName: "ListNextHop",
			Handler:    _CloudInfraService_ListNextHop_Handler,
		},
		{
			MethodName: "GetNextHop",
			Handler:    _CloudInfraService_GetNextHop_Handler,
		},
		{
			MethodName: "CreateNextHopGroup",
			Handler:    _CloudInfraService_CreateNextHopGroup_Handler,
		},
		{
			MethodName: "DeleteNextHopGroup",
			Handler:    _CloudInfraService_DeleteNextHopGroup_Handler,
		},
		{
			MethodName: "UpdateNextHopGroup",
			Handler:    _CloudInfraService_UpdateNextHopGroup_Handler,
		},
		{
			MethodName: "ListNextHopGroups",
			Handler:    _CloudInfraService_ListNextHopGroups_Handler,
		},
		{
			MethodName: "GetNextHopGroup",
			Handler:    _CloudInfraService_GetNextHopGroup_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _CloudInfraService_CreateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _CloudInfraService_DeleteSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _CloudInfraService_UpdateSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _CloudInfraService_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _CloudInfraService_GetSubnet_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _CloudInfraService_CreateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _CloudInfraService_DeleteTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _CloudInfraService_UpdateTunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _CloudInfraService_ListTunnels_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _CloudInfraService_GetTunnel_Handler,
		},
		{
			MethodName: "CreateVpc",
			Handler:    _CloudInfraService_CreateVpc_Handler,
		},
		{
			MethodName: "DeleteVpc",
			Handler:    _CloudInfraService_DeleteVpc_Handler,
		},
		{
			MethodName: "UpdateVpc",
			Handler:    _CloudInfraService_UpdateVpc_Handler,
		},
		{
			MethodName: "ListVpcs",
			Handler:    _CloudInfraService_ListVpcs_Handler,
		},
		{
			MethodName: "GetVpc",
			Handler:    _CloudInfraService_GetVpc_Handler,
		},
		{
			MethodName: "CreateVPCPeer",
			Handler:    _CloudInfraService_CreateVPCPeer_Handler,
		},
		{
			MethodName: "DeleteVPCPeer",
			Handler:    _CloudInfraService_DeleteVPCPeer_Handler,
		},
		{
			MethodName: "UpdateVPCPeer",
			Handler:    _CloudInfraService_UpdateVPCPeer_Handler,
		},
		{
			MethodName: "ListVPCPeers",
			Handler:    _CloudInfraService_ListVPCPeers_Handler,
		},
		{
			MethodName: "GetVPCPeer",
			Handler:    _CloudInfraService_GetVPCPeer_Handler,
		},
		{
			MethodName: "CreateSecurityPolicy",
			Handler:    _CloudInfraService_CreateSecurityPolicy_Handler,
		},
		{
			MethodName: "DeleteSecurityPolicy",
			Handler:    _CloudInfraService_DeleteSecurityPolicy_Handler,
		},
		{
			MethodName: "UpdateSecurityPolicy",
			Handler:    _CloudInfraService_UpdateSecurityPolicy_Handler,
		},
		{
			MethodName: "ListSecurityPolicys",
			Handler:    _CloudInfraService_ListSecurityPolicys_Handler,
		},
		{
			MethodName: "GetSecurityPolicy",
			Handler:    _CloudInfraService_GetSecurityPolicy_Handler,
		},
		{
			MethodName: "CreateSecurityRule",
			Handler:    _CloudInfraService_CreateSecurityRule_Handler,
		},
		{
			MethodName: "DeleteSecurityRule",
			Handler:    _CloudInfraService_DeleteSecurityRule_Handler,
		},
		{
			MethodName: "UpdateSecurityRule",
			Handler:    _CloudInfraService_UpdateSecurityRule_Handler,
		},
		{
			MethodName: "ListSecurityRules",
			Handler:    _CloudInfraService_ListSecurityRules_Handler,
		},
		{
			MethodName: "GetSecurityRule",
			Handler:    _CloudInfraService_GetSecurityRule_Handler,
		},
		{
			MethodName: "CreateSecurityProfile",
			Handler:    _CloudInfraService_CreateSecurityProfile_Handler,
		},
		{
			MethodName: "DeleteSecurityProfile",
			Handler:    _CloudInfraService_DeleteSecurityProfile_Handler,
		},
		{
			MethodName: "UpdateSecurityProfile",
			Handler:    _CloudInfraService_UpdateSecurityProfile_Handler,
		},
		{
			MethodName: "ListSecurityProfiles",
			Handler:    _CloudInfraService_ListSecurityProfiles_Handler,
		},
		{
			MethodName: "GetSecurityProfile",
			Handler:    _CloudInfraService_GetSecurityProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudrpc.proto",
}
