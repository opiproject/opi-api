// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subnet.proto

package opi_api.network.cloud.v1alpha1;

/**
 * <pre>
 * SubnetSpec captures subnet specific configuration
 * </pre>
 *
 * Protobuf type {@code opi_api.network.cloud.v1alpha1.SubnetSpec}
 */
public final class SubnetSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opi_api.network.cloud.v1alpha1.SubnetSpec)
    SubnetSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SubnetSpec.newBuilder() to construct.
  private SubnetSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SubnetSpec() {
    vpcNameRef_ = "";
    ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;
    virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;
    v4RouteTableNameRef_ = "";
    v6RouteTableNameRef_ = "";
    ingessV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    ingressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    egressV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    egressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    hostInterfaceNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    ingressDefaultSgPolicyNameRef_ = "";
    egressDefaultSgPolicyNameRef_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SubnetSpec();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SubnetSpec(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            vpcNameRef_ = s;
            break;
          }
          case 18: {
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder subBuilder = null;
            if (v4Prefix_ != null) {
              subBuilder = v4Prefix_.toBuilder();
            }
            v4Prefix_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v4Prefix_);
              v4Prefix_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder subBuilder = null;
            if (v6Prefix_ != null) {
              subBuilder = v6Prefix_.toBuilder();
            }
            v6Prefix_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v6Prefix_);
              v6Prefix_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            ipv4VirtualRouterIp_ = input.readUInt32();
            break;
          }
          case 42: {

            ipv6VirtualRouterIp_ = input.readBytes();
            break;
          }
          case 50: {

            virtualRouterMac_ = input.readBytes();
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();

            v4RouteTableNameRef_ = s;
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            v6RouteTableNameRef_ = s;
            break;
          }
          case 74: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              ingessV4SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            ingessV4SecurityPolicyNameRef_.add(s);
            break;
          }
          case 82: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              ingressV6SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            ingressV6SecurityPolicyNameRef_.add(s);
            break;
          }
          case 90: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              egressV4SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            egressV4SecurityPolicyNameRef_.add(s);
            break;
          }
          case 98: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              egressV6SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000008;
            }
            egressV6SecurityPolicyNameRef_.add(s);
            break;
          }
          case 106: {
            opi_api.network.opinetcommon.v1alpha1.Encap.Builder subBuilder = null;
            if (accessEncap_ != null) {
              subBuilder = accessEncap_.toBuilder();
            }
            accessEncap_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.Encap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(accessEncap_);
              accessEncap_ = subBuilder.buildPartial();
            }

            break;
          }
          case 114: {
            opi_api.network.opinetcommon.v1alpha1.Encap.Builder subBuilder = null;
            if (fabricEncap_ != null) {
              subBuilder = fabricEncap_.toBuilder();
            }
            fabricEncap_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.Encap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fabricEncap_);
              fabricEncap_ = subBuilder.buildPartial();
            }

            break;
          }
          case 122: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              hostInterfaceNameRef_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000010;
            }
            hostInterfaceNameRef_.add(s);
            break;
          }
          case 128: {

            tos_ = input.readInt32();
            break;
          }
          case 136: {

            connected_ = input.readBool();
            break;
          }
          case 146: {
            java.lang.String s = input.readStringRequireUtf8();

            ingressDefaultSgPolicyNameRef_ = s;
            break;
          }
          case 154: {
            java.lang.String s = input.readStringRequireUtf8();

            egressDefaultSgPolicyNameRef_ = s;
            break;
          }
          case 160: {

            remoteSubnet_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        ingessV4SecurityPolicyNameRef_ = ingessV4SecurityPolicyNameRef_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        ingressV6SecurityPolicyNameRef_ = ingressV6SecurityPolicyNameRef_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        egressV4SecurityPolicyNameRef_ = egressV4SecurityPolicyNameRef_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        egressV6SecurityPolicyNameRef_ = egressV6SecurityPolicyNameRef_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        hostInterfaceNameRef_ = hostInterfaceNameRef_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            opi_api.network.cloud.v1alpha1.SubnetSpec.class, opi_api.network.cloud.v1alpha1.SubnetSpec.Builder.class);
  }

  public static final int VPC_NAME_REF_FIELD_NUMBER = 1;
  private volatile java.lang.Object vpcNameRef_;
  /**
   * <pre>
   * virtual private cloud this subnet is belongs to
   * </pre>
   *
   * <code>string vpc_name_ref = 1;</code>
   * @return The vpcNameRef.
   */
  @java.lang.Override
  public java.lang.String getVpcNameRef() {
    java.lang.Object ref = vpcNameRef_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      vpcNameRef_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * virtual private cloud this subnet is belongs to
   * </pre>
   *
   * <code>string vpc_name_ref = 1;</code>
   * @return The bytes for vpcNameRef.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getVpcNameRefBytes() {
    java.lang.Object ref = vpcNameRef_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      vpcNameRef_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int V4_PREFIX_FIELD_NUMBER = 2;
  private opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4Prefix_;
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
   * @return Whether the v4Prefix field is set.
   */
  @java.lang.Override
  public boolean hasV4Prefix() {
    return v4Prefix_ != null;
  }
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
   * @return The v4Prefix.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix getV4Prefix() {
    return v4Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
  }
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder getV4PrefixOrBuilder() {
    return getV4Prefix();
  }

  public static final int V6_PREFIX_FIELD_NUMBER = 3;
  private opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6Prefix_;
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
   * @return Whether the v6Prefix field is set.
   */
  @java.lang.Override
  public boolean hasV6Prefix() {
    return v6Prefix_ != null;
  }
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
   * @return The v6Prefix.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix getV6Prefix() {
    return v6Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
  }
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder getV6PrefixOrBuilder() {
    return getV6Prefix();
  }

  public static final int IPV4_VIRTUAL_ROUTER_IP_FIELD_NUMBER = 4;
  private int ipv4VirtualRouterIp_;
  /**
   * <pre>
   * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
   * and packets originated by this device carry this IP as source IP
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: ipv4 address is unsigned. --)
   * </pre>
   *
   * <code>uint32 ipv4_virtual_router_ip = 4;</code>
   * @return The ipv4VirtualRouterIp.
   */
  @java.lang.Override
  public int getIpv4VirtualRouterIp() {
    return ipv4VirtualRouterIp_;
  }

  public static final int IPV6_VIRTUAL_ROUTER_IP_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString ipv6VirtualRouterIp_;
  /**
   * <pre>
   * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
   * and packets originated by this device carry this IP as source IP
   * </pre>
   *
   * <code>bytes ipv6_virtual_router_ip = 5;</code>
   * @return The ipv6VirtualRouterIp.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getIpv6VirtualRouterIp() {
    return ipv6VirtualRouterIp_;
  }

  public static final int VIRTUAL_ROUTER_MAC_FIELD_NUMBER = 6;
  private com.google.protobuf.ByteString virtualRouterMac_;
  /**
   * <pre>
   * Virtual Router (VR) MAC address, any packets originated or routed by
   * the device carry this MAC as source MAC
   * </pre>
   *
   * <code>bytes virtual_router_mac = 6;</code>
   * @return The virtualRouterMac.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getVirtualRouterMac() {
    return virtualRouterMac_;
  }

  public static final int V4_ROUTE_TABLE_NAME_REF_FIELD_NUMBER = 7;
  private volatile java.lang.Object v4RouteTableNameRef_;
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>string v4_route_table_name_ref = 7;</code>
   * @return The v4RouteTableNameRef.
   */
  @java.lang.Override
  public java.lang.String getV4RouteTableNameRef() {
    java.lang.Object ref = v4RouteTableNameRef_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      v4RouteTableNameRef_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>string v4_route_table_name_ref = 7;</code>
   * @return The bytes for v4RouteTableNameRef.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getV4RouteTableNameRefBytes() {
    java.lang.Object ref = v4RouteTableNameRef_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      v4RouteTableNameRef_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int V6_ROUTE_TABLE_NAME_REF_FIELD_NUMBER = 8;
  private volatile java.lang.Object v6RouteTableNameRef_;
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>string v6_route_table_name_ref = 8;</code>
   * @return The v6RouteTableNameRef.
   */
  @java.lang.Override
  public java.lang.String getV6RouteTableNameRef() {
    java.lang.Object ref = v6RouteTableNameRef_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      v6RouteTableNameRef_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>string v6_route_table_name_ref = 8;</code>
   * @return The bytes for v6RouteTableNameRef.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getV6RouteTableNameRefBytes() {
    java.lang.Object ref = v6RouteTableNameRef_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      v6RouteTableNameRef_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INGESS_V4_SECURITY_POLICY_NAME_REF_FIELD_NUMBER = 9;
  private com.google.protobuf.LazyStringList ingessV4SecurityPolicyNameRef_;
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
   * @return A list containing the ingessV4SecurityPolicyNameRef.
   */
  public com.google.protobuf.ProtocolStringList
      getIngessV4SecurityPolicyNameRefList() {
    return ingessV4SecurityPolicyNameRef_;
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
   * @return The count of ingessV4SecurityPolicyNameRef.
   */
  public int getIngessV4SecurityPolicyNameRefCount() {
    return ingessV4SecurityPolicyNameRef_.size();
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
   * @param index The index of the element to return.
   * @return The ingessV4SecurityPolicyNameRef at the given index.
   */
  public java.lang.String getIngessV4SecurityPolicyNameRef(int index) {
    return ingessV4SecurityPolicyNameRef_.get(index);
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ingessV4SecurityPolicyNameRef at the given index.
   */
  public com.google.protobuf.ByteString
      getIngessV4SecurityPolicyNameRefBytes(int index) {
    return ingessV4SecurityPolicyNameRef_.getByteString(index);
  }

  public static final int INGRESS_V6_SECURITY_POLICY_NAME_REF_FIELD_NUMBER = 10;
  private com.google.protobuf.LazyStringList ingressV6SecurityPolicyNameRef_;
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
   * @return A list containing the ingressV6SecurityPolicyNameRef.
   */
  public com.google.protobuf.ProtocolStringList
      getIngressV6SecurityPolicyNameRefList() {
    return ingressV6SecurityPolicyNameRef_;
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
   * @return The count of ingressV6SecurityPolicyNameRef.
   */
  public int getIngressV6SecurityPolicyNameRefCount() {
    return ingressV6SecurityPolicyNameRef_.size();
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
   * @param index The index of the element to return.
   * @return The ingressV6SecurityPolicyNameRef at the given index.
   */
  public java.lang.String getIngressV6SecurityPolicyNameRef(int index) {
    return ingressV6SecurityPolicyNameRef_.get(index);
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ingressV6SecurityPolicyNameRef at the given index.
   */
  public com.google.protobuf.ByteString
      getIngressV6SecurityPolicyNameRefBytes(int index) {
    return ingressV6SecurityPolicyNameRef_.getByteString(index);
  }

  public static final int EGRESS_V4_SECURITY_POLICY_NAME_REF_FIELD_NUMBER = 11;
  private com.google.protobuf.LazyStringList egressV4SecurityPolicyNameRef_;
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
   * @return A list containing the egressV4SecurityPolicyNameRef.
   */
  public com.google.protobuf.ProtocolStringList
      getEgressV4SecurityPolicyNameRefList() {
    return egressV4SecurityPolicyNameRef_;
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
   * @return The count of egressV4SecurityPolicyNameRef.
   */
  public int getEgressV4SecurityPolicyNameRefCount() {
    return egressV4SecurityPolicyNameRef_.size();
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
   * @param index The index of the element to return.
   * @return The egressV4SecurityPolicyNameRef at the given index.
   */
  public java.lang.String getEgressV4SecurityPolicyNameRef(int index) {
    return egressV4SecurityPolicyNameRef_.get(index);
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
   * @param index The index of the value to return.
   * @return The bytes of the egressV4SecurityPolicyNameRef at the given index.
   */
  public com.google.protobuf.ByteString
      getEgressV4SecurityPolicyNameRefBytes(int index) {
    return egressV4SecurityPolicyNameRef_.getByteString(index);
  }

  public static final int EGRESS_V6_SECURITY_POLICY_NAME_REF_FIELD_NUMBER = 12;
  private com.google.protobuf.LazyStringList egressV6SecurityPolicyNameRef_;
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
   * @return A list containing the egressV6SecurityPolicyNameRef.
   */
  public com.google.protobuf.ProtocolStringList
      getEgressV6SecurityPolicyNameRefList() {
    return egressV6SecurityPolicyNameRef_;
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
   * @return The count of egressV6SecurityPolicyNameRef.
   */
  public int getEgressV6SecurityPolicyNameRefCount() {
    return egressV6SecurityPolicyNameRef_.size();
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
   * @param index The index of the element to return.
   * @return The egressV6SecurityPolicyNameRef at the given index.
   */
  public java.lang.String getEgressV6SecurityPolicyNameRef(int index) {
    return egressV6SecurityPolicyNameRef_.get(index);
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
   * @param index The index of the value to return.
   * @return The bytes of the egressV6SecurityPolicyNameRef at the given index.
   */
  public com.google.protobuf.ByteString
      getEgressV6SecurityPolicyNameRefBytes(int index) {
    return egressV6SecurityPolicyNameRef_.getByteString(index);
  }

  public static final int ACCESS_ENCAP_FIELD_NUMBER = 13;
  private opi_api.network.opinetcommon.v1alpha1.Encap accessEncap_;
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
   * @return Whether the accessEncap field is set.
   */
  @java.lang.Override
  public boolean hasAccessEncap() {
    return accessEncap_ != null;
  }
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
   * @return The accessEncap.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.Encap getAccessEncap() {
    return accessEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
  }
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getAccessEncapOrBuilder() {
    return getAccessEncap();
  }

  public static final int FABRIC_ENCAP_FIELD_NUMBER = 14;
  private opi_api.network.opinetcommon.v1alpha1.Encap fabricEncap_;
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
   * @return Whether the fabricEncap field is set.
   */
  @java.lang.Override
  public boolean hasFabricEncap() {
    return fabricEncap_ != null;
  }
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
   * @return The fabricEncap.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap() {
    return fabricEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
  }
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder() {
    return getFabricEncap();
  }

  public static final int HOST_INTERFACE_NAME_REF_FIELD_NUMBER = 15;
  private com.google.protobuf.LazyStringList hostInterfaceNameRef_;
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated string host_interface_name_ref = 15;</code>
   * @return A list containing the hostInterfaceNameRef.
   */
  public com.google.protobuf.ProtocolStringList
      getHostInterfaceNameRefList() {
    return hostInterfaceNameRef_;
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated string host_interface_name_ref = 15;</code>
   * @return The count of hostInterfaceNameRef.
   */
  public int getHostInterfaceNameRefCount() {
    return hostInterfaceNameRef_.size();
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated string host_interface_name_ref = 15;</code>
   * @param index The index of the element to return.
   * @return The hostInterfaceNameRef at the given index.
   */
  public java.lang.String getHostInterfaceNameRef(int index) {
    return hostInterfaceNameRef_.get(index);
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated string host_interface_name_ref = 15;</code>
   * @param index The index of the value to return.
   * @return The bytes of the hostInterfaceNameRef at the given index.
   */
  public com.google.protobuf.ByteString
      getHostInterfaceNameRefBytes(int index) {
    return hostInterfaceNameRef_.getByteString(index);
  }

  public static final int TOS_FIELD_NUMBER = 16;
  private int tos_;
  /**
   * <pre>
   * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
   * header or in the Traffic Class field of IPv6 outer header, this value, if
   * non-zero, will be used as-is (i.e., not interpreted) during encap time by
   * the dataplane; tunnel objects, if configured with ToS, will override this
   * </pre>
   *
   * <code>int32 tos = 16;</code>
   * @return The tos.
   */
  @java.lang.Override
  public int getTos() {
    return tos_;
  }

  public static final int CONNECTED_FIELD_NUMBER = 17;
  private boolean connected_;
  /**
   * <pre>
   * a subnet is marked connected if vnics in this subnet can communicate with
   * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
   * </pre>
   *
   * <code>bool connected = 17;</code>
   * @return The connected.
   */
  @java.lang.Override
  public boolean getConnected() {
    return connected_;
  }

  public static final int INGRESS_DEFAULT_SG_POLICY_NAME_REF_FIELD_NUMBER = 18;
  private volatile java.lang.Object ingressDefaultSgPolicyNameRef_;
  /**
   * <pre>
   * default ingress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security policies on a given vnic
   * </pre>
   *
   * <code>string ingress_default_sg_policy_name_ref = 18;</code>
   * @return The ingressDefaultSgPolicyNameRef.
   */
  @java.lang.Override
  public java.lang.String getIngressDefaultSgPolicyNameRef() {
    java.lang.Object ref = ingressDefaultSgPolicyNameRef_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      ingressDefaultSgPolicyNameRef_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * default ingress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security policies on a given vnic
   * </pre>
   *
   * <code>string ingress_default_sg_policy_name_ref = 18;</code>
   * @return The bytes for ingressDefaultSgPolicyNameRef.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIngressDefaultSgPolicyNameRefBytes() {
    java.lang.Object ref = ingressDefaultSgPolicyNameRef_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      ingressDefaultSgPolicyNameRef_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EGRESS_DEFAULT_SG_POLICY_NAME_REF_FIELD_NUMBER = 19;
  private volatile java.lang.Object egressDefaultSgPolicyNameRef_;
  /**
   * <pre>
   * default egress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security polices on a given vnic
   * </pre>
   *
   * <code>string egress_default_sg_policy_name_ref = 19;</code>
   * @return The egressDefaultSgPolicyNameRef.
   */
  @java.lang.Override
  public java.lang.String getEgressDefaultSgPolicyNameRef() {
    java.lang.Object ref = egressDefaultSgPolicyNameRef_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      egressDefaultSgPolicyNameRef_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * default egress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security polices on a given vnic
   * </pre>
   *
   * <code>string egress_default_sg_policy_name_ref = 19;</code>
   * @return The bytes for egressDefaultSgPolicyNameRef.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getEgressDefaultSgPolicyNameRefBytes() {
    java.lang.Object ref = egressDefaultSgPolicyNameRef_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      egressDefaultSgPolicyNameRef_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REMOTE_SUBNET_FIELD_NUMBER = 20;
  private boolean remoteSubnet_;
  /**
   * <pre>
   * remote_subnet, if set, indicates that the subnet does not have any IP
   * mappings in local pod and such subnets are used to program all remote
   * pod IP mappings behind it
   * </pre>
   *
   * <code>bool remote_subnet = 20;</code>
   * @return The remoteSubnet.
   */
  @java.lang.Override
  public boolean getRemoteSubnet() {
    return remoteSubnet_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vpcNameRef_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, vpcNameRef_);
    }
    if (v4Prefix_ != null) {
      output.writeMessage(2, getV4Prefix());
    }
    if (v6Prefix_ != null) {
      output.writeMessage(3, getV6Prefix());
    }
    if (ipv4VirtualRouterIp_ != 0) {
      output.writeUInt32(4, ipv4VirtualRouterIp_);
    }
    if (!ipv6VirtualRouterIp_.isEmpty()) {
      output.writeBytes(5, ipv6VirtualRouterIp_);
    }
    if (!virtualRouterMac_.isEmpty()) {
      output.writeBytes(6, virtualRouterMac_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(v4RouteTableNameRef_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, v4RouteTableNameRef_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(v6RouteTableNameRef_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, v6RouteTableNameRef_);
    }
    for (int i = 0; i < ingessV4SecurityPolicyNameRef_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, ingessV4SecurityPolicyNameRef_.getRaw(i));
    }
    for (int i = 0; i < ingressV6SecurityPolicyNameRef_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, ingressV6SecurityPolicyNameRef_.getRaw(i));
    }
    for (int i = 0; i < egressV4SecurityPolicyNameRef_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, egressV4SecurityPolicyNameRef_.getRaw(i));
    }
    for (int i = 0; i < egressV6SecurityPolicyNameRef_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, egressV6SecurityPolicyNameRef_.getRaw(i));
    }
    if (accessEncap_ != null) {
      output.writeMessage(13, getAccessEncap());
    }
    if (fabricEncap_ != null) {
      output.writeMessage(14, getFabricEncap());
    }
    for (int i = 0; i < hostInterfaceNameRef_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 15, hostInterfaceNameRef_.getRaw(i));
    }
    if (tos_ != 0) {
      output.writeInt32(16, tos_);
    }
    if (connected_ != false) {
      output.writeBool(17, connected_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(ingressDefaultSgPolicyNameRef_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 18, ingressDefaultSgPolicyNameRef_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(egressDefaultSgPolicyNameRef_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 19, egressDefaultSgPolicyNameRef_);
    }
    if (remoteSubnet_ != false) {
      output.writeBool(20, remoteSubnet_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vpcNameRef_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, vpcNameRef_);
    }
    if (v4Prefix_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getV4Prefix());
    }
    if (v6Prefix_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getV6Prefix());
    }
    if (ipv4VirtualRouterIp_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, ipv4VirtualRouterIp_);
    }
    if (!ipv6VirtualRouterIp_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, ipv6VirtualRouterIp_);
    }
    if (!virtualRouterMac_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(6, virtualRouterMac_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(v4RouteTableNameRef_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, v4RouteTableNameRef_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(v6RouteTableNameRef_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, v6RouteTableNameRef_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < ingessV4SecurityPolicyNameRef_.size(); i++) {
        dataSize += computeStringSizeNoTag(ingessV4SecurityPolicyNameRef_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getIngessV4SecurityPolicyNameRefList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < ingressV6SecurityPolicyNameRef_.size(); i++) {
        dataSize += computeStringSizeNoTag(ingressV6SecurityPolicyNameRef_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getIngressV6SecurityPolicyNameRefList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < egressV4SecurityPolicyNameRef_.size(); i++) {
        dataSize += computeStringSizeNoTag(egressV4SecurityPolicyNameRef_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getEgressV4SecurityPolicyNameRefList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < egressV6SecurityPolicyNameRef_.size(); i++) {
        dataSize += computeStringSizeNoTag(egressV6SecurityPolicyNameRef_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getEgressV6SecurityPolicyNameRefList().size();
    }
    if (accessEncap_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getAccessEncap());
    }
    if (fabricEncap_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getFabricEncap());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < hostInterfaceNameRef_.size(); i++) {
        dataSize += computeStringSizeNoTag(hostInterfaceNameRef_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHostInterfaceNameRefList().size();
    }
    if (tos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(16, tos_);
    }
    if (connected_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(17, connected_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(ingressDefaultSgPolicyNameRef_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, ingressDefaultSgPolicyNameRef_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(egressDefaultSgPolicyNameRef_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, egressDefaultSgPolicyNameRef_);
    }
    if (remoteSubnet_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(20, remoteSubnet_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof opi_api.network.cloud.v1alpha1.SubnetSpec)) {
      return super.equals(obj);
    }
    opi_api.network.cloud.v1alpha1.SubnetSpec other = (opi_api.network.cloud.v1alpha1.SubnetSpec) obj;

    if (!getVpcNameRef()
        .equals(other.getVpcNameRef())) return false;
    if (hasV4Prefix() != other.hasV4Prefix()) return false;
    if (hasV4Prefix()) {
      if (!getV4Prefix()
          .equals(other.getV4Prefix())) return false;
    }
    if (hasV6Prefix() != other.hasV6Prefix()) return false;
    if (hasV6Prefix()) {
      if (!getV6Prefix()
          .equals(other.getV6Prefix())) return false;
    }
    if (getIpv4VirtualRouterIp()
        != other.getIpv4VirtualRouterIp()) return false;
    if (!getIpv6VirtualRouterIp()
        .equals(other.getIpv6VirtualRouterIp())) return false;
    if (!getVirtualRouterMac()
        .equals(other.getVirtualRouterMac())) return false;
    if (!getV4RouteTableNameRef()
        .equals(other.getV4RouteTableNameRef())) return false;
    if (!getV6RouteTableNameRef()
        .equals(other.getV6RouteTableNameRef())) return false;
    if (!getIngessV4SecurityPolicyNameRefList()
        .equals(other.getIngessV4SecurityPolicyNameRefList())) return false;
    if (!getIngressV6SecurityPolicyNameRefList()
        .equals(other.getIngressV6SecurityPolicyNameRefList())) return false;
    if (!getEgressV4SecurityPolicyNameRefList()
        .equals(other.getEgressV4SecurityPolicyNameRefList())) return false;
    if (!getEgressV6SecurityPolicyNameRefList()
        .equals(other.getEgressV6SecurityPolicyNameRefList())) return false;
    if (hasAccessEncap() != other.hasAccessEncap()) return false;
    if (hasAccessEncap()) {
      if (!getAccessEncap()
          .equals(other.getAccessEncap())) return false;
    }
    if (hasFabricEncap() != other.hasFabricEncap()) return false;
    if (hasFabricEncap()) {
      if (!getFabricEncap()
          .equals(other.getFabricEncap())) return false;
    }
    if (!getHostInterfaceNameRefList()
        .equals(other.getHostInterfaceNameRefList())) return false;
    if (getTos()
        != other.getTos()) return false;
    if (getConnected()
        != other.getConnected()) return false;
    if (!getIngressDefaultSgPolicyNameRef()
        .equals(other.getIngressDefaultSgPolicyNameRef())) return false;
    if (!getEgressDefaultSgPolicyNameRef()
        .equals(other.getEgressDefaultSgPolicyNameRef())) return false;
    if (getRemoteSubnet()
        != other.getRemoteSubnet()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VPC_NAME_REF_FIELD_NUMBER;
    hash = (53 * hash) + getVpcNameRef().hashCode();
    if (hasV4Prefix()) {
      hash = (37 * hash) + V4_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getV4Prefix().hashCode();
    }
    if (hasV6Prefix()) {
      hash = (37 * hash) + V6_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getV6Prefix().hashCode();
    }
    hash = (37 * hash) + IPV4_VIRTUAL_ROUTER_IP_FIELD_NUMBER;
    hash = (53 * hash) + getIpv4VirtualRouterIp();
    hash = (37 * hash) + IPV6_VIRTUAL_ROUTER_IP_FIELD_NUMBER;
    hash = (53 * hash) + getIpv6VirtualRouterIp().hashCode();
    hash = (37 * hash) + VIRTUAL_ROUTER_MAC_FIELD_NUMBER;
    hash = (53 * hash) + getVirtualRouterMac().hashCode();
    hash = (37 * hash) + V4_ROUTE_TABLE_NAME_REF_FIELD_NUMBER;
    hash = (53 * hash) + getV4RouteTableNameRef().hashCode();
    hash = (37 * hash) + V6_ROUTE_TABLE_NAME_REF_FIELD_NUMBER;
    hash = (53 * hash) + getV6RouteTableNameRef().hashCode();
    if (getIngessV4SecurityPolicyNameRefCount() > 0) {
      hash = (37 * hash) + INGESS_V4_SECURITY_POLICY_NAME_REF_FIELD_NUMBER;
      hash = (53 * hash) + getIngessV4SecurityPolicyNameRefList().hashCode();
    }
    if (getIngressV6SecurityPolicyNameRefCount() > 0) {
      hash = (37 * hash) + INGRESS_V6_SECURITY_POLICY_NAME_REF_FIELD_NUMBER;
      hash = (53 * hash) + getIngressV6SecurityPolicyNameRefList().hashCode();
    }
    if (getEgressV4SecurityPolicyNameRefCount() > 0) {
      hash = (37 * hash) + EGRESS_V4_SECURITY_POLICY_NAME_REF_FIELD_NUMBER;
      hash = (53 * hash) + getEgressV4SecurityPolicyNameRefList().hashCode();
    }
    if (getEgressV6SecurityPolicyNameRefCount() > 0) {
      hash = (37 * hash) + EGRESS_V6_SECURITY_POLICY_NAME_REF_FIELD_NUMBER;
      hash = (53 * hash) + getEgressV6SecurityPolicyNameRefList().hashCode();
    }
    if (hasAccessEncap()) {
      hash = (37 * hash) + ACCESS_ENCAP_FIELD_NUMBER;
      hash = (53 * hash) + getAccessEncap().hashCode();
    }
    if (hasFabricEncap()) {
      hash = (37 * hash) + FABRIC_ENCAP_FIELD_NUMBER;
      hash = (53 * hash) + getFabricEncap().hashCode();
    }
    if (getHostInterfaceNameRefCount() > 0) {
      hash = (37 * hash) + HOST_INTERFACE_NAME_REF_FIELD_NUMBER;
      hash = (53 * hash) + getHostInterfaceNameRefList().hashCode();
    }
    hash = (37 * hash) + TOS_FIELD_NUMBER;
    hash = (53 * hash) + getTos();
    hash = (37 * hash) + CONNECTED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getConnected());
    hash = (37 * hash) + INGRESS_DEFAULT_SG_POLICY_NAME_REF_FIELD_NUMBER;
    hash = (53 * hash) + getIngressDefaultSgPolicyNameRef().hashCode();
    hash = (37 * hash) + EGRESS_DEFAULT_SG_POLICY_NAME_REF_FIELD_NUMBER;
    hash = (53 * hash) + getEgressDefaultSgPolicyNameRef().hashCode();
    hash = (37 * hash) + REMOTE_SUBNET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRemoteSubnet());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(opi_api.network.cloud.v1alpha1.SubnetSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SubnetSpec captures subnet specific configuration
   * </pre>
   *
   * Protobuf type {@code opi_api.network.cloud.v1alpha1.SubnetSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opi_api.network.cloud.v1alpha1.SubnetSpec)
      opi_api.network.cloud.v1alpha1.SubnetSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              opi_api.network.cloud.v1alpha1.SubnetSpec.class, opi_api.network.cloud.v1alpha1.SubnetSpec.Builder.class);
    }

    // Construct using opi_api.network.cloud.v1alpha1.SubnetSpec.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      vpcNameRef_ = "";

      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = null;
      } else {
        v4Prefix_ = null;
        v4PrefixBuilder_ = null;
      }
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = null;
      } else {
        v6Prefix_ = null;
        v6PrefixBuilder_ = null;
      }
      ipv4VirtualRouterIp_ = 0;

      ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;

      virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;

      v4RouteTableNameRef_ = "";

      v6RouteTableNameRef_ = "";

      ingessV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      ingressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      egressV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      egressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      if (accessEncapBuilder_ == null) {
        accessEncap_ = null;
      } else {
        accessEncap_ = null;
        accessEncapBuilder_ = null;
      }
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = null;
      } else {
        fabricEncap_ = null;
        fabricEncapBuilder_ = null;
      }
      hostInterfaceNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      tos_ = 0;

      connected_ = false;

      ingressDefaultSgPolicyNameRef_ = "";

      egressDefaultSgPolicyNameRef_ = "";

      remoteSubnet_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstanceForType() {
      return opi_api.network.cloud.v1alpha1.SubnetSpec.getDefaultInstance();
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec build() {
      opi_api.network.cloud.v1alpha1.SubnetSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec buildPartial() {
      opi_api.network.cloud.v1alpha1.SubnetSpec result = new opi_api.network.cloud.v1alpha1.SubnetSpec(this);
      int from_bitField0_ = bitField0_;
      result.vpcNameRef_ = vpcNameRef_;
      if (v4PrefixBuilder_ == null) {
        result.v4Prefix_ = v4Prefix_;
      } else {
        result.v4Prefix_ = v4PrefixBuilder_.build();
      }
      if (v6PrefixBuilder_ == null) {
        result.v6Prefix_ = v6Prefix_;
      } else {
        result.v6Prefix_ = v6PrefixBuilder_.build();
      }
      result.ipv4VirtualRouterIp_ = ipv4VirtualRouterIp_;
      result.ipv6VirtualRouterIp_ = ipv6VirtualRouterIp_;
      result.virtualRouterMac_ = virtualRouterMac_;
      result.v4RouteTableNameRef_ = v4RouteTableNameRef_;
      result.v6RouteTableNameRef_ = v6RouteTableNameRef_;
      if (((bitField0_ & 0x00000001) != 0)) {
        ingessV4SecurityPolicyNameRef_ = ingessV4SecurityPolicyNameRef_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.ingessV4SecurityPolicyNameRef_ = ingessV4SecurityPolicyNameRef_;
      if (((bitField0_ & 0x00000002) != 0)) {
        ingressV6SecurityPolicyNameRef_ = ingressV6SecurityPolicyNameRef_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.ingressV6SecurityPolicyNameRef_ = ingressV6SecurityPolicyNameRef_;
      if (((bitField0_ & 0x00000004) != 0)) {
        egressV4SecurityPolicyNameRef_ = egressV4SecurityPolicyNameRef_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.egressV4SecurityPolicyNameRef_ = egressV4SecurityPolicyNameRef_;
      if (((bitField0_ & 0x00000008) != 0)) {
        egressV6SecurityPolicyNameRef_ = egressV6SecurityPolicyNameRef_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.egressV6SecurityPolicyNameRef_ = egressV6SecurityPolicyNameRef_;
      if (accessEncapBuilder_ == null) {
        result.accessEncap_ = accessEncap_;
      } else {
        result.accessEncap_ = accessEncapBuilder_.build();
      }
      if (fabricEncapBuilder_ == null) {
        result.fabricEncap_ = fabricEncap_;
      } else {
        result.fabricEncap_ = fabricEncapBuilder_.build();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        hostInterfaceNameRef_ = hostInterfaceNameRef_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.hostInterfaceNameRef_ = hostInterfaceNameRef_;
      result.tos_ = tos_;
      result.connected_ = connected_;
      result.ingressDefaultSgPolicyNameRef_ = ingressDefaultSgPolicyNameRef_;
      result.egressDefaultSgPolicyNameRef_ = egressDefaultSgPolicyNameRef_;
      result.remoteSubnet_ = remoteSubnet_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof opi_api.network.cloud.v1alpha1.SubnetSpec) {
        return mergeFrom((opi_api.network.cloud.v1alpha1.SubnetSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(opi_api.network.cloud.v1alpha1.SubnetSpec other) {
      if (other == opi_api.network.cloud.v1alpha1.SubnetSpec.getDefaultInstance()) return this;
      if (!other.getVpcNameRef().isEmpty()) {
        vpcNameRef_ = other.vpcNameRef_;
        onChanged();
      }
      if (other.hasV4Prefix()) {
        mergeV4Prefix(other.getV4Prefix());
      }
      if (other.hasV6Prefix()) {
        mergeV6Prefix(other.getV6Prefix());
      }
      if (other.getIpv4VirtualRouterIp() != 0) {
        setIpv4VirtualRouterIp(other.getIpv4VirtualRouterIp());
      }
      if (other.getIpv6VirtualRouterIp() != com.google.protobuf.ByteString.EMPTY) {
        setIpv6VirtualRouterIp(other.getIpv6VirtualRouterIp());
      }
      if (other.getVirtualRouterMac() != com.google.protobuf.ByteString.EMPTY) {
        setVirtualRouterMac(other.getVirtualRouterMac());
      }
      if (!other.getV4RouteTableNameRef().isEmpty()) {
        v4RouteTableNameRef_ = other.v4RouteTableNameRef_;
        onChanged();
      }
      if (!other.getV6RouteTableNameRef().isEmpty()) {
        v6RouteTableNameRef_ = other.v6RouteTableNameRef_;
        onChanged();
      }
      if (!other.ingessV4SecurityPolicyNameRef_.isEmpty()) {
        if (ingessV4SecurityPolicyNameRef_.isEmpty()) {
          ingessV4SecurityPolicyNameRef_ = other.ingessV4SecurityPolicyNameRef_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureIngessV4SecurityPolicyNameRefIsMutable();
          ingessV4SecurityPolicyNameRef_.addAll(other.ingessV4SecurityPolicyNameRef_);
        }
        onChanged();
      }
      if (!other.ingressV6SecurityPolicyNameRef_.isEmpty()) {
        if (ingressV6SecurityPolicyNameRef_.isEmpty()) {
          ingressV6SecurityPolicyNameRef_ = other.ingressV6SecurityPolicyNameRef_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureIngressV6SecurityPolicyNameRefIsMutable();
          ingressV6SecurityPolicyNameRef_.addAll(other.ingressV6SecurityPolicyNameRef_);
        }
        onChanged();
      }
      if (!other.egressV4SecurityPolicyNameRef_.isEmpty()) {
        if (egressV4SecurityPolicyNameRef_.isEmpty()) {
          egressV4SecurityPolicyNameRef_ = other.egressV4SecurityPolicyNameRef_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureEgressV4SecurityPolicyNameRefIsMutable();
          egressV4SecurityPolicyNameRef_.addAll(other.egressV4SecurityPolicyNameRef_);
        }
        onChanged();
      }
      if (!other.egressV6SecurityPolicyNameRef_.isEmpty()) {
        if (egressV6SecurityPolicyNameRef_.isEmpty()) {
          egressV6SecurityPolicyNameRef_ = other.egressV6SecurityPolicyNameRef_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureEgressV6SecurityPolicyNameRefIsMutable();
          egressV6SecurityPolicyNameRef_.addAll(other.egressV6SecurityPolicyNameRef_);
        }
        onChanged();
      }
      if (other.hasAccessEncap()) {
        mergeAccessEncap(other.getAccessEncap());
      }
      if (other.hasFabricEncap()) {
        mergeFabricEncap(other.getFabricEncap());
      }
      if (!other.hostInterfaceNameRef_.isEmpty()) {
        if (hostInterfaceNameRef_.isEmpty()) {
          hostInterfaceNameRef_ = other.hostInterfaceNameRef_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureHostInterfaceNameRefIsMutable();
          hostInterfaceNameRef_.addAll(other.hostInterfaceNameRef_);
        }
        onChanged();
      }
      if (other.getTos() != 0) {
        setTos(other.getTos());
      }
      if (other.getConnected() != false) {
        setConnected(other.getConnected());
      }
      if (!other.getIngressDefaultSgPolicyNameRef().isEmpty()) {
        ingressDefaultSgPolicyNameRef_ = other.ingressDefaultSgPolicyNameRef_;
        onChanged();
      }
      if (!other.getEgressDefaultSgPolicyNameRef().isEmpty()) {
        egressDefaultSgPolicyNameRef_ = other.egressDefaultSgPolicyNameRef_;
        onChanged();
      }
      if (other.getRemoteSubnet() != false) {
        setRemoteSubnet(other.getRemoteSubnet());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      opi_api.network.cloud.v1alpha1.SubnetSpec parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (opi_api.network.cloud.v1alpha1.SubnetSpec) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object vpcNameRef_ = "";
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>string vpc_name_ref = 1;</code>
     * @return The vpcNameRef.
     */
    public java.lang.String getVpcNameRef() {
      java.lang.Object ref = vpcNameRef_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vpcNameRef_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>string vpc_name_ref = 1;</code>
     * @return The bytes for vpcNameRef.
     */
    public com.google.protobuf.ByteString
        getVpcNameRefBytes() {
      java.lang.Object ref = vpcNameRef_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vpcNameRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>string vpc_name_ref = 1;</code>
     * @param value The vpcNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setVpcNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      vpcNameRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>string vpc_name_ref = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearVpcNameRef() {
      
      vpcNameRef_ = getDefaultInstance().getVpcNameRef();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>string vpc_name_ref = 1;</code>
     * @param value The bytes for vpcNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setVpcNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      vpcNameRef_ = value;
      onChanged();
      return this;
    }

    private opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4Prefix_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder> v4PrefixBuilder_;
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     * @return Whether the v4Prefix field is set.
     */
    public boolean hasV4Prefix() {
      return v4PrefixBuilder_ != null || v4Prefix_ != null;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     * @return The v4Prefix.
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix getV4Prefix() {
      if (v4PrefixBuilder_ == null) {
        return v4Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
      } else {
        return v4PrefixBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public Builder setV4Prefix(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix value) {
      if (v4PrefixBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v4Prefix_ = value;
        onChanged();
      } else {
        v4PrefixBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public Builder setV4Prefix(
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder builderForValue) {
      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = builderForValue.build();
        onChanged();
      } else {
        v4PrefixBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public Builder mergeV4Prefix(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix value) {
      if (v4PrefixBuilder_ == null) {
        if (v4Prefix_ != null) {
          v4Prefix_ =
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.newBuilder(v4Prefix_).mergeFrom(value).buildPartial();
        } else {
          v4Prefix_ = value;
        }
        onChanged();
      } else {
        v4PrefixBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public Builder clearV4Prefix() {
      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = null;
        onChanged();
      } else {
        v4Prefix_ = null;
        v4PrefixBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder getV4PrefixBuilder() {
      
      onChanged();
      return getV4PrefixFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder getV4PrefixOrBuilder() {
      if (v4PrefixBuilder_ != null) {
        return v4PrefixBuilder_.getMessageOrBuilder();
      } else {
        return v4Prefix_ == null ?
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
      }
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder> 
        getV4PrefixFieldBuilder() {
      if (v4PrefixBuilder_ == null) {
        v4PrefixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder>(
                getV4Prefix(),
                getParentForChildren(),
                isClean());
        v4Prefix_ = null;
      }
      return v4PrefixBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6Prefix_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder> v6PrefixBuilder_;
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     * @return Whether the v6Prefix field is set.
     */
    public boolean hasV6Prefix() {
      return v6PrefixBuilder_ != null || v6Prefix_ != null;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     * @return The v6Prefix.
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix getV6Prefix() {
      if (v6PrefixBuilder_ == null) {
        return v6Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
      } else {
        return v6PrefixBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public Builder setV6Prefix(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix value) {
      if (v6PrefixBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v6Prefix_ = value;
        onChanged();
      } else {
        v6PrefixBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public Builder setV6Prefix(
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder builderForValue) {
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = builderForValue.build();
        onChanged();
      } else {
        v6PrefixBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public Builder mergeV6Prefix(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix value) {
      if (v6PrefixBuilder_ == null) {
        if (v6Prefix_ != null) {
          v6Prefix_ =
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.newBuilder(v6Prefix_).mergeFrom(value).buildPartial();
        } else {
          v6Prefix_ = value;
        }
        onChanged();
      } else {
        v6PrefixBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public Builder clearV6Prefix() {
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = null;
        onChanged();
      } else {
        v6Prefix_ = null;
        v6PrefixBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder getV6PrefixBuilder() {
      
      onChanged();
      return getV6PrefixFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder getV6PrefixOrBuilder() {
      if (v6PrefixBuilder_ != null) {
        return v6PrefixBuilder_.getMessageOrBuilder();
      } else {
        return v6Prefix_ == null ?
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
      }
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder> 
        getV6PrefixFieldBuilder() {
      if (v6PrefixBuilder_ == null) {
        v6PrefixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder>(
                getV6Prefix(),
                getParentForChildren(),
                isClean());
        v6Prefix_ = null;
      }
      return v6PrefixBuilder_;
    }

    private int ipv4VirtualRouterIp_ ;
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 4;</code>
     * @return The ipv4VirtualRouterIp.
     */
    @java.lang.Override
    public int getIpv4VirtualRouterIp() {
      return ipv4VirtualRouterIp_;
    }
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 4;</code>
     * @param value The ipv4VirtualRouterIp to set.
     * @return This builder for chaining.
     */
    public Builder setIpv4VirtualRouterIp(int value) {
      
      ipv4VirtualRouterIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIpv4VirtualRouterIp() {
      
      ipv4VirtualRouterIp_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 5;</code>
     * @return The ipv6VirtualRouterIp.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getIpv6VirtualRouterIp() {
      return ipv6VirtualRouterIp_;
    }
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 5;</code>
     * @param value The ipv6VirtualRouterIp to set.
     * @return This builder for chaining.
     */
    public Builder setIpv6VirtualRouterIp(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ipv6VirtualRouterIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIpv6VirtualRouterIp() {
      
      ipv6VirtualRouterIp_ = getDefaultInstance().getIpv6VirtualRouterIp();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 6;</code>
     * @return The virtualRouterMac.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getVirtualRouterMac() {
      return virtualRouterMac_;
    }
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 6;</code>
     * @param value The virtualRouterMac to set.
     * @return This builder for chaining.
     */
    public Builder setVirtualRouterMac(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      virtualRouterMac_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearVirtualRouterMac() {
      
      virtualRouterMac_ = getDefaultInstance().getVirtualRouterMac();
      onChanged();
      return this;
    }

    private java.lang.Object v4RouteTableNameRef_ = "";
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>string v4_route_table_name_ref = 7;</code>
     * @return The v4RouteTableNameRef.
     */
    public java.lang.String getV4RouteTableNameRef() {
      java.lang.Object ref = v4RouteTableNameRef_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        v4RouteTableNameRef_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>string v4_route_table_name_ref = 7;</code>
     * @return The bytes for v4RouteTableNameRef.
     */
    public com.google.protobuf.ByteString
        getV4RouteTableNameRefBytes() {
      java.lang.Object ref = v4RouteTableNameRef_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        v4RouteTableNameRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>string v4_route_table_name_ref = 7;</code>
     * @param value The v4RouteTableNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setV4RouteTableNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      v4RouteTableNameRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>string v4_route_table_name_ref = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearV4RouteTableNameRef() {
      
      v4RouteTableNameRef_ = getDefaultInstance().getV4RouteTableNameRef();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>string v4_route_table_name_ref = 7;</code>
     * @param value The bytes for v4RouteTableNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setV4RouteTableNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      v4RouteTableNameRef_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object v6RouteTableNameRef_ = "";
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>string v6_route_table_name_ref = 8;</code>
     * @return The v6RouteTableNameRef.
     */
    public java.lang.String getV6RouteTableNameRef() {
      java.lang.Object ref = v6RouteTableNameRef_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        v6RouteTableNameRef_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>string v6_route_table_name_ref = 8;</code>
     * @return The bytes for v6RouteTableNameRef.
     */
    public com.google.protobuf.ByteString
        getV6RouteTableNameRefBytes() {
      java.lang.Object ref = v6RouteTableNameRef_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        v6RouteTableNameRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>string v6_route_table_name_ref = 8;</code>
     * @param value The v6RouteTableNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setV6RouteTableNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      v6RouteTableNameRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>string v6_route_table_name_ref = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearV6RouteTableNameRef() {
      
      v6RouteTableNameRef_ = getDefaultInstance().getV6RouteTableNameRef();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>string v6_route_table_name_ref = 8;</code>
     * @param value The bytes for v6RouteTableNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setV6RouteTableNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      v6RouteTableNameRef_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList ingessV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureIngessV4SecurityPolicyNameRefIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        ingessV4SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList(ingessV4SecurityPolicyNameRef_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @return A list containing the ingessV4SecurityPolicyNameRef.
     */
    public com.google.protobuf.ProtocolStringList
        getIngessV4SecurityPolicyNameRefList() {
      return ingessV4SecurityPolicyNameRef_.getUnmodifiableView();
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @return The count of ingessV4SecurityPolicyNameRef.
     */
    public int getIngessV4SecurityPolicyNameRefCount() {
      return ingessV4SecurityPolicyNameRef_.size();
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param index The index of the element to return.
     * @return The ingessV4SecurityPolicyNameRef at the given index.
     */
    public java.lang.String getIngessV4SecurityPolicyNameRef(int index) {
      return ingessV4SecurityPolicyNameRef_.get(index);
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param index The index of the value to return.
     * @return The bytes of the ingessV4SecurityPolicyNameRef at the given index.
     */
    public com.google.protobuf.ByteString
        getIngessV4SecurityPolicyNameRefBytes(int index) {
      return ingessV4SecurityPolicyNameRef_.getByteString(index);
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param index The index to set the value at.
     * @param value The ingessV4SecurityPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setIngessV4SecurityPolicyNameRef(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIngessV4SecurityPolicyNameRefIsMutable();
      ingessV4SecurityPolicyNameRef_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param value The ingessV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addIngessV4SecurityPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIngessV4SecurityPolicyNameRefIsMutable();
      ingessV4SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param values The ingessV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addAllIngessV4SecurityPolicyNameRef(
        java.lang.Iterable<java.lang.String> values) {
      ensureIngessV4SecurityPolicyNameRefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ingessV4SecurityPolicyNameRef_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearIngessV4SecurityPolicyNameRef() {
      ingessV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingess_v4_security_policy_name_ref = 9;</code>
     * @param value The bytes of the ingessV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addIngessV4SecurityPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureIngessV4SecurityPolicyNameRefIsMutable();
      ingessV4SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList ingressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureIngressV6SecurityPolicyNameRefIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        ingressV6SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList(ingressV6SecurityPolicyNameRef_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @return A list containing the ingressV6SecurityPolicyNameRef.
     */
    public com.google.protobuf.ProtocolStringList
        getIngressV6SecurityPolicyNameRefList() {
      return ingressV6SecurityPolicyNameRef_.getUnmodifiableView();
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @return The count of ingressV6SecurityPolicyNameRef.
     */
    public int getIngressV6SecurityPolicyNameRefCount() {
      return ingressV6SecurityPolicyNameRef_.size();
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param index The index of the element to return.
     * @return The ingressV6SecurityPolicyNameRef at the given index.
     */
    public java.lang.String getIngressV6SecurityPolicyNameRef(int index) {
      return ingressV6SecurityPolicyNameRef_.get(index);
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param index The index of the value to return.
     * @return The bytes of the ingressV6SecurityPolicyNameRef at the given index.
     */
    public com.google.protobuf.ByteString
        getIngressV6SecurityPolicyNameRefBytes(int index) {
      return ingressV6SecurityPolicyNameRef_.getByteString(index);
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param index The index to set the value at.
     * @param value The ingressV6SecurityPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setIngressV6SecurityPolicyNameRef(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIngressV6SecurityPolicyNameRefIsMutable();
      ingressV6SecurityPolicyNameRef_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param value The ingressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addIngressV6SecurityPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIngressV6SecurityPolicyNameRefIsMutable();
      ingressV6SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param values The ingressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addAllIngressV6SecurityPolicyNameRef(
        java.lang.Iterable<java.lang.String> values) {
      ensureIngressV6SecurityPolicyNameRefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ingressV6SecurityPolicyNameRef_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearIngressV6SecurityPolicyNameRef() {
      ingressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string ingress_v6_security_policy_name_ref = 10;</code>
     * @param value The bytes of the ingressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addIngressV6SecurityPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureIngressV6SecurityPolicyNameRefIsMutable();
      ingressV6SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList egressV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureEgressV4SecurityPolicyNameRefIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        egressV4SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList(egressV4SecurityPolicyNameRef_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @return A list containing the egressV4SecurityPolicyNameRef.
     */
    public com.google.protobuf.ProtocolStringList
        getEgressV4SecurityPolicyNameRefList() {
      return egressV4SecurityPolicyNameRef_.getUnmodifiableView();
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @return The count of egressV4SecurityPolicyNameRef.
     */
    public int getEgressV4SecurityPolicyNameRefCount() {
      return egressV4SecurityPolicyNameRef_.size();
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param index The index of the element to return.
     * @return The egressV4SecurityPolicyNameRef at the given index.
     */
    public java.lang.String getEgressV4SecurityPolicyNameRef(int index) {
      return egressV4SecurityPolicyNameRef_.get(index);
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param index The index of the value to return.
     * @return The bytes of the egressV4SecurityPolicyNameRef at the given index.
     */
    public com.google.protobuf.ByteString
        getEgressV4SecurityPolicyNameRefBytes(int index) {
      return egressV4SecurityPolicyNameRef_.getByteString(index);
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param index The index to set the value at.
     * @param value The egressV4SecurityPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setEgressV4SecurityPolicyNameRef(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEgressV4SecurityPolicyNameRefIsMutable();
      egressV4SecurityPolicyNameRef_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param value The egressV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addEgressV4SecurityPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEgressV4SecurityPolicyNameRefIsMutable();
      egressV4SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param values The egressV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addAllEgressV4SecurityPolicyNameRef(
        java.lang.Iterable<java.lang.String> values) {
      ensureEgressV4SecurityPolicyNameRefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, egressV4SecurityPolicyNameRef_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearEgressV4SecurityPolicyNameRef() {
      egressV4SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v4_security_policy_name_ref = 11;</code>
     * @param value The bytes of the egressV4SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addEgressV4SecurityPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureEgressV4SecurityPolicyNameRefIsMutable();
      egressV4SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList egressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureEgressV6SecurityPolicyNameRefIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        egressV6SecurityPolicyNameRef_ = new com.google.protobuf.LazyStringArrayList(egressV6SecurityPolicyNameRef_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @return A list containing the egressV6SecurityPolicyNameRef.
     */
    public com.google.protobuf.ProtocolStringList
        getEgressV6SecurityPolicyNameRefList() {
      return egressV6SecurityPolicyNameRef_.getUnmodifiableView();
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @return The count of egressV6SecurityPolicyNameRef.
     */
    public int getEgressV6SecurityPolicyNameRefCount() {
      return egressV6SecurityPolicyNameRef_.size();
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param index The index of the element to return.
     * @return The egressV6SecurityPolicyNameRef at the given index.
     */
    public java.lang.String getEgressV6SecurityPolicyNameRef(int index) {
      return egressV6SecurityPolicyNameRef_.get(index);
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param index The index of the value to return.
     * @return The bytes of the egressV6SecurityPolicyNameRef at the given index.
     */
    public com.google.protobuf.ByteString
        getEgressV6SecurityPolicyNameRefBytes(int index) {
      return egressV6SecurityPolicyNameRef_.getByteString(index);
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param index The index to set the value at.
     * @param value The egressV6SecurityPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setEgressV6SecurityPolicyNameRef(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEgressV6SecurityPolicyNameRefIsMutable();
      egressV6SecurityPolicyNameRef_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param value The egressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addEgressV6SecurityPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEgressV6SecurityPolicyNameRefIsMutable();
      egressV6SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param values The egressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addAllEgressV6SecurityPolicyNameRef(
        java.lang.Iterable<java.lang.String> values) {
      ensureEgressV6SecurityPolicyNameRefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, egressV6SecurityPolicyNameRef_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearEgressV6SecurityPolicyNameRef() {
      egressV6SecurityPolicyNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated string egress_v6_security_policy_name_ref = 12;</code>
     * @param value The bytes of the egressV6SecurityPolicyNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addEgressV6SecurityPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureEgressV6SecurityPolicyNameRefIsMutable();
      egressV6SecurityPolicyNameRef_.add(value);
      onChanged();
      return this;
    }

    private opi_api.network.opinetcommon.v1alpha1.Encap accessEncap_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> accessEncapBuilder_;
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     * @return Whether the accessEncap field is set.
     */
    public boolean hasAccessEncap() {
      return accessEncapBuilder_ != null || accessEncap_ != null;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     * @return The accessEncap.
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap getAccessEncap() {
      if (accessEncapBuilder_ == null) {
        return accessEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
      } else {
        return accessEncapBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public Builder setAccessEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (accessEncapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        accessEncap_ = value;
        onChanged();
      } else {
        accessEncapBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public Builder setAccessEncap(
        opi_api.network.opinetcommon.v1alpha1.Encap.Builder builderForValue) {
      if (accessEncapBuilder_ == null) {
        accessEncap_ = builderForValue.build();
        onChanged();
      } else {
        accessEncapBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public Builder mergeAccessEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (accessEncapBuilder_ == null) {
        if (accessEncap_ != null) {
          accessEncap_ =
            opi_api.network.opinetcommon.v1alpha1.Encap.newBuilder(accessEncap_).mergeFrom(value).buildPartial();
        } else {
          accessEncap_ = value;
        }
        onChanged();
      } else {
        accessEncapBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public Builder clearAccessEncap() {
      if (accessEncapBuilder_ == null) {
        accessEncap_ = null;
        onChanged();
      } else {
        accessEncap_ = null;
        accessEncapBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap.Builder getAccessEncapBuilder() {
      
      onChanged();
      return getAccessEncapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getAccessEncapOrBuilder() {
      if (accessEncapBuilder_ != null) {
        return accessEncapBuilder_.getMessageOrBuilder();
      } else {
        return accessEncap_ == null ?
            opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
      }
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> 
        getAccessEncapFieldBuilder() {
      if (accessEncapBuilder_ == null) {
        accessEncapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder>(
                getAccessEncap(),
                getParentForChildren(),
                isClean());
        accessEncap_ = null;
      }
      return accessEncapBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.Encap fabricEncap_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> fabricEncapBuilder_;
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     * @return Whether the fabricEncap field is set.
     */
    public boolean hasFabricEncap() {
      return fabricEncapBuilder_ != null || fabricEncap_ != null;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     * @return The fabricEncap.
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap() {
      if (fabricEncapBuilder_ == null) {
        return fabricEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
      } else {
        return fabricEncapBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public Builder setFabricEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (fabricEncapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fabricEncap_ = value;
        onChanged();
      } else {
        fabricEncapBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public Builder setFabricEncap(
        opi_api.network.opinetcommon.v1alpha1.Encap.Builder builderForValue) {
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = builderForValue.build();
        onChanged();
      } else {
        fabricEncapBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public Builder mergeFabricEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (fabricEncapBuilder_ == null) {
        if (fabricEncap_ != null) {
          fabricEncap_ =
            opi_api.network.opinetcommon.v1alpha1.Encap.newBuilder(fabricEncap_).mergeFrom(value).buildPartial();
        } else {
          fabricEncap_ = value;
        }
        onChanged();
      } else {
        fabricEncapBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public Builder clearFabricEncap() {
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = null;
        onChanged();
      } else {
        fabricEncap_ = null;
        fabricEncapBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap.Builder getFabricEncapBuilder() {
      
      onChanged();
      return getFabricEncapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder() {
      if (fabricEncapBuilder_ != null) {
        return fabricEncapBuilder_.getMessageOrBuilder();
      } else {
        return fabricEncap_ == null ?
            opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
      }
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> 
        getFabricEncapFieldBuilder() {
      if (fabricEncapBuilder_ == null) {
        fabricEncapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder>(
                getFabricEncap(),
                getParentForChildren(),
                isClean());
        fabricEncap_ = null;
      }
      return fabricEncapBuilder_;
    }

    private com.google.protobuf.LazyStringList hostInterfaceNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureHostInterfaceNameRefIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        hostInterfaceNameRef_ = new com.google.protobuf.LazyStringArrayList(hostInterfaceNameRef_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @return A list containing the hostInterfaceNameRef.
     */
    public com.google.protobuf.ProtocolStringList
        getHostInterfaceNameRefList() {
      return hostInterfaceNameRef_.getUnmodifiableView();
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @return The count of hostInterfaceNameRef.
     */
    public int getHostInterfaceNameRefCount() {
      return hostInterfaceNameRef_.size();
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param index The index of the element to return.
     * @return The hostInterfaceNameRef at the given index.
     */
    public java.lang.String getHostInterfaceNameRef(int index) {
      return hostInterfaceNameRef_.get(index);
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hostInterfaceNameRef at the given index.
     */
    public com.google.protobuf.ByteString
        getHostInterfaceNameRefBytes(int index) {
      return hostInterfaceNameRef_.getByteString(index);
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param index The index to set the value at.
     * @param value The hostInterfaceNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setHostInterfaceNameRef(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostInterfaceNameRefIsMutable();
      hostInterfaceNameRef_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param value The hostInterfaceNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addHostInterfaceNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostInterfaceNameRefIsMutable();
      hostInterfaceNameRef_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param values The hostInterfaceNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addAllHostInterfaceNameRef(
        java.lang.Iterable<java.lang.String> values) {
      ensureHostInterfaceNameRefIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, hostInterfaceNameRef_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearHostInterfaceNameRef() {
      hostInterfaceNameRef_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated string host_interface_name_ref = 15;</code>
     * @param value The bytes of the hostInterfaceNameRef to add.
     * @return This builder for chaining.
     */
    public Builder addHostInterfaceNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureHostInterfaceNameRefIsMutable();
      hostInterfaceNameRef_.add(value);
      onChanged();
      return this;
    }

    private int tos_ ;
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 16;</code>
     * @return The tos.
     */
    @java.lang.Override
    public int getTos() {
      return tos_;
    }
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 16;</code>
     * @param value The tos to set.
     * @return This builder for chaining.
     */
    public Builder setTos(int value) {
      
      tos_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearTos() {
      
      tos_ = 0;
      onChanged();
      return this;
    }

    private boolean connected_ ;
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 17;</code>
     * @return The connected.
     */
    @java.lang.Override
    public boolean getConnected() {
      return connected_;
    }
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 17;</code>
     * @param value The connected to set.
     * @return This builder for chaining.
     */
    public Builder setConnected(boolean value) {
      
      connected_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearConnected() {
      
      connected_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object ingressDefaultSgPolicyNameRef_ = "";
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>string ingress_default_sg_policy_name_ref = 18;</code>
     * @return The ingressDefaultSgPolicyNameRef.
     */
    public java.lang.String getIngressDefaultSgPolicyNameRef() {
      java.lang.Object ref = ingressDefaultSgPolicyNameRef_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ingressDefaultSgPolicyNameRef_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>string ingress_default_sg_policy_name_ref = 18;</code>
     * @return The bytes for ingressDefaultSgPolicyNameRef.
     */
    public com.google.protobuf.ByteString
        getIngressDefaultSgPolicyNameRefBytes() {
      java.lang.Object ref = ingressDefaultSgPolicyNameRef_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ingressDefaultSgPolicyNameRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>string ingress_default_sg_policy_name_ref = 18;</code>
     * @param value The ingressDefaultSgPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setIngressDefaultSgPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ingressDefaultSgPolicyNameRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>string ingress_default_sg_policy_name_ref = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearIngressDefaultSgPolicyNameRef() {
      
      ingressDefaultSgPolicyNameRef_ = getDefaultInstance().getIngressDefaultSgPolicyNameRef();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>string ingress_default_sg_policy_name_ref = 18;</code>
     * @param value The bytes for ingressDefaultSgPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setIngressDefaultSgPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      ingressDefaultSgPolicyNameRef_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object egressDefaultSgPolicyNameRef_ = "";
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>string egress_default_sg_policy_name_ref = 19;</code>
     * @return The egressDefaultSgPolicyNameRef.
     */
    public java.lang.String getEgressDefaultSgPolicyNameRef() {
      java.lang.Object ref = egressDefaultSgPolicyNameRef_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        egressDefaultSgPolicyNameRef_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>string egress_default_sg_policy_name_ref = 19;</code>
     * @return The bytes for egressDefaultSgPolicyNameRef.
     */
    public com.google.protobuf.ByteString
        getEgressDefaultSgPolicyNameRefBytes() {
      java.lang.Object ref = egressDefaultSgPolicyNameRef_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        egressDefaultSgPolicyNameRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>string egress_default_sg_policy_name_ref = 19;</code>
     * @param value The egressDefaultSgPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setEgressDefaultSgPolicyNameRef(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      egressDefaultSgPolicyNameRef_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>string egress_default_sg_policy_name_ref = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearEgressDefaultSgPolicyNameRef() {
      
      egressDefaultSgPolicyNameRef_ = getDefaultInstance().getEgressDefaultSgPolicyNameRef();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>string egress_default_sg_policy_name_ref = 19;</code>
     * @param value The bytes for egressDefaultSgPolicyNameRef to set.
     * @return This builder for chaining.
     */
    public Builder setEgressDefaultSgPolicyNameRefBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      egressDefaultSgPolicyNameRef_ = value;
      onChanged();
      return this;
    }

    private boolean remoteSubnet_ ;
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 20;</code>
     * @return The remoteSubnet.
     */
    @java.lang.Override
    public boolean getRemoteSubnet() {
      return remoteSubnet_;
    }
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 20;</code>
     * @param value The remoteSubnet to set.
     * @return This builder for chaining.
     */
    public Builder setRemoteSubnet(boolean value) {
      
      remoteSubnet_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearRemoteSubnet() {
      
      remoteSubnet_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opi_api.network.cloud.v1alpha1.SubnetSpec)
  }

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SubnetSpec)
  private static final opi_api.network.cloud.v1alpha1.SubnetSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new opi_api.network.cloud.v1alpha1.SubnetSpec();
  }

  public static opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SubnetSpec>
      PARSER = new com.google.protobuf.AbstractParser<SubnetSpec>() {
    @java.lang.Override
    public SubnetSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SubnetSpec(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SubnetSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SubnetSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

