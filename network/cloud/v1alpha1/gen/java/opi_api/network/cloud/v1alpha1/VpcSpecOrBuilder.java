// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpc.proto

package opi_api.network.cloud.v1alpha1;

public interface VpcSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.VpcSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * type of the VPC
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.VPCType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * type of the VPC
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.VPCType type = 1;</code>
   * @return The type.
   */
  opi_api.network.cloud.v1alpha1.VPCType getType();

  /**
   * <pre>
   * identifier of the IPv4 route table to be used and this route table is
   * inherited by the subnets under this VPC, if they are created with no route
   * table explicitly
   * </pre>
   *
   * <code>string v4_route_table_name_ref = 2;</code>
   * @return The v4RouteTableNameRef.
   */
  java.lang.String getV4RouteTableNameRef();
  /**
   * <pre>
   * identifier of the IPv4 route table to be used and this route table is
   * inherited by the subnets under this VPC, if they are created with no route
   * table explicitly
   * </pre>
   *
   * <code>string v4_route_table_name_ref = 2;</code>
   * @return The bytes for v4RouteTableNameRef.
   */
  com.google.protobuf.ByteString
      getV4RouteTableNameRefBytes();

  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any and this route table
   * is inherited by the subnets under this VPC, if they are created with no
   * route table explicitly
   * </pre>
   *
   * <code>string v6_route_table_name_ref = 3;</code>
   * @return The v6RouteTableNameRef.
   */
  java.lang.String getV6RouteTableNameRef();
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any and this route table
   * is inherited by the subnets under this VPC, if they are created with no
   * route table explicitly
   * </pre>
   *
   * <code>string v6_route_table_name_ref = 3;</code>
   * @return The bytes for v6RouteTableNameRef.
   */
  com.google.protobuf.ByteString
      getV6RouteTableNameRefBytes();

  /**
   * <pre>
   * For various security policies
   * - all vnics in this VPC will inherit the policies configured under VPC
   * - there can be multiple policies per vnic per direction (ingress/egress)
   * - vpc policy in each direction is to be aggregated to contain all rules in a given direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v4_security_policy_name_ref = 4;</code>
   * @return A list containing the ingressV4SecurityPolicyNameRef.
   */
  java.util.List<java.lang.String>
      getIngressV4SecurityPolicyNameRefList();
  /**
   * <pre>
   * For various security policies
   * - all vnics in this VPC will inherit the policies configured under VPC
   * - there can be multiple policies per vnic per direction (ingress/egress)
   * - vpc policy in each direction is to be aggregated to contain all rules in a given direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v4_security_policy_name_ref = 4;</code>
   * @return The count of ingressV4SecurityPolicyNameRef.
   */
  int getIngressV4SecurityPolicyNameRefCount();
  /**
   * <pre>
   * For various security policies
   * - all vnics in this VPC will inherit the policies configured under VPC
   * - there can be multiple policies per vnic per direction (ingress/egress)
   * - vpc policy in each direction is to be aggregated to contain all rules in a given direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v4_security_policy_name_ref = 4;</code>
   * @param index The index of the element to return.
   * @return The ingressV4SecurityPolicyNameRef at the given index.
   */
  java.lang.String getIngressV4SecurityPolicyNameRef(int index);
  /**
   * <pre>
   * For various security policies
   * - all vnics in this VPC will inherit the policies configured under VPC
   * - there can be multiple policies per vnic per direction (ingress/egress)
   * - vpc policy in each direction is to be aggregated to contain all rules in a given direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v4_security_policy_name_ref = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ingressV4SecurityPolicyNameRef at the given index.
   */
  com.google.protobuf.ByteString
      getIngressV4SecurityPolicyNameRefBytes(int index);

  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 5;</code>
   * @return A list containing the ingressV6SecurityPolicyNameRef.
   */
  java.util.List<java.lang.String>
      getIngressV6SecurityPolicyNameRefList();
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 5;</code>
   * @return The count of ingressV6SecurityPolicyNameRef.
   */
  int getIngressV6SecurityPolicyNameRefCount();
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 5;</code>
   * @param index The index of the element to return.
   * @return The ingressV6SecurityPolicyNameRef at the given index.
   */
  java.lang.String getIngressV6SecurityPolicyNameRef(int index);
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string ingress_v6_security_policy_name_ref = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ingressV6SecurityPolicyNameRef at the given index.
   */
  com.google.protobuf.ByteString
      getIngressV6SecurityPolicyNameRefBytes(int index);

  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 6;</code>
   * @return A list containing the egressV4SecurityPolicyNameRef.
   */
  java.util.List<java.lang.String>
      getEgressV4SecurityPolicyNameRefList();
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 6;</code>
   * @return The count of egressV4SecurityPolicyNameRef.
   */
  int getEgressV4SecurityPolicyNameRefCount();
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 6;</code>
   * @param index The index of the element to return.
   * @return The egressV4SecurityPolicyNameRef at the given index.
   */
  java.lang.String getEgressV4SecurityPolicyNameRef(int index);
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v4_security_policy_name_ref = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the egressV4SecurityPolicyNameRef at the given index.
   */
  com.google.protobuf.ByteString
      getEgressV4SecurityPolicyNameRefBytes(int index);

  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 7;</code>
   * @return A list containing the egressV6SecurityPolicyNameRef.
   */
  java.util.List<java.lang.String>
      getEgressV6SecurityPolicyNameRefList();
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 7;</code>
   * @return The count of egressV6SecurityPolicyNameRef.
   */
  int getEgressV6SecurityPolicyNameRefCount();
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 7;</code>
   * @param index The index of the element to return.
   * @return The egressV6SecurityPolicyNameRef at the given index.
   */
  java.lang.String getEgressV6SecurityPolicyNameRef(int index);
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated string egress_v6_security_policy_name_ref = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the egressV6SecurityPolicyNameRef at the given index.
   */
  com.google.protobuf.ByteString
      getEgressV6SecurityPolicyNameRefBytes(int index);

  /**
   * <pre>
   * Virtual Router (VR) MAC address, any packets originated or routed in this
   * VPC carry this MAC as source MAC
   * </pre>
   *
   * <code>bytes virtual_router_mac = 8;</code>
   * @return The virtualRouterMac.
   */
  com.google.protobuf.ByteString getVirtualRouterMac();

  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this VPC. FabricEncap is needed only for VPCs of type VPC_TYPE_TENANT,
   * for other types of VPCs user need not provide fabric encap and will be unused when provided
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;</code>
   * @return Whether the fabricEncap field is set.
   */
  boolean hasFabricEncap();
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this VPC. FabricEncap is needed only for VPCs of type VPC_TYPE_TENANT,
   * for other types of VPCs user need not provide fabric encap and will be unused when provided
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;</code>
   * @return The fabricEncap.
   */
  opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap();
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this VPC. FabricEncap is needed only for VPCs of type VPC_TYPE_TENANT,
   * for other types of VPCs user need not provide fabric encap and will be unused when provided
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 9;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder();

  /**
   * <pre>
   * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
   * header or in the Traffic Class field of IPv6 outer header, this value, if
   * non-zero, will be used as-is (i.e., not interpreted) during encap time by
   * the dataplane
   * - subnets under this VPC don't inherit this ToS value, subnets need to
   *   be explicitly configured with same ToS value as that of VPC or
   *   potentially different ToS value of their own
   * - tunnel objects, if configured with tos, will override this tos value
   * </pre>
   *
   * <code>int32 tos = 10;</code>
   * @return The tos.
   */
  int getTos();
}
