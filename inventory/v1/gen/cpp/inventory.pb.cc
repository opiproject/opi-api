// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto

#include "inventory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace inventory {
namespace v1 {
PROTOBUF_CONSTEXPR BIOSInfo::BIOSInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BIOSInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BIOSInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BIOSInfoDefaultTypeInternal() {}
  union {
    BIOSInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BIOSInfoDefaultTypeInternal _BIOSInfo_default_instance_;
PROTOBUF_CONSTEXPR SystemInfo::SystemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.family_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sku_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemInfoDefaultTypeInternal() {}
  union {
    SystemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
PROTOBUF_CONSTEXPR ChassisInfo::ChassisInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChassisInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisInfoDefaultTypeInternal() {}
  union {
    ChassisInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisInfoDefaultTypeInternal _ChassisInfo_default_instance_;
PROTOBUF_CONSTEXPR BaseboardInfo::BaseboardInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseboardInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseboardInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseboardInfoDefaultTypeInternal() {}
  union {
    BaseboardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseboardInfoDefaultTypeInternal _BaseboardInfo_default_instance_;
PROTOBUF_CONSTEXPR CPUInfo::CPUInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_cores_)*/0
  , /*decltype(_impl_.total_threads_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPUInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPUInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPUInfoDefaultTypeInternal() {}
  union {
    CPUInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPUInfoDefaultTypeInternal _CPUInfo_default_instance_;
PROTOBUF_CONSTEXPR MemoryInfo::MemoryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_physical_bytes_)*/int64_t{0}
  , /*decltype(_impl_.total_usable_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryInfoDefaultTypeInternal() {}
  union {
    MemoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryInfoDefaultTypeInternal _MemoryInfo_default_instance_;
PROTOBUF_CONSTEXPR PCIeDeviceInfo::PCIeDeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subsystem_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subclass_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCIeDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCIeDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCIeDeviceInfoDefaultTypeInternal() {}
  union {
    PCIeDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCIeDeviceInfoDefaultTypeInternal _PCIeDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR GetInventoryRequest::GetInventoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInventoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInventoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInventoryRequestDefaultTypeInternal() {}
  union {
    GetInventoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInventoryRequestDefaultTypeInternal _GetInventoryRequest_default_instance_;
PROTOBUF_CONSTEXPR Inventory::Inventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pci_)*/{}
  , /*decltype(_impl_.bios_)*/nullptr
  , /*decltype(_impl_.system_)*/nullptr
  , /*decltype(_impl_.baseboard_)*/nullptr
  , /*decltype(_impl_.chassis_)*/nullptr
  , /*decltype(_impl_.processor_)*/nullptr
  , /*decltype(_impl_.memory_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryDefaultTypeInternal() {}
  union {
    Inventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryDefaultTypeInternal _Inventory_default_instance_;
}  // namespace v1
}  // namespace inventory
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_inventory_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_inventory_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_inventory_2eproto = nullptr;

const uint32_t TableStruct_inventory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BIOSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BIOSInfo, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BIOSInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BIOSInfo, _impl_.date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.sku_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::SystemInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.asset_tag_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.type_description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::ChassisInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _impl_.asset_tag_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::BaseboardInfo, _impl_.product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::CPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::CPUInfo, _impl_.total_cores_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::CPUInfo, _impl_.total_threads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::MemoryInfo, _impl_.total_physical_bytes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::MemoryInfo, _impl_.total_usable_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.driver_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.revision_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.subsystem_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.class__),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::PCIeDeviceInfo, _impl_.subclass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::GetInventoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::GetInventoryRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.bios_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.baseboard_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.chassis_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.processor_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::opi_api::inventory::v1::Inventory, _impl_.pci_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::inventory::v1::BIOSInfo)},
  { 9, -1, -1, sizeof(::opi_api::inventory::v1::SystemInfo)},
  { 22, -1, -1, sizeof(::opi_api::inventory::v1::ChassisInfo)},
  { 34, -1, -1, sizeof(::opi_api::inventory::v1::BaseboardInfo)},
  { 45, -1, -1, sizeof(::opi_api::inventory::v1::CPUInfo)},
  { 53, -1, -1, sizeof(::opi_api::inventory::v1::MemoryInfo)},
  { 61, -1, -1, sizeof(::opi_api::inventory::v1::PCIeDeviceInfo)},
  { 75, -1, -1, sizeof(::opi_api::inventory::v1::GetInventoryRequest)},
  { 82, -1, -1, sizeof(::opi_api::inventory::v1::Inventory)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::inventory::v1::_BIOSInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_SystemInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_ChassisInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_BaseboardInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_CPUInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_MemoryInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_PCIeDeviceInfo_default_instance_._instance,
  &::opi_api::inventory::v1::_GetInventoryRequest_default_instance_._instance,
  &::opi_api::inventory::v1::_Inventory_default_instance_._instance,
};

const char descriptor_table_protodef_inventory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017inventory.proto\022\024opi_api.inventory.v1\032"
  "\027google/api/client.proto\032\031google/api/res"
  "ource.proto\032\034google/api/annotations.prot"
  "o\032\037google/api/field_behavior.proto\"9\n\010BI"
  "OSInfo\022\016\n\006vendor\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022"
  "\014\n\004date\030\003 \001(\t\"}\n\nSystemInfo\022\016\n\006family\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006vendor\030\003 \001(\t\022\025\n\rser"
  "ial_number\030\004 \001(\t\022\014\n\004uuid\030\005 \001(\t\022\013\n\003sku\030\006 "
  "\001(\t\022\017\n\007version\030\007 \001(\t\"\200\001\n\013ChassisInfo\022\021\n\t"
  "asset_tag\030\001 \001(\t\022\025\n\rserial_number\030\002 \001(\t\022\014"
  "\n\004type\030\003 \001(\t\022\030\n\020type_description\030\004 \001(\t\022\016"
  "\n\006vendor\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\"k\n\rBaseb"
  "oardInfo\022\021\n\tasset_tag\030\001 \001(\t\022\025\n\rserial_nu"
  "mber\030\002 \001(\t\022\016\n\006vendor\030\003 \001(\t\022\017\n\007version\030\004 "
  "\001(\t\022\017\n\007product\030\005 \001(\t\"5\n\007CPUInfo\022\023\n\013total"
  "_cores\030\001 \001(\005\022\025\n\rtotal_threads\030\002 \001(\005\"F\n\nM"
  "emoryInfo\022\034\n\024total_physical_bytes\030\001 \001(\003\022"
  "\032\n\022total_usable_bytes\030\002 \001(\003\"\230\001\n\016PCIeDevi"
  "ceInfo\022\016\n\006driver\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022"
  "\016\n\006vendor\030\003 \001(\t\022\017\n\007product\030\004 \001(\t\022\020\n\010revi"
  "sion\030\005 \001(\t\022\021\n\tsubsystem\030\006 \001(\t\022\r\n\005class\030\007"
  " \001(\t\022\020\n\010subclass\030\010 \001(\t\"H\n\023GetInventoryRe"
  "quest\0221\n\004name\030\001 \001(\tB#\340A\002\372A\035\n\033opi_api.com"
  "mon.v1/Inventory\"\356\002\n\tInventory\022,\n\004bios\030\001"
  " \001(\0132\036.opi_api.inventory.v1.BIOSInfo\0220\n\006"
  "system\030\002 \001(\0132 .opi_api.inventory.v1.Syst"
  "emInfo\0226\n\tbaseboard\030\003 \001(\0132#.opi_api.inve"
  "ntory.v1.BaseboardInfo\0222\n\007chassis\030\004 \001(\0132"
  "!.opi_api.inventory.v1.ChassisInfo\0220\n\tpr"
  "ocessor\030\005 \001(\0132\035.opi_api.inventory.v1.CPU"
  "Info\0220\n\006memory\030\006 \001(\0132 .opi_api.inventory"
  ".v1.MemoryInfo\0221\n\003pci\030\007 \003(\0132$.opi_api.in"
  "ventory.v1.PCIeDeviceInfo2\236\001\n\014InventoryS"
  "vc\022\215\001\n\014GetInventory\022).opi_api.inventory."
  "v1.GetInventoryRequest\032\037.opi_api.invento"
  "ry.v1.Inventory\"1\202\323\344\223\002$\022\"/v1/{name=inven"
  "tory/*/inventory/*}\332A\004nameB[\n\024opi_api.in"
  "ventory.v1B\016InventoryProtoP\001Z1github.com"
  "/opiproject/opi-api/inventory/v1/gen/gob"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_inventory_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
};
static ::_pbi::once_flag descriptor_table_inventory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_inventory_2eproto = {
    false, false, 1567, descriptor_table_protodef_inventory_2eproto,
    "inventory.proto",
    &descriptor_table_inventory_2eproto_once, descriptor_table_inventory_2eproto_deps, 4, 9,
    schemas, file_default_instances, TableStruct_inventory_2eproto::offsets,
    file_level_metadata_inventory_2eproto, file_level_enum_descriptors_inventory_2eproto,
    file_level_service_descriptors_inventory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_inventory_2eproto_getter() {
  return &descriptor_table_inventory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_inventory_2eproto(&descriptor_table_inventory_2eproto);
namespace opi_api {
namespace inventory {
namespace v1 {

// ===================================================================

class BIOSInfo::_Internal {
 public:
};

BIOSInfo::BIOSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.BIOSInfo)
}
BIOSInfo::BIOSInfo(const BIOSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BIOSInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.date_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date().empty()) {
    _this->_impl_.date_.Set(from._internal_date(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.BIOSInfo)
}

inline void BIOSInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.date_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BIOSInfo::~BIOSInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.BIOSInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BIOSInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_.Destroy();
  _impl_.version_.Destroy();
  _impl_.date_.Destroy();
}

void BIOSInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BIOSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.BIOSInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.date_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BIOSInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BIOSInfo.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BIOSInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BIOSInfo.date"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BIOSInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.BIOSInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BIOSInfo.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BIOSInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string date = 3;
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BIOSInfo.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.BIOSInfo)
  return target;
}

size_t BIOSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.BIOSInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string date = 3;
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BIOSInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BIOSInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BIOSInfo::GetClassData() const { return &_class_data_; }


void BIOSInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BIOSInfo*>(&to_msg);
  auto& from = static_cast<const BIOSInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.BIOSInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_date().empty()) {
    _this->_internal_set_date(from._internal_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BIOSInfo::CopyFrom(const BIOSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.BIOSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BIOSInfo::IsInitialized() const {
  return true;
}

void BIOSInfo::InternalSwap(BIOSInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BIOSInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[0]);
}

// ===================================================================

class SystemInfo::_Internal {
 public:
};

SystemInfo::SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.sku_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.family_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.family_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_family().empty()) {
    _this->_impl_.family_.Set(from._internal_family(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sku_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sku_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sku().empty()) {
    _this->_impl_.sku_.Set(from._internal_sku(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.SystemInfo)
}

inline void SystemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.sku_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.family_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.family_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sku_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sku_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.SystemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.family_.Destroy();
  _impl_.name_.Destroy();
  _impl_.vendor_.Destroy();
  _impl_.serial_number_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.sku_.Destroy();
  _impl_.version_.Destroy();
}

void SystemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.SystemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.family_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.vendor_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.sku_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_family();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.family"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // string uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string sku = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sku();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.sku"));
        } else
          goto handle_unusual;
        continue;
      // string version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.SystemInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.SystemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string family = 1;
  if (!this->_internal_family().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_family().data(), static_cast<int>(this->_internal_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.family");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_family(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.vendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor(), target);
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial_number(), target);
  }

  // string uuid = 5;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  // string sku = 6;
  if (!this->_internal_sku().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sku().data(), static_cast<int>(this->_internal_sku().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.sku");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sku(), target);
  }

  // string version = 7;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.SystemInfo.version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.SystemInfo)
  return target;
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.SystemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string family = 1;
  if (!this->_internal_family().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string uuid = 5;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string sku = 6;
  if (!this->_internal_sku().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sku());
  }

  // string version = 7;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemInfo::GetClassData() const { return &_class_data_; }


void SystemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemInfo*>(&to_msg);
  auto& from = static_cast<const SystemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.SystemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_family().empty()) {
    _this->_internal_set_family(from._internal_family());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_sku().empty()) {
    _this->_internal_set_sku(from._internal_sku());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::InternalSwap(SystemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.family_, lhs_arena,
      &other->_impl_.family_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sku_, lhs_arena,
      &other->_impl_.sku_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[1]);
}

// ===================================================================

class ChassisInfo::_Internal {
 public:
};

ChassisInfo::ChassisInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.ChassisInfo)
}
ChassisInfo::ChassisInfo(const ChassisInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChassisInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_tag_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.type_description_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_tag().empty()) {
    _this->_impl_.asset_tag_.Set(from._internal_asset_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_description().empty()) {
    _this->_impl_.type_description_.Set(from._internal_type_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.ChassisInfo)
}

inline void ChassisInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_tag_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.type_description_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChassisInfo::~ChassisInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.ChassisInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChassisInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_tag_.Destroy();
  _impl_.serial_number_.Destroy();
  _impl_.type_.Destroy();
  _impl_.type_description_.Destroy();
  _impl_.vendor_.Destroy();
  _impl_.version_.Destroy();
}

void ChassisInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChassisInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.ChassisInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_tag_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.type_description_.ClearToEmpty();
  _impl_.vendor_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.asset_tag"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.type"));
        } else
          goto handle_unusual;
        continue;
      // string type_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.type_description"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.ChassisInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChassisInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.ChassisInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_tag = 1;
  if (!this->_internal_asset_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_tag().data(), static_cast<int>(this->_internal_asset_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.asset_tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_tag(), target);
  }

  // string serial_number = 2;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.serial_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serial_number(), target);
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string type_description = 4;
  if (!this->_internal_type_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_description().data(), static_cast<int>(this->_internal_type_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.type_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type_description(), target);
  }

  // string vendor = 5;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.vendor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vendor(), target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.ChassisInfo.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.ChassisInfo)
  return target;
}

size_t ChassisInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.ChassisInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_tag = 1;
  if (!this->_internal_asset_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_tag());
  }

  // string serial_number = 2;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string type_description = 4;
  if (!this->_internal_type_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_description());
  }

  // string vendor = 5;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChassisInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisInfo::GetClassData() const { return &_class_data_; }


void ChassisInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChassisInfo*>(&to_msg);
  auto& from = static_cast<const ChassisInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.ChassisInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_tag().empty()) {
    _this->_internal_set_asset_tag(from._internal_asset_tag());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_type_description().empty()) {
    _this->_internal_set_type_description(from._internal_type_description());
  }
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisInfo::CopyFrom(const ChassisInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.ChassisInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisInfo::IsInitialized() const {
  return true;
}

void ChassisInfo::InternalSwap(ChassisInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_tag_, lhs_arena,
      &other->_impl_.asset_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_description_, lhs_arena,
      &other->_impl_.type_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[2]);
}

// ===================================================================

class BaseboardInfo::_Internal {
 public:
};

BaseboardInfo::BaseboardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.BaseboardInfo)
}
BaseboardInfo::BaseboardInfo(const BaseboardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseboardInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_tag_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.product_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_tag().empty()) {
    _this->_impl_.asset_tag_.Set(from._internal_asset_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product().empty()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.BaseboardInfo)
}

inline void BaseboardInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_tag_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.product_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaseboardInfo::~BaseboardInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.BaseboardInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseboardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_tag_.Destroy();
  _impl_.serial_number_.Destroy();
  _impl_.vendor_.Destroy();
  _impl_.version_.Destroy();
  _impl_.product_.Destroy();
}

void BaseboardInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseboardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.BaseboardInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_tag_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _impl_.vendor_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseboardInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BaseboardInfo.asset_tag"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BaseboardInfo.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BaseboardInfo.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BaseboardInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // string product = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.BaseboardInfo.product"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseboardInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.BaseboardInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_tag = 1;
  if (!this->_internal_asset_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_tag().data(), static_cast<int>(this->_internal_asset_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BaseboardInfo.asset_tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_tag(), target);
  }

  // string serial_number = 2;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BaseboardInfo.serial_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serial_number(), target);
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BaseboardInfo.vendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor(), target);
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BaseboardInfo.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // string product = 5;
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.BaseboardInfo.product");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_product(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.BaseboardInfo)
  return target;
}

size_t BaseboardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.BaseboardInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_tag = 1;
  if (!this->_internal_asset_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_tag());
  }

  // string serial_number = 2;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string product = 5;
  if (!this->_internal_product().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseboardInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseboardInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseboardInfo::GetClassData() const { return &_class_data_; }


void BaseboardInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseboardInfo*>(&to_msg);
  auto& from = static_cast<const BaseboardInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.BaseboardInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_tag().empty()) {
    _this->_internal_set_asset_tag(from._internal_asset_tag());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseboardInfo::CopyFrom(const BaseboardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.BaseboardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseboardInfo::IsInitialized() const {
  return true;
}

void BaseboardInfo::InternalSwap(BaseboardInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_tag_, lhs_arena,
      &other->_impl_.asset_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseboardInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[3]);
}

// ===================================================================

class CPUInfo::_Internal {
 public:
};

CPUInfo::CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.CPUInfo)
}
CPUInfo::CPUInfo(const CPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPUInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_cores_){}
    , decltype(_impl_.total_threads_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_cores_, &from._impl_.total_cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_threads_) -
    reinterpret_cast<char*>(&_impl_.total_cores_)) + sizeof(_impl_.total_threads_));
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.CPUInfo)
}

inline void CPUInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_cores_){0}
    , decltype(_impl_.total_threads_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.CPUInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPUInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.CPUInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_threads_) -
      reinterpret_cast<char*>(&_impl_.total_cores_)) + sizeof(_impl_.total_threads_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_cores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPUInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.CPUInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_cores = 1;
  if (this->_internal_total_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_cores(), target);
  }

  // int32 total_threads = 2;
  if (this->_internal_total_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_threads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.CPUInfo)
  return target;
}

size_t CPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.CPUInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_cores = 1;
  if (this->_internal_total_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_cores());
  }

  // int32 total_threads = 2;
  if (this->_internal_total_threads() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_threads());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPUInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPUInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPUInfo::GetClassData() const { return &_class_data_; }


void CPUInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPUInfo*>(&to_msg);
  auto& from = static_cast<const CPUInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.CPUInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_cores() != 0) {
    _this->_internal_set_total_cores(from._internal_total_cores());
  }
  if (from._internal_total_threads() != 0) {
    _this->_internal_set_total_threads(from._internal_total_threads());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUInfo::IsInitialized() const {
  return true;
}

void CPUInfo::InternalSwap(CPUInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPUInfo, _impl_.total_threads_)
      + sizeof(CPUInfo::_impl_.total_threads_)
      - PROTOBUF_FIELD_OFFSET(CPUInfo, _impl_.total_cores_)>(
          reinterpret_cast<char*>(&_impl_.total_cores_),
          reinterpret_cast<char*>(&other->_impl_.total_cores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[4]);
}

// ===================================================================

class MemoryInfo::_Internal {
 public:
};

MemoryInfo::MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.MemoryInfo)
}
MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_physical_bytes_){}
    , decltype(_impl_.total_usable_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_physical_bytes_, &from._impl_.total_physical_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_usable_bytes_) -
    reinterpret_cast<char*>(&_impl_.total_physical_bytes_)) + sizeof(_impl_.total_usable_bytes_));
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.MemoryInfo)
}

inline void MemoryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_physical_bytes_){int64_t{0}}
    , decltype(_impl_.total_usable_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.MemoryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.MemoryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_physical_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_usable_bytes_) -
      reinterpret_cast<char*>(&_impl_.total_physical_bytes_)) + sizeof(_impl_.total_usable_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total_physical_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_physical_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_usable_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_usable_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.MemoryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_physical_bytes = 1;
  if (this->_internal_total_physical_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_physical_bytes(), target);
  }

  // int64 total_usable_bytes = 2;
  if (this->_internal_total_usable_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_usable_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.MemoryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_physical_bytes = 1;
  if (this->_internal_total_physical_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_physical_bytes());
  }

  // int64 total_usable_bytes = 2;
  if (this->_internal_total_usable_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_usable_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryInfo::GetClassData() const { return &_class_data_; }


void MemoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryInfo*>(&to_msg);
  auto& from = static_cast<const MemoryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_physical_bytes() != 0) {
    _this->_internal_set_total_physical_bytes(from._internal_total_physical_bytes());
  }
  if (from._internal_total_usable_bytes() != 0) {
    _this->_internal_set_total_usable_bytes(from._internal_total_usable_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {
  return true;
}

void MemoryInfo::InternalSwap(MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryInfo, _impl_.total_usable_bytes_)
      + sizeof(MemoryInfo::_impl_.total_usable_bytes_)
      - PROTOBUF_FIELD_OFFSET(MemoryInfo, _impl_.total_physical_bytes_)>(
          reinterpret_cast<char*>(&_impl_.total_physical_bytes_),
          reinterpret_cast<char*>(&other->_impl_.total_physical_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[5]);
}

// ===================================================================

class PCIeDeviceInfo::_Internal {
 public:
};

PCIeDeviceInfo::PCIeDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.PCIeDeviceInfo)
}
PCIeDeviceInfo::PCIeDeviceInfo(const PCIeDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCIeDeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.driver_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.revision_){}
    , decltype(_impl_.subsystem_){}
    , decltype(_impl_.class__){}
    , decltype(_impl_.subclass_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_driver().empty()) {
    _this->_impl_.driver_.Set(from._internal_driver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product().empty()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revision().empty()) {
    _this->_impl_.revision_.Set(from._internal_revision(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subsystem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsystem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subsystem().empty()) {
    _this->_impl_.subsystem_.Set(from._internal_subsystem(), 
      _this->GetArenaForAllocation());
  }
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_().empty()) {
    _this->_impl_.class__.Set(from._internal_class_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subclass().empty()) {
    _this->_impl_.subclass_.Set(from._internal_subclass(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.PCIeDeviceInfo)
}

inline void PCIeDeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.driver_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.revision_){}
    , decltype(_impl_.subsystem_){}
    , decltype(_impl_.class__){}
    , decltype(_impl_.subclass_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subsystem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsystem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subclass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subclass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PCIeDeviceInfo::~PCIeDeviceInfo() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.PCIeDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCIeDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.address_.Destroy();
  _impl_.vendor_.Destroy();
  _impl_.product_.Destroy();
  _impl_.revision_.Destroy();
  _impl_.subsystem_.Destroy();
  _impl_.class__.Destroy();
  _impl_.subclass_.Destroy();
}

void PCIeDeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCIeDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.PCIeDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.driver_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.vendor_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  _impl_.revision_.ClearToEmpty();
  _impl_.subsystem_.ClearToEmpty();
  _impl_.class__.ClearToEmpty();
  _impl_.subclass_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCIeDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string driver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.driver"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.address"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string product = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.product"));
        } else
          goto handle_unusual;
        continue;
      // string revision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.revision"));
        } else
          goto handle_unusual;
        continue;
      // string subsystem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_subsystem();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.subsystem"));
        } else
          goto handle_unusual;
        continue;
      // string class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_class_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.class"));
        } else
          goto handle_unusual;
        continue;
      // string subclass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_subclass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.PCIeDeviceInfo.subclass"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCIeDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.PCIeDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string driver = 1;
  if (!this->_internal_driver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver().data(), static_cast<int>(this->_internal_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.driver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_driver(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.vendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor(), target);
  }

  // string product = 4;
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.product");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_product(), target);
  }

  // string revision = 5;
  if (!this->_internal_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revision().data(), static_cast<int>(this->_internal_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.revision");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_revision(), target);
  }

  // string subsystem = 6;
  if (!this->_internal_subsystem().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subsystem().data(), static_cast<int>(this->_internal_subsystem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.subsystem");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_subsystem(), target);
  }

  // string class = 7;
  if (!this->_internal_class_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.class");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_class_(), target);
  }

  // string subclass = 8;
  if (!this->_internal_subclass().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subclass().data(), static_cast<int>(this->_internal_subclass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.PCIeDeviceInfo.subclass");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_subclass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.PCIeDeviceInfo)
  return target;
}

size_t PCIeDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.PCIeDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string driver = 1;
  if (!this->_internal_driver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string product = 4;
  if (!this->_internal_product().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // string revision = 5;
  if (!this->_internal_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revision());
  }

  // string subsystem = 6;
  if (!this->_internal_subsystem().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subsystem());
  }

  // string class = 7;
  if (!this->_internal_class_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string subclass = 8;
  if (!this->_internal_subclass().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subclass());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCIeDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCIeDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCIeDeviceInfo::GetClassData() const { return &_class_data_; }


void PCIeDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCIeDeviceInfo*>(&to_msg);
  auto& from = static_cast<const PCIeDeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.PCIeDeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_driver().empty()) {
    _this->_internal_set_driver(from._internal_driver());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  if (!from._internal_revision().empty()) {
    _this->_internal_set_revision(from._internal_revision());
  }
  if (!from._internal_subsystem().empty()) {
    _this->_internal_set_subsystem(from._internal_subsystem());
  }
  if (!from._internal_class_().empty()) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (!from._internal_subclass().empty()) {
    _this->_internal_set_subclass(from._internal_subclass());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCIeDeviceInfo::CopyFrom(const PCIeDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.PCIeDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCIeDeviceInfo::IsInitialized() const {
  return true;
}

void PCIeDeviceInfo::InternalSwap(PCIeDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.revision_, lhs_arena,
      &other->_impl_.revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subsystem_, lhs_arena,
      &other->_impl_.subsystem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class__, lhs_arena,
      &other->_impl_.class__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subclass_, lhs_arena,
      &other->_impl_.subclass_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PCIeDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[6]);
}

// ===================================================================

class GetInventoryRequest::_Internal {
 public:
};

GetInventoryRequest::GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.GetInventoryRequest)
}
GetInventoryRequest::GetInventoryRequest(const GetInventoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInventoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.GetInventoryRequest)
}

inline void GetInventoryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInventoryRequest::~GetInventoryRequest() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.GetInventoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInventoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetInventoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInventoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.GetInventoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInventoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.inventory.v1.GetInventoryRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInventoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.GetInventoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.inventory.v1.GetInventoryRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.GetInventoryRequest)
  return target;
}

size_t GetInventoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.GetInventoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInventoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInventoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInventoryRequest::GetClassData() const { return &_class_data_; }


void GetInventoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInventoryRequest*>(&to_msg);
  auto& from = static_cast<const GetInventoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.GetInventoryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInventoryRequest::CopyFrom(const GetInventoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.GetInventoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInventoryRequest::IsInitialized() const {
  return true;
}

void GetInventoryRequest::InternalSwap(GetInventoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInventoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[7]);
}

// ===================================================================

class Inventory::_Internal {
 public:
  static const ::opi_api::inventory::v1::BIOSInfo& bios(const Inventory* msg);
  static const ::opi_api::inventory::v1::SystemInfo& system(const Inventory* msg);
  static const ::opi_api::inventory::v1::BaseboardInfo& baseboard(const Inventory* msg);
  static const ::opi_api::inventory::v1::ChassisInfo& chassis(const Inventory* msg);
  static const ::opi_api::inventory::v1::CPUInfo& processor(const Inventory* msg);
  static const ::opi_api::inventory::v1::MemoryInfo& memory(const Inventory* msg);
};

const ::opi_api::inventory::v1::BIOSInfo&
Inventory::_Internal::bios(const Inventory* msg) {
  return *msg->_impl_.bios_;
}
const ::opi_api::inventory::v1::SystemInfo&
Inventory::_Internal::system(const Inventory* msg) {
  return *msg->_impl_.system_;
}
const ::opi_api::inventory::v1::BaseboardInfo&
Inventory::_Internal::baseboard(const Inventory* msg) {
  return *msg->_impl_.baseboard_;
}
const ::opi_api::inventory::v1::ChassisInfo&
Inventory::_Internal::chassis(const Inventory* msg) {
  return *msg->_impl_.chassis_;
}
const ::opi_api::inventory::v1::CPUInfo&
Inventory::_Internal::processor(const Inventory* msg) {
  return *msg->_impl_.processor_;
}
const ::opi_api::inventory::v1::MemoryInfo&
Inventory::_Internal::memory(const Inventory* msg) {
  return *msg->_impl_.memory_;
}
Inventory::Inventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.inventory.v1.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pci_){from._impl_.pci_}
    , decltype(_impl_.bios_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , decltype(_impl_.baseboard_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.processor_){nullptr}
    , decltype(_impl_.memory_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bios()) {
    _this->_impl_.bios_ = new ::opi_api::inventory::v1::BIOSInfo(*from._impl_.bios_);
  }
  if (from._internal_has_system()) {
    _this->_impl_.system_ = new ::opi_api::inventory::v1::SystemInfo(*from._impl_.system_);
  }
  if (from._internal_has_baseboard()) {
    _this->_impl_.baseboard_ = new ::opi_api::inventory::v1::BaseboardInfo(*from._impl_.baseboard_);
  }
  if (from._internal_has_chassis()) {
    _this->_impl_.chassis_ = new ::opi_api::inventory::v1::ChassisInfo(*from._impl_.chassis_);
  }
  if (from._internal_has_processor()) {
    _this->_impl_.processor_ = new ::opi_api::inventory::v1::CPUInfo(*from._impl_.processor_);
  }
  if (from._internal_has_memory()) {
    _this->_impl_.memory_ = new ::opi_api::inventory::v1::MemoryInfo(*from._impl_.memory_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.inventory.v1.Inventory)
}

inline void Inventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pci_){arena}
    , decltype(_impl_.bios_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , decltype(_impl_.baseboard_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.processor_){nullptr}
    , decltype(_impl_.memory_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:opi_api.inventory.v1.Inventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pci_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bios_;
  if (this != internal_default_instance()) delete _impl_.system_;
  if (this != internal_default_instance()) delete _impl_.baseboard_;
  if (this != internal_default_instance()) delete _impl_.chassis_;
  if (this != internal_default_instance()) delete _impl_.processor_;
  if (this != internal_default_instance()) delete _impl_.memory_;
}

void Inventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.inventory.v1.Inventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pci_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.bios_ != nullptr) {
    delete _impl_.bios_;
  }
  _impl_.bios_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.baseboard_ != nullptr) {
    delete _impl_.baseboard_;
  }
  _impl_.baseboard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chassis_ != nullptr) {
    delete _impl_.chassis_;
  }
  _impl_.chassis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.processor_ != nullptr) {
    delete _impl_.processor_;
  }
  _impl_.processor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.memory_ != nullptr) {
    delete _impl_.memory_;
  }
  _impl_.memory_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.inventory.v1.BIOSInfo bios = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bios(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.inventory.v1.SystemInfo system = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.inventory.v1.BaseboardInfo baseboard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.inventory.v1.ChassisInfo chassis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.inventory.v1.CPUInfo processor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_processor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.inventory.v1.MemoryInfo memory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.inventory.v1.PCIeDeviceInfo pci = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pci(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.inventory.v1.Inventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.inventory.v1.BIOSInfo bios = 1;
  if (this->_internal_has_bios()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bios(this),
        _Internal::bios(this).GetCachedSize(), target, stream);
  }

  // .opi_api.inventory.v1.SystemInfo system = 2;
  if (this->_internal_has_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // .opi_api.inventory.v1.BaseboardInfo baseboard = 3;
  if (this->_internal_has_baseboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::baseboard(this),
        _Internal::baseboard(this).GetCachedSize(), target, stream);
  }

  // .opi_api.inventory.v1.ChassisInfo chassis = 4;
  if (this->_internal_has_chassis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chassis(this),
        _Internal::chassis(this).GetCachedSize(), target, stream);
  }

  // .opi_api.inventory.v1.CPUInfo processor = 5;
  if (this->_internal_has_processor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::processor(this),
        _Internal::processor(this).GetCachedSize(), target, stream);
  }

  // .opi_api.inventory.v1.MemoryInfo memory = 6;
  if (this->_internal_has_memory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::memory(this),
        _Internal::memory(this).GetCachedSize(), target, stream);
  }

  // repeated .opi_api.inventory.v1.PCIeDeviceInfo pci = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pci_size()); i < n; i++) {
    const auto& repfield = this->_internal_pci(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.inventory.v1.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.inventory.v1.Inventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.inventory.v1.PCIeDeviceInfo pci = 7;
  total_size += 1UL * this->_internal_pci_size();
  for (const auto& msg : this->_impl_.pci_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.inventory.v1.BIOSInfo bios = 1;
  if (this->_internal_has_bios()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bios_);
  }

  // .opi_api.inventory.v1.SystemInfo system = 2;
  if (this->_internal_has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_);
  }

  // .opi_api.inventory.v1.BaseboardInfo baseboard = 3;
  if (this->_internal_has_baseboard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseboard_);
  }

  // .opi_api.inventory.v1.ChassisInfo chassis = 4;
  if (this->_internal_has_chassis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chassis_);
  }

  // .opi_api.inventory.v1.CPUInfo processor = 5;
  if (this->_internal_has_processor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.processor_);
  }

  // .opi_api.inventory.v1.MemoryInfo memory = 6;
  if (this->_internal_has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memory_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inventory::GetClassData() const { return &_class_data_; }


void Inventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inventory*>(&to_msg);
  auto& from = static_cast<const Inventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.inventory.v1.Inventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pci_.MergeFrom(from._impl_.pci_);
  if (from._internal_has_bios()) {
    _this->_internal_mutable_bios()->::opi_api::inventory::v1::BIOSInfo::MergeFrom(
        from._internal_bios());
  }
  if (from._internal_has_system()) {
    _this->_internal_mutable_system()->::opi_api::inventory::v1::SystemInfo::MergeFrom(
        from._internal_system());
  }
  if (from._internal_has_baseboard()) {
    _this->_internal_mutable_baseboard()->::opi_api::inventory::v1::BaseboardInfo::MergeFrom(
        from._internal_baseboard());
  }
  if (from._internal_has_chassis()) {
    _this->_internal_mutable_chassis()->::opi_api::inventory::v1::ChassisInfo::MergeFrom(
        from._internal_chassis());
  }
  if (from._internal_has_processor()) {
    _this->_internal_mutable_processor()->::opi_api::inventory::v1::CPUInfo::MergeFrom(
        from._internal_processor());
  }
  if (from._internal_has_memory()) {
    _this->_internal_mutable_memory()->::opi_api::inventory::v1::MemoryInfo::MergeFrom(
        from._internal_memory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.inventory.v1.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pci_.InternalSwap(&other->_impl_.pci_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inventory, _impl_.memory_)
      + sizeof(Inventory::_impl_.memory_)
      - PROTOBUF_FIELD_OFFSET(Inventory, _impl_.bios_)>(
          reinterpret_cast<char*>(&_impl_.bios_),
          reinterpret_cast<char*>(&other->_impl_.bios_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_2eproto_getter, &descriptor_table_inventory_2eproto_once,
      file_level_metadata_inventory_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inventory
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::BIOSInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::BIOSInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::BIOSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::SystemInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::SystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::SystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::ChassisInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::ChassisInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::ChassisInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::BaseboardInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::BaseboardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::BaseboardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::CPUInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::CPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::CPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::MemoryInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::MemoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::PCIeDeviceInfo*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::PCIeDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::PCIeDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::GetInventoryRequest*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::GetInventoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::GetInventoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::inventory::v1::Inventory*
Arena::CreateMaybeMessage< ::opi_api::inventory::v1::Inventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::inventory::v1::Inventory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
