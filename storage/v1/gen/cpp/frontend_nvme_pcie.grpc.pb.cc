// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: frontend_nvme_pcie.proto

#include "frontend_nvme_pcie.pb.h"
#include "frontend_nvme_pcie.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* NVMeSubsystemService_method_names[] = {
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemCreate",
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemDelete",
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemUpdate",
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemList",
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemGet",
  "/opi_api.storage.v1.NVMeSubsystemService/NVMeSubsystemStats",
};

std::unique_ptr< NVMeSubsystemService::Stub> NVMeSubsystemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMeSubsystemService::Stub> stub(new NVMeSubsystemService::Stub(channel, options));
  return stub;
}

NVMeSubsystemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NVMeSubsystemCreate_(NVMeSubsystemService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeSubsystemDelete_(NVMeSubsystemService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeSubsystemUpdate_(NVMeSubsystemService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeSubsystemList_(NVMeSubsystemService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeSubsystemGet_(NVMeSubsystemService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeSubsystemStats_(NVMeSubsystemService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest& request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemCreateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemCreate_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemCreateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemCreate_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeSubsystem, ::opi_api::storage::v1::NVMeSubsystemCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemDelete_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemDelete_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::NVMeSubsystemDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest& request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemUpdateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemUpdate_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemUpdateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemUpdate_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeSubsystem, ::opi_api::storage::v1::NVMeSubsystemUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest& request, ::opi_api::storage::v1::NVMeSubsystemListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemListRequest, ::opi_api::storage::v1::NVMeSubsystemListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemList_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest* request, ::opi_api::storage::v1::NVMeSubsystemListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemListRequest, ::opi_api::storage::v1::NVMeSubsystemListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemList_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest* request, ::opi_api::storage::v1::NVMeSubsystemListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystemListResponse>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeSubsystemListResponse, ::opi_api::storage::v1::NVMeSubsystemListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystemListResponse>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest& request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemGetRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemGet_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemGetRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemGet_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeSubsystem, ::opi_api::storage::v1::NVMeSubsystemGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystem>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeSubsystemService::Stub::NVMeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest& request, ::opi_api::storage::v1::NVMeSubsystemStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeSubsystemStatsRequest, ::opi_api::storage::v1::NVMeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeSubsystemStats_, context, request, response);
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest* request, ::opi_api::storage::v1::NVMeSubsystemStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeSubsystemStatsRequest, ::opi_api::storage::v1::NVMeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemStats_, context, request, response, std::move(f));
}

void NVMeSubsystemService::Stub::async::NVMeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest* request, ::opi_api::storage::v1::NVMeSubsystemStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeSubsystemStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystemStatsResponse>* NVMeSubsystemService::Stub::PrepareAsyncNVMeSubsystemStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeSubsystemStatsResponse, ::opi_api::storage::v1::NVMeSubsystemStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeSubsystemStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeSubsystemStatsResponse>* NVMeSubsystemService::Stub::AsyncNVMeSubsystemStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeSubsystemStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NVMeSubsystemService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemCreateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemCreateRequest* req,
             ::opi_api::storage::v1::NVMeSubsystem* resp) {
               return service->NVMeSubsystemCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NVMeSubsystemDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemUpdateRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest* req,
             ::opi_api::storage::v1::NVMeSubsystem* resp) {
               return service->NVMeSubsystemUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemListRequest, ::opi_api::storage::v1::NVMeSubsystemListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemListRequest* req,
             ::opi_api::storage::v1::NVMeSubsystemListResponse* resp) {
               return service->NVMeSubsystemList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemGetRequest, ::opi_api::storage::v1::NVMeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemGetRequest* req,
             ::opi_api::storage::v1::NVMeSubsystem* resp) {
               return service->NVMeSubsystemGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeSubsystemService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeSubsystemService::Service, ::opi_api::storage::v1::NVMeSubsystemStatsRequest, ::opi_api::storage::v1::NVMeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeSubsystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeSubsystemStatsRequest* req,
             ::opi_api::storage::v1::NVMeSubsystemStatsResponse* resp) {
               return service->NVMeSubsystemStats(ctx, req, resp);
             }, this)));
}

NVMeSubsystemService::Service::~Service() {
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemCreate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemCreateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemDelete(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemDeleteRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemUpdate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemUpdateRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemList(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemListRequest* request, ::opi_api::storage::v1::NVMeSubsystemListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemGetRequest* request, ::opi_api::storage::v1::NVMeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeSubsystemService::Service::NVMeSubsystemStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeSubsystemStatsRequest* request, ::opi_api::storage::v1::NVMeSubsystemStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NVMeControllerService_method_names[] = {
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerCreate",
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerDelete",
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerUpdate",
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerList",
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerGet",
  "/opi_api.storage.v1.NVMeControllerService/NVMeControllerStats",
};

std::unique_ptr< NVMeControllerService::Stub> NVMeControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMeControllerService::Stub> stub(new NVMeControllerService::Stub(channel, options));
  return stub;
}

NVMeControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NVMeControllerCreate_(NVMeControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeControllerDelete_(NVMeControllerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeControllerUpdate_(NVMeControllerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeControllerList_(NVMeControllerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeControllerGet_(NVMeControllerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeControllerStats_(NVMeControllerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NVMeControllerService::Stub::NVMeControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest& request, ::opi_api::storage::v1::NVMeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerCreateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerCreate_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest* request, ::opi_api::storage::v1::NVMeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerCreateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerCreate_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest* request, ::opi_api::storage::v1::NVMeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeController, ::opi_api::storage::v1::NVMeControllerCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::AsyncNVMeControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeControllerService::Stub::NVMeControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerDelete_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerDelete_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::NVMeControllerDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeControllerService::Stub::AsyncNVMeControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeControllerService::Stub::NVMeControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest& request, ::opi_api::storage::v1::NVMeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerUpdateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerUpdate_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest* request, ::opi_api::storage::v1::NVMeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerUpdateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerUpdate_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest* request, ::opi_api::storage::v1::NVMeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeController, ::opi_api::storage::v1::NVMeControllerUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::AsyncNVMeControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeControllerService::Stub::NVMeControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest& request, ::opi_api::storage::v1::NVMeControllerListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerListRequest, ::opi_api::storage::v1::NVMeControllerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerList_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest* request, ::opi_api::storage::v1::NVMeControllerListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerListRequest, ::opi_api::storage::v1::NVMeControllerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerList_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest* request, ::opi_api::storage::v1::NVMeControllerListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeControllerListResponse>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeControllerListResponse, ::opi_api::storage::v1::NVMeControllerListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeControllerListResponse>* NVMeControllerService::Stub::AsyncNVMeControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeControllerService::Stub::NVMeControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest& request, ::opi_api::storage::v1::NVMeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerGetRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerGet_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest* request, ::opi_api::storage::v1::NVMeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerGetRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerGet_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest* request, ::opi_api::storage::v1::NVMeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeController, ::opi_api::storage::v1::NVMeControllerGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeController>* NVMeControllerService::Stub::AsyncNVMeControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeControllerService::Stub::NVMeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest& request, ::opi_api::storage::v1::NVMeControllerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeControllerStatsRequest, ::opi_api::storage::v1::NVMeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeControllerStats_, context, request, response);
}

void NVMeControllerService::Stub::async::NVMeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest* request, ::opi_api::storage::v1::NVMeControllerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeControllerStatsRequest, ::opi_api::storage::v1::NVMeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerStats_, context, request, response, std::move(f));
}

void NVMeControllerService::Stub::async::NVMeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest* request, ::opi_api::storage::v1::NVMeControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeControllerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeControllerStatsResponse>* NVMeControllerService::Stub::PrepareAsyncNVMeControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeControllerStatsResponse, ::opi_api::storage::v1::NVMeControllerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeControllerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeControllerStatsResponse>* NVMeControllerService::Stub::AsyncNVMeControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeControllerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NVMeControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerCreateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerCreateRequest* req,
             ::opi_api::storage::v1::NVMeController* resp) {
               return service->NVMeControllerCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerDeleteRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NVMeControllerDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerUpdateRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerUpdateRequest* req,
             ::opi_api::storage::v1::NVMeController* resp) {
               return service->NVMeControllerUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerListRequest, ::opi_api::storage::v1::NVMeControllerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerListRequest* req,
             ::opi_api::storage::v1::NVMeControllerListResponse* resp) {
               return service->NVMeControllerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerGetRequest, ::opi_api::storage::v1::NVMeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerGetRequest* req,
             ::opi_api::storage::v1::NVMeController* resp) {
               return service->NVMeControllerGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeControllerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeControllerService::Service, ::opi_api::storage::v1::NVMeControllerStatsRequest, ::opi_api::storage::v1::NVMeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeControllerStatsRequest* req,
             ::opi_api::storage::v1::NVMeControllerStatsResponse* resp) {
               return service->NVMeControllerStats(ctx, req, resp);
             }, this)));
}

NVMeControllerService::Service::~Service() {
}

::grpc::Status NVMeControllerService::Service::NVMeControllerCreate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerCreateRequest* request, ::opi_api::storage::v1::NVMeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeControllerService::Service::NVMeControllerDelete(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerDeleteRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeControllerService::Service::NVMeControllerUpdate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerUpdateRequest* request, ::opi_api::storage::v1::NVMeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeControllerService::Service::NVMeControllerList(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerListRequest* request, ::opi_api::storage::v1::NVMeControllerListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeControllerService::Service::NVMeControllerGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerGetRequest* request, ::opi_api::storage::v1::NVMeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeControllerService::Service::NVMeControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeControllerStatsRequest* request, ::opi_api::storage::v1::NVMeControllerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NVMeNamespaceService_method_names[] = {
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceCreate",
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceDelete",
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceUpdate",
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceList",
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceGet",
  "/opi_api.storage.v1.NVMeNamespaceService/NVMeNamespaceStats",
};

std::unique_ptr< NVMeNamespaceService::Stub> NVMeNamespaceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMeNamespaceService::Stub> stub(new NVMeNamespaceService::Stub(channel, options));
  return stub;
}

NVMeNamespaceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NVMeNamespaceCreate_(NVMeNamespaceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeNamespaceDelete_(NVMeNamespaceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeNamespaceUpdate_(NVMeNamespaceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeNamespaceList_(NVMeNamespaceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeNamespaceGet_(NVMeNamespaceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMeNamespaceStats_(NVMeNamespaceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest& request, ::opi_api::storage::v1::NVMeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceCreateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceCreate_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceCreateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceCreate_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeNamespace, ::opi_api::storage::v1::NVMeNamespaceCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceDelete_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceDelete_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::NVMeNamespaceDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest& request, ::opi_api::storage::v1::NVMeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceUpdateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceUpdate_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceUpdateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceUpdate_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeNamespace, ::opi_api::storage::v1::NVMeNamespaceUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest& request, ::opi_api::storage::v1::NVMeNamespaceListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceListRequest, ::opi_api::storage::v1::NVMeNamespaceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceList_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest* request, ::opi_api::storage::v1::NVMeNamespaceListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceListRequest, ::opi_api::storage::v1::NVMeNamespaceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceList_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest* request, ::opi_api::storage::v1::NVMeNamespaceListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespaceListResponse>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeNamespaceListResponse, ::opi_api::storage::v1::NVMeNamespaceListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespaceListResponse>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest& request, ::opi_api::storage::v1::NVMeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceGetRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceGet_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceGetRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceGet_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest* request, ::opi_api::storage::v1::NVMeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeNamespace, ::opi_api::storage::v1::NVMeNamespaceGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespace>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMeNamespaceService::Stub::NVMeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest& request, ::opi_api::storage::v1::NVMeNamespaceStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMeNamespaceStatsRequest, ::opi_api::storage::v1::NVMeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMeNamespaceStats_, context, request, response);
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest* request, ::opi_api::storage::v1::NVMeNamespaceStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMeNamespaceStatsRequest, ::opi_api::storage::v1::NVMeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceStats_, context, request, response, std::move(f));
}

void NVMeNamespaceService::Stub::async::NVMeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest* request, ::opi_api::storage::v1::NVMeNamespaceStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMeNamespaceStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespaceStatsResponse>* NVMeNamespaceService::Stub::PrepareAsyncNVMeNamespaceStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMeNamespaceStatsResponse, ::opi_api::storage::v1::NVMeNamespaceStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMeNamespaceStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMeNamespaceStatsResponse>* NVMeNamespaceService::Stub::AsyncNVMeNamespaceStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMeNamespaceStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NVMeNamespaceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceCreateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceCreateRequest* req,
             ::opi_api::storage::v1::NVMeNamespace* resp) {
               return service->NVMeNamespaceCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NVMeNamespaceDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceUpdateRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest* req,
             ::opi_api::storage::v1::NVMeNamespace* resp) {
               return service->NVMeNamespaceUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceListRequest, ::opi_api::storage::v1::NVMeNamespaceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceListRequest* req,
             ::opi_api::storage::v1::NVMeNamespaceListResponse* resp) {
               return service->NVMeNamespaceList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceGetRequest, ::opi_api::storage::v1::NVMeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceGetRequest* req,
             ::opi_api::storage::v1::NVMeNamespace* resp) {
               return service->NVMeNamespaceGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMeNamespaceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMeNamespaceService::Service, ::opi_api::storage::v1::NVMeNamespaceStatsRequest, ::opi_api::storage::v1::NVMeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMeNamespaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMeNamespaceStatsRequest* req,
             ::opi_api::storage::v1::NVMeNamespaceStatsResponse* resp) {
               return service->NVMeNamespaceStats(ctx, req, resp);
             }, this)));
}

NVMeNamespaceService::Service::~Service() {
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceCreate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceCreateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceDelete(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceDeleteRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceUpdate(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceUpdateRequest* request, ::opi_api::storage::v1::NVMeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceList(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceListRequest* request, ::opi_api::storage::v1::NVMeNamespaceListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceGetRequest* request, ::opi_api::storage::v1::NVMeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMeNamespaceService::Service::NVMeNamespaceStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMeNamespaceStatsRequest* request, ::opi_api::storage::v1::NVMeNamespaceStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

