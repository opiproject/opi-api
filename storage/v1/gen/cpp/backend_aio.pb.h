// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_aio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "object_key.pb.h"
#include "uuid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5faio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5faio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5faio_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class AioRemoteController;
struct AioRemoteControllerDefaultTypeInternal;
extern AioRemoteControllerDefaultTypeInternal _AioRemoteController_default_instance_;
class AioRemoteControllerCreateRequest;
struct AioRemoteControllerCreateRequestDefaultTypeInternal;
extern AioRemoteControllerCreateRequestDefaultTypeInternal _AioRemoteControllerCreateRequest_default_instance_;
class AioRemoteControllerDeleteRequest;
struct AioRemoteControllerDeleteRequestDefaultTypeInternal;
extern AioRemoteControllerDeleteRequestDefaultTypeInternal _AioRemoteControllerDeleteRequest_default_instance_;
class AioRemoteControllerGetListRequest;
struct AioRemoteControllerGetListRequestDefaultTypeInternal;
extern AioRemoteControllerGetListRequestDefaultTypeInternal _AioRemoteControllerGetListRequest_default_instance_;
class AioRemoteControllerGetRequest;
struct AioRemoteControllerGetRequestDefaultTypeInternal;
extern AioRemoteControllerGetRequestDefaultTypeInternal _AioRemoteControllerGetRequest_default_instance_;
class AioRemoteControllerGetStatsRequest;
struct AioRemoteControllerGetStatsRequestDefaultTypeInternal;
extern AioRemoteControllerGetStatsRequestDefaultTypeInternal _AioRemoteControllerGetStatsRequest_default_instance_;
class AioRemoteControllerList;
struct AioRemoteControllerListDefaultTypeInternal;
extern AioRemoteControllerListDefaultTypeInternal _AioRemoteControllerList_default_instance_;
class AioRemoteControllerStats;
struct AioRemoteControllerStatsDefaultTypeInternal;
extern AioRemoteControllerStatsDefaultTypeInternal _AioRemoteControllerStats_default_instance_;
class AioRemoteControllerStatsRequest;
struct AioRemoteControllerStatsRequestDefaultTypeInternal;
extern AioRemoteControllerStatsRequestDefaultTypeInternal _AioRemoteControllerStatsRequest_default_instance_;
class AioRemoteControllerUpdateRequest;
struct AioRemoteControllerUpdateRequestDefaultTypeInternal;
extern AioRemoteControllerUpdateRequestDefaultTypeInternal _AioRemoteControllerUpdateRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::AioRemoteController* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteController>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerCreateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerCreateRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerDeleteRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerGetListRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerGetListRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerGetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerGetRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerGetStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerList* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerList>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerStats* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerStats>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioRemoteControllerUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class AioRemoteController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteController) */ {
 public:
  inline AioRemoteController() : AioRemoteController(nullptr) {}
  ~AioRemoteController() override;
  explicit constexpr AioRemoteController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteController(const AioRemoteController& from);
  AioRemoteController(AioRemoteController&& from) noexcept
    : AioRemoteController() {
    *this = ::std::move(from);
  }

  inline AioRemoteController& operator=(const AioRemoteController& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteController& operator=(AioRemoteController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteController& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteController* internal_default_instance() {
    return reinterpret_cast<const AioRemoteController*>(
               &_AioRemoteController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AioRemoteController& a, AioRemoteController& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteController";
  }
  protected:
  explicit AioRemoteController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHandleFieldNumber = 1,
    kUuidFieldNumber = 6,
    kIdFieldNumber = 2,
    kBlockSizeFieldNumber = 4,
    kNumBlocksFieldNumber = 5,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // .opi_api.common.v1.Uuid uuid = 6;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::opi_api::common::v1::Uuid& uuid() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::Uuid* release_uuid();
  ::opi_api::common::v1::Uuid* mutable_uuid();
  void set_allocated_uuid(::opi_api::common::v1::Uuid* uuid);
  private:
  const ::opi_api::common::v1::Uuid& _internal_uuid() const;
  ::opi_api::common::v1::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::opi_api::common::v1::Uuid* uuid);
  ::opi_api::common::v1::Uuid* unsafe_arena_release_uuid();

  // int64 id = 2;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 block_size = 4;
  void clear_block_size();
  int64_t block_size() const;
  void set_block_size(int64_t value);
  private:
  int64_t _internal_block_size() const;
  void _internal_set_block_size(int64_t value);
  public:

  // int64 num_blocks = 5;
  void clear_num_blocks();
  int64_t num_blocks() const;
  void set_num_blocks(int64_t value);
  private:
  int64_t _internal_num_blocks() const;
  void _internal_set_num_blocks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::common::v1::ObjectKey* handle_;
  ::opi_api::common::v1::Uuid* uuid_;
  int64_t id_;
  int64_t block_size_;
  int64_t num_blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerCreateRequest) */ {
 public:
  inline AioRemoteControllerCreateRequest() : AioRemoteControllerCreateRequest(nullptr) {}
  ~AioRemoteControllerCreateRequest() override;
  explicit constexpr AioRemoteControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerCreateRequest(const AioRemoteControllerCreateRequest& from);
  AioRemoteControllerCreateRequest(AioRemoteControllerCreateRequest&& from) noexcept
    : AioRemoteControllerCreateRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerCreateRequest& operator=(const AioRemoteControllerCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerCreateRequest& operator=(AioRemoteControllerCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerCreateRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerCreateRequest*>(
               &_AioRemoteControllerCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AioRemoteControllerCreateRequest& a, AioRemoteControllerCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerCreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerCreateRequest";
  }
  protected:
  explicit AioRemoteControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .opi_api.storage.v1.AioRemoteController device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::opi_api::storage::v1::AioRemoteController& device() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::AioRemoteController* release_device();
  ::opi_api::storage::v1::AioRemoteController* mutable_device();
  void set_allocated_device(::opi_api::storage::v1::AioRemoteController* device);
  private:
  const ::opi_api::storage::v1::AioRemoteController& _internal_device() const;
  ::opi_api::storage::v1::AioRemoteController* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::opi_api::storage::v1::AioRemoteController* device);
  ::opi_api::storage::v1::AioRemoteController* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::AioRemoteController* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerDeleteRequest) */ {
 public:
  inline AioRemoteControllerDeleteRequest() : AioRemoteControllerDeleteRequest(nullptr) {}
  ~AioRemoteControllerDeleteRequest() override;
  explicit constexpr AioRemoteControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerDeleteRequest(const AioRemoteControllerDeleteRequest& from);
  AioRemoteControllerDeleteRequest(AioRemoteControllerDeleteRequest&& from) noexcept
    : AioRemoteControllerDeleteRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerDeleteRequest& operator=(const AioRemoteControllerDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerDeleteRequest& operator=(AioRemoteControllerDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerDeleteRequest*>(
               &_AioRemoteControllerDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AioRemoteControllerDeleteRequest& a, AioRemoteControllerDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerDeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerDeleteRequest";
  }
  protected:
  explicit AioRemoteControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerUpdateRequest) */ {
 public:
  inline AioRemoteControllerUpdateRequest() : AioRemoteControllerUpdateRequest(nullptr) {}
  ~AioRemoteControllerUpdateRequest() override;
  explicit constexpr AioRemoteControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerUpdateRequest(const AioRemoteControllerUpdateRequest& from);
  AioRemoteControllerUpdateRequest(AioRemoteControllerUpdateRequest&& from) noexcept
    : AioRemoteControllerUpdateRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerUpdateRequest& operator=(const AioRemoteControllerUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerUpdateRequest& operator=(AioRemoteControllerUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerUpdateRequest*>(
               &_AioRemoteControllerUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AioRemoteControllerUpdateRequest& a, AioRemoteControllerUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerUpdateRequest";
  }
  protected:
  explicit AioRemoteControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .opi_api.storage.v1.AioRemoteController device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::opi_api::storage::v1::AioRemoteController& device() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::AioRemoteController* release_device();
  ::opi_api::storage::v1::AioRemoteController* mutable_device();
  void set_allocated_device(::opi_api::storage::v1::AioRemoteController* device);
  private:
  const ::opi_api::storage::v1::AioRemoteController& _internal_device() const;
  ::opi_api::storage::v1::AioRemoteController* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::opi_api::storage::v1::AioRemoteController* device);
  ::opi_api::storage::v1::AioRemoteController* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::AioRemoteController* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerList) */ {
 public:
  inline AioRemoteControllerList() : AioRemoteControllerList(nullptr) {}
  ~AioRemoteControllerList() override;
  explicit constexpr AioRemoteControllerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerList(const AioRemoteControllerList& from);
  AioRemoteControllerList(AioRemoteControllerList&& from) noexcept
    : AioRemoteControllerList() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerList& operator=(const AioRemoteControllerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerList& operator=(AioRemoteControllerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerList* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerList*>(
               &_AioRemoteControllerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AioRemoteControllerList& a, AioRemoteControllerList& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerList";
  }
  protected:
  explicit AioRemoteControllerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.AioRemoteController device = 1;
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::opi_api::storage::v1::AioRemoteController* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioRemoteController >*
      mutable_device();
  private:
  const ::opi_api::storage::v1::AioRemoteController& _internal_device(int index) const;
  ::opi_api::storage::v1::AioRemoteController* _internal_add_device();
  public:
  const ::opi_api::storage::v1::AioRemoteController& device(int index) const;
  ::opi_api::storage::v1::AioRemoteController* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioRemoteController >&
      device() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioRemoteController > device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerGetRequest) */ {
 public:
  inline AioRemoteControllerGetRequest() : AioRemoteControllerGetRequest(nullptr) {}
  ~AioRemoteControllerGetRequest() override;
  explicit constexpr AioRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerGetRequest(const AioRemoteControllerGetRequest& from);
  AioRemoteControllerGetRequest(AioRemoteControllerGetRequest&& from) noexcept
    : AioRemoteControllerGetRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerGetRequest& operator=(const AioRemoteControllerGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerGetRequest& operator=(AioRemoteControllerGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerGetRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerGetRequest*>(
               &_AioRemoteControllerGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AioRemoteControllerGetRequest& a, AioRemoteControllerGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerGetRequest";
  }
  protected:
  explicit AioRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerGetListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerGetListRequest) */ {
 public:
  inline AioRemoteControllerGetListRequest() : AioRemoteControllerGetListRequest(nullptr) {}
  explicit constexpr AioRemoteControllerGetListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerGetListRequest(const AioRemoteControllerGetListRequest& from);
  AioRemoteControllerGetListRequest(AioRemoteControllerGetListRequest&& from) noexcept
    : AioRemoteControllerGetListRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerGetListRequest& operator=(const AioRemoteControllerGetListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerGetListRequest& operator=(AioRemoteControllerGetListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerGetListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerGetListRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerGetListRequest*>(
               &_AioRemoteControllerGetListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AioRemoteControllerGetListRequest& a, AioRemoteControllerGetListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerGetListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerGetListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerGetListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerGetListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AioRemoteControllerGetListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AioRemoteControllerGetListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerGetListRequest";
  }
  protected:
  explicit AioRemoteControllerGetListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerGetListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerGetStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerGetStatsRequest) */ {
 public:
  inline AioRemoteControllerGetStatsRequest() : AioRemoteControllerGetStatsRequest(nullptr) {}
  ~AioRemoteControllerGetStatsRequest() override;
  explicit constexpr AioRemoteControllerGetStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerGetStatsRequest(const AioRemoteControllerGetStatsRequest& from);
  AioRemoteControllerGetStatsRequest(AioRemoteControllerGetStatsRequest&& from) noexcept
    : AioRemoteControllerGetStatsRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerGetStatsRequest& operator=(const AioRemoteControllerGetStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerGetStatsRequest& operator=(AioRemoteControllerGetStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerGetStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerGetStatsRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerGetStatsRequest*>(
               &_AioRemoteControllerGetStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AioRemoteControllerGetStatsRequest& a, AioRemoteControllerGetStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerGetStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerGetStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerGetStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerGetStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerGetStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerGetStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerGetStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerGetStatsRequest";
  }
  protected:
  explicit AioRemoteControllerGetStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerStatsRequest) */ {
 public:
  inline AioRemoteControllerStatsRequest() : AioRemoteControllerStatsRequest(nullptr) {}
  ~AioRemoteControllerStatsRequest() override;
  explicit constexpr AioRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerStatsRequest(const AioRemoteControllerStatsRequest& from);
  AioRemoteControllerStatsRequest(AioRemoteControllerStatsRequest&& from) noexcept
    : AioRemoteControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerStatsRequest& operator=(const AioRemoteControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerStatsRequest& operator=(AioRemoteControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerStatsRequest*>(
               &_AioRemoteControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AioRemoteControllerStatsRequest& a, AioRemoteControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerStatsRequest";
  }
  protected:
  explicit AioRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioRemoteControllerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioRemoteControllerStats) */ {
 public:
  inline AioRemoteControllerStats() : AioRemoteControllerStats(nullptr) {}
  ~AioRemoteControllerStats() override;
  explicit constexpr AioRemoteControllerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioRemoteControllerStats(const AioRemoteControllerStats& from);
  AioRemoteControllerStats(AioRemoteControllerStats&& from) noexcept
    : AioRemoteControllerStats() {
    *this = ::std::move(from);
  }

  inline AioRemoteControllerStats& operator=(const AioRemoteControllerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioRemoteControllerStats& operator=(AioRemoteControllerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioRemoteControllerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioRemoteControllerStats* internal_default_instance() {
    return reinterpret_cast<const AioRemoteControllerStats*>(
               &_AioRemoteControllerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AioRemoteControllerStats& a, AioRemoteControllerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(AioRemoteControllerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioRemoteControllerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioRemoteControllerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioRemoteControllerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioRemoteControllerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioRemoteControllerStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioRemoteControllerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioRemoteControllerStats";
  }
  protected:
  explicit AioRemoteControllerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioRemoteControllerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AioRemoteController

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteController::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteController::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteController::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteController::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.handle)
  return _internal_handle();
}
inline void AioRemoteController::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteController.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteController::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteController::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteController.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteController::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteController::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteController.handle)
  return _msg;
}
inline void AioRemoteController::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteController.handle)
}

// int64 id = 2;
inline void AioRemoteController::clear_id() {
  id_ = int64_t{0};
}
inline int64_t AioRemoteController::_internal_id() const {
  return id_;
}
inline int64_t AioRemoteController::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.id)
  return _internal_id();
}
inline void AioRemoteController::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void AioRemoteController::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioRemoteController.id)
}

// string name = 3;
inline void AioRemoteController::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AioRemoteController::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AioRemoteController::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioRemoteController.name)
}
inline std::string* AioRemoteController::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteController.name)
  return _s;
}
inline const std::string& AioRemoteController::_internal_name() const {
  return name_.Get();
}
inline void AioRemoteController::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AioRemoteController::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AioRemoteController::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteController.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AioRemoteController::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteController.name)
}

// int64 block_size = 4;
inline void AioRemoteController::clear_block_size() {
  block_size_ = int64_t{0};
}
inline int64_t AioRemoteController::_internal_block_size() const {
  return block_size_;
}
inline int64_t AioRemoteController::block_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.block_size)
  return _internal_block_size();
}
inline void AioRemoteController::_internal_set_block_size(int64_t value) {
  
  block_size_ = value;
}
inline void AioRemoteController::set_block_size(int64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioRemoteController.block_size)
}

// int64 num_blocks = 5;
inline void AioRemoteController::clear_num_blocks() {
  num_blocks_ = int64_t{0};
}
inline int64_t AioRemoteController::_internal_num_blocks() const {
  return num_blocks_;
}
inline int64_t AioRemoteController::num_blocks() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.num_blocks)
  return _internal_num_blocks();
}
inline void AioRemoteController::_internal_set_num_blocks(int64_t value) {
  
  num_blocks_ = value;
}
inline void AioRemoteController::set_num_blocks(int64_t value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioRemoteController.num_blocks)
}

// .opi_api.common.v1.Uuid uuid = 6;
inline bool AioRemoteController::_internal_has_uuid() const {
  return this != internal_default_instance() && uuid_ != nullptr;
}
inline bool AioRemoteController::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::opi_api::common::v1::Uuid& AioRemoteController::_internal_uuid() const {
  const ::opi_api::common::v1::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::Uuid&>(
      ::opi_api::common::v1::_Uuid_default_instance_);
}
inline const ::opi_api::common::v1::Uuid& AioRemoteController::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteController.uuid)
  return _internal_uuid();
}
inline void AioRemoteController::unsafe_arena_set_allocated_uuid(
    ::opi_api::common::v1::Uuid* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteController.uuid)
}
inline ::opi_api::common::v1::Uuid* AioRemoteController::release_uuid() {
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::Uuid* AioRemoteController::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteController.uuid)
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::Uuid* AioRemoteController::_internal_mutable_uuid() {
  
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::Uuid>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::opi_api::common::v1::Uuid* AioRemoteController::mutable_uuid() {
  ::opi_api::common::v1::Uuid* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteController.uuid)
  return _msg;
}
inline void AioRemoteController::set_allocated_uuid(::opi_api::common::v1::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    
  } else {
    
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteController.uuid)
}

// -------------------------------------------------------------------

// AioRemoteControllerCreateRequest

// .opi_api.storage.v1.AioRemoteController device = 1;
inline bool AioRemoteControllerCreateRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool AioRemoteControllerCreateRequest::has_device() const {
  return _internal_has_device();
}
inline void AioRemoteControllerCreateRequest::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerCreateRequest::_internal_device() const {
  const ::opi_api::storage::v1::AioRemoteController* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::AioRemoteController&>(
      ::opi_api::storage::v1::_AioRemoteController_default_instance_);
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerCreateRequest::device() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerCreateRequest.device)
  return _internal_device();
}
inline void AioRemoteControllerCreateRequest::unsafe_arena_set_allocated_device(
    ::opi_api::storage::v1::AioRemoteController* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerCreateRequest.device)
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerCreateRequest::release_device() {
  
  ::opi_api::storage::v1::AioRemoteController* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerCreateRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerCreateRequest.device)
  
  ::opi_api::storage::v1::AioRemoteController* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerCreateRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::AioRemoteController>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerCreateRequest::mutable_device() {
  ::opi_api::storage::v1::AioRemoteController* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerCreateRequest.device)
  return _msg;
}
inline void AioRemoteControllerCreateRequest::set_allocated_device(::opi_api::storage::v1::AioRemoteController* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::AioRemoteController>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerCreateRequest.device)
}

// -------------------------------------------------------------------

// AioRemoteControllerDeleteRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteControllerDeleteRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteControllerDeleteRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerDeleteRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerDeleteRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerDeleteRequest.handle)
  return _internal_handle();
}
inline void AioRemoteControllerDeleteRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerDeleteRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerDeleteRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerDeleteRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerDeleteRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerDeleteRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerDeleteRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerDeleteRequest.handle)
  return _msg;
}
inline void AioRemoteControllerDeleteRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerDeleteRequest.handle)
}

// -------------------------------------------------------------------

// AioRemoteControllerUpdateRequest

// .opi_api.storage.v1.AioRemoteController device = 1;
inline bool AioRemoteControllerUpdateRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool AioRemoteControllerUpdateRequest::has_device() const {
  return _internal_has_device();
}
inline void AioRemoteControllerUpdateRequest::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerUpdateRequest::_internal_device() const {
  const ::opi_api::storage::v1::AioRemoteController* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::AioRemoteController&>(
      ::opi_api::storage::v1::_AioRemoteController_default_instance_);
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerUpdateRequest::device() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerUpdateRequest.device)
  return _internal_device();
}
inline void AioRemoteControllerUpdateRequest::unsafe_arena_set_allocated_device(
    ::opi_api::storage::v1::AioRemoteController* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerUpdateRequest.device)
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerUpdateRequest::release_device() {
  
  ::opi_api::storage::v1::AioRemoteController* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerUpdateRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerUpdateRequest.device)
  
  ::opi_api::storage::v1::AioRemoteController* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerUpdateRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::AioRemoteController>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerUpdateRequest::mutable_device() {
  ::opi_api::storage::v1::AioRemoteController* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerUpdateRequest.device)
  return _msg;
}
inline void AioRemoteControllerUpdateRequest::set_allocated_device(::opi_api::storage::v1::AioRemoteController* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::AioRemoteController>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerUpdateRequest.device)
}

// -------------------------------------------------------------------

// AioRemoteControllerList

// repeated .opi_api.storage.v1.AioRemoteController device = 1;
inline int AioRemoteControllerList::_internal_device_size() const {
  return device_.size();
}
inline int AioRemoteControllerList::device_size() const {
  return _internal_device_size();
}
inline void AioRemoteControllerList::clear_device() {
  device_.Clear();
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerList::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerList.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioRemoteController >*
AioRemoteControllerList::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.AioRemoteControllerList.device)
  return &device_;
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerList::_internal_device(int index) const {
  return device_.Get(index);
}
inline const ::opi_api::storage::v1::AioRemoteController& AioRemoteControllerList::device(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerList.device)
  return _internal_device(index);
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerList::_internal_add_device() {
  return device_.Add();
}
inline ::opi_api::storage::v1::AioRemoteController* AioRemoteControllerList::add_device() {
  ::opi_api::storage::v1::AioRemoteController* _add = _internal_add_device();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.AioRemoteControllerList.device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioRemoteController >&
AioRemoteControllerList::device() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.AioRemoteControllerList.device)
  return device_;
}

// -------------------------------------------------------------------

// AioRemoteControllerGetRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteControllerGetRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteControllerGetRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerGetRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerGetRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerGetRequest.handle)
  return _internal_handle();
}
inline void AioRemoteControllerGetRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerGetRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerGetRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerGetRequest.handle)
  return _msg;
}
inline void AioRemoteControllerGetRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerGetRequest.handle)
}

// -------------------------------------------------------------------

// AioRemoteControllerGetListRequest

// -------------------------------------------------------------------

// AioRemoteControllerGetStatsRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteControllerGetStatsRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteControllerGetStatsRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerGetStatsRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerGetStatsRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerGetStatsRequest.handle)
  return _internal_handle();
}
inline void AioRemoteControllerGetStatsRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerGetStatsRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetStatsRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetStatsRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerGetStatsRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetStatsRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerGetStatsRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerGetStatsRequest.handle)
  return _msg;
}
inline void AioRemoteControllerGetStatsRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerGetStatsRequest.handle)
}

// -------------------------------------------------------------------

// AioRemoteControllerStatsRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteControllerStatsRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteControllerStatsRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerStatsRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerStatsRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerStatsRequest.handle)
  return _internal_handle();
}
inline void AioRemoteControllerStatsRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerStatsRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStatsRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStatsRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerStatsRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStatsRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStatsRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerStatsRequest.handle)
  return _msg;
}
inline void AioRemoteControllerStatsRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerStatsRequest.handle)
}

// -------------------------------------------------------------------

// AioRemoteControllerStats

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioRemoteControllerStats::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioRemoteControllerStats::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerStats::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioRemoteControllerStats::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerStats.handle)
  return _internal_handle();
}
inline void AioRemoteControllerStats::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioRemoteControllerStats.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStats::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStats::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerStats.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStats::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioRemoteControllerStats::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerStats.handle)
  return _msg;
}
inline void AioRemoteControllerStats::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerStats.handle)
}

// string stats = 2;
inline void AioRemoteControllerStats::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& AioRemoteControllerStats::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioRemoteControllerStats.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AioRemoteControllerStats::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioRemoteControllerStats.stats)
}
inline std::string* AioRemoteControllerStats::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioRemoteControllerStats.stats)
  return _s;
}
inline const std::string& AioRemoteControllerStats::_internal_stats() const {
  return stats_.Get();
}
inline void AioRemoteControllerStats::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AioRemoteControllerStats::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AioRemoteControllerStats::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioRemoteControllerStats.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AioRemoteControllerStats::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioRemoteControllerStats.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto
