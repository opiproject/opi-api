// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_blk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fblk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fblk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fblk_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class VirtioBlk;
struct VirtioBlkDefaultTypeInternal;
extern VirtioBlkDefaultTypeInternal _VirtioBlk_default_instance_;
class VirtioBlkCreateRequest;
struct VirtioBlkCreateRequestDefaultTypeInternal;
extern VirtioBlkCreateRequestDefaultTypeInternal _VirtioBlkCreateRequest_default_instance_;
class VirtioBlkCreateResponse;
struct VirtioBlkCreateResponseDefaultTypeInternal;
extern VirtioBlkCreateResponseDefaultTypeInternal _VirtioBlkCreateResponse_default_instance_;
class VirtioBlkDeleteRequest;
struct VirtioBlkDeleteRequestDefaultTypeInternal;
extern VirtioBlkDeleteRequestDefaultTypeInternal _VirtioBlkDeleteRequest_default_instance_;
class VirtioBlkDeleteResponse;
struct VirtioBlkDeleteResponseDefaultTypeInternal;
extern VirtioBlkDeleteResponseDefaultTypeInternal _VirtioBlkDeleteResponse_default_instance_;
class VirtioBlkGetRequest;
struct VirtioBlkGetRequestDefaultTypeInternal;
extern VirtioBlkGetRequestDefaultTypeInternal _VirtioBlkGetRequest_default_instance_;
class VirtioBlkGetResponse;
struct VirtioBlkGetResponseDefaultTypeInternal;
extern VirtioBlkGetResponseDefaultTypeInternal _VirtioBlkGetResponse_default_instance_;
class VirtioBlkListRequest;
struct VirtioBlkListRequestDefaultTypeInternal;
extern VirtioBlkListRequestDefaultTypeInternal _VirtioBlkListRequest_default_instance_;
class VirtioBlkListResponse;
struct VirtioBlkListResponseDefaultTypeInternal;
extern VirtioBlkListResponseDefaultTypeInternal _VirtioBlkListResponse_default_instance_;
class VirtioBlkStatsRequest;
struct VirtioBlkStatsRequestDefaultTypeInternal;
extern VirtioBlkStatsRequestDefaultTypeInternal _VirtioBlkStatsRequest_default_instance_;
class VirtioBlkStatsResponse;
struct VirtioBlkStatsResponseDefaultTypeInternal;
extern VirtioBlkStatsResponseDefaultTypeInternal _VirtioBlkStatsResponse_default_instance_;
class VirtioBlkUpdateRequest;
struct VirtioBlkUpdateRequestDefaultTypeInternal;
extern VirtioBlkUpdateRequestDefaultTypeInternal _VirtioBlkUpdateRequest_default_instance_;
class VirtioBlkUpdateResponse;
struct VirtioBlkUpdateResponseDefaultTypeInternal;
extern VirtioBlkUpdateResponseDefaultTypeInternal _VirtioBlkUpdateResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::VirtioBlk* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkCreateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkCreateRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkCreateResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkCreateResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkDeleteRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkDeleteRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkDeleteResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkDeleteResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkGetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkGetRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkGetResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkGetResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkListRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkListRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkListResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkListResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkUpdateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkUpdateRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkUpdateResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioBlk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlk) */ {
 public:
  inline VirtioBlk() : VirtioBlk(nullptr) {}
  ~VirtioBlk() override;
  explicit constexpr VirtioBlk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlk(const VirtioBlk& from);
  VirtioBlk(VirtioBlk&& from) noexcept
    : VirtioBlk() {
    *this = ::std::move(from);
  }

  inline VirtioBlk& operator=(const VirtioBlk& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlk& operator=(VirtioBlk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlk& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlk* internal_default_instance() {
    return reinterpret_cast<const VirtioBlk*>(
               &_VirtioBlk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioBlk& a, VirtioBlk& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlk";
  }
  protected:
  explicit VirtioBlk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBdevFieldNumber = 4,
    kSerialNumberFieldNumber = 6,
    kPcieIdFieldNumber = 3,
    kIdFieldNumber = 1,
    kMaxIoQpsFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bdev = 4;
  void clear_bdev();
  const std::string& bdev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bdev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bdev();
  PROTOBUF_NODISCARD std::string* release_bdev();
  void set_allocated_bdev(std::string* bdev);
  private:
  const std::string& _internal_bdev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bdev(const std::string& value);
  std::string* _internal_mutable_bdev();
  public:

  // string serial_number = 6;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // .opi_api.storage.v1.NvmeControllerPciId pcie_id = 3;
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::NvmeControllerPciId& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeControllerPciId* release_pcie_id();
  ::opi_api::storage::v1::NvmeControllerPciId* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::NvmeControllerPciId* pcie_id);
  private:
  const ::opi_api::storage::v1::NvmeControllerPciId& _internal_pcie_id() const;
  ::opi_api::storage::v1::NvmeControllerPciId* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::NvmeControllerPciId* pcie_id);
  ::opi_api::storage::v1::NvmeControllerPciId* unsafe_arena_release_pcie_id();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 max_io_qps = 5;
  void clear_max_io_qps();
  int64_t max_io_qps() const;
  void set_max_io_qps(int64_t value);
  private:
  int64_t _internal_max_io_qps() const;
  void _internal_set_max_io_qps(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::opi_api::storage::v1::NvmeControllerPciId* pcie_id_;
  int64_t id_;
  int64_t max_io_qps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkCreateRequest) */ {
 public:
  inline VirtioBlkCreateRequest() : VirtioBlkCreateRequest(nullptr) {}
  ~VirtioBlkCreateRequest() override;
  explicit constexpr VirtioBlkCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkCreateRequest(const VirtioBlkCreateRequest& from);
  VirtioBlkCreateRequest(VirtioBlkCreateRequest&& from) noexcept
    : VirtioBlkCreateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkCreateRequest& operator=(const VirtioBlkCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkCreateRequest& operator=(VirtioBlkCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkCreateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkCreateRequest*>(
               &_VirtioBlkCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioBlkCreateRequest& a, VirtioBlkCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkCreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkCreateRequest";
  }
  protected:
  explicit VirtioBlkCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioBlk controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioBlk& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioBlk* controller);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioBlk* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkCreateResponse) */ {
 public:
  inline VirtioBlkCreateResponse() : VirtioBlkCreateResponse(nullptr) {}
  explicit constexpr VirtioBlkCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkCreateResponse(const VirtioBlkCreateResponse& from);
  VirtioBlkCreateResponse(VirtioBlkCreateResponse&& from) noexcept
    : VirtioBlkCreateResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkCreateResponse& operator=(const VirtioBlkCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkCreateResponse& operator=(VirtioBlkCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkCreateResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkCreateResponse*>(
               &_VirtioBlkCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtioBlkCreateResponse& a, VirtioBlkCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkCreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VirtioBlkCreateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VirtioBlkCreateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkCreateResponse";
  }
  protected:
  explicit VirtioBlkCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkDeleteRequest) */ {
 public:
  inline VirtioBlkDeleteRequest() : VirtioBlkDeleteRequest(nullptr) {}
  ~VirtioBlkDeleteRequest() override;
  explicit constexpr VirtioBlkDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkDeleteRequest(const VirtioBlkDeleteRequest& from);
  VirtioBlkDeleteRequest(VirtioBlkDeleteRequest&& from) noexcept
    : VirtioBlkDeleteRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkDeleteRequest& operator=(const VirtioBlkDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkDeleteRequest& operator=(VirtioBlkDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkDeleteRequest*>(
               &_VirtioBlkDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VirtioBlkDeleteRequest& a, VirtioBlkDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkDeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkDeleteRequest";
  }
  protected:
  explicit VirtioBlkDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // int64 controller_id = 1;
  void clear_controller_id();
  int64_t controller_id() const;
  void set_controller_id(int64_t value);
  private:
  int64_t _internal_controller_id() const;
  void _internal_set_controller_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkDeleteResponse) */ {
 public:
  inline VirtioBlkDeleteResponse() : VirtioBlkDeleteResponse(nullptr) {}
  explicit constexpr VirtioBlkDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkDeleteResponse(const VirtioBlkDeleteResponse& from);
  VirtioBlkDeleteResponse(VirtioBlkDeleteResponse&& from) noexcept
    : VirtioBlkDeleteResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkDeleteResponse& operator=(const VirtioBlkDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkDeleteResponse& operator=(VirtioBlkDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkDeleteResponse*>(
               &_VirtioBlkDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VirtioBlkDeleteResponse& a, VirtioBlkDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VirtioBlkDeleteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VirtioBlkDeleteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkDeleteResponse";
  }
  protected:
  explicit VirtioBlkDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkUpdateRequest) */ {
 public:
  inline VirtioBlkUpdateRequest() : VirtioBlkUpdateRequest(nullptr) {}
  ~VirtioBlkUpdateRequest() override;
  explicit constexpr VirtioBlkUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkUpdateRequest(const VirtioBlkUpdateRequest& from);
  VirtioBlkUpdateRequest(VirtioBlkUpdateRequest&& from) noexcept
    : VirtioBlkUpdateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkUpdateRequest& operator=(const VirtioBlkUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkUpdateRequest& operator=(VirtioBlkUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkUpdateRequest*>(
               &_VirtioBlkUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VirtioBlkUpdateRequest& a, VirtioBlkUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkUpdateRequest";
  }
  protected:
  explicit VirtioBlkUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioBlk controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioBlk& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioBlk* controller);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioBlk* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkUpdateResponse) */ {
 public:
  inline VirtioBlkUpdateResponse() : VirtioBlkUpdateResponse(nullptr) {}
  explicit constexpr VirtioBlkUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkUpdateResponse(const VirtioBlkUpdateResponse& from);
  VirtioBlkUpdateResponse(VirtioBlkUpdateResponse&& from) noexcept
    : VirtioBlkUpdateResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkUpdateResponse& operator=(const VirtioBlkUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkUpdateResponse& operator=(VirtioBlkUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkUpdateResponse*>(
               &_VirtioBlkUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VirtioBlkUpdateResponse& a, VirtioBlkUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VirtioBlkUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VirtioBlkUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkUpdateResponse";
  }
  protected:
  explicit VirtioBlkUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkListRequest) */ {
 public:
  inline VirtioBlkListRequest() : VirtioBlkListRequest(nullptr) {}
  ~VirtioBlkListRequest() override;
  explicit constexpr VirtioBlkListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkListRequest(const VirtioBlkListRequest& from);
  VirtioBlkListRequest(VirtioBlkListRequest&& from) noexcept
    : VirtioBlkListRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkListRequest& operator=(const VirtioBlkListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkListRequest& operator=(VirtioBlkListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkListRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkListRequest*>(
               &_VirtioBlkListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VirtioBlkListRequest& a, VirtioBlkListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkListRequest";
  }
  protected:
  explicit VirtioBlkListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsystemIdFieldNumber = 1,
  };
  // int64 subsystem_id = 1;
  void clear_subsystem_id();
  int64_t subsystem_id() const;
  void set_subsystem_id(int64_t value);
  private:
  int64_t _internal_subsystem_id() const;
  void _internal_set_subsystem_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t subsystem_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkListResponse) */ {
 public:
  inline VirtioBlkListResponse() : VirtioBlkListResponse(nullptr) {}
  explicit constexpr VirtioBlkListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkListResponse(const VirtioBlkListResponse& from);
  VirtioBlkListResponse(VirtioBlkListResponse&& from) noexcept
    : VirtioBlkListResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkListResponse& operator=(const VirtioBlkListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkListResponse& operator=(VirtioBlkListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkListResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkListResponse*>(
               &_VirtioBlkListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VirtioBlkListResponse& a, VirtioBlkListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VirtioBlkListResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VirtioBlkListResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkListResponse";
  }
  protected:
  explicit VirtioBlkListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkGetRequest) */ {
 public:
  inline VirtioBlkGetRequest() : VirtioBlkGetRequest(nullptr) {}
  ~VirtioBlkGetRequest() override;
  explicit constexpr VirtioBlkGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkGetRequest(const VirtioBlkGetRequest& from);
  VirtioBlkGetRequest(VirtioBlkGetRequest&& from) noexcept
    : VirtioBlkGetRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkGetRequest& operator=(const VirtioBlkGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkGetRequest& operator=(VirtioBlkGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkGetRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkGetRequest*>(
               &_VirtioBlkGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VirtioBlkGetRequest& a, VirtioBlkGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkGetRequest";
  }
  protected:
  explicit VirtioBlkGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // int64 controller_id = 1;
  void clear_controller_id();
  int64_t controller_id() const;
  void set_controller_id(int64_t value);
  private:
  int64_t _internal_controller_id() const;
  void _internal_set_controller_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkGetResponse) */ {
 public:
  inline VirtioBlkGetResponse() : VirtioBlkGetResponse(nullptr) {}
  ~VirtioBlkGetResponse() override;
  explicit constexpr VirtioBlkGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkGetResponse(const VirtioBlkGetResponse& from);
  VirtioBlkGetResponse(VirtioBlkGetResponse&& from) noexcept
    : VirtioBlkGetResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkGetResponse& operator=(const VirtioBlkGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkGetResponse& operator=(VirtioBlkGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkGetResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkGetResponse*>(
               &_VirtioBlkGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VirtioBlkGetResponse& a, VirtioBlkGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkGetResponse";
  }
  protected:
  explicit VirtioBlkGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioBlk controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioBlk& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioBlk* controller);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioBlk* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkStatsRequest) */ {
 public:
  inline VirtioBlkStatsRequest() : VirtioBlkStatsRequest(nullptr) {}
  ~VirtioBlkStatsRequest() override;
  explicit constexpr VirtioBlkStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkStatsRequest(const VirtioBlkStatsRequest& from);
  VirtioBlkStatsRequest(VirtioBlkStatsRequest&& from) noexcept
    : VirtioBlkStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkStatsRequest& operator=(const VirtioBlkStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkStatsRequest& operator=(VirtioBlkStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkStatsRequest*>(
               &_VirtioBlkStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VirtioBlkStatsRequest& a, VirtioBlkStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkStatsRequest";
  }
  protected:
  explicit VirtioBlkStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // int64 controller_id = 1;
  void clear_controller_id();
  int64_t controller_id() const;
  void set_controller_id(int64_t value);
  private:
  int64_t _internal_controller_id() const;
  void _internal_set_controller_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkStatsResponse) */ {
 public:
  inline VirtioBlkStatsResponse() : VirtioBlkStatsResponse(nullptr) {}
  ~VirtioBlkStatsResponse() override;
  explicit constexpr VirtioBlkStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkStatsResponse(const VirtioBlkStatsResponse& from);
  VirtioBlkStatsResponse(VirtioBlkStatsResponse&& from) noexcept
    : VirtioBlkStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkStatsResponse& operator=(const VirtioBlkStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkStatsResponse& operator=(VirtioBlkStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkStatsResponse*>(
               &_VirtioBlkStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VirtioBlkStatsResponse& a, VirtioBlkStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkStatsResponse";
  }
  protected:
  explicit VirtioBlkStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioBlk

// int64 id = 1;
inline void VirtioBlk::clear_id() {
  id_ = int64_t{0};
}
inline int64_t VirtioBlk::_internal_id() const {
  return id_;
}
inline int64_t VirtioBlk::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.id)
  return _internal_id();
}
inline void VirtioBlk::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void VirtioBlk::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.id)
}

// string name = 2;
inline void VirtioBlk::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VirtioBlk::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.name)
}
inline std::string* VirtioBlk::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.name)
  return _s;
}
inline const std::string& VirtioBlk::_internal_name() const {
  return name_.Get();
}
inline void VirtioBlk::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlk::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.name)
}

// .opi_api.storage.v1.NvmeControllerPciId pcie_id = 3;
inline bool VirtioBlk::_internal_has_pcie_id() const {
  return this != internal_default_instance() && pcie_id_ != nullptr;
}
inline bool VirtioBlk::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::NvmeControllerPciId& VirtioBlk::_internal_pcie_id() const {
  const ::opi_api::storage::v1::NvmeControllerPciId* p = pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeControllerPciId&>(
      ::opi_api::storage::v1::_NvmeControllerPciId_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeControllerPciId& VirtioBlk::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioBlk::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::NvmeControllerPciId* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioBlk::release_pcie_id() {
  
  ::opi_api::storage::v1::NvmeControllerPciId* temp = pcie_id_;
  pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioBlk::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.pcie_id)
  
  ::opi_api::storage::v1::NvmeControllerPciId* temp = pcie_id_;
  pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioBlk::_internal_mutable_pcie_id() {
  
  if (pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerPciId>(GetArenaForAllocation());
    pcie_id_ = p;
  }
  return pcie_id_;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioBlk::mutable_pcie_id() {
  ::opi_api::storage::v1::NvmeControllerPciId* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _msg;
}
inline void VirtioBlk::set_allocated_pcie_id(::opi_api::storage::v1::NvmeControllerPciId* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}

// string bdev = 4;
inline void VirtioBlk::clear_bdev() {
  bdev_.ClearToEmpty();
}
inline const std::string& VirtioBlk::bdev() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.bdev)
  return _internal_bdev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_bdev(ArgT0&& arg0, ArgT... args) {
 
 bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.bdev)
}
inline std::string* VirtioBlk::mutable_bdev() {
  std::string* _s = _internal_mutable_bdev();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.bdev)
  return _s;
}
inline const std::string& VirtioBlk::_internal_bdev() const {
  return bdev_.Get();
}
inline void VirtioBlk::_internal_set_bdev(const std::string& value) {
  
  bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_bdev() {
  
  return bdev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_bdev() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.bdev)
  return bdev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlk::set_allocated_bdev(std::string* bdev) {
  if (bdev != nullptr) {
    
  } else {
    
  }
  bdev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bdev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.bdev)
}

// int64 max_io_qps = 5;
inline void VirtioBlk::clear_max_io_qps() {
  max_io_qps_ = int64_t{0};
}
inline int64_t VirtioBlk::_internal_max_io_qps() const {
  return max_io_qps_;
}
inline int64_t VirtioBlk::max_io_qps() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.max_io_qps)
  return _internal_max_io_qps();
}
inline void VirtioBlk::_internal_set_max_io_qps(int64_t value) {
  
  max_io_qps_ = value;
}
inline void VirtioBlk::set_max_io_qps(int64_t value) {
  _internal_set_max_io_qps(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.max_io_qps)
}

// string serial_number = 6;
inline void VirtioBlk::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& VirtioBlk::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.serial_number)
}
inline std::string* VirtioBlk::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.serial_number)
  return _s;
}
inline const std::string& VirtioBlk::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void VirtioBlk::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlk::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.serial_number)
}

// -------------------------------------------------------------------

// VirtioBlkCreateRequest

// .opi_api.storage.v1.VirtioBlk controller = 1;
inline bool VirtioBlkCreateRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool VirtioBlkCreateRequest::has_controller() const {
  return _internal_has_controller();
}
inline void VirtioBlkCreateRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkCreateRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioBlk* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkCreateRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkCreateRequest.controller)
  return _internal_controller();
}
inline void VirtioBlkCreateRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioBlk* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlkCreateRequest.controller)
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkCreateRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkCreateRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkCreateRequest.controller)
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkCreateRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkCreateRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkCreateRequest.controller)
  return _msg;
}
inline void VirtioBlkCreateRequest::set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioBlk>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkCreateRequest.controller)
}

// -------------------------------------------------------------------

// VirtioBlkCreateResponse

// -------------------------------------------------------------------

// VirtioBlkDeleteRequest

// int64 controller_id = 1;
inline void VirtioBlkDeleteRequest::clear_controller_id() {
  controller_id_ = int64_t{0};
}
inline int64_t VirtioBlkDeleteRequest::_internal_controller_id() const {
  return controller_id_;
}
inline int64_t VirtioBlkDeleteRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkDeleteRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioBlkDeleteRequest::_internal_set_controller_id(int64_t value) {
  
  controller_id_ = value;
}
inline void VirtioBlkDeleteRequest::set_controller_id(int64_t value) {
  _internal_set_controller_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkDeleteRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioBlkDeleteResponse

// -------------------------------------------------------------------

// VirtioBlkUpdateRequest

// .opi_api.storage.v1.VirtioBlk controller = 1;
inline bool VirtioBlkUpdateRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool VirtioBlkUpdateRequest::has_controller() const {
  return _internal_has_controller();
}
inline void VirtioBlkUpdateRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkUpdateRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioBlk* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkUpdateRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkUpdateRequest.controller)
  return _internal_controller();
}
inline void VirtioBlkUpdateRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioBlk* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlkUpdateRequest.controller)
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkUpdateRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkUpdateRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkUpdateRequest.controller)
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkUpdateRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkUpdateRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkUpdateRequest.controller)
  return _msg;
}
inline void VirtioBlkUpdateRequest::set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioBlk>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkUpdateRequest.controller)
}

// -------------------------------------------------------------------

// VirtioBlkUpdateResponse

// -------------------------------------------------------------------

// VirtioBlkListRequest

// int64 subsystem_id = 1;
inline void VirtioBlkListRequest::clear_subsystem_id() {
  subsystem_id_ = int64_t{0};
}
inline int64_t VirtioBlkListRequest::_internal_subsystem_id() const {
  return subsystem_id_;
}
inline int64_t VirtioBlkListRequest::subsystem_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkListRequest.subsystem_id)
  return _internal_subsystem_id();
}
inline void VirtioBlkListRequest::_internal_set_subsystem_id(int64_t value) {
  
  subsystem_id_ = value;
}
inline void VirtioBlkListRequest::set_subsystem_id(int64_t value) {
  _internal_set_subsystem_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkListRequest.subsystem_id)
}

// -------------------------------------------------------------------

// VirtioBlkListResponse

// -------------------------------------------------------------------

// VirtioBlkGetRequest

// int64 controller_id = 1;
inline void VirtioBlkGetRequest::clear_controller_id() {
  controller_id_ = int64_t{0};
}
inline int64_t VirtioBlkGetRequest::_internal_controller_id() const {
  return controller_id_;
}
inline int64_t VirtioBlkGetRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkGetRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioBlkGetRequest::_internal_set_controller_id(int64_t value) {
  
  controller_id_ = value;
}
inline void VirtioBlkGetRequest::set_controller_id(int64_t value) {
  _internal_set_controller_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkGetRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioBlkGetResponse

// .opi_api.storage.v1.VirtioBlk controller = 1;
inline bool VirtioBlkGetResponse::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool VirtioBlkGetResponse::has_controller() const {
  return _internal_has_controller();
}
inline void VirtioBlkGetResponse::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkGetResponse::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioBlk* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& VirtioBlkGetResponse::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkGetResponse.controller)
  return _internal_controller();
}
inline void VirtioBlkGetResponse::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioBlk* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlkGetResponse.controller)
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkGetResponse::release_controller() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkGetResponse::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkGetResponse.controller)
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkGetResponse::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioBlk* VirtioBlkGetResponse::mutable_controller() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkGetResponse.controller)
  return _msg;
}
inline void VirtioBlkGetResponse::set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioBlk>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkGetResponse.controller)
}

// -------------------------------------------------------------------

// VirtioBlkStatsRequest

// int64 controller_id = 1;
inline void VirtioBlkStatsRequest::clear_controller_id() {
  controller_id_ = int64_t{0};
}
inline int64_t VirtioBlkStatsRequest::_internal_controller_id() const {
  return controller_id_;
}
inline int64_t VirtioBlkStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioBlkStatsRequest::_internal_set_controller_id(int64_t value) {
  
  controller_id_ = value;
}
inline void VirtioBlkStatsRequest::set_controller_id(int64_t value) {
  _internal_set_controller_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioBlkStatsResponse

// int64 id = 1;
inline void VirtioBlkStatsResponse::clear_id() {
  id_ = int64_t{0};
}
inline int64_t VirtioBlkStatsResponse::_internal_id() const {
  return id_;
}
inline int64_t VirtioBlkStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsResponse.id)
  return _internal_id();
}
inline void VirtioBlkStatsResponse::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void VirtioBlkStatsResponse::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkStatsResponse.id)
}

// string stats = 2;
inline void VirtioBlkStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioBlkStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlkStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
}
inline std::string* VirtioBlkStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioBlkStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioBlkStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlkStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlkStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlkStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
