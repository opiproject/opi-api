// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_aio.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
//
#ifndef GRPC_backend_5faio_2eproto__INCLUDED
#define GRPC_backend_5faio_2eproto__INCLUDED

#include "backend_aio.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

// Back End (network-facing) APIs.
//
class AioRemoteControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.AioRemoteControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAioRemoteControllerDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAioRemoteControllerDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::opi_api::storage::v1::AioRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerGetRaw(context, request, cq));
    }
    virtual ::grpc::Status AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::opi_api::storage::v1::AioRemoteControllerList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>> AsyncAioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>>(AsyncAioRemoteControllerGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>> PrepareAsyncAioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>>(PrepareAsyncAioRemoteControllerGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::opi_api::storage::v1::AioRemoteControllerStats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>> AsyncAioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>>(AsyncAioRemoteControllerGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>> PrepareAsyncAioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>>(PrepareAsyncAioRemoteControllerGetStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>* AsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerList>* PrepareAsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>* AsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteControllerStats>* PrepareAsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerCreateRaw(context, request, cq));
    }
    ::grpc::Status AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAioRemoteControllerDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAioRemoteControllerDeleteRaw(context, request, cq));
    }
    ::grpc::Status AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::opi_api::storage::v1::AioRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerGetRaw(context, request, cq));
    }
    ::grpc::Status AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::opi_api::storage::v1::AioRemoteControllerList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>> AsyncAioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>>(AsyncAioRemoteControllerGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>> PrepareAsyncAioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>>(PrepareAsyncAioRemoteControllerGetListRaw(context, request, cq));
    }
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::opi_api::storage::v1::AioRemoteControllerStats* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>> AsyncAioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>>(AsyncAioRemoteControllerGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>> PrepareAsyncAioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>>(PrepareAsyncAioRemoteControllerGetStatsRaw(context, request, cq));
    }
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> AsyncAioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(AsyncAioRemoteControllerUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>> PrepareAsyncAioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>>(PrepareAsyncAioRemoteControllerUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)>) override;
      void AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>* AsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>* PrepareAsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>* AsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>* PrepareAsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* PrepareAsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerCreate_;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerGet_;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerGetList_;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerGetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_AioRemoteControllerUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response);
    virtual ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response);
    virtual ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response);
    virtual ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response);
    virtual ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerCreate(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerDelete(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGet(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGetList(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioRemoteControllerList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGetStats(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioRemoteControllerStats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerUpdate(::grpc::ServerContext* context, ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AioRemoteControllerCreate<WithAsyncMethod_AioRemoteControllerDelete<WithAsyncMethod_AioRemoteControllerGet<WithAsyncMethod_AioRemoteControllerGetList<WithAsyncMethod_AioRemoteControllerGetStats<WithAsyncMethod_AioRemoteControllerUpdate<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response) { return this->AioRemoteControllerCreate(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerCreate(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response) { return this->AioRemoteControllerDelete(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerDelete(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response) { return this->AioRemoteControllerGet(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerGet(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGet(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response) { return this->AioRemoteControllerGetList(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerGetList(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGetList(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response) { return this->AioRemoteControllerGetStats(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerGetStats(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response) { return this->AioRemoteControllerUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_AioRemoteControllerUpdate(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AioRemoteControllerCreate<WithCallbackMethod_AioRemoteControllerDelete<WithCallbackMethod_AioRemoteControllerGet<WithCallbackMethod_AioRemoteControllerGetList<WithCallbackMethod_AioRemoteControllerGetStats<WithCallbackMethod_AioRemoteControllerUpdate<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioRemoteControllerUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerCreate(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerGetList(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerGetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerGetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioRemoteControllerUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioRemoteControllerUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerCreate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController>* streamer) {
                       return this->StreamedAioRemoteControllerCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerCreate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerCreateRequest,::opi_api::storage::v1::AioRemoteController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerDelete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAioRemoteControllerDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerDelete(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerGet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController>* streamer) {
                       return this->StreamedAioRemoteControllerGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerGetRequest,::opi_api::storage::v1::AioRemoteController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerGetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerGetList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList>* streamer) {
                       return this->StreamedAioRemoteControllerGetList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerGetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerGetList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerGetList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerGetListRequest,::opi_api::storage::v1::AioRemoteControllerList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerGetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerGetStats() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats>* streamer) {
                       return this->StreamedAioRemoteControllerGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerGetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerGetStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* /*request*/, ::opi_api::storage::v1::AioRemoteControllerStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest,::opi_api::storage::v1::AioRemoteControllerStats>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioRemoteControllerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioRemoteControllerUpdate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController>* streamer) {
                       return this->StreamedAioRemoteControllerUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioRemoteControllerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioRemoteControllerUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* /*request*/, ::opi_api::storage::v1::AioRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioRemoteControllerUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest,::opi_api::storage::v1::AioRemoteController>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AioRemoteControllerCreate<WithStreamedUnaryMethod_AioRemoteControllerDelete<WithStreamedUnaryMethod_AioRemoteControllerGet<WithStreamedUnaryMethod_AioRemoteControllerGetList<WithStreamedUnaryMethod_AioRemoteControllerGetStats<WithStreamedUnaryMethod_AioRemoteControllerUpdate<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AioRemoteControllerCreate<WithStreamedUnaryMethod_AioRemoteControllerDelete<WithStreamedUnaryMethod_AioRemoteControllerGet<WithStreamedUnaryMethod_AioRemoteControllerGetList<WithStreamedUnaryMethod_AioRemoteControllerGetStats<WithStreamedUnaryMethod_AioRemoteControllerUpdate<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_backend_5faio_2eproto__INCLUDED
