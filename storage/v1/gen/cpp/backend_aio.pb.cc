// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_aio.proto

#include "backend_aio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace storage {
namespace v1 {
constexpr AioRemoteController::AioRemoteController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , handle_(nullptr)
  , uuid_(nullptr)
  , id_(int64_t{0})
  , block_size_(int64_t{0})
  , num_blocks_(int64_t{0}){}
struct AioRemoteControllerDefaultTypeInternal {
  constexpr AioRemoteControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerDefaultTypeInternal() {}
  union {
    AioRemoteController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerDefaultTypeInternal _AioRemoteController_default_instance_;
constexpr AioRemoteControllerCreateRequest::AioRemoteControllerCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr){}
struct AioRemoteControllerCreateRequestDefaultTypeInternal {
  constexpr AioRemoteControllerCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerCreateRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerCreateRequestDefaultTypeInternal _AioRemoteControllerCreateRequest_default_instance_;
constexpr AioRemoteControllerDeleteRequest::AioRemoteControllerDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(nullptr){}
struct AioRemoteControllerDeleteRequestDefaultTypeInternal {
  constexpr AioRemoteControllerDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerDeleteRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerDeleteRequestDefaultTypeInternal _AioRemoteControllerDeleteRequest_default_instance_;
constexpr AioRemoteControllerUpdateRequest::AioRemoteControllerUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr){}
struct AioRemoteControllerUpdateRequestDefaultTypeInternal {
  constexpr AioRemoteControllerUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerUpdateRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerUpdateRequestDefaultTypeInternal _AioRemoteControllerUpdateRequest_default_instance_;
constexpr AioRemoteControllerList::AioRemoteControllerList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(){}
struct AioRemoteControllerListDefaultTypeInternal {
  constexpr AioRemoteControllerListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerListDefaultTypeInternal() {}
  union {
    AioRemoteControllerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerListDefaultTypeInternal _AioRemoteControllerList_default_instance_;
constexpr AioRemoteControllerGetRequest::AioRemoteControllerGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(nullptr){}
struct AioRemoteControllerGetRequestDefaultTypeInternal {
  constexpr AioRemoteControllerGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerGetRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerGetRequestDefaultTypeInternal _AioRemoteControllerGetRequest_default_instance_;
constexpr AioRemoteControllerGetListRequest::AioRemoteControllerGetListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AioRemoteControllerGetListRequestDefaultTypeInternal {
  constexpr AioRemoteControllerGetListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerGetListRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerGetListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerGetListRequestDefaultTypeInternal _AioRemoteControllerGetListRequest_default_instance_;
constexpr AioRemoteControllerGetStatsRequest::AioRemoteControllerGetStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(nullptr){}
struct AioRemoteControllerGetStatsRequestDefaultTypeInternal {
  constexpr AioRemoteControllerGetStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerGetStatsRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerGetStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerGetStatsRequestDefaultTypeInternal _AioRemoteControllerGetStatsRequest_default_instance_;
constexpr AioRemoteControllerStatsRequest::AioRemoteControllerStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(nullptr){}
struct AioRemoteControllerStatsRequestDefaultTypeInternal {
  constexpr AioRemoteControllerStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerStatsRequestDefaultTypeInternal() {}
  union {
    AioRemoteControllerStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerStatsRequestDefaultTypeInternal _AioRemoteControllerStatsRequest_default_instance_;
constexpr AioRemoteControllerStats::AioRemoteControllerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , handle_(nullptr){}
struct AioRemoteControllerStatsDefaultTypeInternal {
  constexpr AioRemoteControllerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AioRemoteControllerStatsDefaultTypeInternal() {}
  union {
    AioRemoteControllerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AioRemoteControllerStatsDefaultTypeInternal _AioRemoteControllerStats_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backend_5faio_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_backend_5faio_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backend_5faio_2eproto = nullptr;

const uint32_t TableStruct_backend_5faio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, block_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteController, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerCreateRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerDeleteRequest, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerUpdateRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerList, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerGetRequest, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerGetListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerStatsRequest, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerStats, handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::AioRemoteControllerStats, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteController)},
  { 12, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerCreateRequest)},
  { 19, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerDeleteRequest)},
  { 26, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerUpdateRequest)},
  { 33, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerList)},
  { 40, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerGetRequest)},
  { 47, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerGetListRequest)},
  { 53, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerGetStatsRequest)},
  { 60, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerStatsRequest)},
  { 67, -1, -1, sizeof(::opi_api::storage::v1::AioRemoteControllerStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerGetListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerGetStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_AioRemoteControllerStats_default_instance_),
};

const char descriptor_table_protodef_backend_5faio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021backend_aio.proto\022\022opi_api.storage.v1\032"
  "\033google/protobuf/empty.proto\032\020object_key"
  ".proto\032\nuuid.proto\"\254\001\n\023AioRemoteControll"
  "er\022,\n\006handle\030\001 \001(\0132\034.opi_api.common.v1.O"
  "bjectKey\022\n\n\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\022\n\nbl"
  "ock_size\030\004 \001(\003\022\022\n\nnum_blocks\030\005 \001(\003\022%\n\004uu"
  "id\030\006 \001(\0132\027.opi_api.common.v1.Uuid\"[\n Aio"
  "RemoteControllerCreateRequest\0227\n\006device\030"
  "\001 \001(\0132\'.opi_api.storage.v1.AioRemoteCont"
  "roller\"P\n AioRemoteControllerDeleteReque"
  "st\022,\n\006handle\030\001 \001(\0132\034.opi_api.common.v1.O"
  "bjectKey\"[\n AioRemoteControllerUpdateReq"
  "uest\0227\n\006device\030\001 \001(\0132\'.opi_api.storage.v"
  "1.AioRemoteController\"R\n\027AioRemoteContro"
  "llerList\0227\n\006device\030\001 \003(\0132\'.opi_api.stora"
  "ge.v1.AioRemoteController\"M\n\035AioRemoteCo"
  "ntrollerGetRequest\022,\n\006handle\030\001 \001(\0132\034.opi"
  "_api.common.v1.ObjectKey\"#\n!AioRemoteCon"
  "trollerGetListRequest\"R\n\"AioRemoteContro"
  "llerGetStatsRequest\022,\n\006handle\030\001 \001(\0132\034.op"
  "i_api.common.v1.ObjectKey\"O\n\037AioRemoteCo"
  "ntrollerStatsRequest\022,\n\006handle\030\001 \001(\0132\034.o"
  "pi_api.common.v1.ObjectKey\"W\n\030AioRemoteC"
  "ontrollerStats\022,\n\006handle\030\001 \001(\0132\034.opi_api"
  ".common.v1.ObjectKey\022\r\n\005stats\030\002 \001(\t2\212\006\n\032"
  "AioRemoteControllerService\022|\n\031AioRemoteC"
  "ontrollerCreate\0224.opi_api.storage.v1.Aio"
  "RemoteControllerCreateRequest\032\'.opi_api."
  "storage.v1.AioRemoteController\"\000\022k\n\031AioR"
  "emoteControllerDelete\0224.opi_api.storage."
  "v1.AioRemoteControllerDeleteRequest\032\026.go"
  "ogle.protobuf.Empty\"\000\022v\n\026AioRemoteContro"
  "llerGet\0221.opi_api.storage.v1.AioRemoteCo"
  "ntrollerGetRequest\032\'.opi_api.storage.v1."
  "AioRemoteController\"\000\022\202\001\n\032AioRemoteContr"
  "ollerGetList\0225.opi_api.storage.v1.AioRem"
  "oteControllerGetListRequest\032+.opi_api.st"
  "orage.v1.AioRemoteControllerList\"\000\022\205\001\n\033A"
  "ioRemoteControllerGetStats\0226.opi_api.sto"
  "rage.v1.AioRemoteControllerGetStatsReque"
  "st\032,.opi_api.storage.v1.AioRemoteControl"
  "lerStats\"\000\022|\n\031AioRemoteControllerUpdate\022"
  "4.opi_api.storage.v1.AioRemoteController"
  "UpdateRequest\032\'.opi_api.storage.v1.AioRe"
  "moteController\"\000B1Z/github.com/opiprojec"
  "t/opi-api/storage/v1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_backend_5faio_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
  &::descriptor_table_uuid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backend_5faio_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5faio_2eproto = {
  false, false, 1835, descriptor_table_protodef_backend_5faio_2eproto, "backend_aio.proto", 
  &descriptor_table_backend_5faio_2eproto_once, descriptor_table_backend_5faio_2eproto_deps, 3, 10,
  schemas, file_default_instances, TableStruct_backend_5faio_2eproto::offsets,
  file_level_metadata_backend_5faio_2eproto, file_level_enum_descriptors_backend_5faio_2eproto, file_level_service_descriptors_backend_5faio_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_backend_5faio_2eproto_getter() {
  return &descriptor_table_backend_5faio_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_backend_5faio_2eproto(&descriptor_table_backend_5faio_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class AioRemoteController::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteController* msg);
  static const ::opi_api::common::v1::Uuid& uuid(const AioRemoteController* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteController::_Internal::handle(const AioRemoteController* msg) {
  return *msg->handle_;
}
const ::opi_api::common::v1::Uuid&
AioRemoteController::_Internal::uuid(const AioRemoteController* msg) {
  return *msg->uuid_;
}
void AioRemoteController::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
void AioRemoteController::clear_uuid() {
  if (GetArenaForAllocation() == nullptr && uuid_ != nullptr) {
    delete uuid_;
  }
  uuid_ = nullptr;
}
AioRemoteController::AioRemoteController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteController)
}
AioRemoteController::AioRemoteController(const AioRemoteController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::opi_api::common::v1::Uuid(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteController)
}

inline void AioRemoteController::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(num_blocks_));
}

AioRemoteController::~AioRemoteController() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteController)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
  if (this != internal_default_instance()) delete uuid_;
}

void AioRemoteController::ArenaDtor(void* object) {
  AioRemoteController* _this = reinterpret_cast< AioRemoteController* >(object);
  (void)_this;
}
void AioRemoteController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteController::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uuid_ != nullptr) {
    delete uuid_;
  }
  uuid_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.AioRemoteController.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.Uuid uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.AioRemoteController.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int64 block_size = 4;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_block_size(), target);
  }

  // int64 num_blocks = 5;
  if (this->_internal_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_blocks(), target);
  }

  // .opi_api.common.v1.Uuid uuid = 6;
  if (this->_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteController)
  return target;
}

size_t AioRemoteController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  // .opi_api.common.v1.Uuid uuid = 6;
  if (this->_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 block_size = 4;
  if (this->_internal_block_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_block_size());
  }

  // int64 num_blocks = 5;
  if (this->_internal_num_blocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num_blocks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteController::GetClassData() const { return &_class_data_; }

void AioRemoteController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteController *>(to)->MergeFrom(
      static_cast<const AioRemoteController &>(from));
}


void AioRemoteController::MergeFrom(const AioRemoteController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteController)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  if (from._internal_has_uuid()) {
    _internal_mutable_uuid()->::opi_api::common::v1::Uuid::MergeFrom(from._internal_uuid());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteController::CopyFrom(const AioRemoteController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteController::IsInitialized() const {
  return true;
}

void AioRemoteController::InternalSwap(AioRemoteController* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AioRemoteController, num_blocks_)
      + sizeof(AioRemoteController::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(AioRemoteController, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteController::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[0]);
}

// ===================================================================

class AioRemoteControllerCreateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::AioRemoteController& device(const AioRemoteControllerCreateRequest* msg);
};

const ::opi_api::storage::v1::AioRemoteController&
AioRemoteControllerCreateRequest::_Internal::device(const AioRemoteControllerCreateRequest* msg) {
  return *msg->device_;
}
AioRemoteControllerCreateRequest::AioRemoteControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerCreateRequest)
}
AioRemoteControllerCreateRequest::AioRemoteControllerCreateRequest(const AioRemoteControllerCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::opi_api::storage::v1::AioRemoteController(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerCreateRequest)
}

inline void AioRemoteControllerCreateRequest::SharedCtor() {
device_ = nullptr;
}

AioRemoteControllerCreateRequest::~AioRemoteControllerCreateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void AioRemoteControllerCreateRequest::ArenaDtor(void* object) {
  AioRemoteControllerCreateRequest* _this = reinterpret_cast< AioRemoteControllerCreateRequest* >(object);
  (void)_this;
}
void AioRemoteControllerCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.AioRemoteController device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.AioRemoteController device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  return target;
}

size_t AioRemoteControllerCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.AioRemoteController device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerCreateRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerCreateRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerCreateRequest &>(from));
}


void AioRemoteControllerCreateRequest::MergeFrom(const AioRemoteControllerCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::opi_api::storage::v1::AioRemoteController::MergeFrom(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerCreateRequest::CopyFrom(const AioRemoteControllerCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerCreateRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerCreateRequest::InternalSwap(AioRemoteControllerCreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[1]);
}

// ===================================================================

class AioRemoteControllerDeleteRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteControllerDeleteRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteControllerDeleteRequest::_Internal::handle(const AioRemoteControllerDeleteRequest* msg) {
  return *msg->handle_;
}
void AioRemoteControllerDeleteRequest::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
AioRemoteControllerDeleteRequest::AioRemoteControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
}
AioRemoteControllerDeleteRequest::AioRemoteControllerDeleteRequest(const AioRemoteControllerDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
}

inline void AioRemoteControllerDeleteRequest::SharedCtor() {
handle_ = nullptr;
}

AioRemoteControllerDeleteRequest::~AioRemoteControllerDeleteRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete handle_;
}

void AioRemoteControllerDeleteRequest::ArenaDtor(void* object) {
  AioRemoteControllerDeleteRequest* _this = reinterpret_cast< AioRemoteControllerDeleteRequest* >(object);
  (void)_this;
}
void AioRemoteControllerDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  return target;
}

size_t AioRemoteControllerDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerDeleteRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerDeleteRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerDeleteRequest &>(from));
}


void AioRemoteControllerDeleteRequest::MergeFrom(const AioRemoteControllerDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerDeleteRequest::CopyFrom(const AioRemoteControllerDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerDeleteRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerDeleteRequest::InternalSwap(AioRemoteControllerDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[2]);
}

// ===================================================================

class AioRemoteControllerUpdateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::AioRemoteController& device(const AioRemoteControllerUpdateRequest* msg);
};

const ::opi_api::storage::v1::AioRemoteController&
AioRemoteControllerUpdateRequest::_Internal::device(const AioRemoteControllerUpdateRequest* msg) {
  return *msg->device_;
}
AioRemoteControllerUpdateRequest::AioRemoteControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
}
AioRemoteControllerUpdateRequest::AioRemoteControllerUpdateRequest(const AioRemoteControllerUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::opi_api::storage::v1::AioRemoteController(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
}

inline void AioRemoteControllerUpdateRequest::SharedCtor() {
device_ = nullptr;
}

AioRemoteControllerUpdateRequest::~AioRemoteControllerUpdateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void AioRemoteControllerUpdateRequest::ArenaDtor(void* object) {
  AioRemoteControllerUpdateRequest* _this = reinterpret_cast< AioRemoteControllerUpdateRequest* >(object);
  (void)_this;
}
void AioRemoteControllerUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.AioRemoteController device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.AioRemoteController device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  return target;
}

size_t AioRemoteControllerUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.AioRemoteController device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerUpdateRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerUpdateRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerUpdateRequest &>(from));
}


void AioRemoteControllerUpdateRequest::MergeFrom(const AioRemoteControllerUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::opi_api::storage::v1::AioRemoteController::MergeFrom(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerUpdateRequest::CopyFrom(const AioRemoteControllerUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerUpdateRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerUpdateRequest::InternalSwap(AioRemoteControllerUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[3]);
}

// ===================================================================

class AioRemoteControllerList::_Internal {
 public:
};

AioRemoteControllerList::AioRemoteControllerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  device_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerList)
}
AioRemoteControllerList::AioRemoteControllerList(const AioRemoteControllerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_(from.device_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerList)
}

inline void AioRemoteControllerList::SharedCtor() {
}

AioRemoteControllerList::~AioRemoteControllerList() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AioRemoteControllerList::ArenaDtor(void* object) {
  AioRemoteControllerList* _this = reinterpret_cast< AioRemoteControllerList* >(object);
  (void)_this;
}
void AioRemoteControllerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerList::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.AioRemoteController device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.AioRemoteController device = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_device(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerList)
  return target;
}

size_t AioRemoteControllerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.AioRemoteController device = 1;
  total_size += 1UL * this->_internal_device_size();
  for (const auto& msg : this->device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerList::GetClassData() const { return &_class_data_; }

void AioRemoteControllerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerList *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerList &>(from));
}


void AioRemoteControllerList::MergeFrom(const AioRemoteControllerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  device_.MergeFrom(from.device_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerList::CopyFrom(const AioRemoteControllerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerList::IsInitialized() const {
  return true;
}

void AioRemoteControllerList::InternalSwap(AioRemoteControllerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  device_.InternalSwap(&other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[4]);
}

// ===================================================================

class AioRemoteControllerGetRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteControllerGetRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteControllerGetRequest::_Internal::handle(const AioRemoteControllerGetRequest* msg) {
  return *msg->handle_;
}
void AioRemoteControllerGetRequest::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
AioRemoteControllerGetRequest::AioRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerGetRequest)
}
AioRemoteControllerGetRequest::AioRemoteControllerGetRequest(const AioRemoteControllerGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerGetRequest)
}

inline void AioRemoteControllerGetRequest::SharedCtor() {
handle_ = nullptr;
}

AioRemoteControllerGetRequest::~AioRemoteControllerGetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete handle_;
}

void AioRemoteControllerGetRequest::ArenaDtor(void* object) {
  AioRemoteControllerGetRequest* _this = reinterpret_cast< AioRemoteControllerGetRequest* >(object);
  (void)_this;
}
void AioRemoteControllerGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerGetRequest)
  return target;
}

size_t AioRemoteControllerGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerGetRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerGetRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerGetRequest &>(from));
}


void AioRemoteControllerGetRequest::MergeFrom(const AioRemoteControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerGetRequest::CopyFrom(const AioRemoteControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerGetRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerGetRequest::InternalSwap(AioRemoteControllerGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[5]);
}

// ===================================================================

class AioRemoteControllerGetListRequest::_Internal {
 public:
};

AioRemoteControllerGetListRequest::AioRemoteControllerGetListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerGetListRequest)
}
AioRemoteControllerGetListRequest::AioRemoteControllerGetListRequest(const AioRemoteControllerGetListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerGetListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerGetListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerGetListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerGetListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[6]);
}

// ===================================================================

class AioRemoteControllerGetStatsRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteControllerGetStatsRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteControllerGetStatsRequest::_Internal::handle(const AioRemoteControllerGetStatsRequest* msg) {
  return *msg->handle_;
}
void AioRemoteControllerGetStatsRequest::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
AioRemoteControllerGetStatsRequest::AioRemoteControllerGetStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
}
AioRemoteControllerGetStatsRequest::AioRemoteControllerGetStatsRequest(const AioRemoteControllerGetStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
}

inline void AioRemoteControllerGetStatsRequest::SharedCtor() {
handle_ = nullptr;
}

AioRemoteControllerGetStatsRequest::~AioRemoteControllerGetStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerGetStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete handle_;
}

void AioRemoteControllerGetStatsRequest::ArenaDtor(void* object) {
  AioRemoteControllerGetStatsRequest* _this = reinterpret_cast< AioRemoteControllerGetStatsRequest* >(object);
  (void)_this;
}
void AioRemoteControllerGetStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerGetStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerGetStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerGetStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerGetStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  return target;
}

size_t AioRemoteControllerGetStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerGetStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerGetStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerGetStatsRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerGetStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerGetStatsRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerGetStatsRequest &>(from));
}


void AioRemoteControllerGetStatsRequest::MergeFrom(const AioRemoteControllerGetStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerGetStatsRequest::CopyFrom(const AioRemoteControllerGetStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerGetStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerGetStatsRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerGetStatsRequest::InternalSwap(AioRemoteControllerGetStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerGetStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[7]);
}

// ===================================================================

class AioRemoteControllerStatsRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteControllerStatsRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteControllerStatsRequest::_Internal::handle(const AioRemoteControllerStatsRequest* msg) {
  return *msg->handle_;
}
void AioRemoteControllerStatsRequest::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
AioRemoteControllerStatsRequest::AioRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerStatsRequest)
}
AioRemoteControllerStatsRequest::AioRemoteControllerStatsRequest(const AioRemoteControllerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerStatsRequest)
}

inline void AioRemoteControllerStatsRequest::SharedCtor() {
handle_ = nullptr;
}

AioRemoteControllerStatsRequest::~AioRemoteControllerStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete handle_;
}

void AioRemoteControllerStatsRequest::ArenaDtor(void* object) {
  AioRemoteControllerStatsRequest* _this = reinterpret_cast< AioRemoteControllerStatsRequest* >(object);
  (void)_this;
}
void AioRemoteControllerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  return target;
}

size_t AioRemoteControllerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerStatsRequest::GetClassData() const { return &_class_data_; }

void AioRemoteControllerStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerStatsRequest *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerStatsRequest &>(from));
}


void AioRemoteControllerStatsRequest::MergeFrom(const AioRemoteControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerStatsRequest::CopyFrom(const AioRemoteControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerStatsRequest::IsInitialized() const {
  return true;
}

void AioRemoteControllerStatsRequest::InternalSwap(AioRemoteControllerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[8]);
}

// ===================================================================

class AioRemoteControllerStats::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& handle(const AioRemoteControllerStats* msg);
};

const ::opi_api::common::v1::ObjectKey&
AioRemoteControllerStats::_Internal::handle(const AioRemoteControllerStats* msg) {
  return *msg->handle_;
}
void AioRemoteControllerStats::clear_handle() {
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
}
AioRemoteControllerStats::AioRemoteControllerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.AioRemoteControllerStats)
}
AioRemoteControllerStats::AioRemoteControllerStats(const AioRemoteControllerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_handle()) {
    handle_ = new ::opi_api::common::v1::ObjectKey(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.AioRemoteControllerStats)
}

inline void AioRemoteControllerStats::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
handle_ = nullptr;
}

AioRemoteControllerStats::~AioRemoteControllerStats() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.AioRemoteControllerStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AioRemoteControllerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void AioRemoteControllerStats::ArenaDtor(void* object) {
  AioRemoteControllerStats* _this = reinterpret_cast< AioRemoteControllerStats* >(object);
  (void)_this;
}
void AioRemoteControllerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AioRemoteControllerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AioRemoteControllerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.AioRemoteControllerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && handle_ != nullptr) {
    delete handle_;
  }
  handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AioRemoteControllerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.AioRemoteControllerStats.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AioRemoteControllerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.AioRemoteControllerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handle(this), target, stream);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.AioRemoteControllerStats.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.AioRemoteControllerStats)
  return target;
}

size_t AioRemoteControllerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.AioRemoteControllerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // .opi_api.common.v1.ObjectKey handle = 1;
  if (this->_internal_has_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AioRemoteControllerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AioRemoteControllerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AioRemoteControllerStats::GetClassData() const { return &_class_data_; }

void AioRemoteControllerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AioRemoteControllerStats *>(to)->MergeFrom(
      static_cast<const AioRemoteControllerStats &>(from));
}


void AioRemoteControllerStats::MergeFrom(const AioRemoteControllerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.AioRemoteControllerStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_has_handle()) {
    _internal_mutable_handle()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AioRemoteControllerStats::CopyFrom(const AioRemoteControllerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.AioRemoteControllerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AioRemoteControllerStats::IsInitialized() const {
  return true;
}

void AioRemoteControllerStats::InternalSwap(AioRemoteControllerStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AioRemoteControllerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5faio_2eproto_getter, &descriptor_table_backend_5faio_2eproto_once,
      file_level_metadata_backend_5faio_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteController* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteController >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerCreateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerList* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerList >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerGetRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerGetListRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerGetListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerGetListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::AioRemoteControllerStats* Arena::CreateMaybeMessage< ::opi_api::storage::v1::AioRemoteControllerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::AioRemoteControllerStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
