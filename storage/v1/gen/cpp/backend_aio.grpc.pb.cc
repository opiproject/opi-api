// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_aio.proto

#include "backend_aio.pb.h"
#include "backend_aio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* AioRemoteControllerService_method_names[] = {
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerCreate",
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerDelete",
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerGet",
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerGetList",
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerGetStats",
  "/opi_api.storage.v1.AioRemoteControllerService/AioRemoteControllerUpdate",
};

std::unique_ptr< AioRemoteControllerService::Stub> AioRemoteControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AioRemoteControllerService::Stub> stub(new AioRemoteControllerService::Stub(channel, options));
  return stub;
}

AioRemoteControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AioRemoteControllerCreate_(AioRemoteControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioRemoteControllerDelete_(AioRemoteControllerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioRemoteControllerGet_(AioRemoteControllerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioRemoteControllerGetList_(AioRemoteControllerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioRemoteControllerGetStats_(AioRemoteControllerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioRemoteControllerUpdate_(AioRemoteControllerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerCreate_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerCreate_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerCreate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioRemoteController, ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerCreateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerDelete_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerDelete_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerDelete(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerDeleteRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::opi_api::storage::v1::AioRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerGet_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGet_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioRemoteController, ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::opi_api::storage::v1::AioRemoteControllerList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerGetList_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGetList_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGetList(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGetList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioRemoteControllerList, ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerGetList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerList>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerGetListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerGetListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::opi_api::storage::v1::AioRemoteControllerStats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerGetStats_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGetStats_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerGetStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerGetStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioRemoteControllerStats, ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerGetStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteControllerStats>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerGetStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerGetStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioRemoteControllerService::Stub::AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::opi_api::storage::v1::AioRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioRemoteControllerUpdate_, context, request, response);
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerUpdate_, context, request, response, std::move(f));
}

void AioRemoteControllerService::Stub::async::AioRemoteControllerUpdate(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioRemoteControllerUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::PrepareAsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioRemoteController, ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioRemoteControllerUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioRemoteController>* AioRemoteControllerService::Stub::AsyncAioRemoteControllerUpdateRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioRemoteControllerUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

AioRemoteControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerCreateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* req,
             ::opi_api::storage::v1::AioRemoteController* resp) {
               return service->AioRemoteControllerCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AioRemoteControllerDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerGetRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerGetRequest* req,
             ::opi_api::storage::v1::AioRemoteController* resp) {
               return service->AioRemoteControllerGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerGetListRequest, ::opi_api::storage::v1::AioRemoteControllerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* req,
             ::opi_api::storage::v1::AioRemoteControllerList* resp) {
               return service->AioRemoteControllerGetList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest, ::opi_api::storage::v1::AioRemoteControllerStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* req,
             ::opi_api::storage::v1::AioRemoteControllerStats* resp) {
               return service->AioRemoteControllerGetStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioRemoteControllerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioRemoteControllerService::Service, ::opi_api::storage::v1::AioRemoteControllerUpdateRequest, ::opi_api::storage::v1::AioRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* req,
             ::opi_api::storage::v1::AioRemoteController* resp) {
               return service->AioRemoteControllerUpdate(ctx, req, resp);
             }, this)));
}

AioRemoteControllerService::Service::~Service() {
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerCreate(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerCreateRequest* request, ::opi_api::storage::v1::AioRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerDelete(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerDeleteRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetRequest* request, ::opi_api::storage::v1::AioRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerGetList(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetListRequest* request, ::opi_api::storage::v1::AioRemoteControllerList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerGetStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerGetStatsRequest* request, ::opi_api::storage::v1::AioRemoteControllerStats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioRemoteControllerService::Service::AioRemoteControllerUpdate(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioRemoteControllerUpdateRequest* request, ::opi_api::storage::v1::AioRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

