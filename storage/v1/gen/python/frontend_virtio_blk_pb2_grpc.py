# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import frontend_virtio_blk_pb2 as frontend__virtio__blk__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class VirtioBlkServiceStub(object):
    """Front End (host-facing) APIs.

    Virtio-blk emulation

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VirtioBlkCreate = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkCreate',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkCreateRequest.SerializeToString,
                response_deserializer=frontend__virtio__blk__pb2.VirtioBlk.FromString,
                )
        self.VirtioBlkDelete = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkDelete',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.VirtioBlkUpdate = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkUpdate',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkUpdateRequest.SerializeToString,
                response_deserializer=frontend__virtio__blk__pb2.VirtioBlk.FromString,
                )
        self.VirtioBlkList = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkList',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkListRequest.SerializeToString,
                response_deserializer=frontend__virtio__blk__pb2.VirtioBlkListResponse.FromString,
                )
        self.VirtioBlkGet = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkGet',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkGetRequest.SerializeToString,
                response_deserializer=frontend__virtio__blk__pb2.VirtioBlk.FromString,
                )
        self.VirtioBlkStats = channel.unary_unary(
                '/opi_api.storage.v1.VirtioBlkService/VirtioBlkStats',
                request_serializer=frontend__virtio__blk__pb2.VirtioBlkStatsRequest.SerializeToString,
                response_deserializer=frontend__virtio__blk__pb2.VirtioBlkStatsResponse.FromString,
                )


class VirtioBlkServiceServicer(object):
    """Front End (host-facing) APIs.

    Virtio-blk emulation

    """

    def VirtioBlkCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtioBlkDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtioBlkUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtioBlkList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtioBlkGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VirtioBlkStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VirtioBlkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VirtioBlkCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkCreate,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkCreateRequest.FromString,
                    response_serializer=frontend__virtio__blk__pb2.VirtioBlk.SerializeToString,
            ),
            'VirtioBlkDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkDelete,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'VirtioBlkUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkUpdate,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkUpdateRequest.FromString,
                    response_serializer=frontend__virtio__blk__pb2.VirtioBlk.SerializeToString,
            ),
            'VirtioBlkList': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkList,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkListRequest.FromString,
                    response_serializer=frontend__virtio__blk__pb2.VirtioBlkListResponse.SerializeToString,
            ),
            'VirtioBlkGet': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkGet,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkGetRequest.FromString,
                    response_serializer=frontend__virtio__blk__pb2.VirtioBlk.SerializeToString,
            ),
            'VirtioBlkStats': grpc.unary_unary_rpc_method_handler(
                    servicer.VirtioBlkStats,
                    request_deserializer=frontend__virtio__blk__pb2.VirtioBlkStatsRequest.FromString,
                    response_serializer=frontend__virtio__blk__pb2.VirtioBlkStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.storage.v1.VirtioBlkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VirtioBlkService(object):
    """Front End (host-facing) APIs.

    Virtio-blk emulation

    """

    @staticmethod
    def VirtioBlkCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkCreate',
            frontend__virtio__blk__pb2.VirtioBlkCreateRequest.SerializeToString,
            frontend__virtio__blk__pb2.VirtioBlk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtioBlkDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkDelete',
            frontend__virtio__blk__pb2.VirtioBlkDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtioBlkUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkUpdate',
            frontend__virtio__blk__pb2.VirtioBlkUpdateRequest.SerializeToString,
            frontend__virtio__blk__pb2.VirtioBlk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtioBlkList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkList',
            frontend__virtio__blk__pb2.VirtioBlkListRequest.SerializeToString,
            frontend__virtio__blk__pb2.VirtioBlkListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtioBlkGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkGet',
            frontend__virtio__blk__pb2.VirtioBlkGetRequest.SerializeToString,
            frontend__virtio__blk__pb2.VirtioBlk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VirtioBlkStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.VirtioBlkService/VirtioBlkStats',
            frontend__virtio__blk__pb2.VirtioBlkStatsRequest.SerializeToString,
            frontend__virtio__blk__pb2.VirtioBlkStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
