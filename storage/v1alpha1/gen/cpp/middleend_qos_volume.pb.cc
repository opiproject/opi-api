// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: middleend_qos_volume.proto

#include "middleend_qos_volume.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace storage {
namespace v1 {
PROTOBUF_CONSTEXPR QosVolume::QosVolume(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volume_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limits_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QosVolumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QosVolumeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QosVolumeDefaultTypeInternal() {}
  union {
    QosVolume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QosVolumeDefaultTypeInternal _QosVolume_default_instance_;
PROTOBUF_CONSTEXPR Limits::Limits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/nullptr
  , /*decltype(_impl_.max_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LimitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LimitsDefaultTypeInternal() {}
  union {
    Limits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LimitsDefaultTypeInternal _Limits_default_instance_;
PROTOBUF_CONSTEXPR CreateQosVolumeRequest::CreateQosVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qos_volume_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qos_volume_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateQosVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateQosVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateQosVolumeRequestDefaultTypeInternal() {}
  union {
    CreateQosVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateQosVolumeRequestDefaultTypeInternal _CreateQosVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteQosVolumeRequest::DeleteQosVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allow_missing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteQosVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteQosVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteQosVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteQosVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteQosVolumeRequestDefaultTypeInternal _DeleteQosVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateQosVolumeRequest::UpdateQosVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qos_volume_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_.allow_missing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateQosVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateQosVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateQosVolumeRequestDefaultTypeInternal() {}
  union {
    UpdateQosVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateQosVolumeRequestDefaultTypeInternal _UpdateQosVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR ListQosVolumesRequest::ListQosVolumesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListQosVolumesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListQosVolumesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListQosVolumesRequestDefaultTypeInternal() {}
  union {
    ListQosVolumesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListQosVolumesRequestDefaultTypeInternal _ListQosVolumesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListQosVolumesResponse::ListQosVolumesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qos_volumes_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListQosVolumesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListQosVolumesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListQosVolumesResponseDefaultTypeInternal() {}
  union {
    ListQosVolumesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListQosVolumesResponseDefaultTypeInternal _ListQosVolumesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetQosVolumeRequest::GetQosVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetQosVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetQosVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetQosVolumeRequestDefaultTypeInternal() {}
  union {
    GetQosVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetQosVolumeRequestDefaultTypeInternal _GetQosVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR StatsQosVolumeRequest::StatsQosVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsQosVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsQosVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsQosVolumeRequestDefaultTypeInternal() {}
  union {
    StatsQosVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsQosVolumeRequestDefaultTypeInternal _StatsQosVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR StatsQosVolumeResponse::StatsQosVolumeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsQosVolumeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsQosVolumeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsQosVolumeResponseDefaultTypeInternal() {}
  union {
    StatsQosVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsQosVolumeResponseDefaultTypeInternal _StatsQosVolumeResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_middleend_5fqos_5fvolume_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_middleend_5fqos_5fvolume_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_middleend_5fqos_5fvolume_2eproto = nullptr;

const uint32_t TableStruct_middleend_5fqos_5fvolume_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosVolume, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosVolume, _impl_.volume_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosVolume, _impl_.limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::Limits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::Limits, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::Limits, _impl_.max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateQosVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateQosVolumeRequest, _impl_.qos_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateQosVolumeRequest, _impl_.qos_volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteQosVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteQosVolumeRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteQosVolumeRequest, _impl_.allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateQosVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateQosVolumeRequest, _impl_.qos_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateQosVolumeRequest, _impl_.update_mask_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateQosVolumeRequest, _impl_.allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesRequest, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesResponse, _impl_.qos_volumes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListQosVolumesResponse, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetQosVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetQosVolumeRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsQosVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsQosVolumeRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsQosVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsQosVolumeResponse, _impl_.stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::QosVolume)},
  { 9, -1, -1, sizeof(::opi_api::storage::v1::Limits)},
  { 17, -1, -1, sizeof(::opi_api::storage::v1::CreateQosVolumeRequest)},
  { 25, -1, -1, sizeof(::opi_api::storage::v1::DeleteQosVolumeRequest)},
  { 33, -1, -1, sizeof(::opi_api::storage::v1::UpdateQosVolumeRequest)},
  { 42, -1, -1, sizeof(::opi_api::storage::v1::ListQosVolumesRequest)},
  { 51, -1, -1, sizeof(::opi_api::storage::v1::ListQosVolumesResponse)},
  { 59, -1, -1, sizeof(::opi_api::storage::v1::GetQosVolumeRequest)},
  { 66, -1, -1, sizeof(::opi_api::storage::v1::StatsQosVolumeRequest)},
  { 73, -1, -1, sizeof(::opi_api::storage::v1::StatsQosVolumeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::storage::v1::_QosVolume_default_instance_._instance,
  &::opi_api::storage::v1::_Limits_default_instance_._instance,
  &::opi_api::storage::v1::_CreateQosVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_DeleteQosVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_UpdateQosVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_ListQosVolumesRequest_default_instance_._instance,
  &::opi_api::storage::v1::_ListQosVolumesResponse_default_instance_._instance,
  &::opi_api::storage::v1::_GetQosVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_StatsQosVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_StatsQosVolumeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_middleend_5fqos_5fvolume_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032middleend_qos_volume.proto\022\022opi_api.st"
  "orage.v1\032\017opicommon.proto\032\027google/api/cl"
  "ient.proto\032\031google/api/resource.proto\032\033g"
  "oogle/protobuf/empty.proto\032\034google/api/a"
  "nnotations.proto\032\037google/api/field_behav"
  "ior.proto\032 google/protobuf/field_mask.pr"
  "oto\"\341\001\n\tQosVolume\0225\n\004name\030\001 \001(\tB\'\340A\003\340A\005\372"
  "A\036\n\034opi_api.storage.v1/QosVolume\022\034\n\017volu"
  "me_name_ref\030\002 \001(\tB\003\340A\002\022/\n\006limits\030\003 \001(\0132\032"
  ".opi_api.storage.v1.LimitsB\003\340A\002:N\352AK\n st"
  "orage.opiproject.org/QosVolume\022\020volumes/"
  "{volume}*\nqosVolumes2\tqosVolume\"h\n\006Limit"
  "s\022.\n\003min\030\001 \001(\0132\034.opi_api.storage.v1.QosL"
  "imitB\003\340A\001\022.\n\003max\030\002 \001(\0132\034.opi_api.storage"
  ".v1.QosLimitB\003\340A\001\"l\n\026CreateQosVolumeRequ"
  "est\0226\n\nqos_volume\030\001 \001(\0132\035.opi_api.storag"
  "e.v1.QosVolumeB\003\340A\002\022\032\n\rqos_volume_id\030\002 \001"
  "(\tB\003\340A\001\"h\n\026DeleteQosVolumeRequest\0222\n\004nam"
  "e\030\001 \001(\tB$\340A\002\372A\036\n\034opi_api.storage.v1/QosV"
  "olume\022\032\n\rallow_missing\030\002 \001(\010B\003\340A\001\"\242\001\n\026Up"
  "dateQosVolumeRequest\0226\n\nqos_volume\030\001 \001(\013"
  "2\035.opi_api.storage.v1.QosVolumeB\003\340A\002\0224\n\013"
  "update_mask\030\002 \001(\0132\032.google.protobuf.Fiel"
  "dMaskB\003\340A\001\022\032\n\rallow_missing\030\003 \001(\010B\003\340A\001\"~"
  "\n\025ListQosVolumesRequest\0224\n\006parent\030\001 \001(\tB"
  "$\340A\002\372A\036\n\034opi_api.storage.v1/QosVolume\022\026\n"
  "\tpage_size\030\002 \001(\005B\003\340A\001\022\027\n\npage_token\030\003 \001("
  "\tB\003\340A\001\"e\n\026ListQosVolumesResponse\0222\n\013qos_"
  "volumes\030\001 \003(\0132\035.opi_api.storage.v1.QosVo"
  "lume\022\027\n\017next_page_token\030\002 \001(\t\"I\n\023GetQosV"
  "olumeRequest\0222\n\004name\030\001 \001(\tB$\340A\002\372A\036\n\034opi_"
  "api.storage.v1/QosVolume\"K\n\025StatsQosVolu"
  "meRequest\0222\n\004name\030\001 \001(\tB$\340A\002\372A\036\n\034opi_api"
  ".storage.v1/QosVolume\"H\n\026StatsQosVolumeR"
  "esponse\022.\n\005stats\030\001 \001(\0132\037.opi_api.storage"
  ".v1.VolumeStats2\214\007\n\031MiddleendQosVolumeSe"
  "rvice\022\230\001\n\017CreateQosVolume\022*.opi_api.stor"
  "age.v1.CreateQosVolumeRequest\032\035.opi_api."
  "storage.v1.QosVolume\":\202\323\344\223\002\031\"\013/v1/volume"
  "s:\nqos_volume\332A\030qos_volume,qos_volume_id"
  "\022}\n\017DeleteQosVolume\022*.opi_api.storage.v1"
  ".DeleteQosVolumeRequest\032\026.google.protobu"
  "f.Empty\"&\202\323\344\223\002\031*\027/v1/{name=QosVolumes/*}"
  "\332A\004name\022\253\001\n\017UpdateQosVolume\022*.opi_api.st"
  "orage.v1.UpdateQosVolumeRequest\032\035.opi_ap"
  "i.storage.v1.QosVolume\"M\202\323\344\223\002.2 /v1/{qos"
  "_volume.name=subsystems}:\nqos_volume\332A\026q"
  "os_volume,update_mask\022\216\001\n\016ListQosVolumes"
  "\022).opi_api.storage.v1.ListQosVolumesRequ"
  "est\032*.opi_api.storage.v1.ListQosVolumesR"
  "esponse\"%\202\323\344\223\002\026\022\024/v1/{parent=volumes}\332A\006"
  "parent\022~\n\014GetQosVolume\022\'.opi_api.storage"
  ".v1.GetQosVolumeRequest\032\035.opi_api.storag"
  "e.v1.QosVolume\"&\202\323\344\223\002\031\022\027/v1/{name=QosVol"
  "umes/*}\332A\004name\022\225\001\n\016StatsQosVolume\022).opi_"
  "api.storage.v1.StatsQosVolumeRequest\032*.o"
  "pi_api.storage.v1.StatsQosVolumeResponse"
  "\",\202\323\344\223\002\037\022\035/v1/{name=QosVolumes/*}:stats\332"
  "A\004nameBf\n\022opi_api.storage.v1B\027MiddleendQ"
  "osVolumeProtoP\001Z5github.com/opiproject/o"
  "pi-api/storage/v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_middleend_5fqos_5fvolume_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_opicommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_middleend_5fqos_5fvolume_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_middleend_5fqos_5fvolume_2eproto = {
    false, false, 2438, descriptor_table_protodef_middleend_5fqos_5fvolume_2eproto,
    "middleend_qos_volume.proto",
    &descriptor_table_middleend_5fqos_5fvolume_2eproto_once, descriptor_table_middleend_5fqos_5fvolume_2eproto_deps, 7, 10,
    schemas, file_default_instances, TableStruct_middleend_5fqos_5fvolume_2eproto::offsets,
    file_level_metadata_middleend_5fqos_5fvolume_2eproto, file_level_enum_descriptors_middleend_5fqos_5fvolume_2eproto,
    file_level_service_descriptors_middleend_5fqos_5fvolume_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_middleend_5fqos_5fvolume_2eproto_getter() {
  return &descriptor_table_middleend_5fqos_5fvolume_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_middleend_5fqos_5fvolume_2eproto(&descriptor_table_middleend_5fqos_5fvolume_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class QosVolume::_Internal {
 public:
  static const ::opi_api::storage::v1::Limits& limits(const QosVolume* msg);
};

const ::opi_api::storage::v1::Limits&
QosVolume::_Internal::limits(const QosVolume* msg) {
  return *msg->_impl_.limits_;
}
QosVolume::QosVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.QosVolume)
}
QosVolume::QosVolume(const QosVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QosVolume* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.volume_name_ref_){}
    , decltype(_impl_.limits_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.volume_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volume_name_ref().empty()) {
    _this->_impl_.volume_name_ref_.Set(from._internal_volume_name_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_limits()) {
    _this->_impl_.limits_ = new ::opi_api::storage::v1::Limits(*from._impl_.limits_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.QosVolume)
}

inline void QosVolume::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.volume_name_ref_){}
    , decltype(_impl_.limits_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.volume_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QosVolume::~QosVolume() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.QosVolume)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QosVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.volume_name_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.limits_;
}

void QosVolume::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QosVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.QosVolume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.volume_name_ref_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.limits_ != nullptr) {
    delete _impl_.limits_;
  }
  _impl_.limits_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QosVolume::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.QosVolume.name"));
        } else
          goto handle_unusual;
        continue;
      // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_volume_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.QosVolume.volume_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.Limits limits = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_limits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QosVolume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.QosVolume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.QosVolume.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_volume_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name_ref().data(), static_cast<int>(this->_internal_volume_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.QosVolume.volume_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name_ref(), target);
  }

  // .opi_api.storage.v1.Limits limits = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_limits()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::limits(this),
        _Internal::limits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.QosVolume)
  return target;
}

size_t QosVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.QosVolume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_volume_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name_ref());
  }

  // .opi_api.storage.v1.Limits limits = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limits_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QosVolume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QosVolume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QosVolume::GetClassData() const { return &_class_data_; }


void QosVolume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QosVolume*>(&to_msg);
  auto& from = static_cast<const QosVolume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.QosVolume)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_volume_name_ref().empty()) {
    _this->_internal_set_volume_name_ref(from._internal_volume_name_ref());
  }
  if (from._internal_has_limits()) {
    _this->_internal_mutable_limits()->::opi_api::storage::v1::Limits::MergeFrom(
        from._internal_limits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QosVolume::CopyFrom(const QosVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.QosVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QosVolume::IsInitialized() const {
  return true;
}

void QosVolume::InternalSwap(QosVolume* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.volume_name_ref_, lhs_arena,
      &other->_impl_.volume_name_ref_, rhs_arena
  );
  swap(_impl_.limits_, other->_impl_.limits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QosVolume::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[0]);
}

// ===================================================================

class Limits::_Internal {
 public:
  static const ::opi_api::storage::v1::QosLimit& min(const Limits* msg);
  static const ::opi_api::storage::v1::QosLimit& max(const Limits* msg);
};

const ::opi_api::storage::v1::QosLimit&
Limits::_Internal::min(const Limits* msg) {
  return *msg->_impl_.min_;
}
const ::opi_api::storage::v1::QosLimit&
Limits::_Internal::max(const Limits* msg) {
  return *msg->_impl_.max_;
}
void Limits::clear_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
}
void Limits::clear_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
}
Limits::Limits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.Limits)
}
Limits::Limits(const Limits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Limits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    _this->_impl_.min_ = new ::opi_api::storage::v1::QosLimit(*from._impl_.min_);
  }
  if (from._internal_has_max()) {
    _this->_impl_.max_ = new ::opi_api::storage::v1::QosLimit(*from._impl_.max_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.Limits)
}

inline void Limits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Limits::~Limits() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.Limits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Limits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.min_;
  if (this != internal_default_instance()) delete _impl_.max_;
}

void Limits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Limits::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.Limits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Limits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.QosLimit min = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.QosLimit max = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Limits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.Limits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.QosLimit min = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // .opi_api.storage.v1.QosLimit max = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.Limits)
  return target;
}

size_t Limits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.Limits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.QosLimit min = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_);
  }

  // .opi_api.storage.v1.QosLimit max = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Limits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Limits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Limits::GetClassData() const { return &_class_data_; }


void Limits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Limits*>(&to_msg);
  auto& from = static_cast<const Limits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.Limits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min()) {
    _this->_internal_mutable_min()->::opi_api::storage::v1::QosLimit::MergeFrom(
        from._internal_min());
  }
  if (from._internal_has_max()) {
    _this->_internal_mutable_max()->::opi_api::storage::v1::QosLimit::MergeFrom(
        from._internal_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Limits::CopyFrom(const Limits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.Limits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limits::IsInitialized() const {
  return true;
}

void Limits::InternalSwap(Limits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Limits, _impl_.max_)
      + sizeof(Limits::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(Limits, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Limits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[1]);
}

// ===================================================================

class CreateQosVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::QosVolume& qos_volume(const CreateQosVolumeRequest* msg);
};

const ::opi_api::storage::v1::QosVolume&
CreateQosVolumeRequest::_Internal::qos_volume(const CreateQosVolumeRequest* msg) {
  return *msg->_impl_.qos_volume_;
}
CreateQosVolumeRequest::CreateQosVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.CreateQosVolumeRequest)
}
CreateQosVolumeRequest::CreateQosVolumeRequest(const CreateQosVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateQosVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volume_id_){}
    , decltype(_impl_.qos_volume_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.qos_volume_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qos_volume_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_qos_volume_id().empty()) {
    _this->_impl_.qos_volume_id_.Set(from._internal_qos_volume_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_qos_volume()) {
    _this->_impl_.qos_volume_ = new ::opi_api::storage::v1::QosVolume(*from._impl_.qos_volume_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.CreateQosVolumeRequest)
}

inline void CreateQosVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volume_id_){}
    , decltype(_impl_.qos_volume_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.qos_volume_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qos_volume_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateQosVolumeRequest::~CreateQosVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.CreateQosVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateQosVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qos_volume_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.qos_volume_;
}

void CreateQosVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateQosVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.CreateQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qos_volume_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.qos_volume_ != nullptr) {
    delete _impl_.qos_volume_;
  }
  _impl_.qos_volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateQosVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string qos_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_qos_volume_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.CreateQosVolumeRequest.qos_volume_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateQosVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.CreateQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_qos_volume()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::qos_volume(this),
        _Internal::qos_volume(this).GetCachedSize(), target, stream);
  }

  // string qos_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_qos_volume_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_qos_volume_id().data(), static_cast<int>(this->_internal_qos_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.CreateQosVolumeRequest.qos_volume_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_qos_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.CreateQosVolumeRequest)
  return target;
}

size_t CreateQosVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.CreateQosVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string qos_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_qos_volume_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qos_volume_id());
  }

  // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_qos_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qos_volume_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateQosVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateQosVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateQosVolumeRequest::GetClassData() const { return &_class_data_; }


void CreateQosVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateQosVolumeRequest*>(&to_msg);
  auto& from = static_cast<const CreateQosVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.CreateQosVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_qos_volume_id().empty()) {
    _this->_internal_set_qos_volume_id(from._internal_qos_volume_id());
  }
  if (from._internal_has_qos_volume()) {
    _this->_internal_mutable_qos_volume()->::opi_api::storage::v1::QosVolume::MergeFrom(
        from._internal_qos_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateQosVolumeRequest::CopyFrom(const CreateQosVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.CreateQosVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateQosVolumeRequest::IsInitialized() const {
  return true;
}

void CreateQosVolumeRequest::InternalSwap(CreateQosVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qos_volume_id_, lhs_arena,
      &other->_impl_.qos_volume_id_, rhs_arena
  );
  swap(_impl_.qos_volume_, other->_impl_.qos_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateQosVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[2]);
}

// ===================================================================

class DeleteQosVolumeRequest::_Internal {
 public:
};

DeleteQosVolumeRequest::DeleteQosVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.DeleteQosVolumeRequest)
}
DeleteQosVolumeRequest::DeleteQosVolumeRequest(const DeleteQosVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteQosVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.allow_missing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.allow_missing_ = from._impl_.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.DeleteQosVolumeRequest)
}

inline void DeleteQosVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.allow_missing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteQosVolumeRequest::~DeleteQosVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.DeleteQosVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteQosVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeleteQosVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteQosVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.DeleteQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteQosVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.DeleteQosVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteQosVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.DeleteQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.DeleteQosVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.DeleteQosVolumeRequest)
  return target;
}

size_t DeleteQosVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.DeleteQosVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteQosVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteQosVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteQosVolumeRequest::GetClassData() const { return &_class_data_; }


void DeleteQosVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteQosVolumeRequest*>(&to_msg);
  auto& from = static_cast<const DeleteQosVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.DeleteQosVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_allow_missing() != 0) {
    _this->_internal_set_allow_missing(from._internal_allow_missing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteQosVolumeRequest::CopyFrom(const DeleteQosVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.DeleteQosVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteQosVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteQosVolumeRequest::InternalSwap(DeleteQosVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.allow_missing_, other->_impl_.allow_missing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteQosVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[3]);
}

// ===================================================================

class UpdateQosVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::QosVolume& qos_volume(const UpdateQosVolumeRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateQosVolumeRequest* msg);
};

const ::opi_api::storage::v1::QosVolume&
UpdateQosVolumeRequest::_Internal::qos_volume(const UpdateQosVolumeRequest* msg) {
  return *msg->_impl_.qos_volume_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateQosVolumeRequest::_Internal::update_mask(const UpdateQosVolumeRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateQosVolumeRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdateQosVolumeRequest::UpdateQosVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.UpdateQosVolumeRequest)
}
UpdateQosVolumeRequest::UpdateQosVolumeRequest(const UpdateQosVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateQosVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volume_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.allow_missing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qos_volume()) {
    _this->_impl_.qos_volume_ = new ::opi_api::storage::v1::QosVolume(*from._impl_.qos_volume_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  _this->_impl_.allow_missing_ = from._impl_.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.UpdateQosVolumeRequest)
}

inline void UpdateQosVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volume_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.allow_missing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateQosVolumeRequest::~UpdateQosVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.UpdateQosVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateQosVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.qos_volume_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateQosVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateQosVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.UpdateQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.qos_volume_ != nullptr) {
    delete _impl_.qos_volume_;
  }
  _impl_.qos_volume_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _impl_.allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateQosVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateQosVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.UpdateQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_qos_volume()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::qos_volume(this),
        _Internal::qos_volume(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.UpdateQosVolumeRequest)
  return target;
}

size_t UpdateQosVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.UpdateQosVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.QosVolume qos_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_qos_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qos_volume_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateQosVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateQosVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateQosVolumeRequest::GetClassData() const { return &_class_data_; }


void UpdateQosVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateQosVolumeRequest*>(&to_msg);
  auto& from = static_cast<const UpdateQosVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.UpdateQosVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qos_volume()) {
    _this->_internal_mutable_qos_volume()->::opi_api::storage::v1::QosVolume::MergeFrom(
        from._internal_qos_volume());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  if (from._internal_allow_missing() != 0) {
    _this->_internal_set_allow_missing(from._internal_allow_missing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateQosVolumeRequest::CopyFrom(const UpdateQosVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.UpdateQosVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQosVolumeRequest::IsInitialized() const {
  return true;
}

void UpdateQosVolumeRequest::InternalSwap(UpdateQosVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateQosVolumeRequest, _impl_.allow_missing_)
      + sizeof(UpdateQosVolumeRequest::_impl_.allow_missing_)
      - PROTOBUF_FIELD_OFFSET(UpdateQosVolumeRequest, _impl_.qos_volume_)>(
          reinterpret_cast<char*>(&_impl_.qos_volume_),
          reinterpret_cast<char*>(&other->_impl_.qos_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateQosVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[4]);
}

// ===================================================================

class ListQosVolumesRequest::_Internal {
 public:
};

ListQosVolumesRequest::ListQosVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListQosVolumesRequest)
}
ListQosVolumesRequest::ListQosVolumesRequest(const ListQosVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListQosVolumesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListQosVolumesRequest)
}

inline void ListQosVolumesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListQosVolumesRequest::~ListQosVolumesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListQosVolumesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListQosVolumesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListQosVolumesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListQosVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListQosVolumesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListQosVolumesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListQosVolumesRequest.parent"));
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListQosVolumesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListQosVolumesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListQosVolumesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListQosVolumesRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListQosVolumesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListQosVolumesRequest)
  return target;
}

size_t ListQosVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListQosVolumesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListQosVolumesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListQosVolumesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListQosVolumesRequest::GetClassData() const { return &_class_data_; }


void ListQosVolumesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListQosVolumesRequest*>(&to_msg);
  auto& from = static_cast<const ListQosVolumesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListQosVolumesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListQosVolumesRequest::CopyFrom(const ListQosVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListQosVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListQosVolumesRequest::IsInitialized() const {
  return true;
}

void ListQosVolumesRequest::InternalSwap(ListQosVolumesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_, lhs_arena,
      &other->_impl_.parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListQosVolumesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[5]);
}

// ===================================================================

class ListQosVolumesResponse::_Internal {
 public:
};

ListQosVolumesResponse::ListQosVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListQosVolumesResponse)
}
ListQosVolumesResponse::ListQosVolumesResponse(const ListQosVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListQosVolumesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volumes_){from._impl_.qos_volumes_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListQosVolumesResponse)
}

inline void ListQosVolumesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qos_volumes_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListQosVolumesResponse::~ListQosVolumesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListQosVolumesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListQosVolumesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qos_volumes_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListQosVolumesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListQosVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListQosVolumesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qos_volumes_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListQosVolumesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.QosVolume qos_volumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qos_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListQosVolumesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListQosVolumesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListQosVolumesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.QosVolume qos_volumes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qos_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_qos_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListQosVolumesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListQosVolumesResponse)
  return target;
}

size_t ListQosVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListQosVolumesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.QosVolume qos_volumes = 1;
  total_size += 1UL * this->_internal_qos_volumes_size();
  for (const auto& msg : this->_impl_.qos_volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListQosVolumesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListQosVolumesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListQosVolumesResponse::GetClassData() const { return &_class_data_; }


void ListQosVolumesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListQosVolumesResponse*>(&to_msg);
  auto& from = static_cast<const ListQosVolumesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListQosVolumesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qos_volumes_.MergeFrom(from._impl_.qos_volumes_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListQosVolumesResponse::CopyFrom(const ListQosVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListQosVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListQosVolumesResponse::IsInitialized() const {
  return true;
}

void ListQosVolumesResponse::InternalSwap(ListQosVolumesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qos_volumes_.InternalSwap(&other->_impl_.qos_volumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListQosVolumesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[6]);
}

// ===================================================================

class GetQosVolumeRequest::_Internal {
 public:
};

GetQosVolumeRequest::GetQosVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.GetQosVolumeRequest)
}
GetQosVolumeRequest::GetQosVolumeRequest(const GetQosVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetQosVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.GetQosVolumeRequest)
}

inline void GetQosVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetQosVolumeRequest::~GetQosVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.GetQosVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetQosVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetQosVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetQosVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.GetQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetQosVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.GetQosVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetQosVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.GetQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.GetQosVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.GetQosVolumeRequest)
  return target;
}

size_t GetQosVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.GetQosVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetQosVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetQosVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetQosVolumeRequest::GetClassData() const { return &_class_data_; }


void GetQosVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetQosVolumeRequest*>(&to_msg);
  auto& from = static_cast<const GetQosVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.GetQosVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetQosVolumeRequest::CopyFrom(const GetQosVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.GetQosVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQosVolumeRequest::IsInitialized() const {
  return true;
}

void GetQosVolumeRequest::InternalSwap(GetQosVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQosVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[7]);
}

// ===================================================================

class StatsQosVolumeRequest::_Internal {
 public:
};

StatsQosVolumeRequest::StatsQosVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.StatsQosVolumeRequest)
}
StatsQosVolumeRequest::StatsQosVolumeRequest(const StatsQosVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsQosVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.StatsQosVolumeRequest)
}

inline void StatsQosVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatsQosVolumeRequest::~StatsQosVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.StatsQosVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsQosVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void StatsQosVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsQosVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.StatsQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsQosVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.StatsQosVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsQosVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.StatsQosVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.StatsQosVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.StatsQosVolumeRequest)
  return target;
}

size_t StatsQosVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.StatsQosVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsQosVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsQosVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsQosVolumeRequest::GetClassData() const { return &_class_data_; }


void StatsQosVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsQosVolumeRequest*>(&to_msg);
  auto& from = static_cast<const StatsQosVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.StatsQosVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsQosVolumeRequest::CopyFrom(const StatsQosVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.StatsQosVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsQosVolumeRequest::IsInitialized() const {
  return true;
}

void StatsQosVolumeRequest::InternalSwap(StatsQosVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsQosVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[8]);
}

// ===================================================================

class StatsQosVolumeResponse::_Internal {
 public:
  static const ::opi_api::storage::v1::VolumeStats& stats(const StatsQosVolumeResponse* msg);
};

const ::opi_api::storage::v1::VolumeStats&
StatsQosVolumeResponse::_Internal::stats(const StatsQosVolumeResponse* msg) {
  return *msg->_impl_.stats_;
}
void StatsQosVolumeResponse::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
StatsQosVolumeResponse::StatsQosVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.StatsQosVolumeResponse)
}
StatsQosVolumeResponse::StatsQosVolumeResponse(const StatsQosVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsQosVolumeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::opi_api::storage::v1::VolumeStats(*from._impl_.stats_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.StatsQosVolumeResponse)
}

inline void StatsQosVolumeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsQosVolumeResponse::~StatsQosVolumeResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.StatsQosVolumeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsQosVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void StatsQosVolumeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsQosVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.StatsQosVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsQosVolumeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VolumeStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsQosVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.StatsQosVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VolumeStats stats = 1;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.StatsQosVolumeResponse)
  return target;
}

size_t StatsQosVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.StatsQosVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VolumeStats stats = 1;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsQosVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsQosVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsQosVolumeResponse::GetClassData() const { return &_class_data_; }


void StatsQosVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsQosVolumeResponse*>(&to_msg);
  auto& from = static_cast<const StatsQosVolumeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.StatsQosVolumeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::opi_api::storage::v1::VolumeStats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsQosVolumeResponse::CopyFrom(const StatsQosVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.StatsQosVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsQosVolumeResponse::IsInitialized() const {
  return true;
}

void StatsQosVolumeResponse::InternalSwap(StatsQosVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsQosVolumeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fqos_5fvolume_2eproto_getter, &descriptor_table_middleend_5fqos_5fvolume_2eproto_once,
      file_level_metadata_middleend_5fqos_5fvolume_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::QosVolume*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::QosVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::QosVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::Limits*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::Limits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::Limits >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::CreateQosVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::CreateQosVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::CreateQosVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::DeleteQosVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::DeleteQosVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::DeleteQosVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::UpdateQosVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::UpdateQosVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::UpdateQosVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListQosVolumesRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListQosVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListQosVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListQosVolumesResponse*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListQosVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListQosVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::GetQosVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::GetQosVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::GetQosVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::StatsQosVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::StatsQosVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::StatsQosVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::StatsQosVolumeResponse*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::StatsQosVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::StatsQosVolumeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
