// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_null.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "opicommon.pb.h"
#include "uuid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fnull_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fnull_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fnull_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateNullVolumeRequest;
struct CreateNullVolumeRequestDefaultTypeInternal;
extern CreateNullVolumeRequestDefaultTypeInternal _CreateNullVolumeRequest_default_instance_;
class DeleteNullVolumeRequest;
struct DeleteNullVolumeRequestDefaultTypeInternal;
extern DeleteNullVolumeRequestDefaultTypeInternal _DeleteNullVolumeRequest_default_instance_;
class GetNullVolumeRequest;
struct GetNullVolumeRequestDefaultTypeInternal;
extern GetNullVolumeRequestDefaultTypeInternal _GetNullVolumeRequest_default_instance_;
class ListNullVolumesRequest;
struct ListNullVolumesRequestDefaultTypeInternal;
extern ListNullVolumesRequestDefaultTypeInternal _ListNullVolumesRequest_default_instance_;
class ListNullVolumesResponse;
struct ListNullVolumesResponseDefaultTypeInternal;
extern ListNullVolumesResponseDefaultTypeInternal _ListNullVolumesResponse_default_instance_;
class NullVolume;
struct NullVolumeDefaultTypeInternal;
extern NullVolumeDefaultTypeInternal _NullVolume_default_instance_;
class StatsNullVolumeRequest;
struct StatsNullVolumeRequestDefaultTypeInternal;
extern StatsNullVolumeRequestDefaultTypeInternal _StatsNullVolumeRequest_default_instance_;
class StatsNullVolumeResponse;
struct StatsNullVolumeResponseDefaultTypeInternal;
extern StatsNullVolumeResponseDefaultTypeInternal _StatsNullVolumeResponse_default_instance_;
class UpdateNullVolumeRequest;
struct UpdateNullVolumeRequestDefaultTypeInternal;
extern UpdateNullVolumeRequestDefaultTypeInternal _UpdateNullVolumeRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateNullVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNullVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNullVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNullVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNullVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNullVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNullVolumesRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNullVolumesRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNullVolumesResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNullVolumesResponse>(Arena*);
template<> ::opi_api::storage::v1::NullVolume* Arena::CreateMaybeMessage<::opi_api::storage::v1::NullVolume>(Arena*);
template<> ::opi_api::storage::v1::StatsNullVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsNullVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::StatsNullVolumeResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsNullVolumeResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateNullVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNullVolumeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class NullVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NullVolume) */ {
 public:
  inline NullVolume() : NullVolume(nullptr) {}
  ~NullVolume() override;
  explicit constexpr NullVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullVolume(const NullVolume& from);
  NullVolume(NullVolume&& from) noexcept
    : NullVolume() {
    *this = ::std::move(from);
  }

  inline NullVolume& operator=(const NullVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullVolume& operator=(NullVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullVolume* internal_default_instance() {
    return reinterpret_cast<const NullVolume*>(
               &_NullVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NullVolume& a, NullVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(NullVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NullVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NullVolume& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NullVolume";
  }
  protected:
  explicit NullVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUuidFieldNumber = 4,
    kBlockSizeFieldNumber = 2,
    kBlocksCountFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.common.v1.Uuid uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::opi_api::common::v1::Uuid& uuid() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::Uuid* release_uuid();
  ::opi_api::common::v1::Uuid* mutable_uuid();
  void set_allocated_uuid(::opi_api::common::v1::Uuid* uuid);
  private:
  const ::opi_api::common::v1::Uuid& _internal_uuid() const;
  ::opi_api::common::v1::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::opi_api::common::v1::Uuid* uuid);
  ::opi_api::common::v1::Uuid* unsafe_arena_release_uuid();

  // int64 block_size = 2;
  void clear_block_size();
  int64_t block_size() const;
  void set_block_size(int64_t value);
  private:
  int64_t _internal_block_size() const;
  void _internal_set_block_size(int64_t value);
  public:

  // int64 blocks_count = 3;
  void clear_blocks_count();
  int64_t blocks_count() const;
  void set_blocks_count(int64_t value);
  private:
  int64_t _internal_blocks_count() const;
  void _internal_set_blocks_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NullVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::common::v1::Uuid* uuid_;
  int64_t block_size_;
  int64_t blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class CreateNullVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNullVolumeRequest) */ {
 public:
  inline CreateNullVolumeRequest() : CreateNullVolumeRequest(nullptr) {}
  ~CreateNullVolumeRequest() override;
  explicit constexpr CreateNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNullVolumeRequest(const CreateNullVolumeRequest& from);
  CreateNullVolumeRequest(CreateNullVolumeRequest&& from) noexcept
    : CreateNullVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateNullVolumeRequest& operator=(const CreateNullVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNullVolumeRequest& operator=(CreateNullVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNullVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNullVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNullVolumeRequest*>(
               &_CreateNullVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNullVolumeRequest& a, CreateNullVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNullVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNullVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNullVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNullVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNullVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNullVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNullVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNullVolumeRequest";
  }
  protected:
  explicit CreateNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullVolumeIdFieldNumber = 2,
    kNullVolumeFieldNumber = 1,
  };
  // string null_volume_id = 2;
  void clear_null_volume_id();
  const std::string& null_volume_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_null_volume_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_null_volume_id();
  PROTOBUF_NODISCARD std::string* release_null_volume_id();
  void set_allocated_null_volume_id(std::string* null_volume_id);
  private:
  const std::string& _internal_null_volume_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_null_volume_id(const std::string& value);
  std::string* _internal_mutable_null_volume_id();
  public:

  // .opi_api.storage.v1.NullVolume null_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_null_volume() const;
  private:
  bool _internal_has_null_volume() const;
  public:
  void clear_null_volume();
  const ::opi_api::storage::v1::NullVolume& null_volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NullVolume* release_null_volume();
  ::opi_api::storage::v1::NullVolume* mutable_null_volume();
  void set_allocated_null_volume(::opi_api::storage::v1::NullVolume* null_volume);
  private:
  const ::opi_api::storage::v1::NullVolume& _internal_null_volume() const;
  ::opi_api::storage::v1::NullVolume* _internal_mutable_null_volume();
  public:
  void unsafe_arena_set_allocated_null_volume(
      ::opi_api::storage::v1::NullVolume* null_volume);
  ::opi_api::storage::v1::NullVolume* unsafe_arena_release_null_volume();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNullVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr null_volume_id_;
  ::opi_api::storage::v1::NullVolume* null_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class DeleteNullVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNullVolumeRequest) */ {
 public:
  inline DeleteNullVolumeRequest() : DeleteNullVolumeRequest(nullptr) {}
  ~DeleteNullVolumeRequest() override;
  explicit constexpr DeleteNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNullVolumeRequest(const DeleteNullVolumeRequest& from);
  DeleteNullVolumeRequest(DeleteNullVolumeRequest&& from) noexcept
    : DeleteNullVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNullVolumeRequest& operator=(const DeleteNullVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNullVolumeRequest& operator=(DeleteNullVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNullVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNullVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNullVolumeRequest*>(
               &_DeleteNullVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteNullVolumeRequest& a, DeleteNullVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNullVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNullVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNullVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNullVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNullVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNullVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNullVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNullVolumeRequest";
  }
  protected:
  explicit DeleteNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNullVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class UpdateNullVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNullVolumeRequest) */ {
 public:
  inline UpdateNullVolumeRequest() : UpdateNullVolumeRequest(nullptr) {}
  ~UpdateNullVolumeRequest() override;
  explicit constexpr UpdateNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNullVolumeRequest(const UpdateNullVolumeRequest& from);
  UpdateNullVolumeRequest(UpdateNullVolumeRequest&& from) noexcept
    : UpdateNullVolumeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNullVolumeRequest& operator=(const UpdateNullVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNullVolumeRequest& operator=(UpdateNullVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNullVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNullVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNullVolumeRequest*>(
               &_UpdateNullVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateNullVolumeRequest& a, UpdateNullVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNullVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNullVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNullVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNullVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNullVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNullVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNullVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNullVolumeRequest";
  }
  protected:
  explicit UpdateNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullVolumeFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.storage.v1.NullVolume null_volume = 1;
  bool has_null_volume() const;
  private:
  bool _internal_has_null_volume() const;
  public:
  void clear_null_volume();
  const ::opi_api::storage::v1::NullVolume& null_volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NullVolume* release_null_volume();
  ::opi_api::storage::v1::NullVolume* mutable_null_volume();
  void set_allocated_null_volume(::opi_api::storage::v1::NullVolume* null_volume);
  private:
  const ::opi_api::storage::v1::NullVolume& _internal_null_volume() const;
  ::opi_api::storage::v1::NullVolume* _internal_mutable_null_volume();
  public:
  void unsafe_arena_set_allocated_null_volume(
      ::opi_api::storage::v1::NullVolume* null_volume);
  ::opi_api::storage::v1::NullVolume* unsafe_arena_release_null_volume();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNullVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NullVolume* null_volume_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class ListNullVolumesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNullVolumesRequest) */ {
 public:
  inline ListNullVolumesRequest() : ListNullVolumesRequest(nullptr) {}
  ~ListNullVolumesRequest() override;
  explicit constexpr ListNullVolumesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNullVolumesRequest(const ListNullVolumesRequest& from);
  ListNullVolumesRequest(ListNullVolumesRequest&& from) noexcept
    : ListNullVolumesRequest() {
    *this = ::std::move(from);
  }

  inline ListNullVolumesRequest& operator=(const ListNullVolumesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNullVolumesRequest& operator=(ListNullVolumesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNullVolumesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNullVolumesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNullVolumesRequest*>(
               &_ListNullVolumesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListNullVolumesRequest& a, ListNullVolumesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNullVolumesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNullVolumesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNullVolumesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNullVolumesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNullVolumesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNullVolumesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNullVolumesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNullVolumesRequest";
  }
  protected:
  explicit ListNullVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNullVolumesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class ListNullVolumesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNullVolumesResponse) */ {
 public:
  inline ListNullVolumesResponse() : ListNullVolumesResponse(nullptr) {}
  ~ListNullVolumesResponse() override;
  explicit constexpr ListNullVolumesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNullVolumesResponse(const ListNullVolumesResponse& from);
  ListNullVolumesResponse(ListNullVolumesResponse&& from) noexcept
    : ListNullVolumesResponse() {
    *this = ::std::move(from);
  }

  inline ListNullVolumesResponse& operator=(const ListNullVolumesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNullVolumesResponse& operator=(ListNullVolumesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNullVolumesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNullVolumesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNullVolumesResponse*>(
               &_ListNullVolumesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNullVolumesResponse& a, ListNullVolumesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNullVolumesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNullVolumesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNullVolumesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNullVolumesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNullVolumesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNullVolumesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNullVolumesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNullVolumesResponse";
  }
  protected:
  explicit ListNullVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullVolumesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NullVolume null_volumes = 1;
  int null_volumes_size() const;
  private:
  int _internal_null_volumes_size() const;
  public:
  void clear_null_volumes();
  ::opi_api::storage::v1::NullVolume* mutable_null_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullVolume >*
      mutable_null_volumes();
  private:
  const ::opi_api::storage::v1::NullVolume& _internal_null_volumes(int index) const;
  ::opi_api::storage::v1::NullVolume* _internal_add_null_volumes();
  public:
  const ::opi_api::storage::v1::NullVolume& null_volumes(int index) const;
  ::opi_api::storage::v1::NullVolume* add_null_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullVolume >&
      null_volumes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNullVolumesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullVolume > null_volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class GetNullVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNullVolumeRequest) */ {
 public:
  inline GetNullVolumeRequest() : GetNullVolumeRequest(nullptr) {}
  ~GetNullVolumeRequest() override;
  explicit constexpr GetNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNullVolumeRequest(const GetNullVolumeRequest& from);
  GetNullVolumeRequest(GetNullVolumeRequest&& from) noexcept
    : GetNullVolumeRequest() {
    *this = ::std::move(from);
  }

  inline GetNullVolumeRequest& operator=(const GetNullVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNullVolumeRequest& operator=(GetNullVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNullVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNullVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNullVolumeRequest*>(
               &_GetNullVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetNullVolumeRequest& a, GetNullVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNullVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNullVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNullVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNullVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNullVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNullVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNullVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNullVolumeRequest";
  }
  protected:
  explicit GetNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNullVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class StatsNullVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsNullVolumeRequest) */ {
 public:
  inline StatsNullVolumeRequest() : StatsNullVolumeRequest(nullptr) {}
  ~StatsNullVolumeRequest() override;
  explicit constexpr StatsNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsNullVolumeRequest(const StatsNullVolumeRequest& from);
  StatsNullVolumeRequest(StatsNullVolumeRequest&& from) noexcept
    : StatsNullVolumeRequest() {
    *this = ::std::move(from);
  }

  inline StatsNullVolumeRequest& operator=(const StatsNullVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsNullVolumeRequest& operator=(StatsNullVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsNullVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsNullVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const StatsNullVolumeRequest*>(
               &_StatsNullVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatsNullVolumeRequest& a, StatsNullVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsNullVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsNullVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsNullVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsNullVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsNullVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatsNullVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsNullVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsNullVolumeRequest";
  }
  protected:
  explicit StatsNullVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsNullVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class StatsNullVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsNullVolumeResponse) */ {
 public:
  inline StatsNullVolumeResponse() : StatsNullVolumeResponse(nullptr) {}
  ~StatsNullVolumeResponse() override;
  explicit constexpr StatsNullVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsNullVolumeResponse(const StatsNullVolumeResponse& from);
  StatsNullVolumeResponse(StatsNullVolumeResponse&& from) noexcept
    : StatsNullVolumeResponse() {
    *this = ::std::move(from);
  }

  inline StatsNullVolumeResponse& operator=(const StatsNullVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsNullVolumeResponse& operator=(StatsNullVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsNullVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsNullVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const StatsNullVolumeResponse*>(
               &_StatsNullVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StatsNullVolumeResponse& a, StatsNullVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsNullVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsNullVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsNullVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsNullVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsNullVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatsNullVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsNullVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsNullVolumeResponse";
  }
  protected:
  explicit StatsNullVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsNullVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NullVolume

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void NullVolume::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NullVolume::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullVolume.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NullVolume::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NullVolume.name)
}
inline std::string* NullVolume::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullVolume.name)
  return _s;
}
inline const std::string& NullVolume::_internal_name() const {
  return name_.Get();
}
inline void NullVolume::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NullVolume::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NullVolume::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullVolume.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NullVolume::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullVolume.name)
}

// int64 block_size = 2;
inline void NullVolume::clear_block_size() {
  block_size_ = int64_t{0};
}
inline int64_t NullVolume::_internal_block_size() const {
  return block_size_;
}
inline int64_t NullVolume::block_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullVolume.block_size)
  return _internal_block_size();
}
inline void NullVolume::_internal_set_block_size(int64_t value) {
  
  block_size_ = value;
}
inline void NullVolume::set_block_size(int64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NullVolume.block_size)
}

// int64 blocks_count = 3;
inline void NullVolume::clear_blocks_count() {
  blocks_count_ = int64_t{0};
}
inline int64_t NullVolume::_internal_blocks_count() const {
  return blocks_count_;
}
inline int64_t NullVolume::blocks_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullVolume.blocks_count)
  return _internal_blocks_count();
}
inline void NullVolume::_internal_set_blocks_count(int64_t value) {
  
  blocks_count_ = value;
}
inline void NullVolume::set_blocks_count(int64_t value) {
  _internal_set_blocks_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NullVolume.blocks_count)
}

// .opi_api.common.v1.Uuid uuid = 4;
inline bool NullVolume::_internal_has_uuid() const {
  return this != internal_default_instance() && uuid_ != nullptr;
}
inline bool NullVolume::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::opi_api::common::v1::Uuid& NullVolume::_internal_uuid() const {
  const ::opi_api::common::v1::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::Uuid&>(
      ::opi_api::common::v1::_Uuid_default_instance_);
}
inline const ::opi_api::common::v1::Uuid& NullVolume::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullVolume.uuid)
  return _internal_uuid();
}
inline void NullVolume::unsafe_arena_set_allocated_uuid(
    ::opi_api::common::v1::Uuid* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullVolume.uuid)
}
inline ::opi_api::common::v1::Uuid* NullVolume::release_uuid() {
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::Uuid* NullVolume::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullVolume.uuid)
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::Uuid* NullVolume::_internal_mutable_uuid() {
  
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::Uuid>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::opi_api::common::v1::Uuid* NullVolume::mutable_uuid() {
  ::opi_api::common::v1::Uuid* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullVolume.uuid)
  return _msg;
}
inline void NullVolume::set_allocated_uuid(::opi_api::common::v1::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    
  } else {
    
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullVolume.uuid)
}

// -------------------------------------------------------------------

// CreateNullVolumeRequest

// .opi_api.storage.v1.NullVolume null_volume = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNullVolumeRequest::_internal_has_null_volume() const {
  return this != internal_default_instance() && null_volume_ != nullptr;
}
inline bool CreateNullVolumeRequest::has_null_volume() const {
  return _internal_has_null_volume();
}
inline void CreateNullVolumeRequest::clear_null_volume() {
  if (GetArenaForAllocation() == nullptr && null_volume_ != nullptr) {
    delete null_volume_;
  }
  null_volume_ = nullptr;
}
inline const ::opi_api::storage::v1::NullVolume& CreateNullVolumeRequest::_internal_null_volume() const {
  const ::opi_api::storage::v1::NullVolume* p = null_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NullVolume&>(
      ::opi_api::storage::v1::_NullVolume_default_instance_);
}
inline const ::opi_api::storage::v1::NullVolume& CreateNullVolumeRequest::null_volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNullVolumeRequest.null_volume)
  return _internal_null_volume();
}
inline void CreateNullVolumeRequest::unsafe_arena_set_allocated_null_volume(
    ::opi_api::storage::v1::NullVolume* null_volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null_volume_);
  }
  null_volume_ = null_volume;
  if (null_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNullVolumeRequest.null_volume)
}
inline ::opi_api::storage::v1::NullVolume* CreateNullVolumeRequest::release_null_volume() {
  
  ::opi_api::storage::v1::NullVolume* temp = null_volume_;
  null_volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NullVolume* CreateNullVolumeRequest::unsafe_arena_release_null_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNullVolumeRequest.null_volume)
  
  ::opi_api::storage::v1::NullVolume* temp = null_volume_;
  null_volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NullVolume* CreateNullVolumeRequest::_internal_mutable_null_volume() {
  
  if (null_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NullVolume>(GetArenaForAllocation());
    null_volume_ = p;
  }
  return null_volume_;
}
inline ::opi_api::storage::v1::NullVolume* CreateNullVolumeRequest::mutable_null_volume() {
  ::opi_api::storage::v1::NullVolume* _msg = _internal_mutable_null_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNullVolumeRequest.null_volume)
  return _msg;
}
inline void CreateNullVolumeRequest::set_allocated_null_volume(::opi_api::storage::v1::NullVolume* null_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete null_volume_;
  }
  if (null_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NullVolume>::GetOwningArena(null_volume);
    if (message_arena != submessage_arena) {
      null_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_volume, submessage_arena);
    }
    
  } else {
    
  }
  null_volume_ = null_volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNullVolumeRequest.null_volume)
}

// string null_volume_id = 2;
inline void CreateNullVolumeRequest::clear_null_volume_id() {
  null_volume_id_.ClearToEmpty();
}
inline const std::string& CreateNullVolumeRequest::null_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNullVolumeRequest.null_volume_id)
  return _internal_null_volume_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNullVolumeRequest::set_null_volume_id(ArgT0&& arg0, ArgT... args) {
 
 null_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNullVolumeRequest.null_volume_id)
}
inline std::string* CreateNullVolumeRequest::mutable_null_volume_id() {
  std::string* _s = _internal_mutable_null_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNullVolumeRequest.null_volume_id)
  return _s;
}
inline const std::string& CreateNullVolumeRequest::_internal_null_volume_id() const {
  return null_volume_id_.Get();
}
inline void CreateNullVolumeRequest::_internal_set_null_volume_id(const std::string& value) {
  
  null_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNullVolumeRequest::_internal_mutable_null_volume_id() {
  
  return null_volume_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNullVolumeRequest::release_null_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNullVolumeRequest.null_volume_id)
  return null_volume_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNullVolumeRequest::set_allocated_null_volume_id(std::string* null_volume_id) {
  if (null_volume_id != nullptr) {
    
  } else {
    
  }
  null_volume_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), null_volume_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (null_volume_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    null_volume_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNullVolumeRequest.null_volume_id)
}

// -------------------------------------------------------------------

// DeleteNullVolumeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNullVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNullVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNullVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNullVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNullVolumeRequest.name)
}
inline std::string* DeleteNullVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNullVolumeRequest.name)
  return _s;
}
inline const std::string& DeleteNullVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNullVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNullVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNullVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNullVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNullVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNullVolumeRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNullVolumeRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNullVolumeRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNullVolumeRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNullVolumeRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNullVolumeRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNullVolumeRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNullVolumeRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNullVolumeRequest

// .opi_api.storage.v1.NullVolume null_volume = 1;
inline bool UpdateNullVolumeRequest::_internal_has_null_volume() const {
  return this != internal_default_instance() && null_volume_ != nullptr;
}
inline bool UpdateNullVolumeRequest::has_null_volume() const {
  return _internal_has_null_volume();
}
inline void UpdateNullVolumeRequest::clear_null_volume() {
  if (GetArenaForAllocation() == nullptr && null_volume_ != nullptr) {
    delete null_volume_;
  }
  null_volume_ = nullptr;
}
inline const ::opi_api::storage::v1::NullVolume& UpdateNullVolumeRequest::_internal_null_volume() const {
  const ::opi_api::storage::v1::NullVolume* p = null_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NullVolume&>(
      ::opi_api::storage::v1::_NullVolume_default_instance_);
}
inline const ::opi_api::storage::v1::NullVolume& UpdateNullVolumeRequest::null_volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNullVolumeRequest.null_volume)
  return _internal_null_volume();
}
inline void UpdateNullVolumeRequest::unsafe_arena_set_allocated_null_volume(
    ::opi_api::storage::v1::NullVolume* null_volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null_volume_);
  }
  null_volume_ = null_volume;
  if (null_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNullVolumeRequest.null_volume)
}
inline ::opi_api::storage::v1::NullVolume* UpdateNullVolumeRequest::release_null_volume() {
  
  ::opi_api::storage::v1::NullVolume* temp = null_volume_;
  null_volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NullVolume* UpdateNullVolumeRequest::unsafe_arena_release_null_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNullVolumeRequest.null_volume)
  
  ::opi_api::storage::v1::NullVolume* temp = null_volume_;
  null_volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NullVolume* UpdateNullVolumeRequest::_internal_mutable_null_volume() {
  
  if (null_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NullVolume>(GetArenaForAllocation());
    null_volume_ = p;
  }
  return null_volume_;
}
inline ::opi_api::storage::v1::NullVolume* UpdateNullVolumeRequest::mutable_null_volume() {
  ::opi_api::storage::v1::NullVolume* _msg = _internal_mutable_null_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNullVolumeRequest.null_volume)
  return _msg;
}
inline void UpdateNullVolumeRequest::set_allocated_null_volume(::opi_api::storage::v1::NullVolume* null_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete null_volume_;
  }
  if (null_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NullVolume>::GetOwningArena(null_volume);
    if (message_arena != submessage_arena) {
      null_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_volume, submessage_arena);
    }
    
  } else {
    
  }
  null_volume_ = null_volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNullVolumeRequest.null_volume)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNullVolumeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNullVolumeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNullVolumeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNullVolumeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNullVolumeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNullVolumeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNullVolumeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullVolumeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullVolumeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNullVolumeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullVolumeRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullVolumeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNullVolumeRequest.update_mask)
  return _msg;
}
inline void UpdateNullVolumeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNullVolumeRequest.update_mask)
}

// bool allow_missing = 3;
inline void UpdateNullVolumeRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool UpdateNullVolumeRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool UpdateNullVolumeRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNullVolumeRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateNullVolumeRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void UpdateNullVolumeRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.UpdateNullVolumeRequest.allow_missing)
}

// -------------------------------------------------------------------

// ListNullVolumesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNullVolumesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNullVolumesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullVolumesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullVolumesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullVolumesRequest.parent)
}
inline std::string* ListNullVolumesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullVolumesRequest.parent)
  return _s;
}
inline const std::string& ListNullVolumesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNullVolumesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullVolumesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullVolumesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullVolumesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullVolumesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullVolumesRequest.parent)
}

// int32 page_size = 2;
inline void ListNullVolumesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNullVolumesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNullVolumesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullVolumesRequest.page_size)
  return _internal_page_size();
}
inline void ListNullVolumesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNullVolumesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullVolumesRequest.page_size)
}

// string page_token = 3;
inline void ListNullVolumesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNullVolumesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullVolumesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullVolumesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullVolumesRequest.page_token)
}
inline std::string* ListNullVolumesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullVolumesRequest.page_token)
  return _s;
}
inline const std::string& ListNullVolumesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNullVolumesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullVolumesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullVolumesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullVolumesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullVolumesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullVolumesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNullVolumesResponse

// repeated .opi_api.storage.v1.NullVolume null_volumes = 1;
inline int ListNullVolumesResponse::_internal_null_volumes_size() const {
  return null_volumes_.size();
}
inline int ListNullVolumesResponse::null_volumes_size() const {
  return _internal_null_volumes_size();
}
inline void ListNullVolumesResponse::clear_null_volumes() {
  null_volumes_.Clear();
}
inline ::opi_api::storage::v1::NullVolume* ListNullVolumesResponse::mutable_null_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullVolumesResponse.null_volumes)
  return null_volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullVolume >*
ListNullVolumesResponse::mutable_null_volumes() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNullVolumesResponse.null_volumes)
  return &null_volumes_;
}
inline const ::opi_api::storage::v1::NullVolume& ListNullVolumesResponse::_internal_null_volumes(int index) const {
  return null_volumes_.Get(index);
}
inline const ::opi_api::storage::v1::NullVolume& ListNullVolumesResponse::null_volumes(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullVolumesResponse.null_volumes)
  return _internal_null_volumes(index);
}
inline ::opi_api::storage::v1::NullVolume* ListNullVolumesResponse::_internal_add_null_volumes() {
  return null_volumes_.Add();
}
inline ::opi_api::storage::v1::NullVolume* ListNullVolumesResponse::add_null_volumes() {
  ::opi_api::storage::v1::NullVolume* _add = _internal_add_null_volumes();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNullVolumesResponse.null_volumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullVolume >&
ListNullVolumesResponse::null_volumes() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNullVolumesResponse.null_volumes)
  return null_volumes_;
}

// string next_page_token = 2;
inline void ListNullVolumesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNullVolumesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullVolumesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullVolumesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullVolumesResponse.next_page_token)
}
inline std::string* ListNullVolumesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullVolumesResponse.next_page_token)
  return _s;
}
inline const std::string& ListNullVolumesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNullVolumesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullVolumesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullVolumesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullVolumesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullVolumesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullVolumesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNullVolumeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNullVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNullVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNullVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNullVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNullVolumeRequest.name)
}
inline std::string* GetNullVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNullVolumeRequest.name)
  return _s;
}
inline const std::string& GetNullVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNullVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNullVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNullVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNullVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNullVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNullVolumeRequest.name)
}

// -------------------------------------------------------------------

// StatsNullVolumeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StatsNullVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StatsNullVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsNullVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsNullVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsNullVolumeRequest.name)
}
inline std::string* StatsNullVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsNullVolumeRequest.name)
  return _s;
}
inline const std::string& StatsNullVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void StatsNullVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatsNullVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatsNullVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsNullVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatsNullVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsNullVolumeRequest.name)
}

// -------------------------------------------------------------------

// StatsNullVolumeResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool StatsNullVolumeResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool StatsNullVolumeResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& StatsNullVolumeResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& StatsNullVolumeResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsNullVolumeResponse.stats)
  return _internal_stats();
}
inline void StatsNullVolumeResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.StatsNullVolumeResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* StatsNullVolumeResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsNullVolumeResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsNullVolumeResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsNullVolumeResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* StatsNullVolumeResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsNullVolumeResponse.stats)
  return _msg;
}
inline void StatsNullVolumeResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsNullVolumeResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto
