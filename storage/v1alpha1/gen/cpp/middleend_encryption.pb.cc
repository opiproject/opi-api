// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: middleend_encryption.proto

#include "middleend_encryption.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace storage {
namespace v1 {
PROTOBUF_CONSTEXPR EncryptedVolume::EncryptedVolume(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.volume_name_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cipher_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedVolumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedVolumeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedVolumeDefaultTypeInternal() {}
  union {
    EncryptedVolume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedVolumeDefaultTypeInternal _EncryptedVolume_default_instance_;
PROTOBUF_CONSTEXPR CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_volume_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_volume_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateEncryptedVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateEncryptedVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    CreateEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateEncryptedVolumeRequestDefaultTypeInternal _CreateEncryptedVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allow_missing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteEncryptedVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteEncryptedVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteEncryptedVolumeRequestDefaultTypeInternal _DeleteEncryptedVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_volume_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_.allow_missing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateEncryptedVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateEncryptedVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    UpdateEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateEncryptedVolumeRequestDefaultTypeInternal _UpdateEncryptedVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEncryptedVolumesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEncryptedVolumesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEncryptedVolumesRequestDefaultTypeInternal() {}
  union {
    ListEncryptedVolumesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEncryptedVolumesRequestDefaultTypeInternal _ListEncryptedVolumesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_volumes_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEncryptedVolumesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEncryptedVolumesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEncryptedVolumesResponseDefaultTypeInternal() {}
  union {
    ListEncryptedVolumesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEncryptedVolumesResponseDefaultTypeInternal _ListEncryptedVolumesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEncryptedVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEncryptedVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    GetEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEncryptedVolumeRequestDefaultTypeInternal _GetEncryptedVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR StatsEncryptedVolumeRequest::StatsEncryptedVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsEncryptedVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsEncryptedVolumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    StatsEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsEncryptedVolumeRequestDefaultTypeInternal _StatsEncryptedVolumeRequest_default_instance_;
PROTOBUF_CONSTEXPR StatsEncryptedVolumeResponse::StatsEncryptedVolumeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsEncryptedVolumeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsEncryptedVolumeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsEncryptedVolumeResponseDefaultTypeInternal() {}
  union {
    StatsEncryptedVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsEncryptedVolumeResponseDefaultTypeInternal _StatsEncryptedVolumeResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_middleend_5fencryption_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_middleend_5fencryption_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_middleend_5fencryption_2eproto = nullptr;

const uint32_t TableStruct_middleend_5fencryption_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _impl_.volume_name_ref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _impl_.cipher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, _impl_.encrypted_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, _impl_.encrypted_volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, _impl_.allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, _impl_.encrypted_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, _impl_.update_mask_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, _impl_.allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, _impl_.encrypted_volumes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetEncryptedVolumeRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsEncryptedVolumeRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsEncryptedVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::StatsEncryptedVolumeResponse, _impl_.stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::EncryptedVolume)},
  { 10, -1, -1, sizeof(::opi_api::storage::v1::CreateEncryptedVolumeRequest)},
  { 18, -1, -1, sizeof(::opi_api::storage::v1::DeleteEncryptedVolumeRequest)},
  { 26, -1, -1, sizeof(::opi_api::storage::v1::UpdateEncryptedVolumeRequest)},
  { 35, -1, -1, sizeof(::opi_api::storage::v1::ListEncryptedVolumesRequest)},
  { 44, -1, -1, sizeof(::opi_api::storage::v1::ListEncryptedVolumesResponse)},
  { 52, -1, -1, sizeof(::opi_api::storage::v1::GetEncryptedVolumeRequest)},
  { 59, -1, -1, sizeof(::opi_api::storage::v1::StatsEncryptedVolumeRequest)},
  { 66, -1, -1, sizeof(::opi_api::storage::v1::StatsEncryptedVolumeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::storage::v1::_EncryptedVolume_default_instance_._instance,
  &::opi_api::storage::v1::_CreateEncryptedVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_DeleteEncryptedVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_UpdateEncryptedVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_ListEncryptedVolumesRequest_default_instance_._instance,
  &::opi_api::storage::v1::_ListEncryptedVolumesResponse_default_instance_._instance,
  &::opi_api::storage::v1::_GetEncryptedVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_StatsEncryptedVolumeRequest_default_instance_._instance,
  &::opi_api::storage::v1::_StatsEncryptedVolumeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_middleend_5fencryption_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032middleend_encryption.proto\022\022opi_api.st"
  "orage.v1\032\017opicommon.proto\032\027google/api/cl"
  "ient.proto\032\031google/api/resource.proto\032\033g"
  "oogle/protobuf/empty.proto\032\034google/api/a"
  "nnotations.proto\032\037google/api/field_behav"
  "ior.proto\032 google/protobuf/field_mask.pr"
  "oto\"\231\002\n\017EncryptedVolume\022;\n\004name\030\001 \001(\tB-\340"
  "A\003\340A\005\372A$\n\"opi_api.storage.v1/EncryptedVo"
  "lume\022\034\n\017volume_name_ref\030\002 \001(\tB\003\340A\002\022\020\n\003ke"
  "y\030\003 \001(\014B\003\340A\002\0227\n\006cipher\030\004 \001(\0162\".opi_api.s"
  "torage.v1.EncryptionTypeB\003\340A\002:`\352A]\n&stor"
  "age.opiproject.org/EncryptedVolume\022\020volu"
  "mes/{volume}*\020encryptedVolumes2\017encrypte"
  "dVolume\"\204\001\n\034CreateEncryptedVolumeRequest"
  "\022B\n\020encrypted_volume\030\001 \001(\0132#.opi_api.sto"
  "rage.v1.EncryptedVolumeB\003\340A\002\022 \n\023encrypte"
  "d_volume_id\030\002 \001(\tB\003\340A\001\"t\n\034DeleteEncrypte"
  "dVolumeRequest\0228\n\004name\030\001 \001(\tB*\340A\002\372A$\n\"op"
  "i_api.storage.v1/EncryptedVolume\022\032\n\rallo"
  "w_missing\030\002 \001(\010B\003\340A\001\"\264\001\n\034UpdateEncrypted"
  "VolumeRequest\022B\n\020encrypted_volume\030\001 \001(\0132"
  "#.opi_api.storage.v1.EncryptedVolumeB\003\340A"
  "\002\0224\n\013update_mask\030\002 \001(\0132\032.google.protobuf"
  ".FieldMaskB\003\340A\001\022\032\n\rallow_missing\030\003 \001(\010B\003"
  "\340A\001\"\212\001\n\033ListEncryptedVolumesRequest\022:\n\006p"
  "arent\030\001 \001(\tB*\340A\002\372A$\n\"opi_api.storage.v1/"
  "EncryptedVolume\022\026\n\tpage_size\030\002 \001(\005B\003\340A\001\022"
  "\027\n\npage_token\030\003 \001(\tB\003\340A\001\"w\n\034ListEncrypte"
  "dVolumesResponse\022>\n\021encrypted_volumes\030\001 "
  "\003(\0132#.opi_api.storage.v1.EncryptedVolume"
  "\022\027\n\017next_page_token\030\002 \001(\t\"U\n\031GetEncrypte"
  "dVolumeRequest\0228\n\004name\030\001 \001(\tB*\340A\002\372A$\n\"op"
  "i_api.storage.v1/EncryptedVolume\"W\n\033Stat"
  "sEncryptedVolumeRequest\0228\n\004name\030\001 \001(\tB*\340"
  "A\002\372A$\n\"opi_api.storage.v1/EncryptedVolum"
  "e\"N\n\034StatsEncryptedVolumeResponse\022.\n\005sta"
  "ts\030\001 \001(\0132\037.opi_api.storage.v1.VolumeStat"
  "s2\253\010\n\032MiddleendEncryptionService\022\274\001\n\025Cre"
  "ateEncryptedVolume\0220.opi_api.storage.v1."
  "CreateEncryptedVolumeRequest\032#.opi_api.s"
  "torage.v1.EncryptedVolume\"L\202\323\344\223\002\037\"\013/v1/v"
  "olumes:\020encrypted_volume\332A$encrypted_vol"
  "ume,encrypted_volume_id\022\217\001\n\025DeleteEncryp"
  "tedVolume\0220.opi_api.storage.v1.DeleteEnc"
  "ryptedVolumeRequest\032\026.google.protobuf.Em"
  "pty\",\202\323\344\223\002\037*\035/v1/{name=EncryptedVolumes/"
  "*}\332A\004name\022\317\001\n\025UpdateEncryptedVolume\0220.op"
  "i_api.storage.v1.UpdateEncryptedVolumeRe"
  "quest\032#.opi_api.storage.v1.EncryptedVolu"
  "me\"_\202\323\344\223\002:2&/v1/{encrypted_volume.name=s"
  "ubsystems}:\020encrypted_volume\332A\034encrypted"
  "_volume,update_mask\022\240\001\n\024ListEncryptedVol"
  "umes\022/.opi_api.storage.v1.ListEncryptedV"
  "olumesRequest\0320.opi_api.storage.v1.ListE"
  "ncryptedVolumesResponse\"%\202\323\344\223\002\026\022\024/v1/{pa"
  "rent=volumes}\332A\006parent\022\226\001\n\022GetEncryptedV"
  "olume\022-.opi_api.storage.v1.GetEncryptedV"
  "olumeRequest\032#.opi_api.storage.v1.Encryp"
  "tedVolume\",\202\323\344\223\002\037\022\035/v1/{name=EncryptedVo"
  "lumes/*}\332A\004name\022\255\001\n\024StatsEncryptedVolume"
  "\022/.opi_api.storage.v1.StatsEncryptedVolu"
  "meRequest\0320.opi_api.storage.v1.StatsEncr"
  "yptedVolumeResponse\"2\202\323\344\223\002%\022#/v1/{name=E"
  "ncryptedVolumes/*}:stats\332A\004nameBg\n\022opi_a"
  "pi.storage.v1B\030MiddleendEncryptionProtoP"
  "\001Z5github.com/opiproject/opi-api/storage"
  "/v1alpha1/gen/gob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_middleend_5fencryption_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_opicommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_middleend_5fencryption_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_middleend_5fencryption_2eproto = {
    false, false, 2664, descriptor_table_protodef_middleend_5fencryption_2eproto,
    "middleend_encryption.proto",
    &descriptor_table_middleend_5fencryption_2eproto_once, descriptor_table_middleend_5fencryption_2eproto_deps, 7, 9,
    schemas, file_default_instances, TableStruct_middleend_5fencryption_2eproto::offsets,
    file_level_metadata_middleend_5fencryption_2eproto, file_level_enum_descriptors_middleend_5fencryption_2eproto,
    file_level_service_descriptors_middleend_5fencryption_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_middleend_5fencryption_2eproto_getter() {
  return &descriptor_table_middleend_5fencryption_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_middleend_5fencryption_2eproto(&descriptor_table_middleend_5fencryption_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class EncryptedVolume::_Internal {
 public:
};

EncryptedVolume::EncryptedVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.EncryptedVolume)
}
EncryptedVolume::EncryptedVolume(const EncryptedVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptedVolume* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.volume_name_ref_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.cipher_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.volume_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volume_name_ref().empty()) {
    _this->_impl_.volume_name_ref_.Set(from._internal_volume_name_ref(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cipher_ = from._impl_.cipher_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.EncryptedVolume)
}

inline void EncryptedVolume::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.volume_name_ref_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.cipher_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.volume_name_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptedVolume::~EncryptedVolume() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.EncryptedVolume)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.volume_name_ref_.Destroy();
  _impl_.key_.Destroy();
}

void EncryptedVolume::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.EncryptedVolume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.volume_name_ref_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.cipher_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedVolume::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.EncryptedVolume.name"));
        } else
          goto handle_unusual;
        continue;
      // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_volume_name_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.EncryptedVolume.volume_name_ref"));
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.EncryptionType cipher = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cipher(static_cast<::opi_api::storage::v1::EncryptionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedVolume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.EncryptedVolume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.EncryptedVolume.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_volume_name_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name_ref().data(), static_cast<int>(this->_internal_volume_name_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.EncryptedVolume.volume_name_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name_ref(), target);
  }

  // bytes key = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // .opi_api.storage.v1.EncryptionType cipher = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_cipher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cipher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.EncryptedVolume)
  return target;
}

size_t EncryptedVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.EncryptedVolume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string volume_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_volume_name_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name_ref());
  }

  // bytes key = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .opi_api.storage.v1.EncryptionType cipher = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_cipher() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cipher());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptedVolume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptedVolume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptedVolume::GetClassData() const { return &_class_data_; }


void EncryptedVolume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptedVolume*>(&to_msg);
  auto& from = static_cast<const EncryptedVolume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.EncryptedVolume)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_volume_name_ref().empty()) {
    _this->_internal_set_volume_name_ref(from._internal_volume_name_ref());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_cipher() != 0) {
    _this->_internal_set_cipher(from._internal_cipher());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptedVolume::CopyFrom(const EncryptedVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.EncryptedVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedVolume::IsInitialized() const {
  return true;
}

void EncryptedVolume::InternalSwap(EncryptedVolume* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.volume_name_ref_, lhs_arena,
      &other->_impl_.volume_name_ref_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.cipher_, other->_impl_.cipher_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedVolume::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[0]);
}

// ===================================================================

class CreateEncryptedVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume(const CreateEncryptedVolumeRequest* msg);
};

const ::opi_api::storage::v1::EncryptedVolume&
CreateEncryptedVolumeRequest::_Internal::encrypted_volume(const CreateEncryptedVolumeRequest* msg) {
  return *msg->_impl_.encrypted_volume_;
}
CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
}
CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(const CreateEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateEncryptedVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volume_id_){}
    , decltype(_impl_.encrypted_volume_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encrypted_volume_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_volume_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_volume_id().empty()) {
    _this->_impl_.encrypted_volume_id_.Set(from._internal_encrypted_volume_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_encrypted_volume()) {
    _this->_impl_.encrypted_volume_ = new ::opi_api::storage::v1::EncryptedVolume(*from._impl_.encrypted_volume_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
}

inline void CreateEncryptedVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volume_id_){}
    , decltype(_impl_.encrypted_volume_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encrypted_volume_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_volume_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateEncryptedVolumeRequest::~CreateEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_volume_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.encrypted_volume_;
}

void CreateEncryptedVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_volume_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.encrypted_volume_ != nullptr) {
    delete _impl_.encrypted_volume_;
  }
  _impl_.encrypted_volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEncryptedVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encrypted_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encrypted_volume_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::encrypted_volume(this),
        _Internal::encrypted_volume(this).GetCachedSize(), target, stream);
  }

  // string encrypted_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_encrypted_volume_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_volume_id().data(), static_cast<int>(this->_internal_encrypted_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encrypted_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  return target;
}

size_t CreateEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encrypted_volume_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_encrypted_volume_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_volume_id());
  }

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encrypted_volume_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }


void CreateEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateEncryptedVolumeRequest*>(&to_msg);
  auto& from = static_cast<const CreateEncryptedVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encrypted_volume_id().empty()) {
    _this->_internal_set_encrypted_volume_id(from._internal_encrypted_volume_id());
  }
  if (from._internal_has_encrypted_volume()) {
    _this->_internal_mutable_encrypted_volume()->::opi_api::storage::v1::EncryptedVolume::MergeFrom(
        from._internal_encrypted_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEncryptedVolumeRequest::CopyFrom(const CreateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void CreateEncryptedVolumeRequest::InternalSwap(CreateEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_volume_id_, lhs_arena,
      &other->_impl_.encrypted_volume_id_, rhs_arena
  );
  swap(_impl_.encrypted_volume_, other->_impl_.encrypted_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEncryptedVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[1]);
}

// ===================================================================

class DeleteEncryptedVolumeRequest::_Internal {
 public:
};

DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
}
DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(const DeleteEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteEncryptedVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.allow_missing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.allow_missing_ = from._impl_.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
}

inline void DeleteEncryptedVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.allow_missing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteEncryptedVolumeRequest::~DeleteEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeleteEncryptedVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEncryptedVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.DeleteEncryptedVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.DeleteEncryptedVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  return target;
}

size_t DeleteEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }


void DeleteEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteEncryptedVolumeRequest*>(&to_msg);
  auto& from = static_cast<const DeleteEncryptedVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_allow_missing() != 0) {
    _this->_internal_set_allow_missing(from._internal_allow_missing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteEncryptedVolumeRequest::CopyFrom(const DeleteEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteEncryptedVolumeRequest::InternalSwap(DeleteEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.allow_missing_, other->_impl_.allow_missing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEncryptedVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[2]);
}

// ===================================================================

class UpdateEncryptedVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume(const UpdateEncryptedVolumeRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateEncryptedVolumeRequest* msg);
};

const ::opi_api::storage::v1::EncryptedVolume&
UpdateEncryptedVolumeRequest::_Internal::encrypted_volume(const UpdateEncryptedVolumeRequest* msg) {
  return *msg->_impl_.encrypted_volume_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateEncryptedVolumeRequest::_Internal::update_mask(const UpdateEncryptedVolumeRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateEncryptedVolumeRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
}
UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
}
UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(const UpdateEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateEncryptedVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volume_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.allow_missing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_encrypted_volume()) {
    _this->_impl_.encrypted_volume_ = new ::opi_api::storage::v1::EncryptedVolume(*from._impl_.encrypted_volume_);
  }
  if (from._internal_has_update_mask()) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  _this->_impl_.allow_missing_ = from._impl_.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
}

inline void UpdateEncryptedVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volume_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.allow_missing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateEncryptedVolumeRequest::~UpdateEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.encrypted_volume_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateEncryptedVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.encrypted_volume_ != nullptr) {
    delete _impl_.encrypted_volume_;
  }
  _impl_.encrypted_volume_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_mask_ != nullptr) {
    delete _impl_.update_mask_;
  }
  _impl_.update_mask_ = nullptr;
  _impl_.allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEncryptedVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::encrypted_volume(this),
        _Internal::encrypted_volume(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_update_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  return target;
}

size_t UpdateEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encrypted_volume_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_mask_);
  }

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }


void UpdateEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateEncryptedVolumeRequest*>(&to_msg);
  auto& from = static_cast<const UpdateEncryptedVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted_volume()) {
    _this->_internal_mutable_encrypted_volume()->::opi_api::storage::v1::EncryptedVolume::MergeFrom(
        from._internal_encrypted_volume());
  }
  if (from._internal_has_update_mask()) {
    _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_update_mask());
  }
  if (from._internal_allow_missing() != 0) {
    _this->_internal_set_allow_missing(from._internal_allow_missing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateEncryptedVolumeRequest::CopyFrom(const UpdateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void UpdateEncryptedVolumeRequest::InternalSwap(UpdateEncryptedVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateEncryptedVolumeRequest, _impl_.allow_missing_)
      + sizeof(UpdateEncryptedVolumeRequest::_impl_.allow_missing_)
      - PROTOBUF_FIELD_OFFSET(UpdateEncryptedVolumeRequest, _impl_.encrypted_volume_)>(
          reinterpret_cast<char*>(&_impl_.encrypted_volume_),
          reinterpret_cast<char*>(&other->_impl_.encrypted_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEncryptedVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[3]);
}

// ===================================================================

class ListEncryptedVolumesRequest::_Internal {
 public:
};

ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
}
ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(const ListEncryptedVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEncryptedVolumesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
}

inline void ListEncryptedVolumesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListEncryptedVolumesRequest::~ListEncryptedVolumesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEncryptedVolumesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListEncryptedVolumesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEncryptedVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEncryptedVolumesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesRequest.parent"));
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEncryptedVolumesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListEncryptedVolumesRequest)
  return target;
}

size_t ListEncryptedVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEncryptedVolumesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEncryptedVolumesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEncryptedVolumesRequest::GetClassData() const { return &_class_data_; }


void ListEncryptedVolumesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEncryptedVolumesRequest*>(&to_msg);
  auto& from = static_cast<const ListEncryptedVolumesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEncryptedVolumesRequest::CopyFrom(const ListEncryptedVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEncryptedVolumesRequest::IsInitialized() const {
  return true;
}

void ListEncryptedVolumesRequest::InternalSwap(ListEncryptedVolumesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_, lhs_arena,
      &other->_impl_.parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  swap(_impl_.page_size_, other->_impl_.page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEncryptedVolumesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[4]);
}

// ===================================================================

class ListEncryptedVolumesResponse::_Internal {
 public:
};

ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
}
ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(const ListEncryptedVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEncryptedVolumesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volumes_){from._impl_.encrypted_volumes_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
}

inline void ListEncryptedVolumesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_volumes_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListEncryptedVolumesResponse::~ListEncryptedVolumesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEncryptedVolumesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_volumes_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListEncryptedVolumesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEncryptedVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_volumes_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEncryptedVolumesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEncryptedVolumesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encrypted_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_encrypted_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListEncryptedVolumesResponse)
  return target;
}

size_t ListEncryptedVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
  total_size += 1UL * this->_internal_encrypted_volumes_size();
  for (const auto& msg : this->_impl_.encrypted_volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEncryptedVolumesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEncryptedVolumesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEncryptedVolumesResponse::GetClassData() const { return &_class_data_; }


void ListEncryptedVolumesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEncryptedVolumesResponse*>(&to_msg);
  auto& from = static_cast<const ListEncryptedVolumesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encrypted_volumes_.MergeFrom(from._impl_.encrypted_volumes_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEncryptedVolumesResponse::CopyFrom(const ListEncryptedVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEncryptedVolumesResponse::IsInitialized() const {
  return true;
}

void ListEncryptedVolumesResponse::InternalSwap(ListEncryptedVolumesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encrypted_volumes_.InternalSwap(&other->_impl_.encrypted_volumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEncryptedVolumesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[5]);
}

// ===================================================================

class GetEncryptedVolumeRequest::_Internal {
 public:
};

GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
}
GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(const GetEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEncryptedVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
}

inline void GetEncryptedVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEncryptedVolumeRequest::~GetEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetEncryptedVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEncryptedVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.GetEncryptedVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.GetEncryptedVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.GetEncryptedVolumeRequest)
  return target;
}

size_t GetEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }


void GetEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEncryptedVolumeRequest*>(&to_msg);
  auto& from = static_cast<const GetEncryptedVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEncryptedVolumeRequest::CopyFrom(const GetEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void GetEncryptedVolumeRequest::InternalSwap(GetEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEncryptedVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[6]);
}

// ===================================================================

class StatsEncryptedVolumeRequest::_Internal {
 public:
};

StatsEncryptedVolumeRequest::StatsEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.StatsEncryptedVolumeRequest)
}
StatsEncryptedVolumeRequest::StatsEncryptedVolumeRequest(const StatsEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsEncryptedVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.StatsEncryptedVolumeRequest)
}

inline void StatsEncryptedVolumeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatsEncryptedVolumeRequest::~StatsEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void StatsEncryptedVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsEncryptedVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.StatsEncryptedVolumeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.StatsEncryptedVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  return target;
}

size_t StatsEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }


void StatsEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsEncryptedVolumeRequest*>(&to_msg);
  auto& from = static_cast<const StatsEncryptedVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsEncryptedVolumeRequest::CopyFrom(const StatsEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.StatsEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void StatsEncryptedVolumeRequest::InternalSwap(StatsEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsEncryptedVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[7]);
}

// ===================================================================

class StatsEncryptedVolumeResponse::_Internal {
 public:
  static const ::opi_api::storage::v1::VolumeStats& stats(const StatsEncryptedVolumeResponse* msg);
};

const ::opi_api::storage::v1::VolumeStats&
StatsEncryptedVolumeResponse::_Internal::stats(const StatsEncryptedVolumeResponse* msg) {
  return *msg->_impl_.stats_;
}
void StatsEncryptedVolumeResponse::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
StatsEncryptedVolumeResponse::StatsEncryptedVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.StatsEncryptedVolumeResponse)
}
StatsEncryptedVolumeResponse::StatsEncryptedVolumeResponse(const StatsEncryptedVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsEncryptedVolumeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::opi_api::storage::v1::VolumeStats(*from._impl_.stats_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.StatsEncryptedVolumeResponse)
}

inline void StatsEncryptedVolumeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsEncryptedVolumeResponse::~StatsEncryptedVolumeResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsEncryptedVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void StatsEncryptedVolumeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsEncryptedVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsEncryptedVolumeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VolumeStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsEncryptedVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VolumeStats stats = 1;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  return target;
}

size_t StatsEncryptedVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VolumeStats stats = 1;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsEncryptedVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsEncryptedVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsEncryptedVolumeResponse::GetClassData() const { return &_class_data_; }


void StatsEncryptedVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsEncryptedVolumeResponse*>(&to_msg);
  auto& from = static_cast<const StatsEncryptedVolumeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::opi_api::storage::v1::VolumeStats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsEncryptedVolumeResponse::CopyFrom(const StatsEncryptedVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.StatsEncryptedVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsEncryptedVolumeResponse::IsInitialized() const {
  return true;
}

void StatsEncryptedVolumeResponse::InternalSwap(StatsEncryptedVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsEncryptedVolumeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_middleend_5fencryption_2eproto_getter, &descriptor_table_middleend_5fencryption_2eproto_once,
      file_level_metadata_middleend_5fencryption_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::EncryptedVolume*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::EncryptedVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::EncryptedVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::CreateEncryptedVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::CreateEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::CreateEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::DeleteEncryptedVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::DeleteEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::DeleteEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::UpdateEncryptedVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::UpdateEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::UpdateEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListEncryptedVolumesRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListEncryptedVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListEncryptedVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListEncryptedVolumesResponse*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListEncryptedVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListEncryptedVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::GetEncryptedVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::GetEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::GetEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::StatsEncryptedVolumeRequest*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::StatsEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::StatsEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::StatsEncryptedVolumeResponse*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::StatsEncryptedVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::StatsEncryptedVolumeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
