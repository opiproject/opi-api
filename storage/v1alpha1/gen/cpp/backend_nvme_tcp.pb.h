// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_nvme_tcp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "object_key.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fnvme_5ftcp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fnvme_5ftcp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fnvme_5ftcp_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class NVMfRemoteController;
struct NVMfRemoteControllerDefaultTypeInternal;
extern NVMfRemoteControllerDefaultTypeInternal _NVMfRemoteController_default_instance_;
class NVMfRemoteControllerConnectRequest;
struct NVMfRemoteControllerConnectRequestDefaultTypeInternal;
extern NVMfRemoteControllerConnectRequestDefaultTypeInternal _NVMfRemoteControllerConnectRequest_default_instance_;
class NVMfRemoteControllerDisconnectRequest;
struct NVMfRemoteControllerDisconnectRequestDefaultTypeInternal;
extern NVMfRemoteControllerDisconnectRequestDefaultTypeInternal _NVMfRemoteControllerDisconnectRequest_default_instance_;
class NVMfRemoteControllerGetRequest;
struct NVMfRemoteControllerGetRequestDefaultTypeInternal;
extern NVMfRemoteControllerGetRequestDefaultTypeInternal _NVMfRemoteControllerGetRequest_default_instance_;
class NVMfRemoteControllerListRequest;
struct NVMfRemoteControllerListRequestDefaultTypeInternal;
extern NVMfRemoteControllerListRequestDefaultTypeInternal _NVMfRemoteControllerListRequest_default_instance_;
class NVMfRemoteControllerListResponse;
struct NVMfRemoteControllerListResponseDefaultTypeInternal;
extern NVMfRemoteControllerListResponseDefaultTypeInternal _NVMfRemoteControllerListResponse_default_instance_;
class NVMfRemoteControllerResetRequest;
struct NVMfRemoteControllerResetRequestDefaultTypeInternal;
extern NVMfRemoteControllerResetRequestDefaultTypeInternal _NVMfRemoteControllerResetRequest_default_instance_;
class NVMfRemoteControllerStatsRequest;
struct NVMfRemoteControllerStatsRequestDefaultTypeInternal;
extern NVMfRemoteControllerStatsRequestDefaultTypeInternal _NVMfRemoteControllerStatsRequest_default_instance_;
class NVMfRemoteControllerStatsResponse;
struct NVMfRemoteControllerStatsResponseDefaultTypeInternal;
extern NVMfRemoteControllerStatsResponseDefaultTypeInternal _NVMfRemoteControllerStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::NVMfRemoteController* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteController>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerConnectRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerGetRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerListRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerListRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerListResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerListResponse>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerResetRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

enum NvmeTransportType : int {
  NVME_TRANSPORT_TYPE_UNSPECIFIED = 0,
  NVME_TRANSPORT_FC = 1,
  NVME_TRANSPORT_PCIE = 2,
  NVME_TRANSPORT_RDMA = 3,
  NVME_TRANSPORT_TCP = 4,
  NVME_TRANSPORT_CUSTOM = 5,
  NvmeTransportType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeTransportType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeTransportType_IsValid(int value);
constexpr NvmeTransportType NvmeTransportType_MIN = NVME_TRANSPORT_TYPE_UNSPECIFIED;
constexpr NvmeTransportType NvmeTransportType_MAX = NVME_TRANSPORT_CUSTOM;
constexpr int NvmeTransportType_ARRAYSIZE = NvmeTransportType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeTransportType_descriptor();
template<typename T>
inline const std::string& NvmeTransportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeTransportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeTransportType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeTransportType_descriptor(), enum_t_value);
}
inline bool NvmeTransportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeTransportType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeTransportType>(
    NvmeTransportType_descriptor(), name, value);
}
enum NvmeAddressFamily : int {
  NVME_ADDRESS_FAMILY_UNSPECIFIED = 0,
  NVMF_ADRFAM_IPV4 = 1,
  NVMF_ADRFAM_IPV6 = 2,
  NVMF_ADRFAM_IB = 3,
  NVMF_ADRFAM_FC = 4,
  NVMF_ADRFAM_INTRA_HOST = 5,
  NvmeAddressFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeAddressFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeAddressFamily_IsValid(int value);
constexpr NvmeAddressFamily NvmeAddressFamily_MIN = NVME_ADDRESS_FAMILY_UNSPECIFIED;
constexpr NvmeAddressFamily NvmeAddressFamily_MAX = NVMF_ADRFAM_INTRA_HOST;
constexpr int NvmeAddressFamily_ARRAYSIZE = NvmeAddressFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeAddressFamily_descriptor();
template<typename T>
inline const std::string& NvmeAddressFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeAddressFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeAddressFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeAddressFamily_descriptor(), enum_t_value);
}
inline bool NvmeAddressFamily_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeAddressFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeAddressFamily>(
    NvmeAddressFamily_descriptor(), name, value);
}
enum NvmeMultipath : int {
  NVME_MULTIPATH_UNSPECIFIED = 0,
  NVME_MULTIPATH_DISABLE = 1,
  NVME_MULTIPATH_FAILOVER = 2,
  NVME_MULTIPATH_MULTIPATH = 3,
  NvmeMultipath_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeMultipath_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeMultipath_IsValid(int value);
constexpr NvmeMultipath NvmeMultipath_MIN = NVME_MULTIPATH_UNSPECIFIED;
constexpr NvmeMultipath NvmeMultipath_MAX = NVME_MULTIPATH_MULTIPATH;
constexpr int NvmeMultipath_ARRAYSIZE = NvmeMultipath_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeMultipath_descriptor();
template<typename T>
inline const std::string& NvmeMultipath_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeMultipath>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeMultipath_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeMultipath_descriptor(), enum_t_value);
}
inline bool NvmeMultipath_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeMultipath* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeMultipath>(
    NvmeMultipath_descriptor(), name, value);
}
// ===================================================================

class NVMfRemoteController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteController) */ {
 public:
  inline NVMfRemoteController() : NVMfRemoteController(nullptr) {}
  ~NVMfRemoteController() override;
  explicit constexpr NVMfRemoteController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteController(const NVMfRemoteController& from);
  NVMfRemoteController(NVMfRemoteController&& from) noexcept
    : NVMfRemoteController() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteController& operator=(const NVMfRemoteController& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteController& operator=(NVMfRemoteController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteController& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteController* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteController*>(
               &_NVMfRemoteController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NVMfRemoteController& a, NVMfRemoteController& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteController";
  }
  protected:
  explicit NVMfRemoteController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraddrFieldNumber = 4,
    kSubnqnFieldNumber = 6,
    kHostnqnFieldNumber = 12,
    kIdFieldNumber = 1,
    kTrtypeFieldNumber = 2,
    kAdrfamFieldNumber = 3,
    kTrsvcidFieldNumber = 5,
    kHdgstFieldNumber = 7,
    kDdgstFieldNumber = 8,
    kMultipathFieldNumber = 9,
    kIoQueuesCountFieldNumber = 10,
    kQueueSizeFieldNumber = 11,
  };
  // string traddr = 4;
  void clear_traddr();
  const std::string& traddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traddr();
  PROTOBUF_NODISCARD std::string* release_traddr();
  void set_allocated_traddr(std::string* traddr);
  private:
  const std::string& _internal_traddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traddr(const std::string& value);
  std::string* _internal_mutable_traddr();
  public:

  // string subnqn = 6;
  void clear_subnqn();
  const std::string& subnqn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnqn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnqn();
  PROTOBUF_NODISCARD std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // string hostnqn = 12;
  void clear_hostnqn();
  const std::string& hostnqn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostnqn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostnqn();
  PROTOBUF_NODISCARD std::string* release_hostnqn();
  void set_allocated_hostnqn(std::string* hostnqn);
  private:
  const std::string& _internal_hostnqn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostnqn(const std::string& value);
  std::string* _internal_mutable_hostnqn();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.NvmeTransportType trtype = 2;
  void clear_trtype();
  ::opi_api::storage::v1::NvmeTransportType trtype() const;
  void set_trtype(::opi_api::storage::v1::NvmeTransportType value);
  private:
  ::opi_api::storage::v1::NvmeTransportType _internal_trtype() const;
  void _internal_set_trtype(::opi_api::storage::v1::NvmeTransportType value);
  public:

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
  void clear_adrfam();
  ::opi_api::storage::v1::NvmeAddressFamily adrfam() const;
  void set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  private:
  ::opi_api::storage::v1::NvmeAddressFamily _internal_adrfam() const;
  void _internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  public:

  // int64 trsvcid = 5;
  void clear_trsvcid();
  int64_t trsvcid() const;
  void set_trsvcid(int64_t value);
  private:
  int64_t _internal_trsvcid() const;
  void _internal_set_trsvcid(int64_t value);
  public:

  // bool hdgst = 7;
  void clear_hdgst();
  bool hdgst() const;
  void set_hdgst(bool value);
  private:
  bool _internal_hdgst() const;
  void _internal_set_hdgst(bool value);
  public:

  // bool ddgst = 8;
  void clear_ddgst();
  bool ddgst() const;
  void set_ddgst(bool value);
  private:
  bool _internal_ddgst() const;
  void _internal_set_ddgst(bool value);
  public:

  // .opi_api.storage.v1.NvmeMultipath multipath = 9;
  void clear_multipath();
  ::opi_api::storage::v1::NvmeMultipath multipath() const;
  void set_multipath(::opi_api::storage::v1::NvmeMultipath value);
  private:
  ::opi_api::storage::v1::NvmeMultipath _internal_multipath() const;
  void _internal_set_multipath(::opi_api::storage::v1::NvmeMultipath value);
  public:

  // int64 io_queues_count = 10;
  void clear_io_queues_count();
  int64_t io_queues_count() const;
  void set_io_queues_count(int64_t value);
  private:
  int64_t _internal_io_queues_count() const;
  void _internal_set_io_queues_count(int64_t value);
  public:

  // int64 queue_size = 11;
  void clear_queue_size();
  int64_t queue_size() const;
  void set_queue_size(int64_t value);
  private:
  int64_t _internal_queue_size() const;
  void _internal_set_queue_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostnqn_;
  ::opi_api::common::v1::ObjectKey* id_;
  int trtype_;
  int adrfam_;
  int64_t trsvcid_;
  bool hdgst_;
  bool ddgst_;
  int multipath_;
  int64_t io_queues_count_;
  int64_t queue_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerConnectRequest) */ {
 public:
  inline NVMfRemoteControllerConnectRequest() : NVMfRemoteControllerConnectRequest(nullptr) {}
  ~NVMfRemoteControllerConnectRequest() override;
  explicit constexpr NVMfRemoteControllerConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerConnectRequest(const NVMfRemoteControllerConnectRequest& from);
  NVMfRemoteControllerConnectRequest(NVMfRemoteControllerConnectRequest&& from) noexcept
    : NVMfRemoteControllerConnectRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerConnectRequest& operator=(const NVMfRemoteControllerConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerConnectRequest& operator=(NVMfRemoteControllerConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerConnectRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerConnectRequest*>(
               &_NVMfRemoteControllerConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NVMfRemoteControllerConnectRequest& a, NVMfRemoteControllerConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerConnectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerConnectRequest";
  }
  protected:
  explicit NVMfRemoteControllerConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlFieldNumber = 1,
  };
  // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  bool has_ctrl() const;
  private:
  bool _internal_has_ctrl() const;
  public:
  void clear_ctrl();
  const ::opi_api::storage::v1::NVMfRemoteController& ctrl() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NVMfRemoteController* release_ctrl();
  ::opi_api::storage::v1::NVMfRemoteController* mutable_ctrl();
  void set_allocated_ctrl(::opi_api::storage::v1::NVMfRemoteController* ctrl);
  private:
  const ::opi_api::storage::v1::NVMfRemoteController& _internal_ctrl() const;
  ::opi_api::storage::v1::NVMfRemoteController* _internal_mutable_ctrl();
  public:
  void unsafe_arena_set_allocated_ctrl(
      ::opi_api::storage::v1::NVMfRemoteController* ctrl);
  ::opi_api::storage::v1::NVMfRemoteController* unsafe_arena_release_ctrl();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NVMfRemoteController* ctrl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerDisconnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest) */ {
 public:
  inline NVMfRemoteControllerDisconnectRequest() : NVMfRemoteControllerDisconnectRequest(nullptr) {}
  ~NVMfRemoteControllerDisconnectRequest() override;
  explicit constexpr NVMfRemoteControllerDisconnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerDisconnectRequest(const NVMfRemoteControllerDisconnectRequest& from);
  NVMfRemoteControllerDisconnectRequest(NVMfRemoteControllerDisconnectRequest&& from) noexcept
    : NVMfRemoteControllerDisconnectRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerDisconnectRequest& operator=(const NVMfRemoteControllerDisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerDisconnectRequest& operator=(NVMfRemoteControllerDisconnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerDisconnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerDisconnectRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerDisconnectRequest*>(
               &_NVMfRemoteControllerDisconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NVMfRemoteControllerDisconnectRequest& a, NVMfRemoteControllerDisconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerDisconnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerDisconnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerDisconnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerDisconnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerDisconnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerDisconnectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerDisconnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest";
  }
  protected:
  explicit NVMfRemoteControllerDisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerResetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerResetRequest) */ {
 public:
  inline NVMfRemoteControllerResetRequest() : NVMfRemoteControllerResetRequest(nullptr) {}
  ~NVMfRemoteControllerResetRequest() override;
  explicit constexpr NVMfRemoteControllerResetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerResetRequest(const NVMfRemoteControllerResetRequest& from);
  NVMfRemoteControllerResetRequest(NVMfRemoteControllerResetRequest&& from) noexcept
    : NVMfRemoteControllerResetRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerResetRequest& operator=(const NVMfRemoteControllerResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerResetRequest& operator=(NVMfRemoteControllerResetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerResetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerResetRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerResetRequest*>(
               &_NVMfRemoteControllerResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NVMfRemoteControllerResetRequest& a, NVMfRemoteControllerResetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerResetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerResetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerResetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerResetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerResetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerResetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerResetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerResetRequest";
  }
  protected:
  explicit NVMfRemoteControllerResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerListRequest) */ {
 public:
  inline NVMfRemoteControllerListRequest() : NVMfRemoteControllerListRequest(nullptr) {}
  ~NVMfRemoteControllerListRequest() override;
  explicit constexpr NVMfRemoteControllerListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerListRequest(const NVMfRemoteControllerListRequest& from);
  NVMfRemoteControllerListRequest(NVMfRemoteControllerListRequest&& from) noexcept
    : NVMfRemoteControllerListRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerListRequest& operator=(const NVMfRemoteControllerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerListRequest& operator=(NVMfRemoteControllerListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerListRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerListRequest*>(
               &_NVMfRemoteControllerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NVMfRemoteControllerListRequest& a, NVMfRemoteControllerListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerListRequest";
  }
  protected:
  explicit NVMfRemoteControllerListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerListResponse) */ {
 public:
  inline NVMfRemoteControllerListResponse() : NVMfRemoteControllerListResponse(nullptr) {}
  ~NVMfRemoteControllerListResponse() override;
  explicit constexpr NVMfRemoteControllerListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerListResponse(const NVMfRemoteControllerListResponse& from);
  NVMfRemoteControllerListResponse(NVMfRemoteControllerListResponse&& from) noexcept
    : NVMfRemoteControllerListResponse() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerListResponse& operator=(const NVMfRemoteControllerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerListResponse& operator=(NVMfRemoteControllerListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerListResponse* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerListResponse*>(
               &_NVMfRemoteControllerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NVMfRemoteControllerListResponse& a, NVMfRemoteControllerListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerListResponse";
  }
  protected:
  explicit NVMfRemoteControllerListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  int ctrl_size() const;
  private:
  int _internal_ctrl_size() const;
  public:
  void clear_ctrl();
  ::opi_api::storage::v1::NVMfRemoteController* mutable_ctrl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >*
      mutable_ctrl();
  private:
  const ::opi_api::storage::v1::NVMfRemoteController& _internal_ctrl(int index) const;
  ::opi_api::storage::v1::NVMfRemoteController* _internal_add_ctrl();
  public:
  const ::opi_api::storage::v1::NVMfRemoteController& ctrl(int index) const;
  ::opi_api::storage::v1::NVMfRemoteController* add_ctrl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >&
      ctrl() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController > ctrl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerGetRequest) */ {
 public:
  inline NVMfRemoteControllerGetRequest() : NVMfRemoteControllerGetRequest(nullptr) {}
  ~NVMfRemoteControllerGetRequest() override;
  explicit constexpr NVMfRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerGetRequest(const NVMfRemoteControllerGetRequest& from);
  NVMfRemoteControllerGetRequest(NVMfRemoteControllerGetRequest&& from) noexcept
    : NVMfRemoteControllerGetRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerGetRequest& operator=(const NVMfRemoteControllerGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerGetRequest& operator=(NVMfRemoteControllerGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerGetRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerGetRequest*>(
               &_NVMfRemoteControllerGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NVMfRemoteControllerGetRequest& a, NVMfRemoteControllerGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerGetRequest";
  }
  protected:
  explicit NVMfRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerStatsRequest) */ {
 public:
  inline NVMfRemoteControllerStatsRequest() : NVMfRemoteControllerStatsRequest(nullptr) {}
  ~NVMfRemoteControllerStatsRequest() override;
  explicit constexpr NVMfRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerStatsRequest(const NVMfRemoteControllerStatsRequest& from);
  NVMfRemoteControllerStatsRequest(NVMfRemoteControllerStatsRequest&& from) noexcept
    : NVMfRemoteControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerStatsRequest& operator=(const NVMfRemoteControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerStatsRequest& operator=(NVMfRemoteControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerStatsRequest*>(
               &_NVMfRemoteControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NVMfRemoteControllerStatsRequest& a, NVMfRemoteControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerStatsRequest";
  }
  protected:
  explicit NVMfRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerStatsResponse) */ {
 public:
  inline NVMfRemoteControllerStatsResponse() : NVMfRemoteControllerStatsResponse(nullptr) {}
  ~NVMfRemoteControllerStatsResponse() override;
  explicit constexpr NVMfRemoteControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerStatsResponse(const NVMfRemoteControllerStatsResponse& from);
  NVMfRemoteControllerStatsResponse(NVMfRemoteControllerStatsResponse&& from) noexcept
    : NVMfRemoteControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerStatsResponse& operator=(const NVMfRemoteControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerStatsResponse& operator=(NVMfRemoteControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerStatsResponse*>(
               &_NVMfRemoteControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NVMfRemoteControllerStatsResponse& a, NVMfRemoteControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerStatsResponse";
  }
  protected:
  explicit NVMfRemoteControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // string stats = 1;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NVMfRemoteController

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteController::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteController::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteController::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteController::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.id)
  return _internal_id();
}
inline void NVMfRemoteController::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteController.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.id)
  return _msg;
}
inline void NVMfRemoteController::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.id)
}

// .opi_api.storage.v1.NvmeTransportType trtype = 2;
inline void NVMfRemoteController::clear_trtype() {
  trtype_ = 0;
}
inline ::opi_api::storage::v1::NvmeTransportType NVMfRemoteController::_internal_trtype() const {
  return static_cast< ::opi_api::storage::v1::NvmeTransportType >(trtype_);
}
inline ::opi_api::storage::v1::NvmeTransportType NVMfRemoteController::trtype() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.trtype)
  return _internal_trtype();
}
inline void NVMfRemoteController::_internal_set_trtype(::opi_api::storage::v1::NvmeTransportType value) {
  
  trtype_ = value;
}
inline void NVMfRemoteController::set_trtype(::opi_api::storage::v1::NvmeTransportType value) {
  _internal_set_trtype(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.trtype)
}

// .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
inline void NVMfRemoteController::clear_adrfam() {
  adrfam_ = 0;
}
inline ::opi_api::storage::v1::NvmeAddressFamily NVMfRemoteController::_internal_adrfam() const {
  return static_cast< ::opi_api::storage::v1::NvmeAddressFamily >(adrfam_);
}
inline ::opi_api::storage::v1::NvmeAddressFamily NVMfRemoteController::adrfam() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.adrfam)
  return _internal_adrfam();
}
inline void NVMfRemoteController::_internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  
  adrfam_ = value;
}
inline void NVMfRemoteController::set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  _internal_set_adrfam(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.adrfam)
}

// string traddr = 4;
inline void NVMfRemoteController::clear_traddr() {
  traddr_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::traddr() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.traddr)
  return _internal_traddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_traddr(ArgT0&& arg0, ArgT... args) {
 
 traddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.traddr)
}
inline std::string* NVMfRemoteController::mutable_traddr() {
  std::string* _s = _internal_mutable_traddr();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.traddr)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_traddr() const {
  return traddr_.Get();
}
inline void NVMfRemoteController::_internal_set_traddr(const std::string& value) {
  
  traddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_traddr() {
  
  return traddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_traddr() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.traddr)
  return traddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_traddr(std::string* traddr) {
  if (traddr != nullptr) {
    
  } else {
    
  }
  traddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traddr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (traddr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    traddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.traddr)
}

// int64 trsvcid = 5;
inline void NVMfRemoteController::clear_trsvcid() {
  trsvcid_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_trsvcid() const {
  return trsvcid_;
}
inline int64_t NVMfRemoteController::trsvcid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.trsvcid)
  return _internal_trsvcid();
}
inline void NVMfRemoteController::_internal_set_trsvcid(int64_t value) {
  
  trsvcid_ = value;
}
inline void NVMfRemoteController::set_trsvcid(int64_t value) {
  _internal_set_trsvcid(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.trsvcid)
}

// string subnqn = 6;
inline void NVMfRemoteController::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::subnqn() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return _internal_subnqn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_subnqn(ArgT0&& arg0, ArgT... args) {
 
 subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.subnqn)
}
inline std::string* NVMfRemoteController::mutable_subnqn() {
  std::string* _s = _internal_mutable_subnqn();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void NVMfRemoteController::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_subnqn() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnqn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.subnqn)
}

// bool hdgst = 7;
inline void NVMfRemoteController::clear_hdgst() {
  hdgst_ = false;
}
inline bool NVMfRemoteController::_internal_hdgst() const {
  return hdgst_;
}
inline bool NVMfRemoteController::hdgst() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.hdgst)
  return _internal_hdgst();
}
inline void NVMfRemoteController::_internal_set_hdgst(bool value) {
  
  hdgst_ = value;
}
inline void NVMfRemoteController::set_hdgst(bool value) {
  _internal_set_hdgst(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.hdgst)
}

// bool ddgst = 8;
inline void NVMfRemoteController::clear_ddgst() {
  ddgst_ = false;
}
inline bool NVMfRemoteController::_internal_ddgst() const {
  return ddgst_;
}
inline bool NVMfRemoteController::ddgst() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.ddgst)
  return _internal_ddgst();
}
inline void NVMfRemoteController::_internal_set_ddgst(bool value) {
  
  ddgst_ = value;
}
inline void NVMfRemoteController::set_ddgst(bool value) {
  _internal_set_ddgst(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.ddgst)
}

// .opi_api.storage.v1.NvmeMultipath multipath = 9;
inline void NVMfRemoteController::clear_multipath() {
  multipath_ = 0;
}
inline ::opi_api::storage::v1::NvmeMultipath NVMfRemoteController::_internal_multipath() const {
  return static_cast< ::opi_api::storage::v1::NvmeMultipath >(multipath_);
}
inline ::opi_api::storage::v1::NvmeMultipath NVMfRemoteController::multipath() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.multipath)
  return _internal_multipath();
}
inline void NVMfRemoteController::_internal_set_multipath(::opi_api::storage::v1::NvmeMultipath value) {
  
  multipath_ = value;
}
inline void NVMfRemoteController::set_multipath(::opi_api::storage::v1::NvmeMultipath value) {
  _internal_set_multipath(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.multipath)
}

// int64 io_queues_count = 10;
inline void NVMfRemoteController::clear_io_queues_count() {
  io_queues_count_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_io_queues_count() const {
  return io_queues_count_;
}
inline int64_t NVMfRemoteController::io_queues_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.io_queues_count)
  return _internal_io_queues_count();
}
inline void NVMfRemoteController::_internal_set_io_queues_count(int64_t value) {
  
  io_queues_count_ = value;
}
inline void NVMfRemoteController::set_io_queues_count(int64_t value) {
  _internal_set_io_queues_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.io_queues_count)
}

// int64 queue_size = 11;
inline void NVMfRemoteController::clear_queue_size() {
  queue_size_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_queue_size() const {
  return queue_size_;
}
inline int64_t NVMfRemoteController::queue_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.queue_size)
  return _internal_queue_size();
}
inline void NVMfRemoteController::_internal_set_queue_size(int64_t value) {
  
  queue_size_ = value;
}
inline void NVMfRemoteController::set_queue_size(int64_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.queue_size)
}

// string hostnqn = 12;
inline void NVMfRemoteController::clear_hostnqn() {
  hostnqn_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::hostnqn() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return _internal_hostnqn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_hostnqn(ArgT0&& arg0, ArgT... args) {
 
 hostnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.hostnqn)
}
inline std::string* NVMfRemoteController::mutable_hostnqn() {
  std::string* _s = _internal_mutable_hostnqn();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_hostnqn() const {
  return hostnqn_.Get();
}
inline void NVMfRemoteController::_internal_set_hostnqn(const std::string& value) {
  
  hostnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_hostnqn() {
  
  return hostnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_hostnqn() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return hostnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_hostnqn(std::string* hostnqn) {
  if (hostnqn != nullptr) {
    
  } else {
    
  }
  hostnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostnqn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostnqn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.hostnqn)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerConnectRequest

// .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
inline bool NVMfRemoteControllerConnectRequest::_internal_has_ctrl() const {
  return this != internal_default_instance() && ctrl_ != nullptr;
}
inline bool NVMfRemoteControllerConnectRequest::has_ctrl() const {
  return _internal_has_ctrl();
}
inline void NVMfRemoteControllerConnectRequest::clear_ctrl() {
  if (GetArenaForAllocation() == nullptr && ctrl_ != nullptr) {
    delete ctrl_;
  }
  ctrl_ = nullptr;
}
inline const ::opi_api::storage::v1::NVMfRemoteController& NVMfRemoteControllerConnectRequest::_internal_ctrl() const {
  const ::opi_api::storage::v1::NVMfRemoteController* p = ctrl_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NVMfRemoteController&>(
      ::opi_api::storage::v1::_NVMfRemoteController_default_instance_);
}
inline const ::opi_api::storage::v1::NVMfRemoteController& NVMfRemoteControllerConnectRequest::ctrl() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl)
  return _internal_ctrl();
}
inline void NVMfRemoteControllerConnectRequest::unsafe_arena_set_allocated_ctrl(
    ::opi_api::storage::v1::NVMfRemoteController* ctrl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctrl_);
  }
  ctrl_ = ctrl;
  if (ctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl)
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerConnectRequest::release_ctrl() {
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = ctrl_;
  ctrl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerConnectRequest::unsafe_arena_release_ctrl() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl)
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = ctrl_;
  ctrl_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerConnectRequest::_internal_mutable_ctrl() {
  
  if (ctrl_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteController>(GetArenaForAllocation());
    ctrl_ = p;
  }
  return ctrl_;
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerConnectRequest::mutable_ctrl() {
  ::opi_api::storage::v1::NVMfRemoteController* _msg = _internal_mutable_ctrl();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl)
  return _msg;
}
inline void NVMfRemoteControllerConnectRequest::set_allocated_ctrl(::opi_api::storage::v1::NVMfRemoteController* ctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ctrl_;
  }
  if (ctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NVMfRemoteController>::GetOwningArena(ctrl);
    if (message_arena != submessage_arena) {
      ctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctrl, submessage_arena);
    }
    
  } else {
    
  }
  ctrl_ = ctrl;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerDisconnectRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerDisconnectRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerDisconnectRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerDisconnectRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerDisconnectRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerDisconnectRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerDisconnectRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerDisconnectRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerDisconnectRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerDisconnectRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerDisconnectRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerResetRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerResetRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerResetRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerResetRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerResetRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerResetRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerResetRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerListRequest

// int32 page_size = 1;
inline void NVMfRemoteControllerListRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t NVMfRemoteControllerListRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t NVMfRemoteControllerListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_size)
  return _internal_page_size();
}
inline void NVMfRemoteControllerListRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void NVMfRemoteControllerListRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_size)
}

// string page_token = 2;
inline void NVMfRemoteControllerListRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& NVMfRemoteControllerListRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteControllerListRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_token)
}
inline std::string* NVMfRemoteControllerListRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_token)
  return _s;
}
inline const std::string& NVMfRemoteControllerListRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void NVMfRemoteControllerListRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteControllerListRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteControllerListRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteControllerListRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerListRequest.page_token)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerListResponse

// repeated .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
inline int NVMfRemoteControllerListResponse::_internal_ctrl_size() const {
  return ctrl_.size();
}
inline int NVMfRemoteControllerListResponse::ctrl_size() const {
  return _internal_ctrl_size();
}
inline void NVMfRemoteControllerListResponse::clear_ctrl() {
  ctrl_.Clear();
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerListResponse::mutable_ctrl(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl)
  return ctrl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >*
NVMfRemoteControllerListResponse::mutable_ctrl() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl)
  return &ctrl_;
}
inline const ::opi_api::storage::v1::NVMfRemoteController& NVMfRemoteControllerListResponse::_internal_ctrl(int index) const {
  return ctrl_.Get(index);
}
inline const ::opi_api::storage::v1::NVMfRemoteController& NVMfRemoteControllerListResponse::ctrl(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl)
  return _internal_ctrl(index);
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerListResponse::_internal_add_ctrl() {
  return ctrl_.Add();
}
inline ::opi_api::storage::v1::NVMfRemoteController* NVMfRemoteControllerListResponse::add_ctrl() {
  ::opi_api::storage::v1::NVMfRemoteController* _add = _internal_add_ctrl();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >&
NVMfRemoteControllerListResponse::ctrl() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl)
  return ctrl_;
}

// -------------------------------------------------------------------

// NVMfRemoteControllerGetRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerGetRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerGetRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerGetRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerGetRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerGetRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerGetRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerGetRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerGetRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerGetRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerGetRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerGetRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerGetRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerGetRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerGetRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerGetRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerStatsRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerStatsRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerStatsRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerStatsRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerStatsRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerStatsRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerStatsRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerStatsResponse

// string stats = 1;
inline void NVMfRemoteControllerStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& NVMfRemoteControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteControllerStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
}
inline std::string* NVMfRemoteControllerStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  return _s;
}
inline const std::string& NVMfRemoteControllerStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void NVMfRemoteControllerStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteControllerStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteControllerStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteControllerStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeTransportType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeTransportType>() {
  return ::opi_api::storage::v1::NvmeTransportType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeAddressFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeAddressFamily>() {
  return ::opi_api::storage::v1::NvmeAddressFamily_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeMultipath> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeMultipath>() {
  return ::opi_api::storage::v1::NvmeMultipath_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto
