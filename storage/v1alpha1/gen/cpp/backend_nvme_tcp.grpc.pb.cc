// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_nvme_tcp.proto

#include "backend_nvme_tcp.pb.h"
#include "backend_nvme_tcp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* NvmeRemoteControllerService_method_names[] = {
  "/opi_api.storage.v1.NvmeRemoteControllerService/CreateNvmeRemoteController",
  "/opi_api.storage.v1.NvmeRemoteControllerService/DeleteNvmeRemoteController",
  "/opi_api.storage.v1.NvmeRemoteControllerService/UpdateNvmeRemoteController",
  "/opi_api.storage.v1.NvmeRemoteControllerService/ListNvmeRemoteControllers",
  "/opi_api.storage.v1.NvmeRemoteControllerService/GetNvmeRemoteController",
  "/opi_api.storage.v1.NvmeRemoteControllerService/NvmeRemoteControllerReset",
  "/opi_api.storage.v1.NvmeRemoteControllerService/NvmeRemoteControllerStats",
  "/opi_api.storage.v1.NvmeRemoteControllerService/ListNvmeRemoteNamespaces",
  "/opi_api.storage.v1.NvmeRemoteControllerService/CreateNvmePath",
  "/opi_api.storage.v1.NvmeRemoteControllerService/DeleteNvmePath",
  "/opi_api.storage.v1.NvmeRemoteControllerService/UpdateNvmePath",
  "/opi_api.storage.v1.NvmeRemoteControllerService/ListNvmePaths",
  "/opi_api.storage.v1.NvmeRemoteControllerService/GetNvmePath",
  "/opi_api.storage.v1.NvmeRemoteControllerService/NvmePathStats",
};

std::unique_ptr< NvmeRemoteControllerService::Stub> NvmeRemoteControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NvmeRemoteControllerService::Stub> stub(new NvmeRemoteControllerService::Stub(channel, options));
  return stub;
}

NvmeRemoteControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateNvmeRemoteController_(NvmeRemoteControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNvmeRemoteController_(NvmeRemoteControllerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNvmeRemoteController_(NvmeRemoteControllerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmeRemoteControllers_(NvmeRemoteControllerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNvmeRemoteController_(NvmeRemoteControllerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmeRemoteControllerReset_(NvmeRemoteControllerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmeRemoteControllerStats_(NvmeRemoteControllerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmeRemoteNamespaces_(NvmeRemoteControllerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNvmePath_(NvmeRemoteControllerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNvmePath_(NvmeRemoteControllerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNvmePath_(NvmeRemoteControllerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmePaths_(NvmeRemoteControllerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNvmePath_(NvmeRemoteControllerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmePathStats_(NvmeRemoteControllerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NvmeRemoteControllerService::Stub::CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNvmeRemoteController_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeRemoteController_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::PrepareAsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeRemoteController, ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNvmeRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::AsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNvmeRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNvmeRemoteController_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeRemoteController_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::PrepareAsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNvmeRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::AsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNvmeRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNvmeRemoteController_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeRemoteController_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::PrepareAsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeRemoteController, ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNvmeRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::AsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNvmeRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmeRemoteControllers_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeRemoteControllers_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeRemoteControllers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* NvmeRemoteControllerService::Stub::PrepareAsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse, ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmeRemoteControllers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* NvmeRemoteControllerService::Stub::AsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmeRemoteControllersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNvmeRemoteController_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeRemoteController_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::PrepareAsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeRemoteController, ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNvmeRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* NvmeRemoteControllerService::Stub::AsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNvmeRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmeRemoteControllerReset_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeRemoteControllerReset_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeRemoteControllerReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::PrepareAsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmeRemoteControllerReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::AsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmeRemoteControllerResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmeRemoteControllerStats_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeRemoteControllerStats_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeRemoteControllerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* NvmeRemoteControllerService::Stub::PrepareAsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse, ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmeRemoteControllerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* NvmeRemoteControllerService::Stub::AsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmeRemoteControllerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmeRemoteNamespaces_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeRemoteNamespaces_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeRemoteNamespaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* NvmeRemoteControllerService::Stub::PrepareAsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse, ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmeRemoteNamespaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* NvmeRemoteControllerService::Stub::AsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmeRemoteNamespacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNvmePath_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmePath_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::PrepareAsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmePath, ::opi_api::storage::v1::CreateNvmePathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNvmePath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::AsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNvmePathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNvmePath_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmePath_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::PrepareAsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNvmePathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNvmePath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NvmeRemoteControllerService::Stub::AsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNvmePathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNvmePath_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmePath_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::PrepareAsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmePath, ::opi_api::storage::v1::UpdateNvmePathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNvmePath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::AsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNvmePathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::opi_api::storage::v1::ListNvmePathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmePaths_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmePaths_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmePaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>* NvmeRemoteControllerService::Stub::PrepareAsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmePathsResponse, ::opi_api::storage::v1::ListNvmePathsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmePaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>* NvmeRemoteControllerService::Stub::AsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmePathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNvmePath_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmePath_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmePath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::PrepareAsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmePath, ::opi_api::storage::v1::GetNvmePathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNvmePath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* NvmeRemoteControllerService::Stub::AsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNvmePathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NvmeRemoteControllerService::Stub::NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::opi_api::storage::v1::NvmePathStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmePathStats_, context, request, response);
}

void NvmeRemoteControllerService::Stub::async::NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmePathStats_, context, request, response, std::move(f));
}

void NvmeRemoteControllerService::Stub::async::NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmePathStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>* NvmeRemoteControllerService::Stub::PrepareAsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmePathStatsResponse, ::opi_api::storage::v1::NvmePathStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmePathStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>* NvmeRemoteControllerService::Stub::AsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmePathStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NvmeRemoteControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* req,
             ::opi_api::storage::v1::NvmeRemoteController* resp) {
               return service->CreateNvmeRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNvmeRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* req,
             ::opi_api::storage::v1::NvmeRemoteController* resp) {
               return service->UpdateNvmeRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* req,
             ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* resp) {
               return service->ListNvmeRemoteControllers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* req,
             ::opi_api::storage::v1::NvmeRemoteController* resp) {
               return service->GetNvmeRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NvmeRemoteControllerReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* req,
             ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* resp) {
               return service->NvmeRemoteControllerStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* req,
             ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* resp) {
               return service->ListNvmeRemoteNamespaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNvmePathRequest* req,
             ::opi_api::storage::v1::NvmePath* resp) {
               return service->CreateNvmePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNvmePathRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNvmePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNvmePathRequest* req,
             ::opi_api::storage::v1::NvmePath* resp) {
               return service->UpdateNvmePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmePathsRequest* req,
             ::opi_api::storage::v1::ListNvmePathsResponse* resp) {
               return service->ListNvmePaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNvmePathRequest* req,
             ::opi_api::storage::v1::NvmePath* resp) {
               return service->GetNvmePath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NvmeRemoteControllerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NvmeRemoteControllerService::Service, ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NvmeRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmePathStatsRequest* req,
             ::opi_api::storage::v1::NvmePathStatsResponse* resp) {
               return service->NvmePathStats(ctx, req, resp);
             }, this)));
}

NvmeRemoteControllerService::Service::~Service() {
}

::grpc::Status NvmeRemoteControllerService::Service::CreateNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::DeleteNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::UpdateNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::ListNvmeRemoteControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::GetNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::NvmeRemoteControllerReset(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::NvmeRemoteControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::ListNvmeRemoteNamespaces(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::CreateNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::DeleteNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::UpdateNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::ListNvmePaths(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::GetNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NvmeRemoteControllerService::Service::NvmePathStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

