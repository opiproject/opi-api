// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_nvme_tcp.proto

#include "backend_nvme_tcp.pb.h"
#include "backend_nvme_tcp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* NVMfRemoteControllerService_method_names[] = {
  "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfRemoteController",
  "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfRemoteController",
  "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfRemoteController",
  "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteControllers",
  "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfRemoteController",
  "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerReset",
  "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerStats",
  "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteNamespaces",
  "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfPath",
  "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfPath",
  "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfPath",
  "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfPaths",
  "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfPath",
  "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfPathStats",
};

std::unique_ptr< NVMfRemoteControllerService::Stub> NVMfRemoteControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NVMfRemoteControllerService::Stub> stub(new NVMfRemoteControllerService::Stub(channel, options));
  return stub;
}

NVMfRemoteControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateNVMfRemoteController_(NVMfRemoteControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNVMfRemoteController_(NVMfRemoteControllerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNVMfRemoteController_(NVMfRemoteControllerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNVMfRemoteControllers_(NVMfRemoteControllerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNVMfRemoteController_(NVMfRemoteControllerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMfRemoteControllerReset_(NVMfRemoteControllerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMfRemoteControllerStats_(NVMfRemoteControllerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNVMfRemoteNamespaces_(NVMfRemoteControllerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNVMfPath_(NVMfRemoteControllerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNVMfPath_(NVMfRemoteControllerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNVMfPath_(NVMfRemoteControllerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNVMfPaths_(NVMfRemoteControllerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNVMfPath_(NVMfRemoteControllerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NVMfPathStats_(NVMfRemoteControllerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NVMfRemoteControllerService::Stub::CreateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest& request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNVMfRemoteController_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::CreateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNVMfRemoteController_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::CreateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNVMfRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::PrepareAsyncCreateNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfRemoteController, ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNVMfRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::AsyncCreateNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNVMfRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::DeleteNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNVMfRemoteController_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::DeleteNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNVMfRemoteController_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::DeleteNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNVMfRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::PrepareAsyncDeleteNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNVMfRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::AsyncDeleteNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNVMfRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::UpdateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest& request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNVMfRemoteController_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::UpdateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNVMfRemoteController_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::UpdateNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNVMfRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::PrepareAsyncUpdateNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfRemoteController, ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNVMfRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::AsyncUpdateNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNVMfRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::ListNVMfRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest& request, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNVMfRemoteControllersRequest, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNVMfRemoteControllers_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::ListNVMfRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest* request, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNVMfRemoteControllersRequest, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfRemoteControllers_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::ListNVMfRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest* request, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfRemoteControllers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfRemoteControllersResponse>* NVMfRemoteControllerService::Stub::PrepareAsyncListNVMfRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNVMfRemoteControllersResponse, ::opi_api::storage::v1::ListNVMfRemoteControllersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNVMfRemoteControllers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfRemoteControllersResponse>* NVMfRemoteControllerService::Stub::AsyncListNVMfRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNVMfRemoteControllersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::GetNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest& request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNVMfRemoteController_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::GetNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNVMfRemoteController_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::GetNVMfRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNVMfRemoteController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::PrepareAsyncGetNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfRemoteController, ::opi_api::storage::v1::GetNVMfRemoteControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNVMfRemoteController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteController>* NVMfRemoteControllerService::Stub::AsyncGetNVMfRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNVMfRemoteControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMfRemoteControllerReset_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfRemoteControllerReset_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfRemoteControllerReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::PrepareAsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMfRemoteControllerReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::AsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMfRemoteControllerResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMfRemoteControllerStats_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfRemoteControllerStats_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfRemoteControllerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* NVMfRemoteControllerService::Stub::PrepareAsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMfRemoteControllerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* NVMfRemoteControllerService::Stub::AsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMfRemoteControllerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::ListNVMfRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest& request, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNVMfRemoteNamespaces_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::ListNVMfRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfRemoteNamespaces_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::ListNVMfRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfRemoteNamespaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse>* NVMfRemoteControllerService::Stub::PrepareAsyncListNVMfRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse, ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNVMfRemoteNamespaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse>* NVMfRemoteControllerService::Stub::AsyncListNVMfRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNVMfRemoteNamespacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::CreateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest& request, ::opi_api::storage::v1::NVMfPath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNVMfPath_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::CreateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNVMfPath_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::CreateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNVMfPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::PrepareAsyncCreateNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfPath, ::opi_api::storage::v1::CreateNVMfPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNVMfPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::AsyncCreateNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNVMfPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::DeleteNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNVMfPathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNVMfPath_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::DeleteNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNVMfPathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNVMfPath_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::DeleteNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNVMfPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::PrepareAsyncDeleteNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNVMfPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNVMfPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NVMfRemoteControllerService::Stub::AsyncDeleteNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNVMfPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::UpdateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest& request, ::opi_api::storage::v1::NVMfPath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNVMfPath_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::UpdateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNVMfPath_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::UpdateNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNVMfPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::PrepareAsyncUpdateNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfPath, ::opi_api::storage::v1::UpdateNVMfPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNVMfPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::AsyncUpdateNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNVMfPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::ListNVMfPaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest& request, ::opi_api::storage::v1::ListNVMfPathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNVMfPathsRequest, ::opi_api::storage::v1::ListNVMfPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNVMfPaths_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::ListNVMfPaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest* request, ::opi_api::storage::v1::ListNVMfPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNVMfPathsRequest, ::opi_api::storage::v1::ListNVMfPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfPaths_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::ListNVMfPaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest* request, ::opi_api::storage::v1::ListNVMfPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNVMfPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfPathsResponse>* NVMfRemoteControllerService::Stub::PrepareAsyncListNVMfPathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNVMfPathsResponse, ::opi_api::storage::v1::ListNVMfPathsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNVMfPaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNVMfPathsResponse>* NVMfRemoteControllerService::Stub::AsyncListNVMfPathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNVMfPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::GetNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest& request, ::opi_api::storage::v1::NVMfPath* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNVMfPath_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::GetNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNVMfPath_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::GetNVMfPath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNVMfPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::PrepareAsyncGetNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfPath, ::opi_api::storage::v1::GetNVMfPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNVMfPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPath>* NVMfRemoteControllerService::Stub::AsyncGetNVMfPathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNVMfPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NVMfRemoteControllerService::Stub::NVMfPathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest& request, ::opi_api::storage::v1::NVMfPathStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NVMfPathStatsRequest, ::opi_api::storage::v1::NVMfPathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NVMfPathStats_, context, request, response);
}

void NVMfRemoteControllerService::Stub::async::NVMfPathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest* request, ::opi_api::storage::v1::NVMfPathStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NVMfPathStatsRequest, ::opi_api::storage::v1::NVMfPathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfPathStats_, context, request, response, std::move(f));
}

void NVMfRemoteControllerService::Stub::async::NVMfPathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest* request, ::opi_api::storage::v1::NVMfPathStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NVMfPathStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPathStatsResponse>* NVMfRemoteControllerService::Stub::PrepareAsyncNVMfPathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NVMfPathStatsResponse, ::opi_api::storage::v1::NVMfPathStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NVMfPathStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfPathStatsResponse>* NVMfRemoteControllerService::Stub::AsyncNVMfPathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNVMfPathStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NVMfRemoteControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest* req,
             ::opi_api::storage::v1::NVMfRemoteController* resp) {
               return service->CreateNVMfRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNVMfRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest* req,
             ::opi_api::storage::v1::NVMfRemoteController* resp) {
               return service->UpdateNVMfRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::ListNVMfRemoteControllersRequest, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest* req,
             ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* resp) {
               return service->ListNVMfRemoteControllers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::GetNVMfRemoteControllerRequest, ::opi_api::storage::v1::NVMfRemoteController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest* req,
             ::opi_api::storage::v1::NVMfRemoteController* resp) {
               return service->GetNVMfRemoteController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NVMfRemoteControllerReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* req,
             ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* resp) {
               return service->NVMfRemoteControllerStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest* req,
             ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse* resp) {
               return service->ListNVMfRemoteNamespaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::CreateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNVMfPathRequest* req,
             ::opi_api::storage::v1::NVMfPath* resp) {
               return service->CreateNVMfPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::DeleteNVMfPathRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNVMfPathRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNVMfPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::UpdateNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNVMfPathRequest* req,
             ::opi_api::storage::v1::NVMfPath* resp) {
               return service->UpdateNVMfPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::ListNVMfPathsRequest, ::opi_api::storage::v1::ListNVMfPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNVMfPathsRequest* req,
             ::opi_api::storage::v1::ListNVMfPathsResponse* resp) {
               return service->ListNVMfPaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::GetNVMfPathRequest, ::opi_api::storage::v1::NVMfPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNVMfPathRequest* req,
             ::opi_api::storage::v1::NVMfPath* resp) {
               return service->GetNVMfPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NVMfRemoteControllerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NVMfRemoteControllerService::Service, ::opi_api::storage::v1::NVMfPathStatsRequest, ::opi_api::storage::v1::NVMfPathStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NVMfRemoteControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NVMfPathStatsRequest* req,
             ::opi_api::storage::v1::NVMfPathStatsResponse* resp) {
               return service->NVMfPathStats(ctx, req, resp);
             }, this)));
}

NVMfRemoteControllerService::Service::~Service() {
}

::grpc::Status NVMfRemoteControllerService::Service::CreateNVMfRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::DeleteNVMfRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::UpdateNVMfRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::ListNVMfRemoteControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNVMfRemoteControllersRequest* request, ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::GetNVMfRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNVMfRemoteControllerRequest* request, ::opi_api::storage::v1::NVMfRemoteController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::NVMfRemoteControllerReset(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::NVMfRemoteControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::ListNVMfRemoteNamespaces(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNVMfRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNVMfRemoteNamespacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::CreateNVMfPath(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::DeleteNVMfPath(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNVMfPathRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::UpdateNVMfPath(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::ListNVMfPaths(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNVMfPathsRequest* request, ::opi_api::storage::v1::ListNVMfPathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::GetNVMfPath(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNVMfPathRequest* request, ::opi_api::storage::v1::NVMfPath* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NVMfRemoteControllerService::Service::NVMfPathStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfPathStatsRequest* request, ::opi_api::storage::v1::NVMfPathStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

