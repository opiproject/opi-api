// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: middleend_qos_volume.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Intel Corporation
//
#ifndef GRPC_middleend_5fqos_5fvolume_2eproto__INCLUDED
#define GRPC_middleend_5fqos_5fvolume_2eproto__INCLUDED

#include "middleend_qos_volume.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

class MiddleendQosVolumeService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.MiddleendQosVolumeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an Qos Volume
    virtual ::grpc::Status CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> AsyncCreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(AsyncCreateQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> PrepareAsyncCreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncCreateQosVolumeRaw(context, request, cq));
    }
    // Delete an Qos Volume
    virtual ::grpc::Status DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteQosVolumeRaw(context, request, cq));
    }
    // Update an Qos Volume
    virtual ::grpc::Status UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> AsyncUpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(AsyncUpdateQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> PrepareAsyncUpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncUpdateQosVolumeRaw(context, request, cq));
    }
    // List Qos Volumes
    virtual ::grpc::Status ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::opi_api::storage::v1::ListQosVolumesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>> AsyncListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>>(AsyncListQosVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>> PrepareAsyncListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>>(PrepareAsyncListQosVolumesRaw(context, request, cq));
    }
    // Get an Qos Volume
    virtual ::grpc::Status GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> AsyncGetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(AsyncGetQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>> PrepareAsyncGetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncGetQosVolumeRaw(context, request, cq));
    }
    // Get an Qos Volume statistics
    virtual ::grpc::Status StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::opi_api::storage::v1::StatsQosVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>> AsyncStatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>>(AsyncStatsQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>> PrepareAsyncStatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>>(PrepareAsyncStatsQosVolumeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create an Qos Volume
      virtual void CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an Qos Volume
      virtual void DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an Qos Volume
      virtual void UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Qos Volumes
      virtual void ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Qos Volume
      virtual void GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Qos Volume statistics
      virtual void StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* AsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* PrepareAsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* AsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* PrepareAsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>* AsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListQosVolumesResponse>* PrepareAsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* AsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::QosVolume>* PrepareAsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>* AsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsQosVolumeResponse>* PrepareAsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> AsyncCreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(AsyncCreateQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> PrepareAsyncCreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncCreateQosVolumeRaw(context, request, cq));
    }
    ::grpc::Status DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteQosVolumeRaw(context, request, cq));
    }
    ::grpc::Status UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> AsyncUpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(AsyncUpdateQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> PrepareAsyncUpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncUpdateQosVolumeRaw(context, request, cq));
    }
    ::grpc::Status ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::opi_api::storage::v1::ListQosVolumesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>> AsyncListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>>(AsyncListQosVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>> PrepareAsyncListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>>(PrepareAsyncListQosVolumesRaw(context, request, cq));
    }
    ::grpc::Status GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> AsyncGetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(AsyncGetQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>> PrepareAsyncGetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>>(PrepareAsyncGetQosVolumeRaw(context, request, cq));
    }
    ::grpc::Status StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::opi_api::storage::v1::StatsQosVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>> AsyncStatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>>(AsyncStatsQosVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>> PrepareAsyncStatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>>(PrepareAsyncStatsQosVolumeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) override;
      void CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) override;
      void UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)>) override;
      void GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* AsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* PrepareAsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* AsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* PrepareAsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>* AsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>* PrepareAsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* AsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* PrepareAsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>* AsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>* PrepareAsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateQosVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteQosVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateQosVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_ListQosVolumes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQosVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_StatsQosVolume_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an Qos Volume
    virtual ::grpc::Status CreateQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response);
    // Delete an Qos Volume
    virtual ::grpc::Status DeleteQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response);
    // Update an Qos Volume
    virtual ::grpc::Status UpdateQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response);
    // List Qos Volumes
    virtual ::grpc::Status ListQosVolumes(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response);
    // Get an Qos Volume
    virtual ::grpc::Status GetQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response);
    // Get an Qos Volume statistics
    virtual ::grpc::Status StatsQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateQosVolume(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::QosVolume>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteQosVolume(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQosVolume(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::QosVolume>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQosVolumes(::grpc::ServerContext* context, ::opi_api::storage::v1::ListQosVolumesRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListQosVolumesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQosVolume(::grpc::ServerContext* context, ::opi_api::storage::v1::GetQosVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::QosVolume>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsQosVolume(::grpc::ServerContext* context, ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::StatsQosVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateQosVolume<WithAsyncMethod_DeleteQosVolume<WithAsyncMethod_UpdateQosVolume<WithAsyncMethod_ListQosVolumes<WithAsyncMethod_GetQosVolume<WithAsyncMethod_StatsQosVolume<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) { return this->CreateQosVolume(context, request, response); }));}
    void SetMessageAllocatorFor_CreateQosVolume(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response) { return this->DeleteQosVolume(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteQosVolume(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) { return this->UpdateQosVolume(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateQosVolume(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response) { return this->ListQosVolumes(context, request, response); }));}
    void SetMessageAllocatorFor_ListQosVolumes(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListQosVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) { return this->GetQosVolume(context, request, response); }));}
    void SetMessageAllocatorFor_GetQosVolume(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response) { return this->StatsQosVolume(context, request, response); }));}
    void SetMessageAllocatorFor_StatsQosVolume(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateQosVolume<WithCallbackMethod_DeleteQosVolume<WithCallbackMethod_UpdateQosVolume<WithCallbackMethod_ListQosVolumes<WithCallbackMethod_GetQosVolume<WithCallbackMethod_StatsQosVolume<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateQosVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteQosVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQosVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQosVolumes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQosVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsQosVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateQosVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteQosVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateQosVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListQosVolumes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListQosVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQosVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StatsQosVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsQosVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateQosVolume() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* streamer) {
                       return this->StreamedCreateQosVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateQosVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateQosVolumeRequest,::opi_api::storage::v1::QosVolume>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteQosVolume() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteQosVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteQosVolumeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteQosVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteQosVolumeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateQosVolume() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* streamer) {
                       return this->StreamedUpdateQosVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateQosVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateQosVolumeRequest,::opi_api::storage::v1::QosVolume>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListQosVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListQosVolumes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse>* streamer) {
                       return this->StreamedListQosVolumes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListQosVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListQosVolumes(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListQosVolumesRequest* /*request*/, ::opi_api::storage::v1::ListQosVolumesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListQosVolumes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListQosVolumesRequest,::opi_api::storage::v1::ListQosVolumesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQosVolume() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume>* streamer) {
                       return this->StreamedGetQosVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetQosVolumeRequest* /*request*/, ::opi_api::storage::v1::QosVolume* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQosVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetQosVolumeRequest,::opi_api::storage::v1::QosVolume>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StatsQosVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StatsQosVolume() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse>* streamer) {
                       return this->StreamedStatsQosVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StatsQosVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StatsQosVolume(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsQosVolumeRequest* /*request*/, ::opi_api::storage::v1::StatsQosVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatsQosVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::StatsQosVolumeRequest,::opi_api::storage::v1::StatsQosVolumeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateQosVolume<WithStreamedUnaryMethod_DeleteQosVolume<WithStreamedUnaryMethod_UpdateQosVolume<WithStreamedUnaryMethod_ListQosVolumes<WithStreamedUnaryMethod_GetQosVolume<WithStreamedUnaryMethod_StatsQosVolume<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateQosVolume<WithStreamedUnaryMethod_DeleteQosVolume<WithStreamedUnaryMethod_UpdateQosVolume<WithStreamedUnaryMethod_ListQosVolumes<WithStreamedUnaryMethod_GetQosVolume<WithStreamedUnaryMethod_StatsQosVolume<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_middleend_5fqos_5fvolume_2eproto__INCLUDED
