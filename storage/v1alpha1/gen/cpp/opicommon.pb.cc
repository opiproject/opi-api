// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opicommon.proto

#include "opicommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opi_api {
namespace storage {
namespace v1 {
PROTOBUF_CONSTEXPR PciEndpoint::PciEndpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/nullptr
  , /*decltype(_impl_.physical_function_)*/nullptr
  , /*decltype(_impl_.virtual_function_)*/nullptr
  , /*decltype(_impl_.domain_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PciEndpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PciEndpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PciEndpointDefaultTypeInternal() {}
  union {
    PciEndpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PciEndpointDefaultTypeInternal _PciEndpoint_default_instance_;
PROTOBUF_CONSTEXPR FabricsEndpoint::FabricsEndpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trsvcid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_traddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_trsvcid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adrfam_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FabricsEndpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FabricsEndpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FabricsEndpointDefaultTypeInternal() {}
  union {
    FabricsEndpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FabricsEndpointDefaultTypeInternal _FabricsEndpoint_default_instance_;
PROTOBUF_CONSTEXPR VolumeStats::VolumeStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.read_bytes_count_)*/0
  , /*decltype(_impl_.read_ops_count_)*/0
  , /*decltype(_impl_.write_bytes_count_)*/0
  , /*decltype(_impl_.write_ops_count_)*/0
  , /*decltype(_impl_.unmap_bytes_count_)*/0
  , /*decltype(_impl_.unmap_ops_count_)*/0
  , /*decltype(_impl_.read_latency_ticks_)*/0
  , /*decltype(_impl_.write_latency_ticks_)*/0
  , /*decltype(_impl_.unmap_latency_ticks_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VolumeStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolumeStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolumeStatsDefaultTypeInternal() {}
  union {
    VolumeStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolumeStatsDefaultTypeInternal _VolumeStats_default_instance_;
PROTOBUF_CONSTEXPR QosLimit::QosLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rd_iops_kiops_)*/int64_t{0}
  , /*decltype(_impl_.wr_iops_kiops_)*/int64_t{0}
  , /*decltype(_impl_.rw_iops_kiops_)*/int64_t{0}
  , /*decltype(_impl_.rd_bandwidth_mbs_)*/int64_t{0}
  , /*decltype(_impl_.wr_bandwidth_mbs_)*/int64_t{0}
  , /*decltype(_impl_.rw_bandwidth_mbs_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QosLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QosLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QosLimitDefaultTypeInternal() {}
  union {
    QosLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QosLimitDefaultTypeInternal _QosLimit_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::_pb::Metadata file_level_metadata_opicommon_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_opicommon_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_opicommon_2eproto = nullptr;

const uint32_t TableStruct_opicommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::PciEndpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::PciEndpoint, _impl_.port_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::PciEndpoint, _impl_.physical_function_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::PciEndpoint, _impl_.virtual_function_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::PciEndpoint, _impl_.domain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _impl_.traddr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _impl_.trsvcid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _impl_.adrfam_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _impl_.source_traddr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::FabricsEndpoint, _impl_.source_trsvcid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.read_bytes_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.read_ops_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.write_bytes_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.write_ops_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.unmap_bytes_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.unmap_ops_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.read_latency_ticks_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.write_latency_ticks_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VolumeStats, _impl_.unmap_latency_ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.rd_iops_kiops_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.wr_iops_kiops_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.rw_iops_kiops_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.rd_bandwidth_mbs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.wr_bandwidth_mbs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::QosLimit, _impl_.rw_bandwidth_mbs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::PciEndpoint)},
  { 10, -1, -1, sizeof(::opi_api::storage::v1::FabricsEndpoint)},
  { 21, -1, -1, sizeof(::opi_api::storage::v1::VolumeStats)},
  { 36, -1, -1, sizeof(::opi_api::storage::v1::QosLimit)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opi_api::storage::v1::_PciEndpoint_default_instance_._instance,
  &::opi_api::storage::v1::_FabricsEndpoint_default_instance_._instance,
  &::opi_api::storage::v1::_VolumeStats_default_instance_._instance,
  &::opi_api::storage::v1::_QosLimit_default_instance_._instance,
};

const char descriptor_table_protodef_opicommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017opicommon.proto\022\022opi_api.storage.v1\032\037g"
  "oogle/api/field_behavior.proto\032\036google/p"
  "rotobuf/wrappers.proto\"\356\001\n\013PciEndpoint\0221"
  "\n\007port_id\030\001 \001(\0132\033.google.protobuf.Int32V"
  "alueB\003\340A\002\022;\n\021physical_function\030\002 \001(\0132\033.g"
  "oogle.protobuf.Int32ValueB\003\340A\002\022:\n\020virtua"
  "l_function\030\003 \001(\0132\033.google.protobuf.Int32"
  "ValueB\003\340A\002\0223\n\tdomain_id\030\004 \001(\0132\033.google.p"
  "rotobuf.Int32ValueB\003\340A\001\"\261\001\n\017FabricsEndpo"
  "int\022\023\n\006traddr\030\001 \001(\tB\003\340A\002\022\024\n\007trsvcid\030\002 \001("
  "\tB\003\340A\002\022:\n\006adrfam\030\003 \001(\0162%.opi_api.storage"
  ".v1.NvmeAddressFamilyB\003\340A\002\022\032\n\rsource_tra"
  "ddr\030\004 \001(\tB\003\340A\001\022\033\n\016source_trsvcid\030\005 \001(\tB\003"
  "\340A\001\"\252\002\n\013VolumeStats\022\035\n\020read_bytes_count\030"
  "\001 \001(\005B\003\340A\003\022\033\n\016read_ops_count\030\002 \001(\005B\003\340A\003\022"
  "\036\n\021write_bytes_count\030\003 \001(\005B\003\340A\003\022\034\n\017write"
  "_ops_count\030\004 \001(\005B\003\340A\003\022\036\n\021unmap_bytes_cou"
  "nt\030\005 \001(\005B\003\340A\003\022\034\n\017unmap_ops_count\030\006 \001(\005B\003"
  "\340A\003\022\037\n\022read_latency_ticks\030\007 \001(\005B\003\340A\003\022 \n\023"
  "write_latency_ticks\030\010 \001(\005B\003\340A\003\022 \n\023unmap_"
  "latency_ticks\030\t \001(\005B\003\340A\003\"\273\001\n\010QosLimit\022\032\n"
  "\rrd_iops_kiops\030\001 \001(\003B\003\340A\001\022\032\n\rwr_iops_kio"
  "ps\030\002 \001(\003B\003\340A\001\022\032\n\rrw_iops_kiops\030\003 \001(\003B\003\340A"
  "\001\022\035\n\020rd_bandwidth_mbs\030\004 \001(\003B\003\340A\001\022\035\n\020wr_b"
  "andwidth_mbs\030\005 \001(\003B\003\340A\001\022\035\n\020rw_bandwidth_"
  "mbs\030\006 \001(\003B\003\340A\001*\367\001\n\016EncryptionType\022\037\n\033ENC"
  "RYPTION_TYPE_UNSPECIFIED\020\000\022\037\n\033ENCRYPTION"
  "_TYPE_AES_CBC_128\020\001\022\037\n\033ENCRYPTION_TYPE_A"
  "ES_CBC_192\020\002\022\037\n\033ENCRYPTION_TYPE_AES_CBC_"
  "256\020\003\022\037\n\033ENCRYPTION_TYPE_AES_XTS_128\020\004\022\037"
  "\n\033ENCRYPTION_TYPE_AES_XTS_192\020\005\022\037\n\033ENCRY"
  "PTION_TYPE_AES_XTS_256\020\006*\264\001\n\021NvmeTranspo"
  "rtType\022#\n\037NVME_TRANSPORT_TYPE_UNSPECIFIE"
  "D\020\000\022\025\n\021NVME_TRANSPORT_FC\020\001\022\027\n\023NVME_TRANS"
  "PORT_PCIE\020\002\022\027\n\023NVME_TRANSPORT_RDMA\020\003\022\026\n\022"
  "NVME_TRANSPORT_TCP\020\004\022\031\n\025NVME_TRANSPORT_C"
  "USTOM\020\005*\250\001\n\021NvmeAddressFamily\022#\n\037NVME_AD"
  "DRESS_FAMILY_UNSPECIFIED\020\000\022\024\n\020NVME_ADRFA"
  "M_IPV4\020\001\022\024\n\020NVME_ADRFAM_IPV6\020\002\022\022\n\016NVME_A"
  "DRFAM_IB\020\003\022\022\n\016NVME_ADRFAM_FC\020\004\022\032\n\026NVME_A"
  "DRFAM_INTRA_HOST\020\005B]\n\022opi_api.storage.v1"
  "B\016OpiCommonProtoP\001Z5github.com/opiprojec"
  "t/opi-api/storage/v1alpha1/gen/gob\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_opicommon_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_opicommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_opicommon_2eproto = {
    false, false, 1721, descriptor_table_protodef_opicommon_2eproto,
    "opicommon.proto",
    &descriptor_table_opicommon_2eproto_once, descriptor_table_opicommon_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_opicommon_2eproto::offsets,
    file_level_metadata_opicommon_2eproto, file_level_enum_descriptors_opicommon_2eproto,
    file_level_service_descriptors_opicommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_opicommon_2eproto_getter() {
  return &descriptor_table_opicommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_opicommon_2eproto(&descriptor_table_opicommon_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opicommon_2eproto);
  return file_level_enum_descriptors_opicommon_2eproto[0];
}
bool EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeTransportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opicommon_2eproto);
  return file_level_enum_descriptors_opicommon_2eproto[1];
}
bool NvmeTransportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeAddressFamily_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opicommon_2eproto);
  return file_level_enum_descriptors_opicommon_2eproto[2];
}
bool NvmeAddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PciEndpoint::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& port_id(const PciEndpoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& physical_function(const PciEndpoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& virtual_function(const PciEndpoint* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& domain_id(const PciEndpoint* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
PciEndpoint::_Internal::port_id(const PciEndpoint* msg) {
  return *msg->_impl_.port_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
PciEndpoint::_Internal::physical_function(const PciEndpoint* msg) {
  return *msg->_impl_.physical_function_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
PciEndpoint::_Internal::virtual_function(const PciEndpoint* msg) {
  return *msg->_impl_.virtual_function_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
PciEndpoint::_Internal::domain_id(const PciEndpoint* msg) {
  return *msg->_impl_.domain_id_;
}
void PciEndpoint::clear_port_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.port_id_ != nullptr) {
    delete _impl_.port_id_;
  }
  _impl_.port_id_ = nullptr;
}
void PciEndpoint::clear_physical_function() {
  if (GetArenaForAllocation() == nullptr && _impl_.physical_function_ != nullptr) {
    delete _impl_.physical_function_;
  }
  _impl_.physical_function_ = nullptr;
}
void PciEndpoint::clear_virtual_function() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtual_function_ != nullptr) {
    delete _impl_.virtual_function_;
  }
  _impl_.virtual_function_ = nullptr;
}
void PciEndpoint::clear_domain_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.domain_id_ != nullptr) {
    delete _impl_.domain_id_;
  }
  _impl_.domain_id_ = nullptr;
}
PciEndpoint::PciEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.PciEndpoint)
}
PciEndpoint::PciEndpoint(const PciEndpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PciEndpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_){nullptr}
    , decltype(_impl_.physical_function_){nullptr}
    , decltype(_impl_.virtual_function_){nullptr}
    , decltype(_impl_.domain_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_port_id()) {
    _this->_impl_.port_id_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.port_id_);
  }
  if (from._internal_has_physical_function()) {
    _this->_impl_.physical_function_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.physical_function_);
  }
  if (from._internal_has_virtual_function()) {
    _this->_impl_.virtual_function_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.virtual_function_);
  }
  if (from._internal_has_domain_id()) {
    _this->_impl_.domain_id_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.domain_id_);
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.PciEndpoint)
}

inline void PciEndpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_){nullptr}
    , decltype(_impl_.physical_function_){nullptr}
    , decltype(_impl_.virtual_function_){nullptr}
    , decltype(_impl_.domain_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PciEndpoint::~PciEndpoint() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.PciEndpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PciEndpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.port_id_;
  if (this != internal_default_instance()) delete _impl_.physical_function_;
  if (this != internal_default_instance()) delete _impl_.virtual_function_;
  if (this != internal_default_instance()) delete _impl_.domain_id_;
}

void PciEndpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PciEndpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.PciEndpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.port_id_ != nullptr) {
    delete _impl_.port_id_;
  }
  _impl_.port_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.physical_function_ != nullptr) {
    delete _impl_.physical_function_;
  }
  _impl_.physical_function_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.virtual_function_ != nullptr) {
    delete _impl_.virtual_function_;
  }
  _impl_.virtual_function_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.domain_id_ != nullptr) {
    delete _impl_.domain_id_;
  }
  _impl_.domain_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PciEndpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PciEndpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.PciEndpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_port_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::port_id(this),
        _Internal::port_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_physical_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::physical_function(this),
        _Internal::physical_function(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_virtual_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::virtual_function(this),
        _Internal::virtual_function(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_domain_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::domain_id(this),
        _Internal::domain_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.PciEndpoint)
  return target;
}

size_t PciEndpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.PciEndpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_port_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.port_id_);
  }

  // .google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_physical_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.physical_function_);
  }

  // .google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_virtual_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.virtual_function_);
  }

  // .google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_domain_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.domain_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PciEndpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PciEndpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PciEndpoint::GetClassData() const { return &_class_data_; }


void PciEndpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PciEndpoint*>(&to_msg);
  auto& from = static_cast<const PciEndpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.PciEndpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_port_id()) {
    _this->_internal_mutable_port_id()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_port_id());
  }
  if (from._internal_has_physical_function()) {
    _this->_internal_mutable_physical_function()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_physical_function());
  }
  if (from._internal_has_virtual_function()) {
    _this->_internal_mutable_virtual_function()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_virtual_function());
  }
  if (from._internal_has_domain_id()) {
    _this->_internal_mutable_domain_id()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_domain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PciEndpoint::CopyFrom(const PciEndpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.PciEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PciEndpoint::IsInitialized() const {
  return true;
}

void PciEndpoint::InternalSwap(PciEndpoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PciEndpoint, _impl_.domain_id_)
      + sizeof(PciEndpoint::_impl_.domain_id_)
      - PROTOBUF_FIELD_OFFSET(PciEndpoint, _impl_.port_id_)>(
          reinterpret_cast<char*>(&_impl_.port_id_),
          reinterpret_cast<char*>(&other->_impl_.port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PciEndpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opicommon_2eproto_getter, &descriptor_table_opicommon_2eproto_once,
      file_level_metadata_opicommon_2eproto[0]);
}

// ===================================================================

class FabricsEndpoint::_Internal {
 public:
};

FabricsEndpoint::FabricsEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.FabricsEndpoint)
}
FabricsEndpoint::FabricsEndpoint(const FabricsEndpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FabricsEndpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traddr_){}
    , decltype(_impl_.trsvcid_){}
    , decltype(_impl_.source_traddr_){}
    , decltype(_impl_.source_trsvcid_){}
    , decltype(_impl_.adrfam_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.traddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traddr().empty()) {
    _this->_impl_.traddr_.Set(from._internal_traddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trsvcid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trsvcid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trsvcid().empty()) {
    _this->_impl_.trsvcid_.Set(from._internal_trsvcid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_traddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_traddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_traddr().empty()) {
    _this->_impl_.source_traddr_.Set(from._internal_source_traddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_trsvcid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_trsvcid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_trsvcid().empty()) {
    _this->_impl_.source_trsvcid_.Set(from._internal_source_trsvcid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.adrfam_ = from._impl_.adrfam_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.FabricsEndpoint)
}

inline void FabricsEndpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traddr_){}
    , decltype(_impl_.trsvcid_){}
    , decltype(_impl_.source_traddr_){}
    , decltype(_impl_.source_trsvcid_){}
    , decltype(_impl_.adrfam_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.traddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trsvcid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trsvcid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_traddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_traddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_trsvcid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_trsvcid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FabricsEndpoint::~FabricsEndpoint() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.FabricsEndpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FabricsEndpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traddr_.Destroy();
  _impl_.trsvcid_.Destroy();
  _impl_.source_traddr_.Destroy();
  _impl_.source_trsvcid_.Destroy();
}

void FabricsEndpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FabricsEndpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.FabricsEndpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traddr_.ClearToEmpty();
  _impl_.trsvcid_.ClearToEmpty();
  _impl_.source_traddr_.ClearToEmpty();
  _impl_.source_trsvcid_.ClearToEmpty();
  _impl_.adrfam_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FabricsEndpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string traddr = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_traddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.FabricsEndpoint.traddr"));
        } else
          goto handle_unusual;
        continue;
      // string trsvcid = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trsvcid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.FabricsEndpoint.trsvcid"));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adrfam(static_cast<::opi_api::storage::v1::NvmeAddressFamily>(val));
        } else
          goto handle_unusual;
        continue;
      // string source_traddr = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_traddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.FabricsEndpoint.source_traddr"));
        } else
          goto handle_unusual;
        continue;
      // string source_trsvcid = 5 [(.google.api.field_behavior) = OPTIONAL];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source_trsvcid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opi_api.storage.v1.FabricsEndpoint.source_trsvcid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FabricsEndpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.FabricsEndpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string traddr = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_traddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traddr().data(), static_cast<int>(this->_internal_traddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.FabricsEndpoint.traddr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_traddr(), target);
  }

  // string trsvcid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_trsvcid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trsvcid().data(), static_cast<int>(this->_internal_trsvcid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.FabricsEndpoint.trsvcid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trsvcid(), target);
  }

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_adrfam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_adrfam(), target);
  }

  // string source_traddr = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_source_traddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_traddr().data(), static_cast<int>(this->_internal_source_traddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.FabricsEndpoint.source_traddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source_traddr(), target);
  }

  // string source_trsvcid = 5 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_source_trsvcid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_trsvcid().data(), static_cast<int>(this->_internal_source_trsvcid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.FabricsEndpoint.source_trsvcid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source_trsvcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.FabricsEndpoint)
  return target;
}

size_t FabricsEndpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.FabricsEndpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string traddr = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_traddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traddr());
  }

  // string trsvcid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_trsvcid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trsvcid());
  }

  // string source_traddr = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_source_traddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_traddr());
  }

  // string source_trsvcid = 5 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->_internal_source_trsvcid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_trsvcid());
  }

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_adrfam() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_adrfam());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FabricsEndpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FabricsEndpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FabricsEndpoint::GetClassData() const { return &_class_data_; }


void FabricsEndpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FabricsEndpoint*>(&to_msg);
  auto& from = static_cast<const FabricsEndpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.FabricsEndpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_traddr().empty()) {
    _this->_internal_set_traddr(from._internal_traddr());
  }
  if (!from._internal_trsvcid().empty()) {
    _this->_internal_set_trsvcid(from._internal_trsvcid());
  }
  if (!from._internal_source_traddr().empty()) {
    _this->_internal_set_source_traddr(from._internal_source_traddr());
  }
  if (!from._internal_source_trsvcid().empty()) {
    _this->_internal_set_source_trsvcid(from._internal_source_trsvcid());
  }
  if (from._internal_adrfam() != 0) {
    _this->_internal_set_adrfam(from._internal_adrfam());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FabricsEndpoint::CopyFrom(const FabricsEndpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.FabricsEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FabricsEndpoint::IsInitialized() const {
  return true;
}

void FabricsEndpoint::InternalSwap(FabricsEndpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.traddr_, lhs_arena,
      &other->_impl_.traddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trsvcid_, lhs_arena,
      &other->_impl_.trsvcid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_traddr_, lhs_arena,
      &other->_impl_.source_traddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_trsvcid_, lhs_arena,
      &other->_impl_.source_trsvcid_, rhs_arena
  );
  swap(_impl_.adrfam_, other->_impl_.adrfam_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FabricsEndpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opicommon_2eproto_getter, &descriptor_table_opicommon_2eproto_once,
      file_level_metadata_opicommon_2eproto[1]);
}

// ===================================================================

class VolumeStats::_Internal {
 public:
};

VolumeStats::VolumeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VolumeStats)
}
VolumeStats::VolumeStats(const VolumeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VolumeStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.read_bytes_count_){}
    , decltype(_impl_.read_ops_count_){}
    , decltype(_impl_.write_bytes_count_){}
    , decltype(_impl_.write_ops_count_){}
    , decltype(_impl_.unmap_bytes_count_){}
    , decltype(_impl_.unmap_ops_count_){}
    , decltype(_impl_.read_latency_ticks_){}
    , decltype(_impl_.write_latency_ticks_){}
    , decltype(_impl_.unmap_latency_ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.read_bytes_count_, &from._impl_.read_bytes_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unmap_latency_ticks_) -
    reinterpret_cast<char*>(&_impl_.read_bytes_count_)) + sizeof(_impl_.unmap_latency_ticks_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VolumeStats)
}

inline void VolumeStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.read_bytes_count_){0}
    , decltype(_impl_.read_ops_count_){0}
    , decltype(_impl_.write_bytes_count_){0}
    , decltype(_impl_.write_ops_count_){0}
    , decltype(_impl_.unmap_bytes_count_){0}
    , decltype(_impl_.unmap_ops_count_){0}
    , decltype(_impl_.read_latency_ticks_){0}
    , decltype(_impl_.write_latency_ticks_){0}
    , decltype(_impl_.unmap_latency_ticks_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VolumeStats::~VolumeStats() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VolumeStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VolumeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VolumeStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VolumeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VolumeStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.read_bytes_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unmap_latency_ticks_) -
      reinterpret_cast<char*>(&_impl_.read_bytes_count_)) + sizeof(_impl_.unmap_latency_ticks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 read_bytes_count = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.read_bytes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 read_ops_count = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.read_ops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 write_bytes_count = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.write_bytes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 write_ops_count = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.write_ops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unmap_bytes_count = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.unmap_bytes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unmap_ops_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.unmap_ops_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 read_latency_ticks = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.read_latency_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 write_latency_ticks = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.write_latency_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unmap_latency_ticks = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.unmap_latency_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolumeStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VolumeStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 read_bytes_count = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_bytes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_read_bytes_count(), target);
  }

  // int32 read_ops_count = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_ops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_read_ops_count(), target);
  }

  // int32 write_bytes_count = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_bytes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_write_bytes_count(), target);
  }

  // int32 write_ops_count = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_ops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_write_ops_count(), target);
  }

  // int32 unmap_bytes_count = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_bytes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_unmap_bytes_count(), target);
  }

  // int32 unmap_ops_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_ops_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_unmap_ops_count(), target);
  }

  // int32 read_latency_ticks = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_latency_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_read_latency_ticks(), target);
  }

  // int32 write_latency_ticks = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_latency_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_write_latency_ticks(), target);
  }

  // int32 unmap_latency_ticks = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_latency_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_unmap_latency_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VolumeStats)
  return target;
}

size_t VolumeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VolumeStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 read_bytes_count = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_bytes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_read_bytes_count());
  }

  // int32 read_ops_count = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_ops_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_read_ops_count());
  }

  // int32 write_bytes_count = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_bytes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_write_bytes_count());
  }

  // int32 write_ops_count = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_ops_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_write_ops_count());
  }

  // int32 unmap_bytes_count = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_bytes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unmap_bytes_count());
  }

  // int32 unmap_ops_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_ops_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unmap_ops_count());
  }

  // int32 read_latency_ticks = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_read_latency_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_read_latency_ticks());
  }

  // int32 write_latency_ticks = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_write_latency_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_write_latency_ticks());
  }

  // int32 unmap_latency_ticks = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_unmap_latency_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unmap_latency_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolumeStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VolumeStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolumeStats::GetClassData() const { return &_class_data_; }


void VolumeStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VolumeStats*>(&to_msg);
  auto& from = static_cast<const VolumeStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VolumeStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_read_bytes_count() != 0) {
    _this->_internal_set_read_bytes_count(from._internal_read_bytes_count());
  }
  if (from._internal_read_ops_count() != 0) {
    _this->_internal_set_read_ops_count(from._internal_read_ops_count());
  }
  if (from._internal_write_bytes_count() != 0) {
    _this->_internal_set_write_bytes_count(from._internal_write_bytes_count());
  }
  if (from._internal_write_ops_count() != 0) {
    _this->_internal_set_write_ops_count(from._internal_write_ops_count());
  }
  if (from._internal_unmap_bytes_count() != 0) {
    _this->_internal_set_unmap_bytes_count(from._internal_unmap_bytes_count());
  }
  if (from._internal_unmap_ops_count() != 0) {
    _this->_internal_set_unmap_ops_count(from._internal_unmap_ops_count());
  }
  if (from._internal_read_latency_ticks() != 0) {
    _this->_internal_set_read_latency_ticks(from._internal_read_latency_ticks());
  }
  if (from._internal_write_latency_ticks() != 0) {
    _this->_internal_set_write_latency_ticks(from._internal_write_latency_ticks());
  }
  if (from._internal_unmap_latency_ticks() != 0) {
    _this->_internal_set_unmap_latency_ticks(from._internal_unmap_latency_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolumeStats::CopyFrom(const VolumeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VolumeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeStats::IsInitialized() const {
  return true;
}

void VolumeStats::InternalSwap(VolumeStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolumeStats, _impl_.unmap_latency_ticks_)
      + sizeof(VolumeStats::_impl_.unmap_latency_ticks_)
      - PROTOBUF_FIELD_OFFSET(VolumeStats, _impl_.read_bytes_count_)>(
          reinterpret_cast<char*>(&_impl_.read_bytes_count_),
          reinterpret_cast<char*>(&other->_impl_.read_bytes_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opicommon_2eproto_getter, &descriptor_table_opicommon_2eproto_once,
      file_level_metadata_opicommon_2eproto[2]);
}

// ===================================================================

class QosLimit::_Internal {
 public:
};

QosLimit::QosLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.QosLimit)
}
QosLimit::QosLimit(const QosLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QosLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rd_iops_kiops_){}
    , decltype(_impl_.wr_iops_kiops_){}
    , decltype(_impl_.rw_iops_kiops_){}
    , decltype(_impl_.rd_bandwidth_mbs_){}
    , decltype(_impl_.wr_bandwidth_mbs_){}
    , decltype(_impl_.rw_bandwidth_mbs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rd_iops_kiops_, &from._impl_.rd_iops_kiops_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rw_bandwidth_mbs_) -
    reinterpret_cast<char*>(&_impl_.rd_iops_kiops_)) + sizeof(_impl_.rw_bandwidth_mbs_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.QosLimit)
}

inline void QosLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rd_iops_kiops_){int64_t{0}}
    , decltype(_impl_.wr_iops_kiops_){int64_t{0}}
    , decltype(_impl_.rw_iops_kiops_){int64_t{0}}
    , decltype(_impl_.rd_bandwidth_mbs_){int64_t{0}}
    , decltype(_impl_.wr_bandwidth_mbs_){int64_t{0}}
    , decltype(_impl_.rw_bandwidth_mbs_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QosLimit::~QosLimit() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.QosLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QosLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QosLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QosLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.QosLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rd_iops_kiops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rw_bandwidth_mbs_) -
      reinterpret_cast<char*>(&_impl_.rd_iops_kiops_)) + sizeof(_impl_.rw_bandwidth_mbs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QosLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 rd_iops_kiops = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rd_iops_kiops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 wr_iops_kiops = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wr_iops_kiops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rw_iops_kiops = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rw_iops_kiops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rd_bandwidth_mbs = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rd_bandwidth_mbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 wr_bandwidth_mbs = 5 [(.google.api.field_behavior) = OPTIONAL];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.wr_bandwidth_mbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rw_bandwidth_mbs = 6 [(.google.api.field_behavior) = OPTIONAL];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rw_bandwidth_mbs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QosLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.QosLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rd_iops_kiops = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rd_iops_kiops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_rd_iops_kiops(), target);
  }

  // int64 wr_iops_kiops = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_wr_iops_kiops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_wr_iops_kiops(), target);
  }

  // int64 rw_iops_kiops = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rw_iops_kiops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_rw_iops_kiops(), target);
  }

  // int64 rd_bandwidth_mbs = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rd_bandwidth_mbs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_rd_bandwidth_mbs(), target);
  }

  // int64 wr_bandwidth_mbs = 5 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_wr_bandwidth_mbs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_wr_bandwidth_mbs(), target);
  }

  // int64 rw_bandwidth_mbs = 6 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rw_bandwidth_mbs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_rw_bandwidth_mbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.QosLimit)
  return target;
}

size_t QosLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.QosLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rd_iops_kiops = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rd_iops_kiops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rd_iops_kiops());
  }

  // int64 wr_iops_kiops = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_wr_iops_kiops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wr_iops_kiops());
  }

  // int64 rw_iops_kiops = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rw_iops_kiops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rw_iops_kiops());
  }

  // int64 rd_bandwidth_mbs = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rd_bandwidth_mbs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rd_bandwidth_mbs());
  }

  // int64 wr_bandwidth_mbs = 5 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_wr_bandwidth_mbs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wr_bandwidth_mbs());
  }

  // int64 rw_bandwidth_mbs = 6 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_rw_bandwidth_mbs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rw_bandwidth_mbs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QosLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QosLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QosLimit::GetClassData() const { return &_class_data_; }


void QosLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QosLimit*>(&to_msg);
  auto& from = static_cast<const QosLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.QosLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rd_iops_kiops() != 0) {
    _this->_internal_set_rd_iops_kiops(from._internal_rd_iops_kiops());
  }
  if (from._internal_wr_iops_kiops() != 0) {
    _this->_internal_set_wr_iops_kiops(from._internal_wr_iops_kiops());
  }
  if (from._internal_rw_iops_kiops() != 0) {
    _this->_internal_set_rw_iops_kiops(from._internal_rw_iops_kiops());
  }
  if (from._internal_rd_bandwidth_mbs() != 0) {
    _this->_internal_set_rd_bandwidth_mbs(from._internal_rd_bandwidth_mbs());
  }
  if (from._internal_wr_bandwidth_mbs() != 0) {
    _this->_internal_set_wr_bandwidth_mbs(from._internal_wr_bandwidth_mbs());
  }
  if (from._internal_rw_bandwidth_mbs() != 0) {
    _this->_internal_set_rw_bandwidth_mbs(from._internal_rw_bandwidth_mbs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QosLimit::CopyFrom(const QosLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.QosLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QosLimit::IsInitialized() const {
  return true;
}

void QosLimit::InternalSwap(QosLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QosLimit, _impl_.rw_bandwidth_mbs_)
      + sizeof(QosLimit::_impl_.rw_bandwidth_mbs_)
      - PROTOBUF_FIELD_OFFSET(QosLimit, _impl_.rd_iops_kiops_)>(
          reinterpret_cast<char*>(&_impl_.rd_iops_kiops_),
          reinterpret_cast<char*>(&other->_impl_.rd_iops_kiops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QosLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opicommon_2eproto_getter, &descriptor_table_opicommon_2eproto_once,
      file_level_metadata_opicommon_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::PciEndpoint*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::PciEndpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::PciEndpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::FabricsEndpoint*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::FabricsEndpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::FabricsEndpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VolumeStats*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::VolumeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VolumeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::QosLimit*
Arena::CreateMaybeMessage< ::opi_api::storage::v1::QosLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::QosLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
