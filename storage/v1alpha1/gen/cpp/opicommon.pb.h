// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opicommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opicommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opicommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opicommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opicommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opicommon_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class FabricsEndpoint;
struct FabricsEndpointDefaultTypeInternal;
extern FabricsEndpointDefaultTypeInternal _FabricsEndpoint_default_instance_;
class PciEndpoint;
struct PciEndpointDefaultTypeInternal;
extern PciEndpointDefaultTypeInternal _PciEndpoint_default_instance_;
class QosLimit;
struct QosLimitDefaultTypeInternal;
extern QosLimitDefaultTypeInternal _QosLimit_default_instance_;
class VolumeStats;
struct VolumeStatsDefaultTypeInternal;
extern VolumeStatsDefaultTypeInternal _VolumeStats_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::FabricsEndpoint* Arena::CreateMaybeMessage<::opi_api::storage::v1::FabricsEndpoint>(Arena*);
template<> ::opi_api::storage::v1::PciEndpoint* Arena::CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(Arena*);
template<> ::opi_api::storage::v1::QosLimit* Arena::CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(Arena*);
template<> ::opi_api::storage::v1::VolumeStats* Arena::CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

enum EncryptionType : int {
  ENCRYPTION_TYPE_UNSPECIFIED = 0,
  ENCRYPTION_TYPE_AES_CBC_128 = 1,
  ENCRYPTION_TYPE_AES_CBC_192 = 2,
  ENCRYPTION_TYPE_AES_CBC_256 = 3,
  ENCRYPTION_TYPE_AES_XTS_128 = 4,
  ENCRYPTION_TYPE_AES_XTS_192 = 5,
  ENCRYPTION_TYPE_AES_XTS_256 = 6,
  EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EncryptionType_IsValid(int value);
constexpr EncryptionType EncryptionType_MIN = ENCRYPTION_TYPE_UNSPECIFIED;
constexpr EncryptionType EncryptionType_MAX = ENCRYPTION_TYPE_AES_XTS_256;
constexpr int EncryptionType_ARRAYSIZE = EncryptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionType_descriptor();
template<typename T>
inline const std::string& EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncryptionType_descriptor(), enum_t_value);
}
inline bool EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncryptionType>(
    EncryptionType_descriptor(), name, value);
}
enum NvmeTransportType : int {
  NVME_TRANSPORT_TYPE_UNSPECIFIED = 0,
  NVME_TRANSPORT_FC = 1,
  NVME_TRANSPORT_PCIE = 2,
  NVME_TRANSPORT_RDMA = 3,
  NVME_TRANSPORT_TCP = 4,
  NVME_TRANSPORT_CUSTOM = 5,
  NvmeTransportType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeTransportType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeTransportType_IsValid(int value);
constexpr NvmeTransportType NvmeTransportType_MIN = NVME_TRANSPORT_TYPE_UNSPECIFIED;
constexpr NvmeTransportType NvmeTransportType_MAX = NVME_TRANSPORT_CUSTOM;
constexpr int NvmeTransportType_ARRAYSIZE = NvmeTransportType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeTransportType_descriptor();
template<typename T>
inline const std::string& NvmeTransportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeTransportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeTransportType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeTransportType_descriptor(), enum_t_value);
}
inline bool NvmeTransportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeTransportType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeTransportType>(
    NvmeTransportType_descriptor(), name, value);
}
enum NvmeAddressFamily : int {
  NVME_ADDRESS_FAMILY_UNSPECIFIED = 0,
  NVME_ADRFAM_IPV4 = 1,
  NVME_ADRFAM_IPV6 = 2,
  NVME_ADRFAM_IB = 3,
  NVME_ADRFAM_FC = 4,
  NVME_ADRFAM_INTRA_HOST = 5,
  NvmeAddressFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeAddressFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeAddressFamily_IsValid(int value);
constexpr NvmeAddressFamily NvmeAddressFamily_MIN = NVME_ADDRESS_FAMILY_UNSPECIFIED;
constexpr NvmeAddressFamily NvmeAddressFamily_MAX = NVME_ADRFAM_INTRA_HOST;
constexpr int NvmeAddressFamily_ARRAYSIZE = NvmeAddressFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeAddressFamily_descriptor();
template<typename T>
inline const std::string& NvmeAddressFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeAddressFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeAddressFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeAddressFamily_descriptor(), enum_t_value);
}
inline bool NvmeAddressFamily_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeAddressFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeAddressFamily>(
    NvmeAddressFamily_descriptor(), name, value);
}
// ===================================================================

class PciEndpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.PciEndpoint) */ {
 public:
  inline PciEndpoint() : PciEndpoint(nullptr) {}
  ~PciEndpoint() override;
  explicit PROTOBUF_CONSTEXPR PciEndpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PciEndpoint(const PciEndpoint& from);
  PciEndpoint(PciEndpoint&& from) noexcept
    : PciEndpoint() {
    *this = ::std::move(from);
  }

  inline PciEndpoint& operator=(const PciEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PciEndpoint& operator=(PciEndpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PciEndpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PciEndpoint* internal_default_instance() {
    return reinterpret_cast<const PciEndpoint*>(
               &_PciEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PciEndpoint& a, PciEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PciEndpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PciEndpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PciEndpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PciEndpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PciEndpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PciEndpoint& from) {
    PciEndpoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PciEndpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.PciEndpoint";
  }
  protected:
  explicit PciEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kPhysicalFunctionFieldNumber = 2,
    kVirtualFunctionFieldNumber = 3,
    kDomainIdFieldNumber = 4,
  };
  // .google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_port_id() const;
  private:
  bool _internal_has_port_id() const;
  public:
  void clear_port_id();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& port_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_port_id();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_port_id();
  void set_allocated_port_id(::PROTOBUF_NAMESPACE_ID::Int32Value* port_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_port_id() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_port_id();
  public:
  void unsafe_arena_set_allocated_port_id(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* port_id);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_port_id();

  // .google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_physical_function() const;
  private:
  bool _internal_has_physical_function() const;
  public:
  void clear_physical_function();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& physical_function() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_physical_function();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_physical_function();
  void set_allocated_physical_function(::PROTOBUF_NAMESPACE_ID::Int32Value* physical_function);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_physical_function() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_physical_function();
  public:
  void unsafe_arena_set_allocated_physical_function(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* physical_function);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_physical_function();

  // .google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtual_function() const;
  private:
  bool _internal_has_virtual_function() const;
  public:
  void clear_virtual_function();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& virtual_function() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_virtual_function();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_virtual_function();
  void set_allocated_virtual_function(::PROTOBUF_NAMESPACE_ID::Int32Value* virtual_function);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_virtual_function() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_virtual_function();
  public:
  void unsafe_arena_set_allocated_virtual_function(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* virtual_function);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_virtual_function();

  // .google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_domain_id() const;
  private:
  bool _internal_has_domain_id() const;
  public:
  void clear_domain_id();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& domain_id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_domain_id();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_domain_id();
  void set_allocated_domain_id(::PROTOBUF_NAMESPACE_ID::Int32Value* domain_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_domain_id() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_domain_id();
  public:
  void unsafe_arena_set_allocated_domain_id(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* domain_id);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_domain_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.PciEndpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int32Value* port_id_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* physical_function_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* virtual_function_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* domain_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opicommon_2eproto;
};
// -------------------------------------------------------------------

class FabricsEndpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.FabricsEndpoint) */ {
 public:
  inline FabricsEndpoint() : FabricsEndpoint(nullptr) {}
  ~FabricsEndpoint() override;
  explicit PROTOBUF_CONSTEXPR FabricsEndpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FabricsEndpoint(const FabricsEndpoint& from);
  FabricsEndpoint(FabricsEndpoint&& from) noexcept
    : FabricsEndpoint() {
    *this = ::std::move(from);
  }

  inline FabricsEndpoint& operator=(const FabricsEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline FabricsEndpoint& operator=(FabricsEndpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FabricsEndpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const FabricsEndpoint* internal_default_instance() {
    return reinterpret_cast<const FabricsEndpoint*>(
               &_FabricsEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FabricsEndpoint& a, FabricsEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(FabricsEndpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FabricsEndpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FabricsEndpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FabricsEndpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FabricsEndpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FabricsEndpoint& from) {
    FabricsEndpoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FabricsEndpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.FabricsEndpoint";
  }
  protected:
  explicit FabricsEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraddrFieldNumber = 1,
    kTrsvcidFieldNumber = 2,
    kSourceTraddrFieldNumber = 4,
    kSourceTrsvcidFieldNumber = 5,
    kAdrfamFieldNumber = 3,
  };
  // string traddr = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_traddr();
  const std::string& traddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traddr();
  PROTOBUF_NODISCARD std::string* release_traddr();
  void set_allocated_traddr(std::string* traddr);
  private:
  const std::string& _internal_traddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traddr(const std::string& value);
  std::string* _internal_mutable_traddr();
  public:

  // string trsvcid = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_trsvcid();
  const std::string& trsvcid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trsvcid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trsvcid();
  PROTOBUF_NODISCARD std::string* release_trsvcid();
  void set_allocated_trsvcid(std::string* trsvcid);
  private:
  const std::string& _internal_trsvcid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trsvcid(const std::string& value);
  std::string* _internal_mutable_trsvcid();
  public:

  // string source_traddr = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_source_traddr();
  const std::string& source_traddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_traddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_traddr();
  PROTOBUF_NODISCARD std::string* release_source_traddr();
  void set_allocated_source_traddr(std::string* source_traddr);
  private:
  const std::string& _internal_source_traddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_traddr(const std::string& value);
  std::string* _internal_mutable_source_traddr();
  public:

  // string source_trsvcid = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_source_trsvcid();
  const std::string& source_trsvcid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_trsvcid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_trsvcid();
  PROTOBUF_NODISCARD std::string* release_source_trsvcid();
  void set_allocated_source_trsvcid(std::string* source_trsvcid);
  private:
  const std::string& _internal_source_trsvcid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_trsvcid(const std::string& value);
  std::string* _internal_mutable_source_trsvcid();
  public:

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_adrfam();
  ::opi_api::storage::v1::NvmeAddressFamily adrfam() const;
  void set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  private:
  ::opi_api::storage::v1::NvmeAddressFamily _internal_adrfam() const;
  void _internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.FabricsEndpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trsvcid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_traddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_trsvcid_;
    int adrfam_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opicommon_2eproto;
};
// -------------------------------------------------------------------

class VolumeStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VolumeStats) */ {
 public:
  inline VolumeStats() : VolumeStats(nullptr) {}
  ~VolumeStats() override;
  explicit PROTOBUF_CONSTEXPR VolumeStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeStats(const VolumeStats& from);
  VolumeStats(VolumeStats&& from) noexcept
    : VolumeStats() {
    *this = ::std::move(from);
  }

  inline VolumeStats& operator=(const VolumeStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeStats& operator=(VolumeStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolumeStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeStats* internal_default_instance() {
    return reinterpret_cast<const VolumeStats*>(
               &_VolumeStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VolumeStats& a, VolumeStats& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolumeStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolumeStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolumeStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VolumeStats& from) {
    VolumeStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VolumeStats";
  }
  protected:
  explicit VolumeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadBytesCountFieldNumber = 1,
    kReadOpsCountFieldNumber = 2,
    kWriteBytesCountFieldNumber = 3,
    kWriteOpsCountFieldNumber = 4,
    kUnmapBytesCountFieldNumber = 5,
    kUnmapOpsCountFieldNumber = 6,
    kReadLatencyTicksFieldNumber = 7,
    kWriteLatencyTicksFieldNumber = 8,
    kUnmapLatencyTicksFieldNumber = 9,
  };
  // int32 read_bytes_count = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_read_bytes_count();
  int32_t read_bytes_count() const;
  void set_read_bytes_count(int32_t value);
  private:
  int32_t _internal_read_bytes_count() const;
  void _internal_set_read_bytes_count(int32_t value);
  public:

  // int32 read_ops_count = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_read_ops_count();
  int32_t read_ops_count() const;
  void set_read_ops_count(int32_t value);
  private:
  int32_t _internal_read_ops_count() const;
  void _internal_set_read_ops_count(int32_t value);
  public:

  // int32 write_bytes_count = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_write_bytes_count();
  int32_t write_bytes_count() const;
  void set_write_bytes_count(int32_t value);
  private:
  int32_t _internal_write_bytes_count() const;
  void _internal_set_write_bytes_count(int32_t value);
  public:

  // int32 write_ops_count = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_write_ops_count();
  int32_t write_ops_count() const;
  void set_write_ops_count(int32_t value);
  private:
  int32_t _internal_write_ops_count() const;
  void _internal_set_write_ops_count(int32_t value);
  public:

  // int32 unmap_bytes_count = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_unmap_bytes_count();
  int32_t unmap_bytes_count() const;
  void set_unmap_bytes_count(int32_t value);
  private:
  int32_t _internal_unmap_bytes_count() const;
  void _internal_set_unmap_bytes_count(int32_t value);
  public:

  // int32 unmap_ops_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_unmap_ops_count();
  int32_t unmap_ops_count() const;
  void set_unmap_ops_count(int32_t value);
  private:
  int32_t _internal_unmap_ops_count() const;
  void _internal_set_unmap_ops_count(int32_t value);
  public:

  // int32 read_latency_ticks = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_read_latency_ticks();
  int32_t read_latency_ticks() const;
  void set_read_latency_ticks(int32_t value);
  private:
  int32_t _internal_read_latency_ticks() const;
  void _internal_set_read_latency_ticks(int32_t value);
  public:

  // int32 write_latency_ticks = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_write_latency_ticks();
  int32_t write_latency_ticks() const;
  void set_write_latency_ticks(int32_t value);
  private:
  int32_t _internal_write_latency_ticks() const;
  void _internal_set_write_latency_ticks(int32_t value);
  public:

  // int32 unmap_latency_ticks = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_unmap_latency_ticks();
  int32_t unmap_latency_ticks() const;
  void set_unmap_latency_ticks(int32_t value);
  private:
  int32_t _internal_unmap_latency_ticks() const;
  void _internal_set_unmap_latency_ticks(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VolumeStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t read_bytes_count_;
    int32_t read_ops_count_;
    int32_t write_bytes_count_;
    int32_t write_ops_count_;
    int32_t unmap_bytes_count_;
    int32_t unmap_ops_count_;
    int32_t read_latency_ticks_;
    int32_t write_latency_ticks_;
    int32_t unmap_latency_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opicommon_2eproto;
};
// -------------------------------------------------------------------

class QosLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.QosLimit) */ {
 public:
  inline QosLimit() : QosLimit(nullptr) {}
  ~QosLimit() override;
  explicit PROTOBUF_CONSTEXPR QosLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosLimit(const QosLimit& from);
  QosLimit(QosLimit&& from) noexcept
    : QosLimit() {
    *this = ::std::move(from);
  }

  inline QosLimit& operator=(const QosLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosLimit& operator=(QosLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QosLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosLimit* internal_default_instance() {
    return reinterpret_cast<const QosLimit*>(
               &_QosLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QosLimit& a, QosLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(QosLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QosLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QosLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QosLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QosLimit& from) {
    QosLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.QosLimit";
  }
  protected:
  explicit QosLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdIopsKiopsFieldNumber = 1,
    kWrIopsKiopsFieldNumber = 2,
    kRwIopsKiopsFieldNumber = 3,
    kRdBandwidthMbsFieldNumber = 4,
    kWrBandwidthMbsFieldNumber = 5,
    kRwBandwidthMbsFieldNumber = 6,
  };
  // int64 rd_iops_kiops = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_rd_iops_kiops();
  int64_t rd_iops_kiops() const;
  void set_rd_iops_kiops(int64_t value);
  private:
  int64_t _internal_rd_iops_kiops() const;
  void _internal_set_rd_iops_kiops(int64_t value);
  public:

  // int64 wr_iops_kiops = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_wr_iops_kiops();
  int64_t wr_iops_kiops() const;
  void set_wr_iops_kiops(int64_t value);
  private:
  int64_t _internal_wr_iops_kiops() const;
  void _internal_set_wr_iops_kiops(int64_t value);
  public:

  // int64 rw_iops_kiops = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_rw_iops_kiops();
  int64_t rw_iops_kiops() const;
  void set_rw_iops_kiops(int64_t value);
  private:
  int64_t _internal_rw_iops_kiops() const;
  void _internal_set_rw_iops_kiops(int64_t value);
  public:

  // int64 rd_bandwidth_mbs = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_rd_bandwidth_mbs();
  int64_t rd_bandwidth_mbs() const;
  void set_rd_bandwidth_mbs(int64_t value);
  private:
  int64_t _internal_rd_bandwidth_mbs() const;
  void _internal_set_rd_bandwidth_mbs(int64_t value);
  public:

  // int64 wr_bandwidth_mbs = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_wr_bandwidth_mbs();
  int64_t wr_bandwidth_mbs() const;
  void set_wr_bandwidth_mbs(int64_t value);
  private:
  int64_t _internal_wr_bandwidth_mbs() const;
  void _internal_set_wr_bandwidth_mbs(int64_t value);
  public:

  // int64 rw_bandwidth_mbs = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_rw_bandwidth_mbs();
  int64_t rw_bandwidth_mbs() const;
  void set_rw_bandwidth_mbs(int64_t value);
  private:
  int64_t _internal_rw_bandwidth_mbs() const;
  void _internal_set_rw_bandwidth_mbs(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.QosLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t rd_iops_kiops_;
    int64_t wr_iops_kiops_;
    int64_t rw_iops_kiops_;
    int64_t rd_bandwidth_mbs_;
    int64_t wr_bandwidth_mbs_;
    int64_t rw_bandwidth_mbs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opicommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PciEndpoint

// .google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool PciEndpoint::_internal_has_port_id() const {
  return this != internal_default_instance() && _impl_.port_id_ != nullptr;
}
inline bool PciEndpoint::has_port_id() const {
  return _internal_has_port_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::_internal_port_id() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.port_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::port_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.PciEndpoint.port_id)
  return _internal_port_id();
}
inline void PciEndpoint::unsafe_arena_set_allocated_port_id(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* port_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.port_id_);
  }
  _impl_.port_id_ = port_id;
  if (port_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.PciEndpoint.port_id)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::release_port_id() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.port_id_;
  _impl_.port_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::unsafe_arena_release_port_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.PciEndpoint.port_id)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.port_id_;
  _impl_.port_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::_internal_mutable_port_id() {
  
  if (_impl_.port_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.port_id_ = p;
  }
  return _impl_.port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::mutable_port_id() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.PciEndpoint.port_id)
  return _msg;
}
inline void PciEndpoint::set_allocated_port_id(::PROTOBUF_NAMESPACE_ID::Int32Value* port_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.port_id_);
  }
  if (port_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_id));
    if (message_arena != submessage_arena) {
      port_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.port_id_ = port_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.PciEndpoint.port_id)
}

// .google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool PciEndpoint::_internal_has_physical_function() const {
  return this != internal_default_instance() && _impl_.physical_function_ != nullptr;
}
inline bool PciEndpoint::has_physical_function() const {
  return _internal_has_physical_function();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::_internal_physical_function() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.physical_function_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::physical_function() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.PciEndpoint.physical_function)
  return _internal_physical_function();
}
inline void PciEndpoint::unsafe_arena_set_allocated_physical_function(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* physical_function) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physical_function_);
  }
  _impl_.physical_function_ = physical_function;
  if (physical_function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.PciEndpoint.physical_function)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::release_physical_function() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.physical_function_;
  _impl_.physical_function_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::unsafe_arena_release_physical_function() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.PciEndpoint.physical_function)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.physical_function_;
  _impl_.physical_function_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::_internal_mutable_physical_function() {
  
  if (_impl_.physical_function_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.physical_function_ = p;
  }
  return _impl_.physical_function_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::mutable_physical_function() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_physical_function();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.PciEndpoint.physical_function)
  return _msg;
}
inline void PciEndpoint::set_allocated_physical_function(::PROTOBUF_NAMESPACE_ID::Int32Value* physical_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physical_function_);
  }
  if (physical_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physical_function));
    if (message_arena != submessage_arena) {
      physical_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physical_function, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physical_function_ = physical_function;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.PciEndpoint.physical_function)
}

// .google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool PciEndpoint::_internal_has_virtual_function() const {
  return this != internal_default_instance() && _impl_.virtual_function_ != nullptr;
}
inline bool PciEndpoint::has_virtual_function() const {
  return _internal_has_virtual_function();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::_internal_virtual_function() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.virtual_function_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::virtual_function() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.PciEndpoint.virtual_function)
  return _internal_virtual_function();
}
inline void PciEndpoint::unsafe_arena_set_allocated_virtual_function(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* virtual_function) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtual_function_);
  }
  _impl_.virtual_function_ = virtual_function;
  if (virtual_function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.PciEndpoint.virtual_function)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::release_virtual_function() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.virtual_function_;
  _impl_.virtual_function_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::unsafe_arena_release_virtual_function() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.PciEndpoint.virtual_function)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.virtual_function_;
  _impl_.virtual_function_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::_internal_mutable_virtual_function() {
  
  if (_impl_.virtual_function_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.virtual_function_ = p;
  }
  return _impl_.virtual_function_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::mutable_virtual_function() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_virtual_function();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.PciEndpoint.virtual_function)
  return _msg;
}
inline void PciEndpoint::set_allocated_virtual_function(::PROTOBUF_NAMESPACE_ID::Int32Value* virtual_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtual_function_);
  }
  if (virtual_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtual_function));
    if (message_arena != submessage_arena) {
      virtual_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_function, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtual_function_ = virtual_function;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.PciEndpoint.virtual_function)
}

// .google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool PciEndpoint::_internal_has_domain_id() const {
  return this != internal_default_instance() && _impl_.domain_id_ != nullptr;
}
inline bool PciEndpoint::has_domain_id() const {
  return _internal_has_domain_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::_internal_domain_id() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.domain_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& PciEndpoint::domain_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.PciEndpoint.domain_id)
  return _internal_domain_id();
}
inline void PciEndpoint::unsafe_arena_set_allocated_domain_id(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* domain_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.domain_id_);
  }
  _impl_.domain_id_ = domain_id;
  if (domain_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.PciEndpoint.domain_id)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::release_domain_id() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.domain_id_;
  _impl_.domain_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::unsafe_arena_release_domain_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.PciEndpoint.domain_id)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.domain_id_;
  _impl_.domain_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::_internal_mutable_domain_id() {
  
  if (_impl_.domain_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.domain_id_ = p;
  }
  return _impl_.domain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* PciEndpoint::mutable_domain_id() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_domain_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.PciEndpoint.domain_id)
  return _msg;
}
inline void PciEndpoint::set_allocated_domain_id(::PROTOBUF_NAMESPACE_ID::Int32Value* domain_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.domain_id_);
  }
  if (domain_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(domain_id));
    if (message_arena != submessage_arena) {
      domain_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, domain_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.domain_id_ = domain_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.PciEndpoint.domain_id)
}

// -------------------------------------------------------------------

// FabricsEndpoint

// string traddr = 1 [(.google.api.field_behavior) = REQUIRED];
inline void FabricsEndpoint::clear_traddr() {
  _impl_.traddr_.ClearToEmpty();
}
inline const std::string& FabricsEndpoint::traddr() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.FabricsEndpoint.traddr)
  return _internal_traddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FabricsEndpoint::set_traddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.traddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.FabricsEndpoint.traddr)
}
inline std::string* FabricsEndpoint::mutable_traddr() {
  std::string* _s = _internal_mutable_traddr();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.FabricsEndpoint.traddr)
  return _s;
}
inline const std::string& FabricsEndpoint::_internal_traddr() const {
  return _impl_.traddr_.Get();
}
inline void FabricsEndpoint::_internal_set_traddr(const std::string& value) {
  
  _impl_.traddr_.Set(value, GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::_internal_mutable_traddr() {
  
  return _impl_.traddr_.Mutable(GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::release_traddr() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.FabricsEndpoint.traddr)
  return _impl_.traddr_.Release();
}
inline void FabricsEndpoint::set_allocated_traddr(std::string* traddr) {
  if (traddr != nullptr) {
    
  } else {
    
  }
  _impl_.traddr_.SetAllocated(traddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traddr_.IsDefault()) {
    _impl_.traddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.FabricsEndpoint.traddr)
}

// string trsvcid = 2 [(.google.api.field_behavior) = REQUIRED];
inline void FabricsEndpoint::clear_trsvcid() {
  _impl_.trsvcid_.ClearToEmpty();
}
inline const std::string& FabricsEndpoint::trsvcid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.FabricsEndpoint.trsvcid)
  return _internal_trsvcid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FabricsEndpoint::set_trsvcid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trsvcid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.FabricsEndpoint.trsvcid)
}
inline std::string* FabricsEndpoint::mutable_trsvcid() {
  std::string* _s = _internal_mutable_trsvcid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.FabricsEndpoint.trsvcid)
  return _s;
}
inline const std::string& FabricsEndpoint::_internal_trsvcid() const {
  return _impl_.trsvcid_.Get();
}
inline void FabricsEndpoint::_internal_set_trsvcid(const std::string& value) {
  
  _impl_.trsvcid_.Set(value, GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::_internal_mutable_trsvcid() {
  
  return _impl_.trsvcid_.Mutable(GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::release_trsvcid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.FabricsEndpoint.trsvcid)
  return _impl_.trsvcid_.Release();
}
inline void FabricsEndpoint::set_allocated_trsvcid(std::string* trsvcid) {
  if (trsvcid != nullptr) {
    
  } else {
    
  }
  _impl_.trsvcid_.SetAllocated(trsvcid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trsvcid_.IsDefault()) {
    _impl_.trsvcid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.FabricsEndpoint.trsvcid)
}

// .opi_api.storage.v1.NvmeAddressFamily adrfam = 3 [(.google.api.field_behavior) = REQUIRED];
inline void FabricsEndpoint::clear_adrfam() {
  _impl_.adrfam_ = 0;
}
inline ::opi_api::storage::v1::NvmeAddressFamily FabricsEndpoint::_internal_adrfam() const {
  return static_cast< ::opi_api::storage::v1::NvmeAddressFamily >(_impl_.adrfam_);
}
inline ::opi_api::storage::v1::NvmeAddressFamily FabricsEndpoint::adrfam() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.FabricsEndpoint.adrfam)
  return _internal_adrfam();
}
inline void FabricsEndpoint::_internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  
  _impl_.adrfam_ = value;
}
inline void FabricsEndpoint::set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  _internal_set_adrfam(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.FabricsEndpoint.adrfam)
}

// string source_traddr = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void FabricsEndpoint::clear_source_traddr() {
  _impl_.source_traddr_.ClearToEmpty();
}
inline const std::string& FabricsEndpoint::source_traddr() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.FabricsEndpoint.source_traddr)
  return _internal_source_traddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FabricsEndpoint::set_source_traddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_traddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.FabricsEndpoint.source_traddr)
}
inline std::string* FabricsEndpoint::mutable_source_traddr() {
  std::string* _s = _internal_mutable_source_traddr();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.FabricsEndpoint.source_traddr)
  return _s;
}
inline const std::string& FabricsEndpoint::_internal_source_traddr() const {
  return _impl_.source_traddr_.Get();
}
inline void FabricsEndpoint::_internal_set_source_traddr(const std::string& value) {
  
  _impl_.source_traddr_.Set(value, GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::_internal_mutable_source_traddr() {
  
  return _impl_.source_traddr_.Mutable(GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::release_source_traddr() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.FabricsEndpoint.source_traddr)
  return _impl_.source_traddr_.Release();
}
inline void FabricsEndpoint::set_allocated_source_traddr(std::string* source_traddr) {
  if (source_traddr != nullptr) {
    
  } else {
    
  }
  _impl_.source_traddr_.SetAllocated(source_traddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_traddr_.IsDefault()) {
    _impl_.source_traddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.FabricsEndpoint.source_traddr)
}

// string source_trsvcid = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void FabricsEndpoint::clear_source_trsvcid() {
  _impl_.source_trsvcid_.ClearToEmpty();
}
inline const std::string& FabricsEndpoint::source_trsvcid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.FabricsEndpoint.source_trsvcid)
  return _internal_source_trsvcid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FabricsEndpoint::set_source_trsvcid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_trsvcid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.FabricsEndpoint.source_trsvcid)
}
inline std::string* FabricsEndpoint::mutable_source_trsvcid() {
  std::string* _s = _internal_mutable_source_trsvcid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.FabricsEndpoint.source_trsvcid)
  return _s;
}
inline const std::string& FabricsEndpoint::_internal_source_trsvcid() const {
  return _impl_.source_trsvcid_.Get();
}
inline void FabricsEndpoint::_internal_set_source_trsvcid(const std::string& value) {
  
  _impl_.source_trsvcid_.Set(value, GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::_internal_mutable_source_trsvcid() {
  
  return _impl_.source_trsvcid_.Mutable(GetArenaForAllocation());
}
inline std::string* FabricsEndpoint::release_source_trsvcid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.FabricsEndpoint.source_trsvcid)
  return _impl_.source_trsvcid_.Release();
}
inline void FabricsEndpoint::set_allocated_source_trsvcid(std::string* source_trsvcid) {
  if (source_trsvcid != nullptr) {
    
  } else {
    
  }
  _impl_.source_trsvcid_.SetAllocated(source_trsvcid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_trsvcid_.IsDefault()) {
    _impl_.source_trsvcid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.FabricsEndpoint.source_trsvcid)
}

// -------------------------------------------------------------------

// VolumeStats

// int32 read_bytes_count = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_read_bytes_count() {
  _impl_.read_bytes_count_ = 0;
}
inline int32_t VolumeStats::_internal_read_bytes_count() const {
  return _impl_.read_bytes_count_;
}
inline int32_t VolumeStats::read_bytes_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.read_bytes_count)
  return _internal_read_bytes_count();
}
inline void VolumeStats::_internal_set_read_bytes_count(int32_t value) {
  
  _impl_.read_bytes_count_ = value;
}
inline void VolumeStats::set_read_bytes_count(int32_t value) {
  _internal_set_read_bytes_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.read_bytes_count)
}

// int32 read_ops_count = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_read_ops_count() {
  _impl_.read_ops_count_ = 0;
}
inline int32_t VolumeStats::_internal_read_ops_count() const {
  return _impl_.read_ops_count_;
}
inline int32_t VolumeStats::read_ops_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.read_ops_count)
  return _internal_read_ops_count();
}
inline void VolumeStats::_internal_set_read_ops_count(int32_t value) {
  
  _impl_.read_ops_count_ = value;
}
inline void VolumeStats::set_read_ops_count(int32_t value) {
  _internal_set_read_ops_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.read_ops_count)
}

// int32 write_bytes_count = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_write_bytes_count() {
  _impl_.write_bytes_count_ = 0;
}
inline int32_t VolumeStats::_internal_write_bytes_count() const {
  return _impl_.write_bytes_count_;
}
inline int32_t VolumeStats::write_bytes_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.write_bytes_count)
  return _internal_write_bytes_count();
}
inline void VolumeStats::_internal_set_write_bytes_count(int32_t value) {
  
  _impl_.write_bytes_count_ = value;
}
inline void VolumeStats::set_write_bytes_count(int32_t value) {
  _internal_set_write_bytes_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.write_bytes_count)
}

// int32 write_ops_count = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_write_ops_count() {
  _impl_.write_ops_count_ = 0;
}
inline int32_t VolumeStats::_internal_write_ops_count() const {
  return _impl_.write_ops_count_;
}
inline int32_t VolumeStats::write_ops_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.write_ops_count)
  return _internal_write_ops_count();
}
inline void VolumeStats::_internal_set_write_ops_count(int32_t value) {
  
  _impl_.write_ops_count_ = value;
}
inline void VolumeStats::set_write_ops_count(int32_t value) {
  _internal_set_write_ops_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.write_ops_count)
}

// int32 unmap_bytes_count = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_unmap_bytes_count() {
  _impl_.unmap_bytes_count_ = 0;
}
inline int32_t VolumeStats::_internal_unmap_bytes_count() const {
  return _impl_.unmap_bytes_count_;
}
inline int32_t VolumeStats::unmap_bytes_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.unmap_bytes_count)
  return _internal_unmap_bytes_count();
}
inline void VolumeStats::_internal_set_unmap_bytes_count(int32_t value) {
  
  _impl_.unmap_bytes_count_ = value;
}
inline void VolumeStats::set_unmap_bytes_count(int32_t value) {
  _internal_set_unmap_bytes_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.unmap_bytes_count)
}

// int32 unmap_ops_count = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_unmap_ops_count() {
  _impl_.unmap_ops_count_ = 0;
}
inline int32_t VolumeStats::_internal_unmap_ops_count() const {
  return _impl_.unmap_ops_count_;
}
inline int32_t VolumeStats::unmap_ops_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.unmap_ops_count)
  return _internal_unmap_ops_count();
}
inline void VolumeStats::_internal_set_unmap_ops_count(int32_t value) {
  
  _impl_.unmap_ops_count_ = value;
}
inline void VolumeStats::set_unmap_ops_count(int32_t value) {
  _internal_set_unmap_ops_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.unmap_ops_count)
}

// int32 read_latency_ticks = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_read_latency_ticks() {
  _impl_.read_latency_ticks_ = 0;
}
inline int32_t VolumeStats::_internal_read_latency_ticks() const {
  return _impl_.read_latency_ticks_;
}
inline int32_t VolumeStats::read_latency_ticks() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.read_latency_ticks)
  return _internal_read_latency_ticks();
}
inline void VolumeStats::_internal_set_read_latency_ticks(int32_t value) {
  
  _impl_.read_latency_ticks_ = value;
}
inline void VolumeStats::set_read_latency_ticks(int32_t value) {
  _internal_set_read_latency_ticks(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.read_latency_ticks)
}

// int32 write_latency_ticks = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_write_latency_ticks() {
  _impl_.write_latency_ticks_ = 0;
}
inline int32_t VolumeStats::_internal_write_latency_ticks() const {
  return _impl_.write_latency_ticks_;
}
inline int32_t VolumeStats::write_latency_ticks() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.write_latency_ticks)
  return _internal_write_latency_ticks();
}
inline void VolumeStats::_internal_set_write_latency_ticks(int32_t value) {
  
  _impl_.write_latency_ticks_ = value;
}
inline void VolumeStats::set_write_latency_ticks(int32_t value) {
  _internal_set_write_latency_ticks(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.write_latency_ticks)
}

// int32 unmap_latency_ticks = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void VolumeStats::clear_unmap_latency_ticks() {
  _impl_.unmap_latency_ticks_ = 0;
}
inline int32_t VolumeStats::_internal_unmap_latency_ticks() const {
  return _impl_.unmap_latency_ticks_;
}
inline int32_t VolumeStats::unmap_latency_ticks() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VolumeStats.unmap_latency_ticks)
  return _internal_unmap_latency_ticks();
}
inline void VolumeStats::_internal_set_unmap_latency_ticks(int32_t value) {
  
  _impl_.unmap_latency_ticks_ = value;
}
inline void VolumeStats::set_unmap_latency_ticks(int32_t value) {
  _internal_set_unmap_latency_ticks(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VolumeStats.unmap_latency_ticks)
}

// -------------------------------------------------------------------

// QosLimit

// int64 rd_iops_kiops = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_rd_iops_kiops() {
  _impl_.rd_iops_kiops_ = int64_t{0};
}
inline int64_t QosLimit::_internal_rd_iops_kiops() const {
  return _impl_.rd_iops_kiops_;
}
inline int64_t QosLimit::rd_iops_kiops() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.rd_iops_kiops)
  return _internal_rd_iops_kiops();
}
inline void QosLimit::_internal_set_rd_iops_kiops(int64_t value) {
  
  _impl_.rd_iops_kiops_ = value;
}
inline void QosLimit::set_rd_iops_kiops(int64_t value) {
  _internal_set_rd_iops_kiops(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.rd_iops_kiops)
}

// int64 wr_iops_kiops = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_wr_iops_kiops() {
  _impl_.wr_iops_kiops_ = int64_t{0};
}
inline int64_t QosLimit::_internal_wr_iops_kiops() const {
  return _impl_.wr_iops_kiops_;
}
inline int64_t QosLimit::wr_iops_kiops() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.wr_iops_kiops)
  return _internal_wr_iops_kiops();
}
inline void QosLimit::_internal_set_wr_iops_kiops(int64_t value) {
  
  _impl_.wr_iops_kiops_ = value;
}
inline void QosLimit::set_wr_iops_kiops(int64_t value) {
  _internal_set_wr_iops_kiops(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.wr_iops_kiops)
}

// int64 rw_iops_kiops = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_rw_iops_kiops() {
  _impl_.rw_iops_kiops_ = int64_t{0};
}
inline int64_t QosLimit::_internal_rw_iops_kiops() const {
  return _impl_.rw_iops_kiops_;
}
inline int64_t QosLimit::rw_iops_kiops() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.rw_iops_kiops)
  return _internal_rw_iops_kiops();
}
inline void QosLimit::_internal_set_rw_iops_kiops(int64_t value) {
  
  _impl_.rw_iops_kiops_ = value;
}
inline void QosLimit::set_rw_iops_kiops(int64_t value) {
  _internal_set_rw_iops_kiops(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.rw_iops_kiops)
}

// int64 rd_bandwidth_mbs = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_rd_bandwidth_mbs() {
  _impl_.rd_bandwidth_mbs_ = int64_t{0};
}
inline int64_t QosLimit::_internal_rd_bandwidth_mbs() const {
  return _impl_.rd_bandwidth_mbs_;
}
inline int64_t QosLimit::rd_bandwidth_mbs() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.rd_bandwidth_mbs)
  return _internal_rd_bandwidth_mbs();
}
inline void QosLimit::_internal_set_rd_bandwidth_mbs(int64_t value) {
  
  _impl_.rd_bandwidth_mbs_ = value;
}
inline void QosLimit::set_rd_bandwidth_mbs(int64_t value) {
  _internal_set_rd_bandwidth_mbs(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.rd_bandwidth_mbs)
}

// int64 wr_bandwidth_mbs = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_wr_bandwidth_mbs() {
  _impl_.wr_bandwidth_mbs_ = int64_t{0};
}
inline int64_t QosLimit::_internal_wr_bandwidth_mbs() const {
  return _impl_.wr_bandwidth_mbs_;
}
inline int64_t QosLimit::wr_bandwidth_mbs() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.wr_bandwidth_mbs)
  return _internal_wr_bandwidth_mbs();
}
inline void QosLimit::_internal_set_wr_bandwidth_mbs(int64_t value) {
  
  _impl_.wr_bandwidth_mbs_ = value;
}
inline void QosLimit::set_wr_bandwidth_mbs(int64_t value) {
  _internal_set_wr_bandwidth_mbs(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.wr_bandwidth_mbs)
}

// int64 rw_bandwidth_mbs = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void QosLimit::clear_rw_bandwidth_mbs() {
  _impl_.rw_bandwidth_mbs_ = int64_t{0};
}
inline int64_t QosLimit::_internal_rw_bandwidth_mbs() const {
  return _impl_.rw_bandwidth_mbs_;
}
inline int64_t QosLimit::rw_bandwidth_mbs() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.QosLimit.rw_bandwidth_mbs)
  return _internal_rw_bandwidth_mbs();
}
inline void QosLimit::_internal_set_rw_bandwidth_mbs(int64_t value) {
  
  _impl_.rw_bandwidth_mbs_ = value;
}
inline void QosLimit::set_rw_bandwidth_mbs(int64_t value) {
  _internal_set_rw_bandwidth_mbs(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.QosLimit.rw_bandwidth_mbs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::storage::v1::EncryptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::EncryptionType>() {
  return ::opi_api::storage::v1::EncryptionType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeTransportType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeTransportType>() {
  return ::opi_api::storage::v1::NvmeTransportType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeAddressFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeAddressFamily>() {
  return ::opi_api::storage::v1::NvmeAddressFamily_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opicommon_2eproto
