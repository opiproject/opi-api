// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: middleend_qos_volume.proto

#include "middleend_qos_volume.pb.h"
#include "middleend_qos_volume.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* MiddleendQosVolumeService_method_names[] = {
  "/opi_api.storage.v1.MiddleendQosVolumeService/CreateQosVolume",
  "/opi_api.storage.v1.MiddleendQosVolumeService/DeleteQosVolume",
  "/opi_api.storage.v1.MiddleendQosVolumeService/UpdateQosVolume",
  "/opi_api.storage.v1.MiddleendQosVolumeService/ListQosVolumes",
  "/opi_api.storage.v1.MiddleendQosVolumeService/GetQosVolume",
  "/opi_api.storage.v1.MiddleendQosVolumeService/StatsQosVolume",
};

std::unique_ptr< MiddleendQosVolumeService::Stub> MiddleendQosVolumeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MiddleendQosVolumeService::Stub> stub(new MiddleendQosVolumeService::Stub(channel, options));
  return stub;
}

MiddleendQosVolumeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateQosVolume_(MiddleendQosVolumeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteQosVolume_(MiddleendQosVolumeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateQosVolume_(MiddleendQosVolumeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListQosVolumes_(MiddleendQosVolumeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQosVolume_(MiddleendQosVolumeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StatsQosVolume_(MiddleendQosVolumeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MiddleendQosVolumeService::Stub::CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateQosVolume_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateQosVolume_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::CreateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateQosVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::PrepareAsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::QosVolume, ::opi_api::storage::v1::CreateQosVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateQosVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::AsyncCreateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateQosVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendQosVolumeService::Stub::DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteQosVolume_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteQosVolume_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::DeleteQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteQosVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MiddleendQosVolumeService::Stub::PrepareAsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteQosVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteQosVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MiddleendQosVolumeService::Stub::AsyncDeleteQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteQosVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendQosVolumeService::Stub::UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateQosVolume_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateQosVolume_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::UpdateQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateQosVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::PrepareAsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::QosVolume, ::opi_api::storage::v1::UpdateQosVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateQosVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::AsyncUpdateQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateQosVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendQosVolumeService::Stub::ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::opi_api::storage::v1::ListQosVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListQosVolumes_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListQosVolumes_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::ListQosVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListQosVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>* MiddleendQosVolumeService::Stub::PrepareAsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListQosVolumesResponse, ::opi_api::storage::v1::ListQosVolumesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListQosVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListQosVolumesResponse>* MiddleendQosVolumeService::Stub::AsyncListQosVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListQosVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendQosVolumeService::Stub::GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::opi_api::storage::v1::QosVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQosVolume_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQosVolume_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::GetQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQosVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::PrepareAsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::QosVolume, ::opi_api::storage::v1::GetQosVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQosVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::QosVolume>* MiddleendQosVolumeService::Stub::AsyncGetQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQosVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendQosVolumeService::Stub::StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::opi_api::storage::v1::StatsQosVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StatsQosVolume_, context, request, response);
}

void MiddleendQosVolumeService::Stub::async::StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StatsQosVolume_, context, request, response, std::move(f));
}

void MiddleendQosVolumeService::Stub::async::StatsQosVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StatsQosVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>* MiddleendQosVolumeService::Stub::PrepareAsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::StatsQosVolumeResponse, ::opi_api::storage::v1::StatsQosVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StatsQosVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsQosVolumeResponse>* MiddleendQosVolumeService::Stub::AsyncStatsQosVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatsQosVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

MiddleendQosVolumeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::CreateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateQosVolumeRequest* req,
             ::opi_api::storage::v1::QosVolume* resp) {
               return service->CreateQosVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::DeleteQosVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteQosVolumeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteQosVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::UpdateQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateQosVolumeRequest* req,
             ::opi_api::storage::v1::QosVolume* resp) {
               return service->UpdateQosVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::ListQosVolumesRequest, ::opi_api::storage::v1::ListQosVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListQosVolumesRequest* req,
             ::opi_api::storage::v1::ListQosVolumesResponse* resp) {
               return service->ListQosVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::GetQosVolumeRequest, ::opi_api::storage::v1::QosVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetQosVolumeRequest* req,
             ::opi_api::storage::v1::QosVolume* resp) {
               return service->GetQosVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendQosVolumeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendQosVolumeService::Service, ::opi_api::storage::v1::StatsQosVolumeRequest, ::opi_api::storage::v1::StatsQosVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendQosVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::StatsQosVolumeRequest* req,
             ::opi_api::storage::v1::StatsQosVolumeResponse* resp) {
               return service->StatsQosVolume(ctx, req, resp);
             }, this)));
}

MiddleendQosVolumeService::Service::~Service() {
}

::grpc::Status MiddleendQosVolumeService::Service::CreateQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendQosVolumeService::Service::DeleteQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteQosVolumeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendQosVolumeService::Service::UpdateQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendQosVolumeService::Service::ListQosVolumes(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListQosVolumesRequest* request, ::opi_api::storage::v1::ListQosVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendQosVolumeService::Service::GetQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetQosVolumeRequest* request, ::opi_api::storage::v1::QosVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendQosVolumeService::Service::StatsQosVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::StatsQosVolumeRequest* request, ::opi_api::storage::v1::StatsQosVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

