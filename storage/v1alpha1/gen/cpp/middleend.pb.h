// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: middleend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opicommon.pb.h"
#include "object_key.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_middleend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_middleend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_middleend_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateEncryptedVolumeRequest;
struct CreateEncryptedVolumeRequestDefaultTypeInternal;
extern CreateEncryptedVolumeRequestDefaultTypeInternal _CreateEncryptedVolumeRequest_default_instance_;
class DeleteEncryptedVolumeRequest;
struct DeleteEncryptedVolumeRequestDefaultTypeInternal;
extern DeleteEncryptedVolumeRequestDefaultTypeInternal _DeleteEncryptedVolumeRequest_default_instance_;
class EncryptedVolume;
struct EncryptedVolumeDefaultTypeInternal;
extern EncryptedVolumeDefaultTypeInternal _EncryptedVolume_default_instance_;
class EncryptedVolumeStatsRequest;
struct EncryptedVolumeStatsRequestDefaultTypeInternal;
extern EncryptedVolumeStatsRequestDefaultTypeInternal _EncryptedVolumeStatsRequest_default_instance_;
class EncryptedVolumeStatsResponse;
struct EncryptedVolumeStatsResponseDefaultTypeInternal;
extern EncryptedVolumeStatsResponseDefaultTypeInternal _EncryptedVolumeStatsResponse_default_instance_;
class GetEncryptedVolumeRequest;
struct GetEncryptedVolumeRequestDefaultTypeInternal;
extern GetEncryptedVolumeRequestDefaultTypeInternal _GetEncryptedVolumeRequest_default_instance_;
class ListEncryptedVolumeRequest;
struct ListEncryptedVolumeRequestDefaultTypeInternal;
extern ListEncryptedVolumeRequestDefaultTypeInternal _ListEncryptedVolumeRequest_default_instance_;
class ListEncryptedVolumeResponse;
struct ListEncryptedVolumeResponseDefaultTypeInternal;
extern ListEncryptedVolumeResponseDefaultTypeInternal _ListEncryptedVolumeResponse_default_instance_;
class UpdateEncryptedVolumeRequest;
struct UpdateEncryptedVolumeRequestDefaultTypeInternal;
extern UpdateEncryptedVolumeRequestDefaultTypeInternal _UpdateEncryptedVolumeRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolume* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolumeStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolumeStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolumeStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolumeStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::GetEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::ListEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::ListEncryptedVolumeResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListEncryptedVolumeResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateEncryptedVolumeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class EncryptedVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolume) */ {
 public:
  inline EncryptedVolume() : EncryptedVolume(nullptr) {}
  ~EncryptedVolume() override;
  explicit constexpr EncryptedVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolume(const EncryptedVolume& from);
  EncryptedVolume(EncryptedVolume&& from) noexcept
    : EncryptedVolume() {
    *this = ::std::move(from);
  }

  inline EncryptedVolume& operator=(const EncryptedVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolume& operator=(EncryptedVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolume* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolume*>(
               &_EncryptedVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedVolume& a, EncryptedVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolume& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolume";
  }
  protected:
  explicit EncryptedVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kEncryptedVolumeIdFieldNumber = 1,
    kVolumeIdFieldNumber = 2,
    kCipherFieldNumber = 4,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // .opi_api.common.v1.ObjectKey volume_id = 2;
  bool has_volume_id() const;
  private:
  bool _internal_has_volume_id() const;
  public:
  void clear_volume_id();
  const ::opi_api::common::v1::ObjectKey& volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_volume_id();
  void set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_volume_id();
  public:
  void unsafe_arena_set_allocated_volume_id(
      ::opi_api::common::v1::ObjectKey* volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_volume_id();

  // .opi_api.storage.v1.EncryptionType cipher = 4;
  void clear_cipher();
  ::opi_api::storage::v1::EncryptionType cipher() const;
  void set_cipher(::opi_api::storage::v1::EncryptionType value);
  private:
  ::opi_api::storage::v1::EncryptionType _internal_cipher() const;
  void _internal_set_cipher(::opi_api::storage::v1::EncryptionType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  ::opi_api::common::v1::ObjectKey* volume_id_;
  int cipher_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class CreateEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateEncryptedVolumeRequest) */ {
 public:
  inline CreateEncryptedVolumeRequest() : CreateEncryptedVolumeRequest(nullptr) {}
  ~CreateEncryptedVolumeRequest() override;
  explicit constexpr CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEncryptedVolumeRequest(const CreateEncryptedVolumeRequest& from);
  CreateEncryptedVolumeRequest(CreateEncryptedVolumeRequest&& from) noexcept
    : CreateEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateEncryptedVolumeRequest& operator=(const CreateEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEncryptedVolumeRequest& operator=(CreateEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEncryptedVolumeRequest*>(
               &_CreateEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEncryptedVolumeRequest& a, CreateEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateEncryptedVolumeRequest";
  }
  protected:
  explicit CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 1,
  };
  // .opi_api.storage.v1.EncryptedVolume volume = 1;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::opi_api::storage::v1::EncryptedVolume& volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::EncryptedVolume* release_volume();
  ::opi_api::storage::v1::EncryptedVolume* mutable_volume();
  void set_allocated_volume(::opi_api::storage::v1::EncryptedVolume* volume);
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_volume() const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::opi_api::storage::v1::EncryptedVolume* volume);
  ::opi_api::storage::v1::EncryptedVolume* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::EncryptedVolume* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class DeleteEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteEncryptedVolumeRequest) */ {
 public:
  inline DeleteEncryptedVolumeRequest() : DeleteEncryptedVolumeRequest(nullptr) {}
  ~DeleteEncryptedVolumeRequest() override;
  explicit constexpr DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEncryptedVolumeRequest(const DeleteEncryptedVolumeRequest& from);
  DeleteEncryptedVolumeRequest(DeleteEncryptedVolumeRequest&& from) noexcept
    : DeleteEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEncryptedVolumeRequest& operator=(const DeleteEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEncryptedVolumeRequest& operator=(DeleteEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEncryptedVolumeRequest*>(
               &_DeleteEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteEncryptedVolumeRequest& a, DeleteEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteEncryptedVolumeRequest";
  }
  protected:
  explicit DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class UpdateEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateEncryptedVolumeRequest) */ {
 public:
  inline UpdateEncryptedVolumeRequest() : UpdateEncryptedVolumeRequest(nullptr) {}
  ~UpdateEncryptedVolumeRequest() override;
  explicit constexpr UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEncryptedVolumeRequest(const UpdateEncryptedVolumeRequest& from);
  UpdateEncryptedVolumeRequest(UpdateEncryptedVolumeRequest&& from) noexcept
    : UpdateEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEncryptedVolumeRequest& operator=(const UpdateEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEncryptedVolumeRequest& operator=(UpdateEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEncryptedVolumeRequest*>(
               &_UpdateEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateEncryptedVolumeRequest& a, UpdateEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateEncryptedVolumeRequest";
  }
  protected:
  explicit UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 1,
  };
  // .opi_api.storage.v1.EncryptedVolume volume = 1;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::opi_api::storage::v1::EncryptedVolume& volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::EncryptedVolume* release_volume();
  ::opi_api::storage::v1::EncryptedVolume* mutable_volume();
  void set_allocated_volume(::opi_api::storage::v1::EncryptedVolume* volume);
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_volume() const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::opi_api::storage::v1::EncryptedVolume* volume);
  ::opi_api::storage::v1::EncryptedVolume* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::EncryptedVolume* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListEncryptedVolumeRequest) */ {
 public:
  inline ListEncryptedVolumeRequest() : ListEncryptedVolumeRequest(nullptr) {}
  ~ListEncryptedVolumeRequest() override;
  explicit constexpr ListEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEncryptedVolumeRequest(const ListEncryptedVolumeRequest& from);
  ListEncryptedVolumeRequest(ListEncryptedVolumeRequest&& from) noexcept
    : ListEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline ListEncryptedVolumeRequest& operator=(const ListEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptedVolumeRequest& operator=(ListEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const ListEncryptedVolumeRequest*>(
               &_ListEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListEncryptedVolumeRequest& a, ListEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListEncryptedVolumeRequest";
  }
  protected:
  explicit ListEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptedVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListEncryptedVolumeResponse) */ {
 public:
  inline ListEncryptedVolumeResponse() : ListEncryptedVolumeResponse(nullptr) {}
  ~ListEncryptedVolumeResponse() override;
  explicit constexpr ListEncryptedVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEncryptedVolumeResponse(const ListEncryptedVolumeResponse& from);
  ListEncryptedVolumeResponse(ListEncryptedVolumeResponse&& from) noexcept
    : ListEncryptedVolumeResponse() {
    *this = ::std::move(from);
  }

  inline ListEncryptedVolumeResponse& operator=(const ListEncryptedVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptedVolumeResponse& operator=(ListEncryptedVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEncryptedVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEncryptedVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const ListEncryptedVolumeResponse*>(
               &_ListEncryptedVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListEncryptedVolumeResponse& a, ListEncryptedVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptedVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEncryptedVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEncryptedVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEncryptedVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEncryptedVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListEncryptedVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptedVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListEncryptedVolumeResponse";
  }
  protected:
  explicit ListEncryptedVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.EncryptedVolume volumes = 1;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  ::opi_api::storage::v1::EncryptedVolume* mutable_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >*
      mutable_volumes();
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_volumes(int index) const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_add_volumes();
  public:
  const ::opi_api::storage::v1::EncryptedVolume& volumes(int index) const;
  ::opi_api::storage::v1::EncryptedVolume* add_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >&
      volumes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListEncryptedVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume > volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class GetEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetEncryptedVolumeRequest) */ {
 public:
  inline GetEncryptedVolumeRequest() : GetEncryptedVolumeRequest(nullptr) {}
  ~GetEncryptedVolumeRequest() override;
  explicit constexpr GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEncryptedVolumeRequest(const GetEncryptedVolumeRequest& from);
  GetEncryptedVolumeRequest(GetEncryptedVolumeRequest&& from) noexcept
    : GetEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline GetEncryptedVolumeRequest& operator=(const GetEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEncryptedVolumeRequest& operator=(GetEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const GetEncryptedVolumeRequest*>(
               &_GetEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetEncryptedVolumeRequest& a, GetEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetEncryptedVolumeRequest";
  }
  protected:
  explicit GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class EncryptedVolumeStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolumeStatsRequest) */ {
 public:
  inline EncryptedVolumeStatsRequest() : EncryptedVolumeStatsRequest(nullptr) {}
  ~EncryptedVolumeStatsRequest() override;
  explicit constexpr EncryptedVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolumeStatsRequest(const EncryptedVolumeStatsRequest& from);
  EncryptedVolumeStatsRequest(EncryptedVolumeStatsRequest&& from) noexcept
    : EncryptedVolumeStatsRequest() {
    *this = ::std::move(from);
  }

  inline EncryptedVolumeStatsRequest& operator=(const EncryptedVolumeStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolumeStatsRequest& operator=(EncryptedVolumeStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolumeStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolumeStatsRequest* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolumeStatsRequest*>(
               &_EncryptedVolumeStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EncryptedVolumeStatsRequest& a, EncryptedVolumeStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolumeStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolumeStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolumeStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolumeStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolumeStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolumeStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolumeStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolumeStatsRequest";
  }
  protected:
  explicit EncryptedVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolumeStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class EncryptedVolumeStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolumeStatsResponse) */ {
 public:
  inline EncryptedVolumeStatsResponse() : EncryptedVolumeStatsResponse(nullptr) {}
  ~EncryptedVolumeStatsResponse() override;
  explicit constexpr EncryptedVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolumeStatsResponse(const EncryptedVolumeStatsResponse& from);
  EncryptedVolumeStatsResponse(EncryptedVolumeStatsResponse&& from) noexcept
    : EncryptedVolumeStatsResponse() {
    *this = ::std::move(from);
  }

  inline EncryptedVolumeStatsResponse& operator=(const EncryptedVolumeStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolumeStatsResponse& operator=(EncryptedVolumeStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolumeStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolumeStatsResponse* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolumeStatsResponse*>(
               &_EncryptedVolumeStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EncryptedVolumeStatsResponse& a, EncryptedVolumeStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolumeStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolumeStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolumeStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolumeStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolumeStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolumeStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolumeStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolumeStatsResponse";
  }
  protected:
  explicit EncryptedVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kEncryptedVolumeIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolumeStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedVolume

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolume::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolume::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolume::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolume::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
}

// .opi_api.common.v1.ObjectKey volume_id = 2;
inline bool EncryptedVolume::_internal_has_volume_id() const {
  return this != internal_default_instance() && volume_id_ != nullptr;
}
inline bool EncryptedVolume::has_volume_id() const {
  return _internal_has_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::_internal_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.volume_id)
  return _internal_volume_id();
}
inline void EncryptedVolume::unsafe_arena_set_allocated_volume_id(
    ::opi_api::common::v1::ObjectKey* volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  volume_id_ = volume_id;
  if (volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolume.volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::release_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::unsafe_arena_release_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::_internal_mutable_volume_id() {
  
  if (volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    volume_id_ = p;
  }
  return volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::mutable_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.volume_id)
  return _msg;
}
inline void EncryptedVolume::set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  if (volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id));
    if (message_arena != submessage_arena) {
      volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume_id, submessage_arena);
    }
    
  } else {
    
  }
  volume_id_ = volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.volume_id)
}

// bytes key = 3;
inline void EncryptedVolume::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& EncryptedVolume::key() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedVolume::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.EncryptedVolume.key)
}
inline std::string* EncryptedVolume::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.key)
  return _s;
}
inline const std::string& EncryptedVolume::_internal_key() const {
  return key_.Get();
}
inline void EncryptedVolume::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncryptedVolume::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncryptedVolume::release_key() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncryptedVolume::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.key)
}

// .opi_api.storage.v1.EncryptionType cipher = 4;
inline void EncryptedVolume::clear_cipher() {
  cipher_ = 0;
}
inline ::opi_api::storage::v1::EncryptionType EncryptedVolume::_internal_cipher() const {
  return static_cast< ::opi_api::storage::v1::EncryptionType >(cipher_);
}
inline ::opi_api::storage::v1::EncryptionType EncryptedVolume::cipher() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.cipher)
  return _internal_cipher();
}
inline void EncryptedVolume::_internal_set_cipher(::opi_api::storage::v1::EncryptionType value) {
  
  cipher_ = value;
}
inline void EncryptedVolume::set_cipher(::opi_api::storage::v1::EncryptionType value) {
  _internal_set_cipher(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.EncryptedVolume.cipher)
}

// -------------------------------------------------------------------

// CreateEncryptedVolumeRequest

// .opi_api.storage.v1.EncryptedVolume volume = 1;
inline bool CreateEncryptedVolumeRequest::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool CreateEncryptedVolumeRequest::has_volume() const {
  return _internal_has_volume();
}
inline void CreateEncryptedVolumeRequest::clear_volume() {
  if (GetArenaForAllocation() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::opi_api::storage::v1::EncryptedVolume& CreateEncryptedVolumeRequest::_internal_volume() const {
  const ::opi_api::storage::v1::EncryptedVolume* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::EncryptedVolume&>(
      ::opi_api::storage::v1::_EncryptedVolume_default_instance_);
}
inline const ::opi_api::storage::v1::EncryptedVolume& CreateEncryptedVolumeRequest::volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateEncryptedVolumeRequest.volume)
  return _internal_volume();
}
inline void CreateEncryptedVolumeRequest::unsafe_arena_set_allocated_volume(
    ::opi_api::storage::v1::EncryptedVolume* volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.volume)
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::release_volume() {
  
  ::opi_api::storage::v1::EncryptedVolume* temp = volume_;
  volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateEncryptedVolumeRequest.volume)
  
  ::opi_api::storage::v1::EncryptedVolume* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(GetArenaForAllocation());
    volume_ = p;
  }
  return volume_;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::mutable_volume() {
  ::opi_api::storage::v1::EncryptedVolume* _msg = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateEncryptedVolumeRequest.volume)
  return _msg;
}
inline void CreateEncryptedVolumeRequest::set_allocated_volume(::opi_api::storage::v1::EncryptedVolume* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::EncryptedVolume>::GetOwningArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.volume)
}

// -------------------------------------------------------------------

// DeleteEncryptedVolumeRequest

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool DeleteEncryptedVolumeRequest::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool DeleteEncryptedVolumeRequest::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteEncryptedVolumeRequest::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteEncryptedVolumeRequest::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteEncryptedVolumeRequest.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void DeleteEncryptedVolumeRequest::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteEncryptedVolumeRequest.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteEncryptedVolumeRequest::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteEncryptedVolumeRequest::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteEncryptedVolumeRequest.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteEncryptedVolumeRequest::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteEncryptedVolumeRequest::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteEncryptedVolumeRequest.encrypted_volume_id)
  return _msg;
}
inline void DeleteEncryptedVolumeRequest::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteEncryptedVolumeRequest.encrypted_volume_id)
}

// -------------------------------------------------------------------

// UpdateEncryptedVolumeRequest

// .opi_api.storage.v1.EncryptedVolume volume = 1;
inline bool UpdateEncryptedVolumeRequest::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool UpdateEncryptedVolumeRequest::has_volume() const {
  return _internal_has_volume();
}
inline void UpdateEncryptedVolumeRequest::clear_volume() {
  if (GetArenaForAllocation() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::opi_api::storage::v1::EncryptedVolume& UpdateEncryptedVolumeRequest::_internal_volume() const {
  const ::opi_api::storage::v1::EncryptedVolume* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::EncryptedVolume&>(
      ::opi_api::storage::v1::_EncryptedVolume_default_instance_);
}
inline const ::opi_api::storage::v1::EncryptedVolume& UpdateEncryptedVolumeRequest::volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateEncryptedVolumeRequest.volume)
  return _internal_volume();
}
inline void UpdateEncryptedVolumeRequest::unsafe_arena_set_allocated_volume(
    ::opi_api::storage::v1::EncryptedVolume* volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.volume)
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::release_volume() {
  
  ::opi_api::storage::v1::EncryptedVolume* temp = volume_;
  volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateEncryptedVolumeRequest.volume)
  
  ::opi_api::storage::v1::EncryptedVolume* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(GetArenaForAllocation());
    volume_ = p;
  }
  return volume_;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::mutable_volume() {
  ::opi_api::storage::v1::EncryptedVolume* _msg = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateEncryptedVolumeRequest.volume)
  return _msg;
}
inline void UpdateEncryptedVolumeRequest::set_allocated_volume(::opi_api::storage::v1::EncryptedVolume* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::EncryptedVolume>::GetOwningArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.volume)
}

// -------------------------------------------------------------------

// ListEncryptedVolumeRequest

// int32 page_size = 1;
inline void ListEncryptedVolumeRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListEncryptedVolumeRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListEncryptedVolumeRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumeRequest.page_size)
  return _internal_page_size();
}
inline void ListEncryptedVolumeRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListEncryptedVolumeRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumeRequest.page_size)
}

// string page_token = 2;
inline void ListEncryptedVolumeRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListEncryptedVolumeRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumeRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEncryptedVolumeRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumeRequest.page_token)
}
inline std::string* ListEncryptedVolumeRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumeRequest.page_token)
  return _s;
}
inline const std::string& ListEncryptedVolumeRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListEncryptedVolumeRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumeRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumeRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListEncryptedVolumeRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListEncryptedVolumeRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListEncryptedVolumeRequest.page_token)
}

// -------------------------------------------------------------------

// ListEncryptedVolumeResponse

// repeated .opi_api.storage.v1.EncryptedVolume volumes = 1;
inline int ListEncryptedVolumeResponse::_internal_volumes_size() const {
  return volumes_.size();
}
inline int ListEncryptedVolumeResponse::volumes_size() const {
  return _internal_volumes_size();
}
inline void ListEncryptedVolumeResponse::clear_volumes() {
  volumes_.Clear();
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumeResponse::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumeResponse.volumes)
  return volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >*
ListEncryptedVolumeResponse::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListEncryptedVolumeResponse.volumes)
  return &volumes_;
}
inline const ::opi_api::storage::v1::EncryptedVolume& ListEncryptedVolumeResponse::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const ::opi_api::storage::v1::EncryptedVolume& ListEncryptedVolumeResponse::volumes(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumeResponse.volumes)
  return _internal_volumes(index);
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumeResponse::_internal_add_volumes() {
  return volumes_.Add();
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumeResponse::add_volumes() {
  ::opi_api::storage::v1::EncryptedVolume* _add = _internal_add_volumes();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListEncryptedVolumeResponse.volumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >&
ListEncryptedVolumeResponse::volumes() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListEncryptedVolumeResponse.volumes)
  return volumes_;
}

// string next_page_token = 2;
inline void ListEncryptedVolumeResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListEncryptedVolumeResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumeResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEncryptedVolumeResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumeResponse.next_page_token)
}
inline std::string* ListEncryptedVolumeResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumeResponse.next_page_token)
  return _s;
}
inline const std::string& ListEncryptedVolumeResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListEncryptedVolumeResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumeResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumeResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListEncryptedVolumeResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListEncryptedVolumeResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListEncryptedVolumeResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetEncryptedVolumeRequest

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool GetEncryptedVolumeRequest::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool GetEncryptedVolumeRequest::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& GetEncryptedVolumeRequest::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& GetEncryptedVolumeRequest::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetEncryptedVolumeRequest.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void GetEncryptedVolumeRequest::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.GetEncryptedVolumeRequest.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* GetEncryptedVolumeRequest::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetEncryptedVolumeRequest::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetEncryptedVolumeRequest.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetEncryptedVolumeRequest::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* GetEncryptedVolumeRequest::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetEncryptedVolumeRequest.encrypted_volume_id)
  return _msg;
}
inline void GetEncryptedVolumeRequest::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetEncryptedVolumeRequest.encrypted_volume_id)
}

// -------------------------------------------------------------------

// EncryptedVolumeStatsRequest

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolumeStatsRequest::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolumeStatsRequest::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsRequest::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsRequest::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolumeStatsRequest::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolumeStatsRequest::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
}

// -------------------------------------------------------------------

// EncryptedVolumeStatsResponse

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolumeStatsResponse::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolumeStatsResponse::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsResponse::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsResponse::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolumeStatsResponse::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolumeStatsResponse::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
}

// string stats = 2;
inline void EncryptedVolumeStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& EncryptedVolumeStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedVolumeStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
}
inline std::string* EncryptedVolumeStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  return _s;
}
inline const std::string& EncryptedVolumeStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void EncryptedVolumeStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncryptedVolumeStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncryptedVolumeStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncryptedVolumeStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto
