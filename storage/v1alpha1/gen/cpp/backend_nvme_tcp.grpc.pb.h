// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_nvme_tcp.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
//
#ifndef GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED
#define GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED

#include "backend_nvme_tcp.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

// Back End (network-facing) APIs.
//
// NVMe/TCP and NVMe/RoCEv2
//
class NVMfRemoteControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.NVMfRemoteControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>> AsyncNVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>>(AsyncNVMfRemoteControllerConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>> PrepareAsyncNVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>>(PrepareAsyncNVMfRemoteControllerConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>> AsyncNVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>>(AsyncNVMfRemoteControllerDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>> PrepareAsyncNVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>>(PrepareAsyncNVMfRemoteControllerDisconnectRaw(context, request, cq));
    }
    virtual ::grpc::Status NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>> AsyncNVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>>(AsyncNVMfRemoteControllerResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>> PrepareAsyncNVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>>(PrepareAsyncNVMfRemoteControllerResetRaw(context, request, cq));
    }
    virtual ::grpc::Status NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>> AsyncNVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>>(AsyncNVMfRemoteControllerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>> PrepareAsyncNVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>>(PrepareAsyncNVMfRemoteControllerListRaw(context, request, cq));
    }
    virtual ::grpc::Status NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>> AsyncNVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>>(AsyncNVMfRemoteControllerGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>> PrepareAsyncNVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>>(PrepareAsyncNVMfRemoteControllerGetRaw(context, request, cq));
    }
    virtual ::grpc::Status NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>> AsyncNVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>>(AsyncNVMfRemoteControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>> PrepareAsyncNVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>>(PrepareAsyncNVMfRemoteControllerStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* AsyncNVMfRemoteControllerConnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* PrepareAsyncNVMfRemoteControllerConnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* AsyncNVMfRemoteControllerDisconnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* PrepareAsyncNVMfRemoteControllerDisconnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* AsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* PrepareAsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* AsyncNVMfRemoteControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* PrepareAsyncNVMfRemoteControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* AsyncNVMfRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* PrepareAsyncNVMfRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* AsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* PrepareAsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>> AsyncNVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>>(AsyncNVMfRemoteControllerConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>> PrepareAsyncNVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>>(PrepareAsyncNVMfRemoteControllerConnectRaw(context, request, cq));
    }
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>> AsyncNVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>>(AsyncNVMfRemoteControllerDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>> PrepareAsyncNVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>>(PrepareAsyncNVMfRemoteControllerDisconnectRaw(context, request, cq));
    }
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>> AsyncNVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>>(AsyncNVMfRemoteControllerResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>> PrepareAsyncNVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>>(PrepareAsyncNVMfRemoteControllerResetRaw(context, request, cq));
    }
    ::grpc::Status NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>> AsyncNVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>>(AsyncNVMfRemoteControllerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>> PrepareAsyncNVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>>(PrepareAsyncNVMfRemoteControllerListRaw(context, request, cq));
    }
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>> AsyncNVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>>(AsyncNVMfRemoteControllerGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>> PrepareAsyncNVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>>(PrepareAsyncNVMfRemoteControllerGetRaw(context, request, cq));
    }
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>> AsyncNVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>>(AsyncNVMfRemoteControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>> PrepareAsyncNVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>>(PrepareAsyncNVMfRemoteControllerStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerConnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerDisconnect(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerList(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerGet(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void NVMfRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* AsyncNVMfRemoteControllerConnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* PrepareAsyncNVMfRemoteControllerConnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* AsyncNVMfRemoteControllerDisconnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* PrepareAsyncNVMfRemoteControllerDisconnectRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* AsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* PrepareAsyncNVMfRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* AsyncNVMfRemoteControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* PrepareAsyncNVMfRemoteControllerListRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* AsyncNVMfRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* PrepareAsyncNVMfRemoteControllerGetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* AsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* PrepareAsyncNVMfRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerDisconnect_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerReset_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerList_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerGet_;
    const ::grpc::internal::RpcMethod rpcmethod_NVMfRemoteControllerStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response);
    virtual ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response);
    virtual ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response);
    virtual ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response);
    virtual ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response);
    virtual ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerConnect(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerDisconnect(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerReset(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerList(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerGet(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerStats(::grpc::ServerContext* context, ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NVMfRemoteControllerConnect<WithAsyncMethod_NVMfRemoteControllerDisconnect<WithAsyncMethod_NVMfRemoteControllerReset<WithAsyncMethod_NVMfRemoteControllerList<WithAsyncMethod_NVMfRemoteControllerGet<WithAsyncMethod_NVMfRemoteControllerStats<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* response) { return this->NVMfRemoteControllerConnect(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerConnect(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* response) { return this->NVMfRemoteControllerDisconnect(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerDisconnect(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerDisconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* response) { return this->NVMfRemoteControllerReset(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerReset(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerReset(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerListRequest, ::opi_api::storage::v1::NVMfRemoteControllerListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* response) { return this->NVMfRemoteControllerList(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerList(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerListRequest, ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerListRequest, ::opi_api::storage::v1::NVMfRemoteControllerListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerList(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* response) { return this->NVMfRemoteControllerGet(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerGet(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerGet(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* response) { return this->NVMfRemoteControllerStats(context, request, response); }));}
    void SetMessageAllocatorFor_NVMfRemoteControllerStats(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NVMfRemoteControllerConnect<WithCallbackMethod_NVMfRemoteControllerDisconnect<WithCallbackMethod_NVMfRemoteControllerReset<WithCallbackMethod_NVMfRemoteControllerList<WithCallbackMethod_NVMfRemoteControllerGet<WithCallbackMethod_NVMfRemoteControllerStats<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNVMfRemoteControllerStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerConnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerDisconnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerDisconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerList(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NVMfRemoteControllerStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NVMfRemoteControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerConnect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerConnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest,::opi_api::storage::v1::NVMfRemoteControllerConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerDisconnect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerDisconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerDisconnect(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest,::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerReset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerResetRequest, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest,::opi_api::storage::v1::NVMfRemoteControllerResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerListRequest, ::opi_api::storage::v1::NVMfRemoteControllerListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerListRequest, ::opi_api::storage::v1::NVMfRemoteControllerListResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerList(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerListRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerListRequest,::opi_api::storage::v1::NVMfRemoteControllerListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerGet() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerGetRequest, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerGetRequest, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerGet(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest,::opi_api::storage::v1::NVMfRemoteControllerGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NVMfRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NVMfRemoteControllerStats() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* streamer) {
                       return this->StreamedNVMfRemoteControllerStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NVMfRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NVMfRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNVMfRemoteControllerStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest,::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NVMfRemoteControllerConnect<WithStreamedUnaryMethod_NVMfRemoteControllerDisconnect<WithStreamedUnaryMethod_NVMfRemoteControllerReset<WithStreamedUnaryMethod_NVMfRemoteControllerList<WithStreamedUnaryMethod_NVMfRemoteControllerGet<WithStreamedUnaryMethod_NVMfRemoteControllerStats<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NVMfRemoteControllerConnect<WithStreamedUnaryMethod_NVMfRemoteControllerDisconnect<WithStreamedUnaryMethod_NVMfRemoteControllerReset<WithStreamedUnaryMethod_NVMfRemoteControllerList<WithStreamedUnaryMethod_NVMfRemoteControllerGet<WithStreamedUnaryMethod_NVMfRemoteControllerStats<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED
