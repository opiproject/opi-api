// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_nvme_tcp.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
//
#ifndef GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED
#define GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED

#include "backend_nvme_tcp.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

// Back End (network-facing) APIs. NVMe/TCP and NVMe/RoCEv2 protocols are covered by this service.
class NvmeRemoteControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.NvmeRemoteControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> AsyncCreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncCreateNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncCreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncCreateNvmeRemoteControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeRemoteControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> AsyncUpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncUpdateNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncUpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncUpdateNvmeRemoteControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>> AsyncListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>>(AsyncListNvmeRemoteControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>> PrepareAsyncListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>>(PrepareAsyncListNvmeRemoteControllersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> AsyncGetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncGetNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncGetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncGetNvmeRemoteControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncNvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncNvmeRemoteControllerResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncNvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncNvmeRemoteControllerResetRaw(context, request, cq));
    }
    virtual ::grpc::Status NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>> AsyncNvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>>(AsyncNvmeRemoteControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>> PrepareAsyncNvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>>(PrepareAsyncNvmeRemoteControllerStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>> AsyncListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>>(AsyncListNvmeRemoteNamespacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>> PrepareAsyncListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>>(PrepareAsyncListNvmeRemoteNamespacesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> AsyncCreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(AsyncCreateNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> PrepareAsyncCreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncCreateNvmePathRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmePathRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> AsyncUpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(AsyncUpdateNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> PrepareAsyncUpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncUpdateNvmePathRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::opi_api::storage::v1::ListNvmePathsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>> AsyncListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>>(AsyncListNvmePathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>> PrepareAsyncListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>>(PrepareAsyncListNvmePathsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> AsyncGetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(AsyncGetNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>> PrepareAsyncGetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncGetNvmePathRaw(context, request, cq));
    }
    virtual ::grpc::Status NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::opi_api::storage::v1::NvmePathStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>> AsyncNvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>>(AsyncNvmePathStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>> PrepareAsyncNvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>>(PrepareAsyncNvmePathStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* AsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* AsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* AsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* PrepareAsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* AsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* AsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* PrepareAsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* AsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* PrepareAsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* AsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* PrepareAsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* AsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* PrepareAsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>* AsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmePathsResponse>* PrepareAsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* AsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePath>* PrepareAsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>* AsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmePathStatsResponse>* PrepareAsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> AsyncCreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncCreateNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncCreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncCreateNvmeRemoteControllerRaw(context, request, cq));
    }
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeRemoteControllerRaw(context, request, cq));
    }
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> AsyncUpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncUpdateNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncUpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncUpdateNvmeRemoteControllerRaw(context, request, cq));
    }
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>> AsyncListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>>(AsyncListNvmeRemoteControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>> PrepareAsyncListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>>(PrepareAsyncListNvmeRemoteControllersRaw(context, request, cq));
    }
    ::grpc::Status GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::opi_api::storage::v1::NvmeRemoteController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> AsyncGetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(AsyncGetNvmeRemoteControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>> PrepareAsyncGetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>>(PrepareAsyncGetNvmeRemoteControllerRaw(context, request, cq));
    }
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncNvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncNvmeRemoteControllerResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncNvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncNvmeRemoteControllerResetRaw(context, request, cq));
    }
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>> AsyncNvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>>(AsyncNvmeRemoteControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>> PrepareAsyncNvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>>(PrepareAsyncNvmeRemoteControllerStatsRaw(context, request, cq));
    }
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>> AsyncListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>>(AsyncListNvmeRemoteNamespacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>> PrepareAsyncListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>>(PrepareAsyncListNvmeRemoteNamespacesRaw(context, request, cq));
    }
    ::grpc::Status CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> AsyncCreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(AsyncCreateNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> PrepareAsyncCreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncCreateNvmePathRaw(context, request, cq));
    }
    ::grpc::Status DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmePathRaw(context, request, cq));
    }
    ::grpc::Status UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> AsyncUpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(AsyncUpdateNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> PrepareAsyncUpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncUpdateNvmePathRaw(context, request, cq));
    }
    ::grpc::Status ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::opi_api::storage::v1::ListNvmePathsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>> AsyncListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>>(AsyncListNvmePathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>> PrepareAsyncListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>>(PrepareAsyncListNvmePathsRaw(context, request, cq));
    }
    ::grpc::Status GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::opi_api::storage::v1::NvmePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> AsyncGetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(AsyncGetNvmePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>> PrepareAsyncGetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>>(PrepareAsyncGetNvmePathRaw(context, request, cq));
    }
    ::grpc::Status NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::opi_api::storage::v1::NvmePathStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>> AsyncNvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>>(AsyncNvmePathStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>> PrepareAsyncNvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>>(PrepareAsyncNvmePathStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) override;
      void CreateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) override;
      void UpdateNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmeRemoteControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, std::function<void(::grpc::Status)>) override;
      void GetNvmeRemoteController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void NvmeRemoteControllerReset(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void NvmeRemoteControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmeRemoteNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) override;
      void CreateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) override;
      void UpdateNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmePaths(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, std::function<void(::grpc::Status)>) override;
      void GetNvmePath(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void NvmePathStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* AsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncCreateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* AsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncUpdateNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* AsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* PrepareAsyncListNvmeRemoteControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* AsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteController>* PrepareAsyncGetNvmeRemoteControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncNvmeRemoteControllerResetRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* AsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* PrepareAsyncNvmeRemoteControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* AsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* PrepareAsyncListNvmeRemoteNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* AsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* PrepareAsyncCreateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* AsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* PrepareAsyncUpdateNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>* AsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmePathsResponse>* PrepareAsyncListNvmePathsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* AsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePath>* PrepareAsyncGetNvmePathRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>* AsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmePathStatsResponse>* PrepareAsyncNvmePathStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNvmeRemoteController_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNvmeRemoteController_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNvmeRemoteController_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmeRemoteControllers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNvmeRemoteController_;
    const ::grpc::internal::RpcMethod rpcmethod_NvmeRemoteControllerReset_;
    const ::grpc::internal::RpcMethod rpcmethod_NvmeRemoteControllerStats_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmeRemoteNamespaces_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNvmePath_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNvmePath_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNvmePath_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmePaths_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNvmePath_;
    const ::grpc::internal::RpcMethod rpcmethod_NvmePathStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response);
    virtual ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response);
    virtual ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response);
    virtual ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response);
    virtual ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response);
    virtual ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response);
    virtual ::grpc::Status CreateNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response);
    virtual ::grpc::Status DeleteNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status UpdateNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response);
    virtual ::grpc::Status ListNvmePaths(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response);
    virtual ::grpc::Status GetNvmePath(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response);
    virtual ::grpc::Status NvmePathStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeRemoteController(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeRemoteController(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeRemoteController(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeRemoteControllers(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeRemoteController(::grpc::ServerContext* context, ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeRemoteController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmeRemoteControllerReset(::grpc::ServerContext* context, ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmeRemoteControllerStats(::grpc::ServerContext* context, ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeRemoteNamespaces(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmePath(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateNvmePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmePath(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmePath(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmePaths(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmePathsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmePathsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmePath(::grpc::ServerContext* context, ::opi_api::storage::v1::GetNvmePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmePathStats(::grpc::ServerContext* context, ::opi_api::storage::v1::NvmePathStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmePathStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateNvmeRemoteController<WithAsyncMethod_DeleteNvmeRemoteController<WithAsyncMethod_UpdateNvmeRemoteController<WithAsyncMethod_ListNvmeRemoteControllers<WithAsyncMethod_GetNvmeRemoteController<WithAsyncMethod_NvmeRemoteControllerReset<WithAsyncMethod_NvmeRemoteControllerStats<WithAsyncMethod_ListNvmeRemoteNamespaces<WithAsyncMethod_CreateNvmePath<WithAsyncMethod_DeleteNvmePath<WithAsyncMethod_UpdateNvmePath<WithAsyncMethod_ListNvmePaths<WithAsyncMethod_GetNvmePath<WithAsyncMethod_NvmePathStats<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) { return this->CreateNvmeRemoteController(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNvmeRemoteController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNvmeRemoteController(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNvmeRemoteController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) { return this->UpdateNvmeRemoteController(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNvmeRemoteController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* request, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* response) { return this->ListNvmeRemoteControllers(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmeRemoteControllers(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeRemoteControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* request, ::opi_api::storage::v1::NvmeRemoteController* response) { return this->GetNvmeRemoteController(context, request, response); }));}
    void SetMessageAllocatorFor_GetNvmeRemoteController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* request, ::google::protobuf::Empty* response) { return this->NvmeRemoteControllerReset(context, request, response); }));}
    void SetMessageAllocatorFor_NvmeRemoteControllerReset(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmeRemoteControllerReset(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* request, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* response) { return this->NvmeRemoteControllerStats(context, request, response); }));}
    void SetMessageAllocatorFor_NvmeRemoteControllerStats(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmeRemoteControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* response) { return this->ListNvmeRemoteNamespaces(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmeRemoteNamespaces(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeRemoteNamespaces(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) { return this->CreateNvmePath(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNvmePath(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteNvmePathRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNvmePath(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNvmePath(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) { return this->UpdateNvmePath(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNvmePath(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmePathsRequest* request, ::opi_api::storage::v1::ListNvmePathsResponse* response) { return this->ListNvmePaths(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmePaths(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmePaths(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetNvmePathRequest* request, ::opi_api::storage::v1::NvmePath* response) { return this->GetNvmePath(context, request, response); }));}
    void SetMessageAllocatorFor_GetNvmePath(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::NvmePathStatsRequest* request, ::opi_api::storage::v1::NvmePathStatsResponse* response) { return this->NvmePathStats(context, request, response); }));}
    void SetMessageAllocatorFor_NvmePathStats(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmePathStats(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateNvmeRemoteController<WithCallbackMethod_DeleteNvmeRemoteController<WithCallbackMethod_UpdateNvmeRemoteController<WithCallbackMethod_ListNvmeRemoteControllers<WithCallbackMethod_GetNvmeRemoteController<WithCallbackMethod_NvmeRemoteControllerReset<WithCallbackMethod_NvmeRemoteControllerStats<WithCallbackMethod_ListNvmeRemoteNamespaces<WithCallbackMethod_CreateNvmePath<WithCallbackMethod_DeleteNvmePath<WithCallbackMethod_UpdateNvmePath<WithCallbackMethod_ListNvmePaths<WithCallbackMethod_GetNvmePath<WithCallbackMethod_NvmePathStats<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeRemoteControllers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmeRemoteControllerReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmeRemoteControllerStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeRemoteNamespaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmePaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNvmePathStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNvmeRemoteController(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNvmeRemoteController(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNvmeRemoteController(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmeRemoteControllers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeRemoteControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNvmeRemoteController(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeRemoteController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NvmeRemoteControllerReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmeRemoteControllerReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NvmeRemoteControllerStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmeRemoteControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmeRemoteNamespaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeRemoteNamespaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNvmePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNvmePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNvmePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmePaths(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmePaths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNvmePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NvmePathStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NvmePathStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNvmeRemoteController() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* streamer) {
                       return this->StreamedCreateNvmeRemoteController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateNvmeRemoteControllerRequest,::opi_api::storage::v1::NvmeRemoteController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNvmeRemoteController() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNvmeRemoteController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteNvmeRemoteControllerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNvmeRemoteController() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* streamer) {
                       return this->StreamedUpdateNvmeRemoteController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateNvmeRemoteControllerRequest,::opi_api::storage::v1::NvmeRemoteController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmeRemoteControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmeRemoteControllers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmeRemoteControllersRequest, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* streamer) {
                       return this->StreamedListNvmeRemoteControllers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmeRemoteControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmeRemoteControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmeRemoteControllers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmeRemoteControllersRequest,::opi_api::storage::v1::ListNvmeRemoteControllersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNvmeRemoteController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNvmeRemoteController() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetNvmeRemoteControllerRequest, ::opi_api::storage::v1::NvmeRemoteController>* streamer) {
                       return this->StreamedGetNvmeRemoteController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNvmeRemoteController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNvmeRemoteController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeRemoteControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNvmeRemoteController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetNvmeRemoteControllerRequest,::opi_api::storage::v1::NvmeRemoteController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NvmeRemoteControllerReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NvmeRemoteControllerReset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NvmeRemoteControllerResetRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedNvmeRemoteControllerReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NvmeRemoteControllerReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NvmeRemoteControllerReset(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerResetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNvmeRemoteControllerReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NvmeRemoteControllerResetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NvmeRemoteControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NvmeRemoteControllerStats() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* streamer) {
                       return this->StreamedNvmeRemoteControllerStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NvmeRemoteControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NvmeRemoteControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest* /*request*/, ::opi_api::storage::v1::NvmeRemoteControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNvmeRemoteControllerStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NvmeRemoteControllerStatsRequest,::opi_api::storage::v1::NvmeRemoteControllerStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmeRemoteNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmeRemoteNamespaces() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* streamer) {
                       return this->StreamedListNvmeRemoteNamespaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmeRemoteNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmeRemoteNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmeRemoteNamespaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmeRemoteNamespacesRequest,::opi_api::storage::v1::ListNvmeRemoteNamespacesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNvmePath() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateNvmePathRequest, ::opi_api::storage::v1::NvmePath>* streamer) {
                       return this->StreamedCreateNvmePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNvmePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateNvmePathRequest,::opi_api::storage::v1::NvmePath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNvmePath() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteNvmePathRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNvmePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmePathRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNvmePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteNvmePathRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNvmePath() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateNvmePathRequest, ::opi_api::storage::v1::NvmePath>* streamer) {
                       return this->StreamedUpdateNvmePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNvmePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateNvmePathRequest,::opi_api::storage::v1::NvmePath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmePaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmePaths() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmePathsRequest, ::opi_api::storage::v1::ListNvmePathsResponse>* streamer) {
                       return this->StreamedListNvmePaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmePaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmePaths(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmePathsRequest* /*request*/, ::opi_api::storage::v1::ListNvmePathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmePaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmePathsRequest,::opi_api::storage::v1::ListNvmePathsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNvmePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNvmePath() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetNvmePathRequest, ::opi_api::storage::v1::NvmePath>* streamer) {
                       return this->StreamedGetNvmePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNvmePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNvmePath(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmePathRequest* /*request*/, ::opi_api::storage::v1::NvmePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNvmePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetNvmePathRequest,::opi_api::storage::v1::NvmePath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NvmePathStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NvmePathStats() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::NvmePathStatsRequest, ::opi_api::storage::v1::NvmePathStatsResponse>* streamer) {
                       return this->StreamedNvmePathStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NvmePathStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NvmePathStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::NvmePathStatsRequest* /*request*/, ::opi_api::storage::v1::NvmePathStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNvmePathStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::NvmePathStatsRequest,::opi_api::storage::v1::NvmePathStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateNvmeRemoteController<WithStreamedUnaryMethod_DeleteNvmeRemoteController<WithStreamedUnaryMethod_UpdateNvmeRemoteController<WithStreamedUnaryMethod_ListNvmeRemoteControllers<WithStreamedUnaryMethod_GetNvmeRemoteController<WithStreamedUnaryMethod_NvmeRemoteControllerReset<WithStreamedUnaryMethod_NvmeRemoteControllerStats<WithStreamedUnaryMethod_ListNvmeRemoteNamespaces<WithStreamedUnaryMethod_CreateNvmePath<WithStreamedUnaryMethod_DeleteNvmePath<WithStreamedUnaryMethod_UpdateNvmePath<WithStreamedUnaryMethod_ListNvmePaths<WithStreamedUnaryMethod_GetNvmePath<WithStreamedUnaryMethod_NvmePathStats<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateNvmeRemoteController<WithStreamedUnaryMethod_DeleteNvmeRemoteController<WithStreamedUnaryMethod_UpdateNvmeRemoteController<WithStreamedUnaryMethod_ListNvmeRemoteControllers<WithStreamedUnaryMethod_GetNvmeRemoteController<WithStreamedUnaryMethod_NvmeRemoteControllerReset<WithStreamedUnaryMethod_NvmeRemoteControllerStats<WithStreamedUnaryMethod_ListNvmeRemoteNamespaces<WithStreamedUnaryMethod_CreateNvmePath<WithStreamedUnaryMethod_DeleteNvmePath<WithStreamedUnaryMethod_UpdateNvmePath<WithStreamedUnaryMethod_ListNvmePaths<WithStreamedUnaryMethod_GetNvmePath<WithStreamedUnaryMethod_NvmePathStats<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_backend_5fnvme_5ftcp_2eproto__INCLUDED
