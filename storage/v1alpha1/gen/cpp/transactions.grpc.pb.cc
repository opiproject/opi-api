// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transactions.proto

#include "transactions.pb.h"
#include "transactions.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* TransactionService_method_names[] = {
  "/opi_api.storage.v1.TransactionService/CreateTransaction",
  "/opi_api.storage.v1.TransactionService/DeleteTransaction",
  "/opi_api.storage.v1.TransactionService/ExecuteTransaction",
};

std::unique_ptr< TransactionService::Stub> TransactionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TransactionService::Stub> stub(new TransactionService::Stub(channel, options));
  return stub;
}

TransactionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateTransaction_(TransactionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTransaction_(TransactionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteTransaction_(TransactionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TransactionService::Stub::CreateTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateTransactionRequest& request, ::opi_api::storage::v1::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateTransactionRequest, ::opi_api::storage::v1::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTransaction_, context, request, response);
}

void TransactionService::Stub::async::CreateTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateTransactionRequest* request, ::opi_api::storage::v1::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateTransactionRequest, ::opi_api::storage::v1::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction_, context, request, response, std::move(f));
}

void TransactionService::Stub::async::CreateTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateTransactionRequest* request, ::opi_api::storage::v1::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Transaction>* TransactionService::Stub::PrepareAsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::Transaction, ::opi_api::storage::v1::CreateTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Transaction>* TransactionService::Stub::AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TransactionService::Stub::DeleteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTransaction_, context, request, response);
}

void TransactionService::Stub::async::DeleteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTransaction_, context, request, response, std::move(f));
}

void TransactionService::Stub::async::DeleteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TransactionService::Stub::PrepareAsyncDeleteTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TransactionService::Stub::AsyncDeleteTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TransactionService::Stub::ExecuteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ExecuteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteTransaction_, context, request, response);
}

void TransactionService::Stub::async::ExecuteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ExecuteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTransaction_, context, request, response, std::move(f));
}

void TransactionService::Stub::async::ExecuteTransaction(::grpc::ClientContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TransactionService::Stub::PrepareAsyncExecuteTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::ExecuteTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TransactionService::Stub::AsyncExecuteTransactionRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

TransactionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TransactionService::Service, ::opi_api::storage::v1::CreateTransactionRequest, ::opi_api::storage::v1::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateTransactionRequest* req,
             ::opi_api::storage::v1::Transaction* resp) {
               return service->CreateTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TransactionService::Service, ::opi_api::storage::v1::DeleteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteTransactionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TransactionService::Service, ::opi_api::storage::v1::ExecuteTransactionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ExecuteTransactionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ExecuteTransaction(ctx, req, resp);
             }, this)));
}

TransactionService::Service::~Service() {
}

::grpc::Status TransactionService::Service::CreateTransaction(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateTransactionRequest* request, ::opi_api::storage::v1::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionService::Service::DeleteTransaction(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteTransactionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionService::Service::ExecuteTransaction(::grpc::ServerContext* context, const ::opi_api::storage::v1::ExecuteTransactionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

