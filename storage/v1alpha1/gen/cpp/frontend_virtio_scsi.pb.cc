// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_scsi.proto

#include "frontend_virtio_scsi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace storage {
namespace v1 {
constexpr VirtioScsiController::VirtioScsiController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , pcie_id_(nullptr){}
struct VirtioScsiControllerDefaultTypeInternal {
  constexpr VirtioScsiControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerDefaultTypeInternal() {}
  union {
    VirtioScsiController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerDefaultTypeInternal _VirtioScsiController_default_instance_;
constexpr VirtioScsiLun::VirtioScsiLun(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , controller_id_(nullptr){}
struct VirtioScsiLunDefaultTypeInternal {
  constexpr VirtioScsiLunDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunDefaultTypeInternal() {}
  union {
    VirtioScsiLun _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunDefaultTypeInternal _VirtioScsiLun_default_instance_;
constexpr CreateVirtioScsiControllerRequest::CreateVirtioScsiControllerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(nullptr){}
struct CreateVirtioScsiControllerRequestDefaultTypeInternal {
  constexpr CreateVirtioScsiControllerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVirtioScsiControllerRequestDefaultTypeInternal() {}
  union {
    CreateVirtioScsiControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVirtioScsiControllerRequestDefaultTypeInternal _CreateVirtioScsiControllerRequest_default_instance_;
constexpr DeleteVirtioScsiControllerRequest::DeleteVirtioScsiControllerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr){}
struct DeleteVirtioScsiControllerRequestDefaultTypeInternal {
  constexpr DeleteVirtioScsiControllerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVirtioScsiControllerRequestDefaultTypeInternal() {}
  union {
    DeleteVirtioScsiControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVirtioScsiControllerRequestDefaultTypeInternal _DeleteVirtioScsiControllerRequest_default_instance_;
constexpr UpdateVirtioScsiControllerRequest::UpdateVirtioScsiControllerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(nullptr){}
struct UpdateVirtioScsiControllerRequestDefaultTypeInternal {
  constexpr UpdateVirtioScsiControllerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVirtioScsiControllerRequestDefaultTypeInternal() {}
  union {
    UpdateVirtioScsiControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVirtioScsiControllerRequestDefaultTypeInternal _UpdateVirtioScsiControllerRequest_default_instance_;
constexpr ListVirtioScsiControllerRequest::ListVirtioScsiControllerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListVirtioScsiControllerRequestDefaultTypeInternal {
  constexpr ListVirtioScsiControllerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVirtioScsiControllerRequestDefaultTypeInternal() {}
  union {
    ListVirtioScsiControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVirtioScsiControllerRequestDefaultTypeInternal _ListVirtioScsiControllerRequest_default_instance_;
constexpr ListVirtioScsiControllerResponse::ListVirtioScsiControllerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controllers_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListVirtioScsiControllerResponseDefaultTypeInternal {
  constexpr ListVirtioScsiControllerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVirtioScsiControllerResponseDefaultTypeInternal() {}
  union {
    ListVirtioScsiControllerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVirtioScsiControllerResponseDefaultTypeInternal _ListVirtioScsiControllerResponse_default_instance_;
constexpr GetVirtioScsiControllerRequest::GetVirtioScsiControllerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr){}
struct GetVirtioScsiControllerRequestDefaultTypeInternal {
  constexpr GetVirtioScsiControllerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVirtioScsiControllerRequestDefaultTypeInternal() {}
  union {
    GetVirtioScsiControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVirtioScsiControllerRequestDefaultTypeInternal _GetVirtioScsiControllerRequest_default_instance_;
constexpr VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr){}
struct VirtioScsiControllerStatsRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerStatsRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerStatsRequestDefaultTypeInternal _VirtioScsiControllerStatsRequest_default_instance_;
constexpr VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct VirtioScsiControllerStatsResponseDefaultTypeInternal {
  constexpr VirtioScsiControllerStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerStatsResponseDefaultTypeInternal() {}
  union {
    VirtioScsiControllerStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerStatsResponseDefaultTypeInternal _VirtioScsiControllerStatsResponse_default_instance_;
constexpr CreateVirtioScsiLunRequest::CreateVirtioScsiLunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lun_(nullptr){}
struct CreateVirtioScsiLunRequestDefaultTypeInternal {
  constexpr CreateVirtioScsiLunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVirtioScsiLunRequestDefaultTypeInternal() {}
  union {
    CreateVirtioScsiLunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVirtioScsiLunRequestDefaultTypeInternal _CreateVirtioScsiLunRequest_default_instance_;
constexpr DeleteVirtioScsiLunRequest::DeleteVirtioScsiLunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr)
  , lun_id_(nullptr){}
struct DeleteVirtioScsiLunRequestDefaultTypeInternal {
  constexpr DeleteVirtioScsiLunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVirtioScsiLunRequestDefaultTypeInternal() {}
  union {
    DeleteVirtioScsiLunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVirtioScsiLunRequestDefaultTypeInternal _DeleteVirtioScsiLunRequest_default_instance_;
constexpr UpdateVirtioScsiLunRequest::UpdateVirtioScsiLunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lun_(nullptr){}
struct UpdateVirtioScsiLunRequestDefaultTypeInternal {
  constexpr UpdateVirtioScsiLunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVirtioScsiLunRequestDefaultTypeInternal() {}
  union {
    UpdateVirtioScsiLunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVirtioScsiLunRequestDefaultTypeInternal _UpdateVirtioScsiLunRequest_default_instance_;
constexpr ListVirtioScsiLunRequest::ListVirtioScsiLunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_id_(nullptr)
  , page_size_(0){}
struct ListVirtioScsiLunRequestDefaultTypeInternal {
  constexpr ListVirtioScsiLunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVirtioScsiLunRequestDefaultTypeInternal() {}
  union {
    ListVirtioScsiLunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVirtioScsiLunRequestDefaultTypeInternal _ListVirtioScsiLunRequest_default_instance_;
constexpr ListVirtioScsiLunResponse::ListVirtioScsiLunResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : luns_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListVirtioScsiLunResponseDefaultTypeInternal {
  constexpr ListVirtioScsiLunResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVirtioScsiLunResponseDefaultTypeInternal() {}
  union {
    ListVirtioScsiLunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVirtioScsiLunResponseDefaultTypeInternal _ListVirtioScsiLunResponse_default_instance_;
constexpr GetVirtioScsiLunRequest::GetVirtioScsiLunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr)
  , lun_id_(nullptr){}
struct GetVirtioScsiLunRequestDefaultTypeInternal {
  constexpr GetVirtioScsiLunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVirtioScsiLunRequestDefaultTypeInternal() {}
  union {
    GetVirtioScsiLunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVirtioScsiLunRequestDefaultTypeInternal _GetVirtioScsiLunRequest_default_instance_;
constexpr VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(nullptr)
  , lun_id_(nullptr){}
struct VirtioScsiLunStatsRequestDefaultTypeInternal {
  constexpr VirtioScsiLunStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunStatsRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunStatsRequestDefaultTypeInternal _VirtioScsiLunStatsRequest_default_instance_;
constexpr VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct VirtioScsiLunStatsResponseDefaultTypeInternal {
  constexpr VirtioScsiLunStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunStatsResponseDefaultTypeInternal() {}
  union {
    VirtioScsiLunStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunStatsResponseDefaultTypeInternal _VirtioScsiLunStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frontend_5fvirtio_5fscsi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frontend_5fvirtio_5fscsi_2eproto = nullptr;

const uint32_t TableStruct_frontend_5fvirtio_5fscsi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, pcie_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, bdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateVirtioScsiControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateVirtioScsiControllerRequest, controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteVirtioScsiControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteVirtioScsiControllerRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateVirtioScsiControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateVirtioScsiControllerRequest, controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerResponse, controllers_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiControllerResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetVirtioScsiControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetVirtioScsiControllerRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateVirtioScsiLunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateVirtioScsiLunRequest, lun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteVirtioScsiLunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteVirtioScsiLunRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteVirtioScsiLunRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateVirtioScsiLunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateVirtioScsiLunRequest, lun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunResponse, luns_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListVirtioScsiLunResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetVirtioScsiLunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetVirtioScsiLunRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetVirtioScsiLunRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiController)},
  { 8, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLun)},
  { 17, -1, -1, sizeof(::opi_api::storage::v1::CreateVirtioScsiControllerRequest)},
  { 24, -1, -1, sizeof(::opi_api::storage::v1::DeleteVirtioScsiControllerRequest)},
  { 31, -1, -1, sizeof(::opi_api::storage::v1::UpdateVirtioScsiControllerRequest)},
  { 38, -1, -1, sizeof(::opi_api::storage::v1::ListVirtioScsiControllerRequest)},
  { 46, -1, -1, sizeof(::opi_api::storage::v1::ListVirtioScsiControllerResponse)},
  { 54, -1, -1, sizeof(::opi_api::storage::v1::GetVirtioScsiControllerRequest)},
  { 61, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerStatsRequest)},
  { 68, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerStatsResponse)},
  { 76, -1, -1, sizeof(::opi_api::storage::v1::CreateVirtioScsiLunRequest)},
  { 83, -1, -1, sizeof(::opi_api::storage::v1::DeleteVirtioScsiLunRequest)},
  { 91, -1, -1, sizeof(::opi_api::storage::v1::UpdateVirtioScsiLunRequest)},
  { 98, -1, -1, sizeof(::opi_api::storage::v1::ListVirtioScsiLunRequest)},
  { 107, -1, -1, sizeof(::opi_api::storage::v1::ListVirtioScsiLunResponse)},
  { 115, -1, -1, sizeof(::opi_api::storage::v1::GetVirtioScsiLunRequest)},
  { 123, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunStatsRequest)},
  { 131, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunStatsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_CreateVirtioScsiControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_DeleteVirtioScsiControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_UpdateVirtioScsiControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListVirtioScsiControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListVirtioScsiControllerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_GetVirtioScsiControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_CreateVirtioScsiLunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_DeleteVirtioScsiLunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_UpdateVirtioScsiLunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListVirtioScsiLunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListVirtioScsiLunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_GetVirtioScsiLunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunStatsResponse_default_instance_),
};

const char descriptor_table_protodef_frontend_5fvirtio_5fscsi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032frontend_virtio_scsi.proto\022\022opi_api.st"
  "orage.v1\032\017opicommon.proto\032\020object_key.pr"
  "oto\032\033google/protobuf/empty.proto\032\034google"
  "/api/annotations.proto\"r\n\024VirtioScsiCont"
  "roller\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.O"
  "bjectKey\0220\n\007pcie_id\030\002 \001(\0132\037.opi_api.stor"
  "age.v1.PciEndpoint\"|\n\rVirtioScsiLun\022(\n\002i"
  "d\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\0223\n"
  "\rcontroller_id\030\002 \001(\0132\034.opi_api.common.v1"
  ".ObjectKey\022\014\n\004bdev\030\003 \001(\t\"a\n!CreateVirtio"
  "ScsiControllerRequest\022<\n\ncontroller\030\001 \001("
  "\0132(.opi_api.storage.v1.VirtioScsiControl"
  "ler\"X\n!DeleteVirtioScsiControllerRequest"
  "\0223\n\rcontroller_id\030\001 \001(\0132\034.opi_api.common"
  ".v1.ObjectKey\"a\n!UpdateVirtioScsiControl"
  "lerRequest\022<\n\ncontroller\030\001 \001(\0132(.opi_api"
  ".storage.v1.VirtioScsiController\"H\n\037List"
  "VirtioScsiControllerRequest\022\021\n\tpage_size"
  "\030\001 \001(\005\022\022\n\npage_token\030\002 \001(\t\"z\n ListVirtio"
  "ScsiControllerResponse\022=\n\013controllers\030\001 "
  "\003(\0132(.opi_api.storage.v1.VirtioScsiContr"
  "oller\022\027\n\017next_page_token\030\002 \001(\t\"U\n\036GetVir"
  "tioScsiControllerRequest\0223\n\rcontroller_i"
  "d\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\"W\n"
  " VirtioScsiControllerStatsRequest\0223\n\rcon"
  "troller_id\030\001 \001(\0132\034.opi_api.common.v1.Obj"
  "ectKey\"\\\n!VirtioScsiControllerStatsRespo"
  "nse\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.Obje"
  "ctKey\022\r\n\005stats\030\002 \001(\t\"L\n\032CreateVirtioScsi"
  "LunRequest\022.\n\003lun\030\001 \001(\0132!.opi_api.storag"
  "e.v1.VirtioScsiLun\"\177\n\032DeleteVirtioScsiLu"
  "nRequest\0223\n\rcontroller_id\030\001 \001(\0132\034.opi_ap"
  "i.common.v1.ObjectKey\022,\n\006lun_id\030\002 \001(\0132\034."
  "opi_api.common.v1.ObjectKey\"L\n\032UpdateVir"
  "tioScsiLunRequest\022.\n\003lun\030\001 \001(\0132!.opi_api"
  ".storage.v1.VirtioScsiLun\"v\n\030ListVirtioS"
  "csiLunRequest\0223\n\rcontroller_id\030\001 \001(\0132\034.o"
  "pi_api.common.v1.ObjectKey\022\021\n\tpage_size\030"
  "\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"e\n\031ListVirtioS"
  "csiLunResponse\022/\n\004luns\030\001 \003(\0132!.opi_api.s"
  "torage.v1.VirtioScsiLun\022\027\n\017next_page_tok"
  "en\030\002 \001(\t\"|\n\027GetVirtioScsiLunRequest\0223\n\rc"
  "ontroller_id\030\001 \001(\0132\034.opi_api.common.v1.O"
  "bjectKey\022,\n\006lun_id\030\002 \001(\0132\034.opi_api.commo"
  "n.v1.ObjectKey\"~\n\031VirtioScsiLunStatsRequ"
  "est\0223\n\rcontroller_id\030\001 \001(\0132\034.opi_api.com"
  "mon.v1.ObjectKey\022,\n\006lun_id\030\002 \001(\0132\034.opi_a"
  "pi.common.v1.ObjectKey\"U\n\032VirtioScsiLunS"
  "tatsResponse\022(\n\002id\030\001 \001(\0132\034.opi_api.commo"
  "n.v1.ObjectKey\022\r\n\005stats\030\002 \001(\t2\272\016\n\031Fronte"
  "ndVirtioScsiService\022\252\001\n\032CreateVirtioScsi"
  "Controller\0225.opi_api.storage.v1.CreateVi"
  "rtioScsiControllerRequest\032(.opi_api.stor"
  "age.v1.VirtioScsiController\"+\202\323\344\223\002%\"\023/v1"
  "/virtioscsictrls:\016virtioscsictrl\022\231\001\n\032Del"
  "eteVirtioScsiController\0225.opi_api.storag"
  "e.v1.DeleteVirtioScsiControllerRequest\032\026"
  ".google.protobuf.Empty\",\202\323\344\223\002&*$/v1/virt"
  "ioscsictrls/{virtioscsictrl}\022\252\001\n\032UpdateV"
  "irtioScsiController\0225.opi_api.storage.v1"
  ".UpdateVirtioScsiControllerRequest\032(.opi"
  "_api.storage.v1.VirtioScsiController\"+\202\323"
  "\344\223\002%2\023/v1/virtioscsictrls:\016virtioscsictr"
  "l\022\242\001\n\030ListVirtioScsiController\0223.opi_api"
  ".storage.v1.ListVirtioScsiControllerRequ"
  "est\0324.opi_api.storage.v1.ListVirtioScsiC"
  "ontrollerResponse\"\033\202\323\344\223\002\025\022\023/v1/virtioscs"
  "ictrls\022\245\001\n\027GetVirtioScsiController\0222.opi"
  "_api.storage.v1.GetVirtioScsiControllerR"
  "equest\032(.opi_api.storage.v1.VirtioScsiCo"
  "ntroller\",\202\323\344\223\002&\022$/v1/virtioscsictrls/{v"
  "irtioscsictrl}\022\212\001\n\031VirtioScsiControllerS"
  "tats\0224.opi_api.storage.v1.VirtioScsiCont"
  "rollerStatsRequest\0325.opi_api.storage.v1."
  "VirtioScsiControllerStatsResponse\"\000\022\223\001\n\023"
  "CreateVirtioScsiLun\022..opi_api.storage.v1"
  ".CreateVirtioScsiLunRequest\032!.opi_api.st"
  "orage.v1.VirtioScsiLun\")\202\323\344\223\002#\"\022/v1/virt"
  "ioscsiluns:\rvirtioscsilun\022\211\001\n\023DeleteVirt"
  "ioScsiLun\022..opi_api.storage.v1.DeleteVir"
  "tioScsiLunRequest\032\026.google.protobuf.Empt"
  "y\"*\202\323\344\223\002$*\"/v1/virtioscsiluns/{virtioscs"
  "ilun}\022\223\001\n\023UpdateVirtioScsiLun\022..opi_api."
  "storage.v1.UpdateVirtioScsiLunRequest\032!."
  "opi_api.storage.v1.VirtioScsiLun\")\202\323\344\223\002#"
  "2\022/v1/virtioscsiluns:\rvirtioscsilun\022\214\001\n\021"
  "ListVirtioScsiLun\022,.opi_api.storage.v1.L"
  "istVirtioScsiLunRequest\032-.opi_api.storag"
  "e.v1.ListVirtioScsiLunResponse\"\032\202\323\344\223\002\024\022\022"
  "/v1/virtioscsiluns\022\216\001\n\020GetVirtioScsiLun\022"
  "+.opi_api.storage.v1.GetVirtioScsiLunReq"
  "uest\032!.opi_api.storage.v1.VirtioScsiLun\""
  "*\202\323\344\223\002$\022\"/v1/virtioscsiluns/{virtioscsil"
  "un}\022u\n\022VirtioScsiLunStats\022-.opi_api.stor"
  "age.v1.VirtioScsiLunStatsRequest\032..opi_a"
  "pi.storage.v1.VirtioScsiLunStatsResponse"
  "\"\000Bf\n\022opi_api.storage.v1B\027FrontendVirtio"
  "ScsiProtoP\001Z5github.com/opiproject/opi-a"
  "pi/storage/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frontend_5fvirtio_5fscsi_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
  &::descriptor_table_opicommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fscsi_2eproto = {
  false, false, 3954, descriptor_table_protodef_frontend_5fvirtio_5fscsi_2eproto, "frontend_virtio_scsi.proto", 
  &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once, descriptor_table_frontend_5fvirtio_5fscsi_2eproto_deps, 4, 18,
  schemas, file_default_instances, TableStruct_frontend_5fvirtio_5fscsi_2eproto::offsets,
  file_level_metadata_frontend_5fvirtio_5fscsi_2eproto, file_level_enum_descriptors_frontend_5fvirtio_5fscsi_2eproto, file_level_service_descriptors_frontend_5fvirtio_5fscsi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter() {
  return &descriptor_table_frontend_5fvirtio_5fscsi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_frontend_5fvirtio_5fscsi_2eproto(&descriptor_table_frontend_5fvirtio_5fscsi_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioScsiController::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VirtioScsiController* msg);
  static const ::opi_api::storage::v1::PciEndpoint& pcie_id(const VirtioScsiController* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiController::_Internal::id(const VirtioScsiController* msg) {
  return *msg->id_;
}
const ::opi_api::storage::v1::PciEndpoint&
VirtioScsiController::_Internal::pcie_id(const VirtioScsiController* msg) {
  return *msg->pcie_id_;
}
void VirtioScsiController::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void VirtioScsiController::clear_pcie_id() {
  if (GetArenaForAllocation() == nullptr && pcie_id_ != nullptr) {
    delete pcie_id_;
  }
  pcie_id_ = nullptr;
}
VirtioScsiController::VirtioScsiController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiController)
}
VirtioScsiController::VirtioScsiController(const VirtioScsiController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_pcie_id()) {
    pcie_id_ = new ::opi_api::storage::v1::PciEndpoint(*from.pcie_id_);
  } else {
    pcie_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiController)
}

inline void VirtioScsiController::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pcie_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pcie_id_));
}

VirtioScsiController::~VirtioScsiController() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiController)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete pcie_id_;
}

void VirtioScsiController::ArenaDtor(void* object) {
  VirtioScsiController* _this = reinterpret_cast< VirtioScsiController* >(object);
  (void)_this;
}
void VirtioScsiController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiController::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pcie_id_ != nullptr) {
    delete pcie_id_;
  }
  pcie_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.PciEndpoint pcie_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcie_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2;
  if (this->_internal_has_pcie_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pcie_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiController)
  return target;
}

size_t VirtioScsiController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2;
  if (this->_internal_has_pcie_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcie_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiController::GetClassData() const { return &_class_data_; }

void VirtioScsiController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiController *>(to)->MergeFrom(
      static_cast<const VirtioScsiController &>(from));
}


void VirtioScsiController::MergeFrom(const VirtioScsiController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiController)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_pcie_id()) {
    _internal_mutable_pcie_id()->::opi_api::storage::v1::PciEndpoint::MergeFrom(from._internal_pcie_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiController::CopyFrom(const VirtioScsiController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiController::IsInitialized() const {
  return true;
}

void VirtioScsiController::InternalSwap(VirtioScsiController* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiController, pcie_id_)
      + sizeof(VirtioScsiController::pcie_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiController, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiController::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[0]);
}

// ===================================================================

class VirtioScsiLun::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VirtioScsiLun* msg);
  static const ::opi_api::common::v1::ObjectKey& controller_id(const VirtioScsiLun* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiLun::_Internal::id(const VirtioScsiLun* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
VirtioScsiLun::_Internal::controller_id(const VirtioScsiLun* msg) {
  return *msg->controller_id_;
}
void VirtioScsiLun::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void VirtioScsiLun::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
VirtioScsiLun::VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLun)
}
VirtioScsiLun::VirtioScsiLun(const VirtioScsiLun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bdev().empty()) {
    bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdev(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLun)
}

inline void VirtioScsiLun::SharedCtor() {
bdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(controller_id_));
}

VirtioScsiLun::~VirtioScsiLun() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLun)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLun::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bdev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete controller_id_;
}

void VirtioScsiLun::ArenaDtor(void* object) {
  VirtioScsiLun* _this = reinterpret_cast< VirtioScsiLun* >(object);
  (void)_this;
}
void VirtioScsiLun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLun::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLun)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdev_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey controller_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bdev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bdev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiLun.bdev"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLun::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLun)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey controller_id = 2;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controller_id(this), target, stream);
  }

  // string bdev = 3;
  if (!this->_internal_bdev().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdev().data(), static_cast<int>(this->_internal_bdev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiLun.bdev");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLun)
  return target;
}

size_t VirtioScsiLun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLun)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bdev = 3;
  if (!this->_internal_bdev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdev());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey controller_id = 2;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLun::GetClassData() const { return &_class_data_; }

void VirtioScsiLun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLun *>(to)->MergeFrom(
      static_cast<const VirtioScsiLun &>(from));
}


void VirtioScsiLun::MergeFrom(const VirtioScsiLun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLun)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bdev().empty()) {
    _internal_set_bdev(from._internal_bdev());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLun::CopyFrom(const VirtioScsiLun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLun::IsInitialized() const {
  return true;
}

void VirtioScsiLun::InternalSwap(VirtioScsiLun* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bdev_, lhs_arena,
      &other->bdev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLun, controller_id_)
      + sizeof(VirtioScsiLun::controller_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLun, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLun::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[1]);
}

// ===================================================================

class CreateVirtioScsiControllerRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiController& controller(const CreateVirtioScsiControllerRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiController&
CreateVirtioScsiControllerRequest::_Internal::controller(const CreateVirtioScsiControllerRequest* msg) {
  return *msg->controller_;
}
CreateVirtioScsiControllerRequest::CreateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
}
CreateVirtioScsiControllerRequest::CreateVirtioScsiControllerRequest(const CreateVirtioScsiControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller()) {
    controller_ = new ::opi_api::storage::v1::VirtioScsiController(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
}

inline void CreateVirtioScsiControllerRequest::SharedCtor() {
controller_ = nullptr;
}

CreateVirtioScsiControllerRequest::~CreateVirtioScsiControllerRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateVirtioScsiControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_;
}

void CreateVirtioScsiControllerRequest::ArenaDtor(void* object) {
  CreateVirtioScsiControllerRequest* _this = reinterpret_cast< CreateVirtioScsiControllerRequest* >(object);
  (void)_this;
}
void CreateVirtioScsiControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVirtioScsiControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVirtioScsiControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVirtioScsiControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiController controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVirtioScsiControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  return target;
}

size_t CreateVirtioScsiControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVirtioScsiControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateVirtioScsiControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVirtioScsiControllerRequest::GetClassData() const { return &_class_data_; }

void CreateVirtioScsiControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateVirtioScsiControllerRequest *>(to)->MergeFrom(
      static_cast<const CreateVirtioScsiControllerRequest &>(from));
}


void CreateVirtioScsiControllerRequest::MergeFrom(const CreateVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller()) {
    _internal_mutable_controller()->::opi_api::storage::v1::VirtioScsiController::MergeFrom(from._internal_controller());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVirtioScsiControllerRequest::CopyFrom(const CreateVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVirtioScsiControllerRequest::IsInitialized() const {
  return true;
}

void CreateVirtioScsiControllerRequest::InternalSwap(CreateVirtioScsiControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_, other->controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVirtioScsiControllerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[2]);
}

// ===================================================================

class DeleteVirtioScsiControllerRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const DeleteVirtioScsiControllerRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
DeleteVirtioScsiControllerRequest::_Internal::controller_id(const DeleteVirtioScsiControllerRequest* msg) {
  return *msg->controller_id_;
}
void DeleteVirtioScsiControllerRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
DeleteVirtioScsiControllerRequest::DeleteVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
}
DeleteVirtioScsiControllerRequest::DeleteVirtioScsiControllerRequest(const DeleteVirtioScsiControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
}

inline void DeleteVirtioScsiControllerRequest::SharedCtor() {
controller_id_ = nullptr;
}

DeleteVirtioScsiControllerRequest::~DeleteVirtioScsiControllerRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteVirtioScsiControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
}

void DeleteVirtioScsiControllerRequest::ArenaDtor(void* object) {
  DeleteVirtioScsiControllerRequest* _this = reinterpret_cast< DeleteVirtioScsiControllerRequest* >(object);
  (void)_this;
}
void DeleteVirtioScsiControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVirtioScsiControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVirtioScsiControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVirtioScsiControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteVirtioScsiControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  return target;
}

size_t DeleteVirtioScsiControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteVirtioScsiControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteVirtioScsiControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteVirtioScsiControllerRequest::GetClassData() const { return &_class_data_; }

void DeleteVirtioScsiControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteVirtioScsiControllerRequest *>(to)->MergeFrom(
      static_cast<const DeleteVirtioScsiControllerRequest &>(from));
}


void DeleteVirtioScsiControllerRequest::MergeFrom(const DeleteVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteVirtioScsiControllerRequest::CopyFrom(const DeleteVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVirtioScsiControllerRequest::IsInitialized() const {
  return true;
}

void DeleteVirtioScsiControllerRequest::InternalSwap(DeleteVirtioScsiControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVirtioScsiControllerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[3]);
}

// ===================================================================

class UpdateVirtioScsiControllerRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiController& controller(const UpdateVirtioScsiControllerRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiController&
UpdateVirtioScsiControllerRequest::_Internal::controller(const UpdateVirtioScsiControllerRequest* msg) {
  return *msg->controller_;
}
UpdateVirtioScsiControllerRequest::UpdateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
}
UpdateVirtioScsiControllerRequest::UpdateVirtioScsiControllerRequest(const UpdateVirtioScsiControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller()) {
    controller_ = new ::opi_api::storage::v1::VirtioScsiController(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
}

inline void UpdateVirtioScsiControllerRequest::SharedCtor() {
controller_ = nullptr;
}

UpdateVirtioScsiControllerRequest::~UpdateVirtioScsiControllerRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVirtioScsiControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_;
}

void UpdateVirtioScsiControllerRequest::ArenaDtor(void* object) {
  UpdateVirtioScsiControllerRequest* _this = reinterpret_cast< UpdateVirtioScsiControllerRequest* >(object);
  (void)_this;
}
void UpdateVirtioScsiControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVirtioScsiControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVirtioScsiControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVirtioScsiControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiController controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVirtioScsiControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  return target;
}

size_t UpdateVirtioScsiControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVirtioScsiControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVirtioScsiControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVirtioScsiControllerRequest::GetClassData() const { return &_class_data_; }

void UpdateVirtioScsiControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVirtioScsiControllerRequest *>(to)->MergeFrom(
      static_cast<const UpdateVirtioScsiControllerRequest &>(from));
}


void UpdateVirtioScsiControllerRequest::MergeFrom(const UpdateVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller()) {
    _internal_mutable_controller()->::opi_api::storage::v1::VirtioScsiController::MergeFrom(from._internal_controller());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVirtioScsiControllerRequest::CopyFrom(const UpdateVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVirtioScsiControllerRequest::IsInitialized() const {
  return true;
}

void UpdateVirtioScsiControllerRequest::InternalSwap(UpdateVirtioScsiControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_, other->controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVirtioScsiControllerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[4]);
}

// ===================================================================

class ListVirtioScsiControllerRequest::_Internal {
 public:
};

ListVirtioScsiControllerRequest::ListVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListVirtioScsiControllerRequest)
}
ListVirtioScsiControllerRequest::ListVirtioScsiControllerRequest(const ListVirtioScsiControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListVirtioScsiControllerRequest)
}

inline void ListVirtioScsiControllerRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListVirtioScsiControllerRequest::~ListVirtioScsiControllerRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVirtioScsiControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVirtioScsiControllerRequest::ArenaDtor(void* object) {
  ListVirtioScsiControllerRequest* _this = reinterpret_cast< ListVirtioScsiControllerRequest* >(object);
  (void)_this;
}
void ListVirtioScsiControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVirtioScsiControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVirtioScsiControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVirtioScsiControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListVirtioScsiControllerRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVirtioScsiControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListVirtioScsiControllerRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  return target;
}

size_t ListVirtioScsiControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVirtioScsiControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVirtioScsiControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVirtioScsiControllerRequest::GetClassData() const { return &_class_data_; }

void ListVirtioScsiControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVirtioScsiControllerRequest *>(to)->MergeFrom(
      static_cast<const ListVirtioScsiControllerRequest &>(from));
}


void ListVirtioScsiControllerRequest::MergeFrom(const ListVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVirtioScsiControllerRequest::CopyFrom(const ListVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListVirtioScsiControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVirtioScsiControllerRequest::IsInitialized() const {
  return true;
}

void ListVirtioScsiControllerRequest::InternalSwap(ListVirtioScsiControllerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVirtioScsiControllerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[5]);
}

// ===================================================================

class ListVirtioScsiControllerResponse::_Internal {
 public:
};

ListVirtioScsiControllerResponse::ListVirtioScsiControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controllers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListVirtioScsiControllerResponse)
}
ListVirtioScsiControllerResponse::ListVirtioScsiControllerResponse(const ListVirtioScsiControllerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controllers_(from.controllers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListVirtioScsiControllerResponse)
}

inline void ListVirtioScsiControllerResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListVirtioScsiControllerResponse::~ListVirtioScsiControllerResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVirtioScsiControllerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVirtioScsiControllerResponse::ArenaDtor(void* object) {
  ListVirtioScsiControllerResponse* _this = reinterpret_cast< ListVirtioScsiControllerResponse* >(object);
  (void)_this;
}
void ListVirtioScsiControllerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVirtioScsiControllerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVirtioScsiControllerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controllers_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVirtioScsiControllerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.VirtioScsiController controllers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controllers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListVirtioScsiControllerResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVirtioScsiControllerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiController controllers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controllers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_controllers(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListVirtioScsiControllerResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  return target;
}

size_t ListVirtioScsiControllerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiController controllers = 1;
  total_size += 1UL * this->_internal_controllers_size();
  for (const auto& msg : this->controllers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVirtioScsiControllerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVirtioScsiControllerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVirtioScsiControllerResponse::GetClassData() const { return &_class_data_; }

void ListVirtioScsiControllerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVirtioScsiControllerResponse *>(to)->MergeFrom(
      static_cast<const ListVirtioScsiControllerResponse &>(from));
}


void ListVirtioScsiControllerResponse::MergeFrom(const ListVirtioScsiControllerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controllers_.MergeFrom(from.controllers_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVirtioScsiControllerResponse::CopyFrom(const ListVirtioScsiControllerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListVirtioScsiControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVirtioScsiControllerResponse::IsInitialized() const {
  return true;
}

void ListVirtioScsiControllerResponse::InternalSwap(ListVirtioScsiControllerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  controllers_.InternalSwap(&other->controllers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVirtioScsiControllerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[6]);
}

// ===================================================================

class GetVirtioScsiControllerRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const GetVirtioScsiControllerRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
GetVirtioScsiControllerRequest::_Internal::controller_id(const GetVirtioScsiControllerRequest* msg) {
  return *msg->controller_id_;
}
void GetVirtioScsiControllerRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
GetVirtioScsiControllerRequest::GetVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.GetVirtioScsiControllerRequest)
}
GetVirtioScsiControllerRequest::GetVirtioScsiControllerRequest(const GetVirtioScsiControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.GetVirtioScsiControllerRequest)
}

inline void GetVirtioScsiControllerRequest::SharedCtor() {
controller_id_ = nullptr;
}

GetVirtioScsiControllerRequest::~GetVirtioScsiControllerRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVirtioScsiControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
}

void GetVirtioScsiControllerRequest::ArenaDtor(void* object) {
  GetVirtioScsiControllerRequest* _this = reinterpret_cast< GetVirtioScsiControllerRequest* >(object);
  (void)_this;
}
void GetVirtioScsiControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVirtioScsiControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVirtioScsiControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVirtioScsiControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVirtioScsiControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  return target;
}

size_t GetVirtioScsiControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVirtioScsiControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVirtioScsiControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVirtioScsiControllerRequest::GetClassData() const { return &_class_data_; }

void GetVirtioScsiControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVirtioScsiControllerRequest *>(to)->MergeFrom(
      static_cast<const GetVirtioScsiControllerRequest &>(from));
}


void GetVirtioScsiControllerRequest::MergeFrom(const GetVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVirtioScsiControllerRequest::CopyFrom(const GetVirtioScsiControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.GetVirtioScsiControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVirtioScsiControllerRequest::IsInitialized() const {
  return true;
}

void GetVirtioScsiControllerRequest::InternalSwap(GetVirtioScsiControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVirtioScsiControllerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[7]);
}

// ===================================================================

class VirtioScsiControllerStatsRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const VirtioScsiControllerStatsRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiControllerStatsRequest::_Internal::controller_id(const VirtioScsiControllerStatsRequest* msg) {
  return *msg->controller_id_;
}
void VirtioScsiControllerStatsRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
}
VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(const VirtioScsiControllerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
}

inline void VirtioScsiControllerStatsRequest::SharedCtor() {
controller_id_ = nullptr;
}

VirtioScsiControllerStatsRequest::~VirtioScsiControllerStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
}

void VirtioScsiControllerStatsRequest::ArenaDtor(void* object) {
  VirtioScsiControllerStatsRequest* _this = reinterpret_cast< VirtioScsiControllerStatsRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  return target;
}

size_t VirtioScsiControllerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerStatsRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerStatsRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerStatsRequest &>(from));
}


void VirtioScsiControllerStatsRequest::MergeFrom(const VirtioScsiControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerStatsRequest::CopyFrom(const VirtioScsiControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerStatsRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerStatsRequest::InternalSwap(VirtioScsiControllerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[8]);
}

// ===================================================================

class VirtioScsiControllerStatsResponse::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VirtioScsiControllerStatsResponse* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiControllerStatsResponse::_Internal::id(const VirtioScsiControllerStatsResponse* msg) {
  return *msg->id_;
}
void VirtioScsiControllerStatsResponse::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
}
VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(const VirtioScsiControllerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
}

inline void VirtioScsiControllerStatsResponse::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = nullptr;
}

VirtioScsiControllerStatsResponse::~VirtioScsiControllerStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void VirtioScsiControllerStatsResponse::ArenaDtor(void* object) {
  VirtioScsiControllerStatsResponse* _this = reinterpret_cast< VirtioScsiControllerStatsResponse* >(object);
  (void)_this;
}
void VirtioScsiControllerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  return target;
}

size_t VirtioScsiControllerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerStatsResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerStatsResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerStatsResponse &>(from));
}


void VirtioScsiControllerStatsResponse::MergeFrom(const VirtioScsiControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerStatsResponse::CopyFrom(const VirtioScsiControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerStatsResponse::IsInitialized() const {
  return true;
}

void VirtioScsiControllerStatsResponse::InternalSwap(VirtioScsiControllerStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[9]);
}

// ===================================================================

class CreateVirtioScsiLunRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiLun& lun(const CreateVirtioScsiLunRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiLun&
CreateVirtioScsiLunRequest::_Internal::lun(const CreateVirtioScsiLunRequest* msg) {
  return *msg->lun_;
}
CreateVirtioScsiLunRequest::CreateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.CreateVirtioScsiLunRequest)
}
CreateVirtioScsiLunRequest::CreateVirtioScsiLunRequest(const CreateVirtioScsiLunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lun()) {
    lun_ = new ::opi_api::storage::v1::VirtioScsiLun(*from.lun_);
  } else {
    lun_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.CreateVirtioScsiLunRequest)
}

inline void CreateVirtioScsiLunRequest::SharedCtor() {
lun_ = nullptr;
}

CreateVirtioScsiLunRequest::~CreateVirtioScsiLunRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateVirtioScsiLunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lun_;
}

void CreateVirtioScsiLunRequest::ArenaDtor(void* object) {
  CreateVirtioScsiLunRequest* _this = reinterpret_cast< CreateVirtioScsiLunRequest* >(object);
  (void)_this;
}
void CreateVirtioScsiLunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVirtioScsiLunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVirtioScsiLunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVirtioScsiLunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiLun lun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVirtioScsiLunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lun(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  return target;
}

size_t CreateVirtioScsiLunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVirtioScsiLunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateVirtioScsiLunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVirtioScsiLunRequest::GetClassData() const { return &_class_data_; }

void CreateVirtioScsiLunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateVirtioScsiLunRequest *>(to)->MergeFrom(
      static_cast<const CreateVirtioScsiLunRequest &>(from));
}


void CreateVirtioScsiLunRequest::MergeFrom(const CreateVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lun()) {
    _internal_mutable_lun()->::opi_api::storage::v1::VirtioScsiLun::MergeFrom(from._internal_lun());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVirtioScsiLunRequest::CopyFrom(const CreateVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.CreateVirtioScsiLunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVirtioScsiLunRequest::IsInitialized() const {
  return true;
}

void CreateVirtioScsiLunRequest::InternalSwap(CreateVirtioScsiLunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lun_, other->lun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVirtioScsiLunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[10]);
}

// ===================================================================

class DeleteVirtioScsiLunRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const DeleteVirtioScsiLunRequest* msg);
  static const ::opi_api::common::v1::ObjectKey& lun_id(const DeleteVirtioScsiLunRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
DeleteVirtioScsiLunRequest::_Internal::controller_id(const DeleteVirtioScsiLunRequest* msg) {
  return *msg->controller_id_;
}
const ::opi_api::common::v1::ObjectKey&
DeleteVirtioScsiLunRequest::_Internal::lun_id(const DeleteVirtioScsiLunRequest* msg) {
  return *msg->lun_id_;
}
void DeleteVirtioScsiLunRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
void DeleteVirtioScsiLunRequest::clear_lun_id() {
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
}
DeleteVirtioScsiLunRequest::DeleteVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
}
DeleteVirtioScsiLunRequest::DeleteVirtioScsiLunRequest(const DeleteVirtioScsiLunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  if (from._internal_has_lun_id()) {
    lun_id_ = new ::opi_api::common::v1::ObjectKey(*from.lun_id_);
  } else {
    lun_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
}

inline void DeleteVirtioScsiLunRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

DeleteVirtioScsiLunRequest::~DeleteVirtioScsiLunRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteVirtioScsiLunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
  if (this != internal_default_instance()) delete lun_id_;
}

void DeleteVirtioScsiLunRequest::ArenaDtor(void* object) {
  DeleteVirtioScsiLunRequest* _this = reinterpret_cast< DeleteVirtioScsiLunRequest* >(object);
  (void)_this;
}
void DeleteVirtioScsiLunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVirtioScsiLunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVirtioScsiLunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVirtioScsiLunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteVirtioScsiLunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lun_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  return target;
}

size_t DeleteVirtioScsiLunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteVirtioScsiLunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteVirtioScsiLunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteVirtioScsiLunRequest::GetClassData() const { return &_class_data_; }

void DeleteVirtioScsiLunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteVirtioScsiLunRequest *>(to)->MergeFrom(
      static_cast<const DeleteVirtioScsiLunRequest &>(from));
}


void DeleteVirtioScsiLunRequest::MergeFrom(const DeleteVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  if (from._internal_has_lun_id()) {
    _internal_mutable_lun_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteVirtioScsiLunRequest::CopyFrom(const DeleteVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVirtioScsiLunRequest::IsInitialized() const {
  return true;
}

void DeleteVirtioScsiLunRequest::InternalSwap(DeleteVirtioScsiLunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteVirtioScsiLunRequest, lun_id_)
      + sizeof(DeleteVirtioScsiLunRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteVirtioScsiLunRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVirtioScsiLunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[11]);
}

// ===================================================================

class UpdateVirtioScsiLunRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiLun& lun(const UpdateVirtioScsiLunRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiLun&
UpdateVirtioScsiLunRequest::_Internal::lun(const UpdateVirtioScsiLunRequest* msg) {
  return *msg->lun_;
}
UpdateVirtioScsiLunRequest::UpdateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
}
UpdateVirtioScsiLunRequest::UpdateVirtioScsiLunRequest(const UpdateVirtioScsiLunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lun()) {
    lun_ = new ::opi_api::storage::v1::VirtioScsiLun(*from.lun_);
  } else {
    lun_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
}

inline void UpdateVirtioScsiLunRequest::SharedCtor() {
lun_ = nullptr;
}

UpdateVirtioScsiLunRequest::~UpdateVirtioScsiLunRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVirtioScsiLunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lun_;
}

void UpdateVirtioScsiLunRequest::ArenaDtor(void* object) {
  UpdateVirtioScsiLunRequest* _this = reinterpret_cast< UpdateVirtioScsiLunRequest* >(object);
  (void)_this;
}
void UpdateVirtioScsiLunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVirtioScsiLunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVirtioScsiLunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVirtioScsiLunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiLun lun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVirtioScsiLunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lun(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  return target;
}

size_t UpdateVirtioScsiLunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVirtioScsiLunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVirtioScsiLunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVirtioScsiLunRequest::GetClassData() const { return &_class_data_; }

void UpdateVirtioScsiLunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVirtioScsiLunRequest *>(to)->MergeFrom(
      static_cast<const UpdateVirtioScsiLunRequest &>(from));
}


void UpdateVirtioScsiLunRequest::MergeFrom(const UpdateVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lun()) {
    _internal_mutable_lun()->::opi_api::storage::v1::VirtioScsiLun::MergeFrom(from._internal_lun());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVirtioScsiLunRequest::CopyFrom(const UpdateVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVirtioScsiLunRequest::IsInitialized() const {
  return true;
}

void UpdateVirtioScsiLunRequest::InternalSwap(UpdateVirtioScsiLunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lun_, other->lun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVirtioScsiLunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[12]);
}

// ===================================================================

class ListVirtioScsiLunRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const ListVirtioScsiLunRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
ListVirtioScsiLunRequest::_Internal::controller_id(const ListVirtioScsiLunRequest* msg) {
  return *msg->controller_id_;
}
void ListVirtioScsiLunRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
ListVirtioScsiLunRequest::ListVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListVirtioScsiLunRequest)
}
ListVirtioScsiLunRequest::ListVirtioScsiLunRequest(const ListVirtioScsiLunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListVirtioScsiLunRequest)
}

inline void ListVirtioScsiLunRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(page_size_));
}

ListVirtioScsiLunRequest::~ListVirtioScsiLunRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListVirtioScsiLunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVirtioScsiLunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete controller_id_;
}

void ListVirtioScsiLunRequest::ArenaDtor(void* object) {
  ListVirtioScsiLunRequest* _this = reinterpret_cast< ListVirtioScsiLunRequest* >(object);
  (void)_this;
}
void ListVirtioScsiLunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVirtioScsiLunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVirtioScsiLunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVirtioScsiLunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListVirtioScsiLunRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVirtioScsiLunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListVirtioScsiLunRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListVirtioScsiLunRequest)
  return target;
}

size_t ListVirtioScsiLunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListVirtioScsiLunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVirtioScsiLunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVirtioScsiLunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVirtioScsiLunRequest::GetClassData() const { return &_class_data_; }

void ListVirtioScsiLunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVirtioScsiLunRequest *>(to)->MergeFrom(
      static_cast<const ListVirtioScsiLunRequest &>(from));
}


void ListVirtioScsiLunRequest::MergeFrom(const ListVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListVirtioScsiLunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVirtioScsiLunRequest::CopyFrom(const ListVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListVirtioScsiLunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVirtioScsiLunRequest::IsInitialized() const {
  return true;
}

void ListVirtioScsiLunRequest::InternalSwap(ListVirtioScsiLunRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListVirtioScsiLunRequest, page_size_)
      + sizeof(ListVirtioScsiLunRequest::page_size_)
      - PROTOBUF_FIELD_OFFSET(ListVirtioScsiLunRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVirtioScsiLunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[13]);
}

// ===================================================================

class ListVirtioScsiLunResponse::_Internal {
 public:
};

ListVirtioScsiLunResponse::ListVirtioScsiLunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  luns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListVirtioScsiLunResponse)
}
ListVirtioScsiLunResponse::ListVirtioScsiLunResponse(const ListVirtioScsiLunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      luns_(from.luns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListVirtioScsiLunResponse)
}

inline void ListVirtioScsiLunResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListVirtioScsiLunResponse::~ListVirtioScsiLunResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListVirtioScsiLunResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVirtioScsiLunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVirtioScsiLunResponse::ArenaDtor(void* object) {
  ListVirtioScsiLunResponse* _this = reinterpret_cast< ListVirtioScsiLunResponse* >(object);
  (void)_this;
}
void ListVirtioScsiLunResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVirtioScsiLunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVirtioScsiLunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListVirtioScsiLunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  luns_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVirtioScsiLunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.VirtioScsiLun luns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_luns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListVirtioScsiLunResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVirtioScsiLunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListVirtioScsiLunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiLun luns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_luns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_luns(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListVirtioScsiLunResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListVirtioScsiLunResponse)
  return target;
}

size_t ListVirtioScsiLunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListVirtioScsiLunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiLun luns = 1;
  total_size += 1UL * this->_internal_luns_size();
  for (const auto& msg : this->luns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVirtioScsiLunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVirtioScsiLunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVirtioScsiLunResponse::GetClassData() const { return &_class_data_; }

void ListVirtioScsiLunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVirtioScsiLunResponse *>(to)->MergeFrom(
      static_cast<const ListVirtioScsiLunResponse &>(from));
}


void ListVirtioScsiLunResponse::MergeFrom(const ListVirtioScsiLunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListVirtioScsiLunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  luns_.MergeFrom(from.luns_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVirtioScsiLunResponse::CopyFrom(const ListVirtioScsiLunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListVirtioScsiLunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVirtioScsiLunResponse::IsInitialized() const {
  return true;
}

void ListVirtioScsiLunResponse::InternalSwap(ListVirtioScsiLunResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  luns_.InternalSwap(&other->luns_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVirtioScsiLunResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[14]);
}

// ===================================================================

class GetVirtioScsiLunRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const GetVirtioScsiLunRequest* msg);
  static const ::opi_api::common::v1::ObjectKey& lun_id(const GetVirtioScsiLunRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
GetVirtioScsiLunRequest::_Internal::controller_id(const GetVirtioScsiLunRequest* msg) {
  return *msg->controller_id_;
}
const ::opi_api::common::v1::ObjectKey&
GetVirtioScsiLunRequest::_Internal::lun_id(const GetVirtioScsiLunRequest* msg) {
  return *msg->lun_id_;
}
void GetVirtioScsiLunRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
void GetVirtioScsiLunRequest::clear_lun_id() {
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
}
GetVirtioScsiLunRequest::GetVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.GetVirtioScsiLunRequest)
}
GetVirtioScsiLunRequest::GetVirtioScsiLunRequest(const GetVirtioScsiLunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  if (from._internal_has_lun_id()) {
    lun_id_ = new ::opi_api::common::v1::ObjectKey(*from.lun_id_);
  } else {
    lun_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.GetVirtioScsiLunRequest)
}

inline void GetVirtioScsiLunRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

GetVirtioScsiLunRequest::~GetVirtioScsiLunRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.GetVirtioScsiLunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVirtioScsiLunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
  if (this != internal_default_instance()) delete lun_id_;
}

void GetVirtioScsiLunRequest::ArenaDtor(void* object) {
  GetVirtioScsiLunRequest* _this = reinterpret_cast< GetVirtioScsiLunRequest* >(object);
  (void)_this;
}
void GetVirtioScsiLunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVirtioScsiLunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVirtioScsiLunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.GetVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVirtioScsiLunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVirtioScsiLunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.GetVirtioScsiLunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lun_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.GetVirtioScsiLunRequest)
  return target;
}

size_t GetVirtioScsiLunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.GetVirtioScsiLunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVirtioScsiLunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVirtioScsiLunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVirtioScsiLunRequest::GetClassData() const { return &_class_data_; }

void GetVirtioScsiLunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVirtioScsiLunRequest *>(to)->MergeFrom(
      static_cast<const GetVirtioScsiLunRequest &>(from));
}


void GetVirtioScsiLunRequest::MergeFrom(const GetVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.GetVirtioScsiLunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  if (from._internal_has_lun_id()) {
    _internal_mutable_lun_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVirtioScsiLunRequest::CopyFrom(const GetVirtioScsiLunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.GetVirtioScsiLunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVirtioScsiLunRequest::IsInitialized() const {
  return true;
}

void GetVirtioScsiLunRequest::InternalSwap(GetVirtioScsiLunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVirtioScsiLunRequest, lun_id_)
      + sizeof(GetVirtioScsiLunRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(GetVirtioScsiLunRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVirtioScsiLunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[15]);
}

// ===================================================================

class VirtioScsiLunStatsRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& controller_id(const VirtioScsiLunStatsRequest* msg);
  static const ::opi_api::common::v1::ObjectKey& lun_id(const VirtioScsiLunStatsRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiLunStatsRequest::_Internal::controller_id(const VirtioScsiLunStatsRequest* msg) {
  return *msg->controller_id_;
}
const ::opi_api::common::v1::ObjectKey&
VirtioScsiLunStatsRequest::_Internal::lun_id(const VirtioScsiLunStatsRequest* msg) {
  return *msg->lun_id_;
}
void VirtioScsiLunStatsRequest::clear_controller_id() {
  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
}
void VirtioScsiLunStatsRequest::clear_lun_id() {
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
}
VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
}
VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(const VirtioScsiLunStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller_id()) {
    controller_id_ = new ::opi_api::common::v1::ObjectKey(*from.controller_id_);
  } else {
    controller_id_ = nullptr;
  }
  if (from._internal_has_lun_id()) {
    lun_id_ = new ::opi_api::common::v1::ObjectKey(*from.lun_id_);
  } else {
    lun_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
}

inline void VirtioScsiLunStatsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

VirtioScsiLunStatsRequest::~VirtioScsiLunStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_id_;
  if (this != internal_default_instance()) delete lun_id_;
}

void VirtioScsiLunStatsRequest::ArenaDtor(void* object) {
  VirtioScsiLunStatsRequest* _this = reinterpret_cast< VirtioScsiLunStatsRequest* >(object);
  (void)_this;
}
void VirtioScsiLunStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_id_ != nullptr) {
    delete controller_id_;
  }
  controller_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lun_id_ != nullptr) {
    delete lun_id_;
  }
  lun_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lun_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  return target;
}

size_t VirtioScsiLunStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey controller_id = 1;
  if (this->_internal_has_controller_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_id_);
  }

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  if (this->_internal_has_lun_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunStatsRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunStatsRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunStatsRequest &>(from));
}


void VirtioScsiLunStatsRequest::MergeFrom(const VirtioScsiLunStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_id()) {
    _internal_mutable_controller_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_controller_id());
  }
  if (from._internal_has_lun_id()) {
    _internal_mutable_lun_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunStatsRequest::CopyFrom(const VirtioScsiLunStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunStatsRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunStatsRequest::InternalSwap(VirtioScsiLunStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLunStatsRequest, lun_id_)
      + sizeof(VirtioScsiLunStatsRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLunStatsRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[16]);
}

// ===================================================================

class VirtioScsiLunStatsResponse::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VirtioScsiLunStatsResponse* msg);
};

const ::opi_api::common::v1::ObjectKey&
VirtioScsiLunStatsResponse::_Internal::id(const VirtioScsiLunStatsResponse* msg) {
  return *msg->id_;
}
void VirtioScsiLunStatsResponse::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
}
VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(const VirtioScsiLunStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
}

inline void VirtioScsiLunStatsResponse::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = nullptr;
}

VirtioScsiLunStatsResponse::~VirtioScsiLunStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void VirtioScsiLunStatsResponse::ArenaDtor(void* object) {
  VirtioScsiLunStatsResponse* _this = reinterpret_cast< VirtioScsiLunStatsResponse* >(object);
  (void)_this;
}
void VirtioScsiLunStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiLunStatsResponse.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiLunStatsResponse.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  return target;
}

size_t VirtioScsiLunStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunStatsResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiLunStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunStatsResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunStatsResponse &>(from));
}


void VirtioScsiLunStatsResponse::MergeFrom(const VirtioScsiLunStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunStatsResponse::CopyFrom(const VirtioScsiLunStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunStatsResponse::IsInitialized() const {
  return true;
}

void VirtioScsiLunStatsResponse::InternalSwap(VirtioScsiLunStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiController* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiController >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLun* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLun >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::CreateVirtioScsiControllerRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::CreateVirtioScsiControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::CreateVirtioScsiControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::DeleteVirtioScsiControllerRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::DeleteVirtioScsiControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::DeleteVirtioScsiControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::UpdateVirtioScsiControllerRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::UpdateVirtioScsiControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::UpdateVirtioScsiControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListVirtioScsiControllerRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListVirtioScsiControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListVirtioScsiControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListVirtioScsiControllerResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListVirtioScsiControllerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListVirtioScsiControllerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::GetVirtioScsiControllerRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::GetVirtioScsiControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::GetVirtioScsiControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::CreateVirtioScsiLunRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::CreateVirtioScsiLunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::CreateVirtioScsiLunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::DeleteVirtioScsiLunRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::DeleteVirtioScsiLunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::DeleteVirtioScsiLunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::UpdateVirtioScsiLunRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::UpdateVirtioScsiLunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::UpdateVirtioScsiLunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListVirtioScsiLunRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListVirtioScsiLunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListVirtioScsiLunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListVirtioScsiLunResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListVirtioScsiLunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListVirtioScsiLunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::GetVirtioScsiLunRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::GetVirtioScsiLunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::GetVirtioScsiLunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunStatsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
