// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_scsi.proto

#include "frontend_virtio_scsi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace storage {
namespace v1 {
constexpr VirtioScsiController::VirtioScsiController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pcie_id_(nullptr)
  , id_(int64_t{0}){}
struct VirtioScsiControllerDefaultTypeInternal {
  constexpr VirtioScsiControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerDefaultTypeInternal() {}
  union {
    VirtioScsiController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerDefaultTypeInternal _VirtioScsiController_default_instance_;
constexpr VirtioScsiLun::VirtioScsiLun(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bdev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , controller_id_(int64_t{0}){}
struct VirtioScsiLunDefaultTypeInternal {
  constexpr VirtioScsiLunDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunDefaultTypeInternal() {}
  union {
    VirtioScsiLun _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunDefaultTypeInternal _VirtioScsiLun_default_instance_;
constexpr VirtioScsiControllerCreateRequest::VirtioScsiControllerCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(nullptr){}
struct VirtioScsiControllerCreateRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerCreateRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerCreateRequestDefaultTypeInternal _VirtioScsiControllerCreateRequest_default_instance_;
constexpr VirtioScsiControllerDeleteRequest::VirtioScsiControllerDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0}){}
struct VirtioScsiControllerDeleteRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerDeleteRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerDeleteRequestDefaultTypeInternal _VirtioScsiControllerDeleteRequest_default_instance_;
constexpr VirtioScsiControllerUpdateRequest::VirtioScsiControllerUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(nullptr){}
struct VirtioScsiControllerUpdateRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerUpdateRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerUpdateRequestDefaultTypeInternal _VirtioScsiControllerUpdateRequest_default_instance_;
constexpr VirtioScsiControllerListRequest::VirtioScsiControllerListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VirtioScsiControllerListRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerListRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerListRequestDefaultTypeInternal _VirtioScsiControllerListRequest_default_instance_;
constexpr VirtioScsiControllerListResponse::VirtioScsiControllerListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_(){}
struct VirtioScsiControllerListResponseDefaultTypeInternal {
  constexpr VirtioScsiControllerListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerListResponseDefaultTypeInternal() {}
  union {
    VirtioScsiControllerListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerListResponseDefaultTypeInternal _VirtioScsiControllerListResponse_default_instance_;
constexpr VirtioScsiControllerGetRequest::VirtioScsiControllerGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0}){}
struct VirtioScsiControllerGetRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerGetRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerGetRequestDefaultTypeInternal _VirtioScsiControllerGetRequest_default_instance_;
constexpr VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0}){}
struct VirtioScsiControllerStatsRequestDefaultTypeInternal {
  constexpr VirtioScsiControllerStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerStatsRequestDefaultTypeInternal() {}
  union {
    VirtioScsiControllerStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerStatsRequestDefaultTypeInternal _VirtioScsiControllerStatsRequest_default_instance_;
constexpr VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct VirtioScsiControllerStatsResponseDefaultTypeInternal {
  constexpr VirtioScsiControllerStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiControllerStatsResponseDefaultTypeInternal() {}
  union {
    VirtioScsiControllerStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiControllerStatsResponseDefaultTypeInternal _VirtioScsiControllerStatsResponse_default_instance_;
constexpr VirtioScsiLunCreateRequest::VirtioScsiLunCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lun_(nullptr){}
struct VirtioScsiLunCreateRequestDefaultTypeInternal {
  constexpr VirtioScsiLunCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunCreateRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunCreateRequestDefaultTypeInternal _VirtioScsiLunCreateRequest_default_instance_;
constexpr VirtioScsiLunDeleteRequest::VirtioScsiLunDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0})
  , lun_id_(int64_t{0}){}
struct VirtioScsiLunDeleteRequestDefaultTypeInternal {
  constexpr VirtioScsiLunDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunDeleteRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunDeleteRequestDefaultTypeInternal _VirtioScsiLunDeleteRequest_default_instance_;
constexpr VirtioScsiLunUpdateRequest::VirtioScsiLunUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lun_(nullptr){}
struct VirtioScsiLunUpdateRequestDefaultTypeInternal {
  constexpr VirtioScsiLunUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunUpdateRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunUpdateRequestDefaultTypeInternal _VirtioScsiLunUpdateRequest_default_instance_;
constexpr VirtioScsiLunListRequest::VirtioScsiLunListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0}){}
struct VirtioScsiLunListRequestDefaultTypeInternal {
  constexpr VirtioScsiLunListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunListRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunListRequestDefaultTypeInternal _VirtioScsiLunListRequest_default_instance_;
constexpr VirtioScsiLunListResponse::VirtioScsiLunListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lun_(){}
struct VirtioScsiLunListResponseDefaultTypeInternal {
  constexpr VirtioScsiLunListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunListResponseDefaultTypeInternal() {}
  union {
    VirtioScsiLunListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunListResponseDefaultTypeInternal _VirtioScsiLunListResponse_default_instance_;
constexpr VirtioScsiLunGetRequest::VirtioScsiLunGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0})
  , lun_id_(int64_t{0}){}
struct VirtioScsiLunGetRequestDefaultTypeInternal {
  constexpr VirtioScsiLunGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunGetRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunGetRequestDefaultTypeInternal _VirtioScsiLunGetRequest_default_instance_;
constexpr VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_id_(int64_t{0})
  , lun_id_(int64_t{0}){}
struct VirtioScsiLunStatsRequestDefaultTypeInternal {
  constexpr VirtioScsiLunStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunStatsRequestDefaultTypeInternal() {}
  union {
    VirtioScsiLunStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunStatsRequestDefaultTypeInternal _VirtioScsiLunStatsRequest_default_instance_;
constexpr VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct VirtioScsiLunStatsResponseDefaultTypeInternal {
  constexpr VirtioScsiLunStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtioScsiLunStatsResponseDefaultTypeInternal() {}
  union {
    VirtioScsiLunStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtioScsiLunStatsResponseDefaultTypeInternal _VirtioScsiLunStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frontend_5fvirtio_5fscsi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frontend_5fvirtio_5fscsi_2eproto = nullptr;

const uint32_t TableStruct_frontend_5fvirtio_5fscsi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiController, pcie_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLun, bdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerCreateRequest, controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerDeleteRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerUpdateRequest, controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerListResponse, controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerGetRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiControllerStatsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunCreateRequest, lun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunDeleteRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunDeleteRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunUpdateRequest, lun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunListRequest, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunListResponse, lun_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunGetRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunGetRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, controller_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsRequest, lun_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::VirtioScsiLunStatsResponse, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiController)},
  { 9, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLun)},
  { 18, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerCreateRequest)},
  { 25, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerDeleteRequest)},
  { 32, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerUpdateRequest)},
  { 39, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerListRequest)},
  { 45, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerListResponse)},
  { 52, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerGetRequest)},
  { 59, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerStatsRequest)},
  { 66, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiControllerStatsResponse)},
  { 74, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunCreateRequest)},
  { 81, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunDeleteRequest)},
  { 89, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunUpdateRequest)},
  { 96, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunListRequest)},
  { 103, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunListResponse)},
  { 110, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunGetRequest)},
  { 118, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunStatsRequest)},
  { 126, -1, -1, sizeof(::opi_api::storage::v1::VirtioScsiLunStatsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiControllerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_VirtioScsiLunStatsResponse_default_instance_),
};

const char descriptor_table_protodef_frontend_5fvirtio_5fscsi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032frontend_virtio_scsi.proto\022\022opi_api.st"
  "orage.v1\032\014common.proto\032\033google/protobuf/"
  "empty.proto\032\034google/api/annotations.prot"
  "o\"j\n\024VirtioScsiController\022\n\n\002id\030\001 \001(\003\022\014\n"
  "\004name\030\002 \001(\t\0228\n\007pcie_id\030\004 \001(\0132\'.opi_api.s"
  "torage.v1.NvmeControllerPciId\"@\n\rVirtioS"
  "csiLun\022\n\n\002id\030\001 \001(\003\022\025\n\rcontroller_id\030\004 \001("
  "\003\022\014\n\004bdev\030\006 \001(\t\"a\n!VirtioScsiControllerC"
  "reateRequest\022<\n\ncontroller\030\001 \001(\0132(.opi_a"
  "pi.storage.v1.VirtioScsiController\":\n!Vi"
  "rtioScsiControllerDeleteRequest\022\025\n\rcontr"
  "oller_id\030\001 \001(\003\"a\n!VirtioScsiControllerUp"
  "dateRequest\022<\n\ncontroller\030\001 \001(\0132(.opi_ap"
  "i.storage.v1.VirtioScsiController\"!\n\037Vir"
  "tioScsiControllerListRequest\"`\n VirtioSc"
  "siControllerListResponse\022<\n\ncontroller\030\001"
  " \003(\0132(.opi_api.storage.v1.VirtioScsiCont"
  "roller\"7\n\036VirtioScsiControllerGetRequest"
  "\022\025\n\rcontroller_id\030\001 \001(\003\"9\n VirtioScsiCon"
  "trollerStatsRequest\022\025\n\rcontroller_id\030\001 \001"
  "(\003\">\n!VirtioScsiControllerStatsResponse\022"
  "\n\n\002id\030\001 \001(\003\022\r\n\005stats\030\002 \001(\t\"L\n\032VirtioScsi"
  "LunCreateRequest\022.\n\003lun\030\001 \001(\0132!.opi_api."
  "storage.v1.VirtioScsiLun\"C\n\032VirtioScsiLu"
  "nDeleteRequest\022\025\n\rcontroller_id\030\001 \001(\003\022\016\n"
  "\006lun_id\030\002 \001(\003\"L\n\032VirtioScsiLunUpdateRequ"
  "est\022.\n\003lun\030\001 \001(\0132!.opi_api.storage.v1.Vi"
  "rtioScsiLun\"1\n\030VirtioScsiLunListRequest\022"
  "\025\n\rcontroller_id\030\001 \001(\003\"K\n\031VirtioScsiLunL"
  "istResponse\022.\n\003lun\030\001 \003(\0132!.opi_api.stora"
  "ge.v1.VirtioScsiLun\"@\n\027VirtioScsiLunGetR"
  "equest\022\025\n\rcontroller_id\030\001 \001(\003\022\016\n\006lun_id\030"
  "\002 \001(\003\"B\n\031VirtioScsiLunStatsRequest\022\025\n\rco"
  "ntroller_id\030\001 \001(\003\022\016\n\006lun_id\030\002 \001(\003\"7\n\032Vir"
  "tioScsiLunStatsResponse\022\n\n\002id\030\001 \001(\003\022\r\n\005s"
  "tats\030\002 \001(\t2\272\016\n\031FrontendVirtioScsiService"
  "\022\252\001\n\032VirtioScsiControllerCreate\0225.opi_ap"
  "i.storage.v1.VirtioScsiControllerCreateR"
  "equest\032(.opi_api.storage.v1.VirtioScsiCo"
  "ntroller\"+\202\323\344\223\002%\"\023/v1/virtioscsictrls:\016v"
  "irtioscsictrl\022\231\001\n\032VirtioScsiControllerDe"
  "lete\0225.opi_api.storage.v1.VirtioScsiCont"
  "rollerDeleteRequest\032\026.google.protobuf.Em"
  "pty\",\202\323\344\223\002&*$/v1/virtioscsictrls/{virtio"
  "scsictrl}\022\252\001\n\032VirtioScsiControllerUpdate"
  "\0225.opi_api.storage.v1.VirtioScsiControll"
  "erUpdateRequest\032(.opi_api.storage.v1.Vir"
  "tioScsiController\"+\202\323\344\223\002%2\023/v1/virtioscs"
  "ictrls:\016virtioscsictrl\022\242\001\n\030VirtioScsiCon"
  "trollerList\0223.opi_api.storage.v1.VirtioS"
  "csiControllerListRequest\0324.opi_api.stora"
  "ge.v1.VirtioScsiControllerListResponse\"\033"
  "\202\323\344\223\002\025\022\023/v1/virtioscsictrls\022\245\001\n\027VirtioSc"
  "siControllerGet\0222.opi_api.storage.v1.Vir"
  "tioScsiControllerGetRequest\032(.opi_api.st"
  "orage.v1.VirtioScsiController\",\202\323\344\223\002&\022$/"
  "v1/virtioscsictrls/{virtioscsictrl}\022\212\001\n\031"
  "VirtioScsiControllerStats\0224.opi_api.stor"
  "age.v1.VirtioScsiControllerStatsRequest\032"
  "5.opi_api.storage.v1.VirtioScsiControlle"
  "rStatsResponse\"\000\022\223\001\n\023VirtioScsiLunCreate"
  "\022..opi_api.storage.v1.VirtioScsiLunCreat"
  "eRequest\032!.opi_api.storage.v1.VirtioScsi"
  "Lun\")\202\323\344\223\002#\"\022/v1/virtioscsiluns:\rvirtios"
  "csilun\022\211\001\n\023VirtioScsiLunDelete\022..opi_api"
  ".storage.v1.VirtioScsiLunDeleteRequest\032\026"
  ".google.protobuf.Empty\"*\202\323\344\223\002$*\"/v1/virt"
  "ioscsiluns/{virtioscsilun}\022\223\001\n\023VirtioScs"
  "iLunUpdate\022..opi_api.storage.v1.VirtioSc"
  "siLunUpdateRequest\032!.opi_api.storage.v1."
  "VirtioScsiLun\")\202\323\344\223\002#2\022/v1/virtioscsilun"
  "s:\rvirtioscsilun\022\214\001\n\021VirtioScsiLunList\022,"
  ".opi_api.storage.v1.VirtioScsiLunListReq"
  "uest\032-.opi_api.storage.v1.VirtioScsiLunL"
  "istResponse\"\032\202\323\344\223\002\024\022\022/v1/virtioscsiluns\022"
  "\216\001\n\020VirtioScsiLunGet\022+.opi_api.storage.v"
  "1.VirtioScsiLunGetRequest\032!.opi_api.stor"
  "age.v1.VirtioScsiLun\"*\202\323\344\223\002$\022\"/v1/virtio"
  "scsiluns/{virtioscsilun}\022u\n\022VirtioScsiLu"
  "nStats\022-.opi_api.storage.v1.VirtioScsiLu"
  "nStatsRequest\032..opi_api.storage.v1.Virti"
  "oScsiLunStatsResponse\"\000B1Z/github.com/op"
  "iproject/opi-api/storage/v1/gen/gob\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frontend_5fvirtio_5fscsi_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fscsi_2eproto = {
  false, false, 3322, descriptor_table_protodef_frontend_5fvirtio_5fscsi_2eproto, "frontend_virtio_scsi.proto", 
  &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once, descriptor_table_frontend_5fvirtio_5fscsi_2eproto_deps, 3, 18,
  schemas, file_default_instances, TableStruct_frontend_5fvirtio_5fscsi_2eproto::offsets,
  file_level_metadata_frontend_5fvirtio_5fscsi_2eproto, file_level_enum_descriptors_frontend_5fvirtio_5fscsi_2eproto, file_level_service_descriptors_frontend_5fvirtio_5fscsi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter() {
  return &descriptor_table_frontend_5fvirtio_5fscsi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_frontend_5fvirtio_5fscsi_2eproto(&descriptor_table_frontend_5fvirtio_5fscsi_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioScsiController::_Internal {
 public:
  static const ::opi_api::storage::v1::NvmeControllerPciId& pcie_id(const VirtioScsiController* msg);
};

const ::opi_api::storage::v1::NvmeControllerPciId&
VirtioScsiController::_Internal::pcie_id(const VirtioScsiController* msg) {
  return *msg->pcie_id_;
}
void VirtioScsiController::clear_pcie_id() {
  if (GetArenaForAllocation() == nullptr && pcie_id_ != nullptr) {
    delete pcie_id_;
  }
  pcie_id_ = nullptr;
}
VirtioScsiController::VirtioScsiController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiController)
}
VirtioScsiController::VirtioScsiController(const VirtioScsiController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pcie_id()) {
    pcie_id_ = new ::opi_api::storage::v1::NvmeControllerPciId(*from.pcie_id_);
  } else {
    pcie_id_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiController)
}

inline void VirtioScsiController::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pcie_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pcie_id_)) + sizeof(id_));
}

VirtioScsiController::~VirtioScsiController() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiController)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pcie_id_;
}

void VirtioScsiController::ArenaDtor(void* object) {
  VirtioScsiController* _this = reinterpret_cast< VirtioScsiController* >(object);
  (void)_this;
}
void VirtioScsiController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiController::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pcie_id_ != nullptr) {
    delete pcie_id_;
  }
  pcie_id_ = nullptr;
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiController.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.NvmeControllerPciId pcie_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcie_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiController.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .opi_api.storage.v1.NvmeControllerPciId pcie_id = 4;
  if (this->_internal_has_pcie_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pcie_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiController)
  return target;
}

size_t VirtioScsiController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.storage.v1.NvmeControllerPciId pcie_id = 4;
  if (this->_internal_has_pcie_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcie_id_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiController::GetClassData() const { return &_class_data_; }

void VirtioScsiController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiController *>(to)->MergeFrom(
      static_cast<const VirtioScsiController &>(from));
}


void VirtioScsiController::MergeFrom(const VirtioScsiController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiController)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_pcie_id()) {
    _internal_mutable_pcie_id()->::opi_api::storage::v1::NvmeControllerPciId::MergeFrom(from._internal_pcie_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiController::CopyFrom(const VirtioScsiController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiController::IsInitialized() const {
  return true;
}

void VirtioScsiController::InternalSwap(VirtioScsiController* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiController, id_)
      + sizeof(VirtioScsiController::id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiController, pcie_id_)>(
          reinterpret_cast<char*>(&pcie_id_),
          reinterpret_cast<char*>(&other->pcie_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiController::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[0]);
}

// ===================================================================

class VirtioScsiLun::_Internal {
 public:
};

VirtioScsiLun::VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLun)
}
VirtioScsiLun::VirtioScsiLun(const VirtioScsiLun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bdev().empty()) {
    bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bdev(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLun)
}

inline void VirtioScsiLun::SharedCtor() {
bdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(controller_id_));
}

VirtioScsiLun::~VirtioScsiLun() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLun)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLun::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bdev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtioScsiLun::ArenaDtor(void* object) {
  VirtioScsiLun* _this = reinterpret_cast< VirtioScsiLun* >(object);
  (void)_this;
}
void VirtioScsiLun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLun::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLun)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdev_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(controller_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 controller_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bdev = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bdev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiLun.bdev"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLun::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLun)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 controller_id = 4;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_controller_id(), target);
  }

  // string bdev = 6;
  if (!this->_internal_bdev().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bdev().data(), static_cast<int>(this->_internal_bdev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiLun.bdev");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLun)
  return target;
}

size_t VirtioScsiLun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLun)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bdev = 6;
  if (!this->_internal_bdev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bdev());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 controller_id = 4;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLun::GetClassData() const { return &_class_data_; }

void VirtioScsiLun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLun *>(to)->MergeFrom(
      static_cast<const VirtioScsiLun &>(from));
}


void VirtioScsiLun::MergeFrom(const VirtioScsiLun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLun)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bdev().empty()) {
    _internal_set_bdev(from._internal_bdev());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLun::CopyFrom(const VirtioScsiLun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLun::IsInitialized() const {
  return true;
}

void VirtioScsiLun::InternalSwap(VirtioScsiLun* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bdev_, lhs_arena,
      &other->bdev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLun, controller_id_)
      + sizeof(VirtioScsiLun::controller_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLun, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLun::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[1]);
}

// ===================================================================

class VirtioScsiControllerCreateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiController& controller(const VirtioScsiControllerCreateRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiController&
VirtioScsiControllerCreateRequest::_Internal::controller(const VirtioScsiControllerCreateRequest* msg) {
  return *msg->controller_;
}
VirtioScsiControllerCreateRequest::VirtioScsiControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
}
VirtioScsiControllerCreateRequest::VirtioScsiControllerCreateRequest(const VirtioScsiControllerCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller()) {
    controller_ = new ::opi_api::storage::v1::VirtioScsiController(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
}

inline void VirtioScsiControllerCreateRequest::SharedCtor() {
controller_ = nullptr;
}

VirtioScsiControllerCreateRequest::~VirtioScsiControllerCreateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_;
}

void VirtioScsiControllerCreateRequest::ArenaDtor(void* object) {
  VirtioScsiControllerCreateRequest* _this = reinterpret_cast< VirtioScsiControllerCreateRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiController controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  return target;
}

size_t VirtioScsiControllerCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerCreateRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerCreateRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerCreateRequest &>(from));
}


void VirtioScsiControllerCreateRequest::MergeFrom(const VirtioScsiControllerCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller()) {
    _internal_mutable_controller()->::opi_api::storage::v1::VirtioScsiController::MergeFrom(from._internal_controller());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerCreateRequest::CopyFrom(const VirtioScsiControllerCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerCreateRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerCreateRequest::InternalSwap(VirtioScsiControllerCreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_, other->controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[2]);
}

// ===================================================================

class VirtioScsiControllerDeleteRequest::_Internal {
 public:
};

VirtioScsiControllerDeleteRequest::VirtioScsiControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
}
VirtioScsiControllerDeleteRequest::VirtioScsiControllerDeleteRequest(const VirtioScsiControllerDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
}

inline void VirtioScsiControllerDeleteRequest::SharedCtor() {
controller_id_ = int64_t{0};
}

VirtioScsiControllerDeleteRequest::~VirtioScsiControllerDeleteRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiControllerDeleteRequest::ArenaDtor(void* object) {
  VirtioScsiControllerDeleteRequest* _this = reinterpret_cast< VirtioScsiControllerDeleteRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  return target;
}

size_t VirtioScsiControllerDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerDeleteRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerDeleteRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerDeleteRequest &>(from));
}


void VirtioScsiControllerDeleteRequest::MergeFrom(const VirtioScsiControllerDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerDeleteRequest::CopyFrom(const VirtioScsiControllerDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerDeleteRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerDeleteRequest::InternalSwap(VirtioScsiControllerDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[3]);
}

// ===================================================================

class VirtioScsiControllerUpdateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiController& controller(const VirtioScsiControllerUpdateRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiController&
VirtioScsiControllerUpdateRequest::_Internal::controller(const VirtioScsiControllerUpdateRequest* msg) {
  return *msg->controller_;
}
VirtioScsiControllerUpdateRequest::VirtioScsiControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
}
VirtioScsiControllerUpdateRequest::VirtioScsiControllerUpdateRequest(const VirtioScsiControllerUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controller()) {
    controller_ = new ::opi_api::storage::v1::VirtioScsiController(*from.controller_);
  } else {
    controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
}

inline void VirtioScsiControllerUpdateRequest::SharedCtor() {
controller_ = nullptr;
}

VirtioScsiControllerUpdateRequest::~VirtioScsiControllerUpdateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controller_;
}

void VirtioScsiControllerUpdateRequest::ArenaDtor(void* object) {
  VirtioScsiControllerUpdateRequest* _this = reinterpret_cast< VirtioScsiControllerUpdateRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiController controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  return target;
}

size_t VirtioScsiControllerUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controller_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerUpdateRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerUpdateRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerUpdateRequest &>(from));
}


void VirtioScsiControllerUpdateRequest::MergeFrom(const VirtioScsiControllerUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller()) {
    _internal_mutable_controller()->::opi_api::storage::v1::VirtioScsiController::MergeFrom(from._internal_controller());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerUpdateRequest::CopyFrom(const VirtioScsiControllerUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerUpdateRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerUpdateRequest::InternalSwap(VirtioScsiControllerUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_, other->controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[4]);
}

// ===================================================================

class VirtioScsiControllerListRequest::_Internal {
 public:
};

VirtioScsiControllerListRequest::VirtioScsiControllerListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerListRequest)
}
VirtioScsiControllerListRequest::VirtioScsiControllerListRequest(const VirtioScsiControllerListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[5]);
}

// ===================================================================

class VirtioScsiControllerListResponse::_Internal {
 public:
};

VirtioScsiControllerListResponse::VirtioScsiControllerListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controller_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerListResponse)
}
VirtioScsiControllerListResponse::VirtioScsiControllerListResponse(const VirtioScsiControllerListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controller_(from.controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerListResponse)
}

inline void VirtioScsiControllerListResponse::SharedCtor() {
}

VirtioScsiControllerListResponse::~VirtioScsiControllerListResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiControllerListResponse::ArenaDtor(void* object) {
  VirtioScsiControllerListResponse* _this = reinterpret_cast< VirtioScsiControllerListResponse* >(object);
  (void)_this;
}
void VirtioScsiControllerListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerListResponse)
  return target;
}

size_t VirtioScsiControllerListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
  total_size += 1UL * this->_internal_controller_size();
  for (const auto& msg : this->controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerListResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerListResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerListResponse &>(from));
}


void VirtioScsiControllerListResponse::MergeFrom(const VirtioScsiControllerListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controller_.MergeFrom(from.controller_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerListResponse::CopyFrom(const VirtioScsiControllerListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerListResponse::IsInitialized() const {
  return true;
}

void VirtioScsiControllerListResponse::InternalSwap(VirtioScsiControllerListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  controller_.InternalSwap(&other->controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[6]);
}

// ===================================================================

class VirtioScsiControllerGetRequest::_Internal {
 public:
};

VirtioScsiControllerGetRequest::VirtioScsiControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerGetRequest)
}
VirtioScsiControllerGetRequest::VirtioScsiControllerGetRequest(const VirtioScsiControllerGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerGetRequest)
}

inline void VirtioScsiControllerGetRequest::SharedCtor() {
controller_id_ = int64_t{0};
}

VirtioScsiControllerGetRequest::~VirtioScsiControllerGetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiControllerGetRequest::ArenaDtor(void* object) {
  VirtioScsiControllerGetRequest* _this = reinterpret_cast< VirtioScsiControllerGetRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  return target;
}

size_t VirtioScsiControllerGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerGetRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerGetRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerGetRequest &>(from));
}


void VirtioScsiControllerGetRequest::MergeFrom(const VirtioScsiControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerGetRequest::CopyFrom(const VirtioScsiControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerGetRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerGetRequest::InternalSwap(VirtioScsiControllerGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[7]);
}

// ===================================================================

class VirtioScsiControllerStatsRequest::_Internal {
 public:
};

VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
}
VirtioScsiControllerStatsRequest::VirtioScsiControllerStatsRequest(const VirtioScsiControllerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
}

inline void VirtioScsiControllerStatsRequest::SharedCtor() {
controller_id_ = int64_t{0};
}

VirtioScsiControllerStatsRequest::~VirtioScsiControllerStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiControllerStatsRequest::ArenaDtor(void* object) {
  VirtioScsiControllerStatsRequest* _this = reinterpret_cast< VirtioScsiControllerStatsRequest* >(object);
  (void)_this;
}
void VirtioScsiControllerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  return target;
}

size_t VirtioScsiControllerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerStatsRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerStatsRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerStatsRequest &>(from));
}


void VirtioScsiControllerStatsRequest::MergeFrom(const VirtioScsiControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerStatsRequest::CopyFrom(const VirtioScsiControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerStatsRequest::IsInitialized() const {
  return true;
}

void VirtioScsiControllerStatsRequest::InternalSwap(VirtioScsiControllerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[8]);
}

// ===================================================================

class VirtioScsiControllerStatsResponse::_Internal {
 public:
};

VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
}
VirtioScsiControllerStatsResponse::VirtioScsiControllerStatsResponse(const VirtioScsiControllerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
}

inline void VirtioScsiControllerStatsResponse::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

VirtioScsiControllerStatsResponse::~VirtioScsiControllerStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiControllerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtioScsiControllerStatsResponse::ArenaDtor(void* object) {
  VirtioScsiControllerStatsResponse* _this = reinterpret_cast< VirtioScsiControllerStatsResponse* >(object);
  (void)_this;
}
void VirtioScsiControllerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiControllerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiControllerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiControllerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiControllerStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  return target;
}

size_t VirtioScsiControllerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiControllerStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiControllerStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiControllerStatsResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiControllerStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiControllerStatsResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiControllerStatsResponse &>(from));
}


void VirtioScsiControllerStatsResponse::MergeFrom(const VirtioScsiControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiControllerStatsResponse::CopyFrom(const VirtioScsiControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiControllerStatsResponse::IsInitialized() const {
  return true;
}

void VirtioScsiControllerStatsResponse::InternalSwap(VirtioScsiControllerStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiControllerStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[9]);
}

// ===================================================================

class VirtioScsiLunCreateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiLun& lun(const VirtioScsiLunCreateRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiLun&
VirtioScsiLunCreateRequest::_Internal::lun(const VirtioScsiLunCreateRequest* msg) {
  return *msg->lun_;
}
VirtioScsiLunCreateRequest::VirtioScsiLunCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunCreateRequest)
}
VirtioScsiLunCreateRequest::VirtioScsiLunCreateRequest(const VirtioScsiLunCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lun()) {
    lun_ = new ::opi_api::storage::v1::VirtioScsiLun(*from.lun_);
  } else {
    lun_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunCreateRequest)
}

inline void VirtioScsiLunCreateRequest::SharedCtor() {
lun_ = nullptr;
}

VirtioScsiLunCreateRequest::~VirtioScsiLunCreateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lun_;
}

void VirtioScsiLunCreateRequest::ArenaDtor(void* object) {
  VirtioScsiLunCreateRequest* _this = reinterpret_cast< VirtioScsiLunCreateRequest* >(object);
  (void)_this;
}
void VirtioScsiLunCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiLun lun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lun(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  return target;
}

size_t VirtioScsiLunCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunCreateRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunCreateRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunCreateRequest &>(from));
}


void VirtioScsiLunCreateRequest::MergeFrom(const VirtioScsiLunCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lun()) {
    _internal_mutable_lun()->::opi_api::storage::v1::VirtioScsiLun::MergeFrom(from._internal_lun());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunCreateRequest::CopyFrom(const VirtioScsiLunCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunCreateRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunCreateRequest::InternalSwap(VirtioScsiLunCreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lun_, other->lun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[10]);
}

// ===================================================================

class VirtioScsiLunDeleteRequest::_Internal {
 public:
};

VirtioScsiLunDeleteRequest::VirtioScsiLunDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
}
VirtioScsiLunDeleteRequest::VirtioScsiLunDeleteRequest(const VirtioScsiLunDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
}

inline void VirtioScsiLunDeleteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

VirtioScsiLunDeleteRequest::~VirtioScsiLunDeleteRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiLunDeleteRequest::ArenaDtor(void* object) {
  VirtioScsiLunDeleteRequest* _this = reinterpret_cast< VirtioScsiLunDeleteRequest* >(object);
  (void)_this;
}
void VirtioScsiLunDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lun_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lun_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lun_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  return target;
}

size_t VirtioScsiLunDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lun_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunDeleteRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunDeleteRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunDeleteRequest &>(from));
}


void VirtioScsiLunDeleteRequest::MergeFrom(const VirtioScsiLunDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  if (from._internal_lun_id() != 0) {
    _internal_set_lun_id(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunDeleteRequest::CopyFrom(const VirtioScsiLunDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunDeleteRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunDeleteRequest::InternalSwap(VirtioScsiLunDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLunDeleteRequest, lun_id_)
      + sizeof(VirtioScsiLunDeleteRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLunDeleteRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[11]);
}

// ===================================================================

class VirtioScsiLunUpdateRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::VirtioScsiLun& lun(const VirtioScsiLunUpdateRequest* msg);
};

const ::opi_api::storage::v1::VirtioScsiLun&
VirtioScsiLunUpdateRequest::_Internal::lun(const VirtioScsiLunUpdateRequest* msg) {
  return *msg->lun_;
}
VirtioScsiLunUpdateRequest::VirtioScsiLunUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
}
VirtioScsiLunUpdateRequest::VirtioScsiLunUpdateRequest(const VirtioScsiLunUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lun()) {
    lun_ = new ::opi_api::storage::v1::VirtioScsiLun(*from.lun_);
  } else {
    lun_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
}

inline void VirtioScsiLunUpdateRequest::SharedCtor() {
lun_ = nullptr;
}

VirtioScsiLunUpdateRequest::~VirtioScsiLunUpdateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lun_;
}

void VirtioScsiLunUpdateRequest::ArenaDtor(void* object) {
  VirtioScsiLunUpdateRequest* _this = reinterpret_cast< VirtioScsiLunUpdateRequest* >(object);
  (void)_this;
}
void VirtioScsiLunUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.VirtioScsiLun lun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lun(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  return target;
}

size_t VirtioScsiLunUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  if (this->_internal_has_lun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lun_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunUpdateRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunUpdateRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunUpdateRequest &>(from));
}


void VirtioScsiLunUpdateRequest::MergeFrom(const VirtioScsiLunUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lun()) {
    _internal_mutable_lun()->::opi_api::storage::v1::VirtioScsiLun::MergeFrom(from._internal_lun());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunUpdateRequest::CopyFrom(const VirtioScsiLunUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunUpdateRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunUpdateRequest::InternalSwap(VirtioScsiLunUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lun_, other->lun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[12]);
}

// ===================================================================

class VirtioScsiLunListRequest::_Internal {
 public:
};

VirtioScsiLunListRequest::VirtioScsiLunListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunListRequest)
}
VirtioScsiLunListRequest::VirtioScsiLunListRequest(const VirtioScsiLunListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunListRequest)
}

inline void VirtioScsiLunListRequest::SharedCtor() {
controller_id_ = int64_t{0};
}

VirtioScsiLunListRequest::~VirtioScsiLunListRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiLunListRequest::ArenaDtor(void* object) {
  VirtioScsiLunListRequest* _this = reinterpret_cast< VirtioScsiLunListRequest* >(object);
  (void)_this;
}
void VirtioScsiLunListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunListRequest)
  return target;
}

size_t VirtioScsiLunListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunListRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunListRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunListRequest &>(from));
}


void VirtioScsiLunListRequest::MergeFrom(const VirtioScsiLunListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunListRequest::CopyFrom(const VirtioScsiLunListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunListRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunListRequest::InternalSwap(VirtioScsiLunListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(controller_id_, other->controller_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[13]);
}

// ===================================================================

class VirtioScsiLunListResponse::_Internal {
 public:
};

VirtioScsiLunListResponse::VirtioScsiLunListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lun_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunListResponse)
}
VirtioScsiLunListResponse::VirtioScsiLunListResponse(const VirtioScsiLunListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lun_(from.lun_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunListResponse)
}

inline void VirtioScsiLunListResponse::SharedCtor() {
}

VirtioScsiLunListResponse::~VirtioScsiLunListResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiLunListResponse::ArenaDtor(void* object) {
  VirtioScsiLunListResponse* _this = reinterpret_cast< VirtioScsiLunListResponse* >(object);
  (void)_this;
}
void VirtioScsiLunListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lun_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lun(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lun_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lun(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunListResponse)
  return target;
}

size_t VirtioScsiLunListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
  total_size += 1UL * this->_internal_lun_size();
  for (const auto& msg : this->lun_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunListResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiLunListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunListResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunListResponse &>(from));
}


void VirtioScsiLunListResponse::MergeFrom(const VirtioScsiLunListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lun_.MergeFrom(from.lun_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunListResponse::CopyFrom(const VirtioScsiLunListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunListResponse::IsInitialized() const {
  return true;
}

void VirtioScsiLunListResponse::InternalSwap(VirtioScsiLunListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lun_.InternalSwap(&other->lun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[14]);
}

// ===================================================================

class VirtioScsiLunGetRequest::_Internal {
 public:
};

VirtioScsiLunGetRequest::VirtioScsiLunGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunGetRequest)
}
VirtioScsiLunGetRequest::VirtioScsiLunGetRequest(const VirtioScsiLunGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunGetRequest)
}

inline void VirtioScsiLunGetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

VirtioScsiLunGetRequest::~VirtioScsiLunGetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiLunGetRequest::ArenaDtor(void* object) {
  VirtioScsiLunGetRequest* _this = reinterpret_cast< VirtioScsiLunGetRequest* >(object);
  (void)_this;
}
void VirtioScsiLunGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lun_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lun_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lun_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunGetRequest)
  return target;
}

size_t VirtioScsiLunGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lun_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunGetRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunGetRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunGetRequest &>(from));
}


void VirtioScsiLunGetRequest::MergeFrom(const VirtioScsiLunGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  if (from._internal_lun_id() != 0) {
    _internal_set_lun_id(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunGetRequest::CopyFrom(const VirtioScsiLunGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunGetRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunGetRequest::InternalSwap(VirtioScsiLunGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLunGetRequest, lun_id_)
      + sizeof(VirtioScsiLunGetRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLunGetRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[15]);
}

// ===================================================================

class VirtioScsiLunStatsRequest::_Internal {
 public:
};

VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
}
VirtioScsiLunStatsRequest::VirtioScsiLunStatsRequest(const VirtioScsiLunStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
}

inline void VirtioScsiLunStatsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lun_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
}

VirtioScsiLunStatsRequest::~VirtioScsiLunStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioScsiLunStatsRequest::ArenaDtor(void* object) {
  VirtioScsiLunStatsRequest* _this = reinterpret_cast< VirtioScsiLunStatsRequest* >(object);
  (void)_this;
}
void VirtioScsiLunStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lun_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(lun_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 controller_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          controller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lun_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_controller_id(), target);
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lun_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  return target;
}

size_t VirtioScsiLunStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 controller_id = 1;
  if (this->_internal_controller_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_controller_id());
  }

  // int64 lun_id = 2;
  if (this->_internal_lun_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lun_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunStatsRequest::GetClassData() const { return &_class_data_; }

void VirtioScsiLunStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunStatsRequest *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunStatsRequest &>(from));
}


void VirtioScsiLunStatsRequest::MergeFrom(const VirtioScsiLunStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_controller_id() != 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  if (from._internal_lun_id() != 0) {
    _internal_set_lun_id(from._internal_lun_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunStatsRequest::CopyFrom(const VirtioScsiLunStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunStatsRequest::IsInitialized() const {
  return true;
}

void VirtioScsiLunStatsRequest::InternalSwap(VirtioScsiLunStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioScsiLunStatsRequest, lun_id_)
      + sizeof(VirtioScsiLunStatsRequest::lun_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioScsiLunStatsRequest, controller_id_)>(
          reinterpret_cast<char*>(&controller_id_),
          reinterpret_cast<char*>(&other->controller_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[16]);
}

// ===================================================================

class VirtioScsiLunStatsResponse::_Internal {
 public:
};

VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
}
VirtioScsiLunStatsResponse::VirtioScsiLunStatsResponse(const VirtioScsiLunStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
}

inline void VirtioScsiLunStatsResponse::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

VirtioScsiLunStatsResponse::~VirtioScsiLunStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtioScsiLunStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtioScsiLunStatsResponse::ArenaDtor(void* object) {
  VirtioScsiLunStatsResponse* _this = reinterpret_cast< VirtioScsiLunStatsResponse* >(object);
  (void)_this;
}
void VirtioScsiLunStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtioScsiLunStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtioScsiLunStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioScsiLunStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.VirtioScsiLunStatsResponse.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioScsiLunStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.VirtioScsiLunStatsResponse.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  return target;
}

size_t VirtioScsiLunStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioScsiLunStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtioScsiLunStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioScsiLunStatsResponse::GetClassData() const { return &_class_data_; }

void VirtioScsiLunStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VirtioScsiLunStatsResponse *>(to)->MergeFrom(
      static_cast<const VirtioScsiLunStatsResponse &>(from));
}


void VirtioScsiLunStatsResponse::MergeFrom(const VirtioScsiLunStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioScsiLunStatsResponse::CopyFrom(const VirtioScsiLunStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.VirtioScsiLunStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioScsiLunStatsResponse::IsInitialized() const {
  return true;
}

void VirtioScsiLunStatsResponse::InternalSwap(VirtioScsiLunStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioScsiLunStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_getter, &descriptor_table_frontend_5fvirtio_5fscsi_2eproto_once,
      file_level_metadata_frontend_5fvirtio_5fscsi_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiController* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiController >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLun* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLun >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerCreateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerDeleteRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerUpdateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerListRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerListResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerGetRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiControllerStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiControllerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiControllerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunCreateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunDeleteRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunUpdateRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunListRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunListResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunGetRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::VirtioScsiLunStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::VirtioScsiLunStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::VirtioScsiLunStatsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
