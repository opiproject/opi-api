// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: frontend_nvme_pcie.proto

#include "frontend_nvme_pcie.pb.h"
#include "frontend_nvme_pcie.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* FrontendNvmeService_method_names[] = {
  "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeSubsystem",
  "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeSubsystem",
  "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeSubsystem",
  "/opi_api.storage.v1.FrontendNvmeService/ListNvmeSubsystems",
  "/opi_api.storage.v1.FrontendNvmeService/GetNvmeSubsystem",
  "/opi_api.storage.v1.FrontendNvmeService/NvmeSubsystemStats",
  "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeController",
  "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeController",
  "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeController",
  "/opi_api.storage.v1.FrontendNvmeService/ListNvmeControllers",
  "/opi_api.storage.v1.FrontendNvmeService/GetNvmeController",
  "/opi_api.storage.v1.FrontendNvmeService/NvmeControllerStats",
  "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeNamespace",
  "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeNamespace",
  "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeNamespace",
  "/opi_api.storage.v1.FrontendNvmeService/ListNvmeNamespaces",
  "/opi_api.storage.v1.FrontendNvmeService/GetNvmeNamespace",
  "/opi_api.storage.v1.FrontendNvmeService/NvmeNamespaceStats",
};

std::unique_ptr< FrontendNvmeService::Stub> FrontendNvmeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FrontendNvmeService::Stub> stub(new FrontendNvmeService::Stub(channel, options));
  return stub;
}

FrontendNvmeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateNvmeSubsystem_(FrontendNvmeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNvmeSubsystem_(FrontendNvmeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNvmeSubsystem_(FrontendNvmeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmeSubsystems_(FrontendNvmeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNvmeSubsystem_(FrontendNvmeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmeSubsystemStats_(FrontendNvmeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNvmeController_(FrontendNvmeService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNvmeController_(FrontendNvmeService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNvmeController_(FrontendNvmeService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmeControllers_(FrontendNvmeService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNvmeController_(FrontendNvmeService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmeControllerStats_(FrontendNvmeService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNvmeNamespace_(FrontendNvmeService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNvmeNamespace_(FrontendNvmeService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNvmeNamespace_(FrontendNvmeService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNvmeNamespaces_(FrontendNvmeService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNvmeNamespace_(FrontendNvmeService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NvmeNamespaceStats_(FrontendNvmeService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FrontendNvmeService::Stub::CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNvmeSubsystem_, context, request, response);
}

void FrontendNvmeService::Stub::async::CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeSubsystem_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeSubsystem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::PrepareAsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeSubsystem, ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNvmeSubsystem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::AsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNvmeSubsystemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNvmeSubsystem_, context, request, response);
}

void FrontendNvmeService::Stub::async::DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeSubsystem_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeSubsystem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::PrepareAsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNvmeSubsystem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::AsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNvmeSubsystemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNvmeSubsystem_, context, request, response);
}

void FrontendNvmeService::Stub::async::UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeSubsystem_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeSubsystem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::PrepareAsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeSubsystem, ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNvmeSubsystem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::AsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNvmeSubsystemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmeSubsystems_, context, request, response);
}

void FrontendNvmeService::Stub::async::ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeSubsystems_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeSubsystems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* FrontendNvmeService::Stub::PrepareAsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmeSubsystemsResponse, ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmeSubsystems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* FrontendNvmeService::Stub::AsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmeSubsystemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNvmeSubsystem_, context, request, response);
}

void FrontendNvmeService::Stub::async::GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeSubsystem_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeSubsystem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::PrepareAsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeSubsystem, ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNvmeSubsystem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* FrontendNvmeService::Stub::AsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNvmeSubsystemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::NvmeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest& request, ::opi_api::storage::v1::NvmeSubsystemStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmeSubsystemStatsRequest, ::opi_api::storage::v1::NvmeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmeSubsystemStats_, context, request, response);
}

void FrontendNvmeService::Stub::async::NvmeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest* request, ::opi_api::storage::v1::NvmeSubsystemStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmeSubsystemStatsRequest, ::opi_api::storage::v1::NvmeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeSubsystemStats_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::NvmeSubsystemStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest* request, ::opi_api::storage::v1::NvmeSubsystemStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeSubsystemStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystemStatsResponse>* FrontendNvmeService::Stub::PrepareAsyncNvmeSubsystemStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeSubsystemStatsResponse, ::opi_api::storage::v1::NvmeSubsystemStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmeSubsystemStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystemStatsResponse>* FrontendNvmeService::Stub::AsyncNvmeSubsystemStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmeSubsystemStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNvmeController_, context, request, response);
}

void FrontendNvmeService::Stub::async::CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeController_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::PrepareAsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeController, ::opi_api::storage::v1::CreateNvmeControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNvmeController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::AsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNvmeControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNvmeController_, context, request, response);
}

void FrontendNvmeService::Stub::async::DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeController_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::PrepareAsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNvmeController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::AsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNvmeControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNvmeController_, context, request, response);
}

void FrontendNvmeService::Stub::async::UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeController_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::PrepareAsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeController, ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNvmeController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::AsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNvmeControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::opi_api::storage::v1::ListNvmeControllersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmeControllers_, context, request, response);
}

void FrontendNvmeService::Stub::async::ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeControllers_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeControllers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>* FrontendNvmeService::Stub::PrepareAsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmeControllersResponse, ::opi_api::storage::v1::ListNvmeControllersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmeControllers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>* FrontendNvmeService::Stub::AsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmeControllersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNvmeController_, context, request, response);
}

void FrontendNvmeService::Stub::async::GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeController_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeController_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::PrepareAsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeController, ::opi_api::storage::v1::GetNvmeControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNvmeController_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* FrontendNvmeService::Stub::AsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNvmeControllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::NvmeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest& request, ::opi_api::storage::v1::NvmeControllerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmeControllerStatsRequest, ::opi_api::storage::v1::NvmeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmeControllerStats_, context, request, response);
}

void FrontendNvmeService::Stub::async::NvmeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest* request, ::opi_api::storage::v1::NvmeControllerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmeControllerStatsRequest, ::opi_api::storage::v1::NvmeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeControllerStats_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::NvmeControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest* request, ::opi_api::storage::v1::NvmeControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeControllerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeControllerStatsResponse>* FrontendNvmeService::Stub::PrepareAsyncNvmeControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeControllerStatsResponse, ::opi_api::storage::v1::NvmeControllerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmeControllerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeControllerStatsResponse>* FrontendNvmeService::Stub::AsyncNvmeControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmeControllerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNvmeNamespace_, context, request, response);
}

void FrontendNvmeService::Stub::async::CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeNamespace_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNvmeNamespace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::PrepareAsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeNamespace, ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNvmeNamespace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::AsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNvmeNamespaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNvmeNamespace_, context, request, response);
}

void FrontendNvmeService::Stub::async::DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeNamespace_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNvmeNamespace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::PrepareAsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNvmeNamespace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendNvmeService::Stub::AsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNvmeNamespaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNvmeNamespace_, context, request, response);
}

void FrontendNvmeService::Stub::async::UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeNamespace_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNvmeNamespace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::PrepareAsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeNamespace, ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNvmeNamespace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::AsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNvmeNamespaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNvmeNamespaces_, context, request, response);
}

void FrontendNvmeService::Stub::async::ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeNamespaces_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNvmeNamespaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* FrontendNvmeService::Stub::PrepareAsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListNvmeNamespacesResponse, ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNvmeNamespaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* FrontendNvmeService::Stub::AsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNvmeNamespacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNvmeNamespace_, context, request, response);
}

void FrontendNvmeService::Stub::async::GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeNamespace_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNvmeNamespace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::PrepareAsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeNamespace, ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNvmeNamespace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* FrontendNvmeService::Stub::AsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNvmeNamespaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendNvmeService::Stub::NvmeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest& request, ::opi_api::storage::v1::NvmeNamespaceStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::NvmeNamespaceStatsRequest, ::opi_api::storage::v1::NvmeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NvmeNamespaceStats_, context, request, response);
}

void FrontendNvmeService::Stub::async::NvmeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest* request, ::opi_api::storage::v1::NvmeNamespaceStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::NvmeNamespaceStatsRequest, ::opi_api::storage::v1::NvmeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeNamespaceStats_, context, request, response, std::move(f));
}

void FrontendNvmeService::Stub::async::NvmeNamespaceStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest* request, ::opi_api::storage::v1::NvmeNamespaceStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NvmeNamespaceStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespaceStatsResponse>* FrontendNvmeService::Stub::PrepareAsyncNvmeNamespaceStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::NvmeNamespaceStatsResponse, ::opi_api::storage::v1::NvmeNamespaceStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NvmeNamespaceStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespaceStatsResponse>* FrontendNvmeService::Stub::AsyncNvmeNamespaceStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNvmeNamespaceStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

FrontendNvmeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* req,
             ::opi_api::storage::v1::NvmeSubsystem* resp) {
               return service->CreateNvmeSubsystem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNvmeSubsystem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* req,
             ::opi_api::storage::v1::NvmeSubsystem* resp) {
               return service->UpdateNvmeSubsystem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* req,
             ::opi_api::storage::v1::ListNvmeSubsystemsResponse* resp) {
               return service->ListNvmeSubsystems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNvmeSubsystemRequest* req,
             ::opi_api::storage::v1::NvmeSubsystem* resp) {
               return service->GetNvmeSubsystem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::NvmeSubsystemStatsRequest, ::opi_api::storage::v1::NvmeSubsystemStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmeSubsystemStatsRequest* req,
             ::opi_api::storage::v1::NvmeSubsystemStatsResponse* resp) {
               return service->NvmeSubsystemStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNvmeControllerRequest* req,
             ::opi_api::storage::v1::NvmeController* resp) {
               return service->CreateNvmeController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNvmeControllerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNvmeController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNvmeControllerRequest* req,
             ::opi_api::storage::v1::NvmeController* resp) {
               return service->UpdateNvmeController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmeControllersRequest* req,
             ::opi_api::storage::v1::ListNvmeControllersResponse* resp) {
               return service->ListNvmeControllers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNvmeControllerRequest* req,
             ::opi_api::storage::v1::NvmeController* resp) {
               return service->GetNvmeController(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::NvmeControllerStatsRequest, ::opi_api::storage::v1::NvmeControllerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmeControllerStatsRequest* req,
             ::opi_api::storage::v1::NvmeControllerStatsResponse* resp) {
               return service->NvmeControllerStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* req,
             ::opi_api::storage::v1::NvmeNamespace* resp) {
               return service->CreateNvmeNamespace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNvmeNamespace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* req,
             ::opi_api::storage::v1::NvmeNamespace* resp) {
               return service->UpdateNvmeNamespace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListNvmeNamespacesRequest* req,
             ::opi_api::storage::v1::ListNvmeNamespacesResponse* resp) {
               return service->ListNvmeNamespaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetNvmeNamespaceRequest* req,
             ::opi_api::storage::v1::NvmeNamespace* resp) {
               return service->GetNvmeNamespace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendNvmeService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendNvmeService::Service, ::opi_api::storage::v1::NvmeNamespaceStatsRequest, ::opi_api::storage::v1::NvmeNamespaceStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendNvmeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::NvmeNamespaceStatsRequest* req,
             ::opi_api::storage::v1::NvmeNamespaceStatsResponse* resp) {
               return service->NvmeNamespaceStats(ctx, req, resp);
             }, this)));
}

FrontendNvmeService::Service::~Service() {
}

::grpc::Status FrontendNvmeService::Service::CreateNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::DeleteNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::UpdateNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::ListNvmeSubsystems(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::GetNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::NvmeSubsystemStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeSubsystemStatsRequest* request, ::opi_api::storage::v1::NvmeSubsystemStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::CreateNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::DeleteNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::UpdateNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::ListNvmeControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::GetNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::NvmeControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeControllerStatsRequest* request, ::opi_api::storage::v1::NvmeControllerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::CreateNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::DeleteNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::UpdateNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::ListNvmeNamespaces(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::GetNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendNvmeService::Service::NvmeNamespaceStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::NvmeNamespaceStatsRequest* request, ::opi_api::storage::v1::NvmeNamespaceStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

