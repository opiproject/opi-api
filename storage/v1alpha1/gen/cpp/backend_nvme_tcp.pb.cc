// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_nvme_tcp.proto

#include "backend_nvme_tcp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace storage {
namespace v1 {
constexpr NVMfRemoteController::NVMfRemoteController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subnqn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , trtype_(0)

  , adrfam_(0)

  , trsvcid_(int64_t{0})
  , hdgst_(false)
  , ddgst_(false)
  , multipath_(0)

  , io_queues_count_(int64_t{0})
  , queue_size_(int64_t{0}){}
struct NVMfRemoteControllerDefaultTypeInternal {
  constexpr NVMfRemoteControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerDefaultTypeInternal() {}
  union {
    NVMfRemoteController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerDefaultTypeInternal _NVMfRemoteController_default_instance_;
constexpr NVMfRemoteControllerConnectRequest::NVMfRemoteControllerConnectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctrl_(nullptr){}
struct NVMfRemoteControllerConnectRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerConnectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerConnectRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerConnectRequestDefaultTypeInternal _NVMfRemoteControllerConnectRequest_default_instance_;
constexpr NVMfRemoteControllerConnectResponse::NVMfRemoteControllerConnectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NVMfRemoteControllerConnectResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerConnectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerConnectResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerConnectResponseDefaultTypeInternal _NVMfRemoteControllerConnectResponse_default_instance_;
constexpr NVMfRemoteControllerDisconnectRequest::NVMfRemoteControllerDisconnectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct NVMfRemoteControllerDisconnectRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerDisconnectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerDisconnectRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerDisconnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerDisconnectRequestDefaultTypeInternal _NVMfRemoteControllerDisconnectRequest_default_instance_;
constexpr NVMfRemoteControllerDisconnectResponse::NVMfRemoteControllerDisconnectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NVMfRemoteControllerDisconnectResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerDisconnectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerDisconnectResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerDisconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerDisconnectResponseDefaultTypeInternal _NVMfRemoteControllerDisconnectResponse_default_instance_;
constexpr NVMfRemoteControllerResetRequest::NVMfRemoteControllerResetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct NVMfRemoteControllerResetRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerResetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerResetRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerResetRequestDefaultTypeInternal _NVMfRemoteControllerResetRequest_default_instance_;
constexpr NVMfRemoteControllerResetResponse::NVMfRemoteControllerResetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NVMfRemoteControllerResetResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerResetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerResetResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerResetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerResetResponseDefaultTypeInternal _NVMfRemoteControllerResetResponse_default_instance_;
constexpr NVMfRemoteControllerListRequest::NVMfRemoteControllerListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct NVMfRemoteControllerListRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerListRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerListRequestDefaultTypeInternal _NVMfRemoteControllerListRequest_default_instance_;
constexpr NVMfRemoteControllerListResponse::NVMfRemoteControllerListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctrl_(){}
struct NVMfRemoteControllerListResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerListResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerListResponseDefaultTypeInternal _NVMfRemoteControllerListResponse_default_instance_;
constexpr NVMfRemoteControllerGetRequest::NVMfRemoteControllerGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct NVMfRemoteControllerGetRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerGetRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerGetRequestDefaultTypeInternal _NVMfRemoteControllerGetRequest_default_instance_;
constexpr NVMfRemoteControllerGetResponse::NVMfRemoteControllerGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ctrl_(nullptr){}
struct NVMfRemoteControllerGetResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerGetResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerGetResponseDefaultTypeInternal _NVMfRemoteControllerGetResponse_default_instance_;
constexpr NVMfRemoteControllerStatsRequest::NVMfRemoteControllerStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct NVMfRemoteControllerStatsRequestDefaultTypeInternal {
  constexpr NVMfRemoteControllerStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerStatsRequestDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerStatsRequestDefaultTypeInternal _NVMfRemoteControllerStatsRequest_default_instance_;
constexpr NVMfRemoteControllerStatsResponse::NVMfRemoteControllerStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct NVMfRemoteControllerStatsResponseDefaultTypeInternal {
  constexpr NVMfRemoteControllerStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NVMfRemoteControllerStatsResponseDefaultTypeInternal() {}
  union {
    NVMfRemoteControllerStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NVMfRemoteControllerStatsResponseDefaultTypeInternal _NVMfRemoteControllerStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backend_5fnvme_5ftcp_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_backend_5fnvme_5ftcp_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backend_5fnvme_5ftcp_2eproto = nullptr;

const uint32_t TableStruct_backend_5fnvme_5ftcp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, trtype_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, adrfam_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, traddr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, trsvcid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, subnqn_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, hdgst_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, ddgst_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, multipath_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, io_queues_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteController, queue_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerConnectRequest, ctrl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerResetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerListRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerListResponse, ctrl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerGetResponse, ctrl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerStatsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::NVMfRemoteControllerStatsResponse, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteController)},
  { 17, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerConnectRequest)},
  { 24, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerConnectResponse)},
  { 30, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest)},
  { 37, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse)},
  { 43, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerResetRequest)},
  { 50, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerResetResponse)},
  { 56, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerListRequest)},
  { 63, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerListResponse)},
  { 70, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerGetRequest)},
  { 77, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerGetResponse)},
  { 84, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerStatsRequest)},
  { 91, -1, -1, sizeof(::opi_api::storage::v1::NVMfRemoteControllerStatsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerConnectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerDisconnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerDisconnectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerResetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerResetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_NVMfRemoteControllerStatsResponse_default_instance_),
};

const char descriptor_table_protodef_backend_5fnvme_5ftcp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026backend_nvme_tcp.proto\022\022opi_api.storag"
  "e.v1\"\302\002\n\024NVMfRemoteController\022\n\n\002id\030\001 \001("
  "\003\0225\n\006trtype\030\002 \001(\0162%.opi_api.storage.v1.N"
  "vmeTransportType\0225\n\006adrfam\030\003 \001(\0162%.opi_a"
  "pi.storage.v1.NvmeAddressFamily\022\016\n\006tradd"
  "r\030\004 \001(\t\022\017\n\007trsvcid\030\005 \001(\003\022\016\n\006subnqn\030\006 \001(\t"
  "\022\r\n\005hdgst\030\007 \001(\010\022\r\n\005ddgst\030\010 \001(\010\0224\n\tmultip"
  "ath\030\t \001(\0162!.opi_api.storage.v1.NvmeMulti"
  "path\022\027\n\017io_queues_count\030\n \001(\003\022\022\n\nqueue_s"
  "ize\030\013 \001(\003\"\\\n\"NVMfRemoteControllerConnect"
  "Request\0226\n\004ctrl\030\001 \001(\0132(.opi_api.storage."
  "v1.NVMfRemoteController\"%\n#NVMfRemoteCon"
  "trollerConnectResponse\"3\n%NVMfRemoteCont"
  "rollerDisconnectRequest\022\n\n\002id\030\001 \001(\003\"(\n&N"
  "VMfRemoteControllerDisconnectResponse\".\n"
  " NVMfRemoteControllerResetRequest\022\n\n\002id\030"
  "\001 \001(\003\"#\n!NVMfRemoteControllerResetRespon"
  "se\"-\n\037NVMfRemoteControllerListRequest\022\n\n"
  "\002id\030\001 \001(\003\"Z\n NVMfRemoteControllerListRes"
  "ponse\0226\n\004ctrl\030\001 \003(\0132(.opi_api.storage.v1"
  ".NVMfRemoteController\",\n\036NVMfRemoteContr"
  "ollerGetRequest\022\n\n\002id\030\001 \001(\003\"Y\n\037NVMfRemot"
  "eControllerGetResponse\0226\n\004ctrl\030\001 \001(\0132(.o"
  "pi_api.storage.v1.NVMfRemoteController\"."
  "\n NVMfRemoteControllerStatsRequest\022\n\n\002id"
  "\030\001 \001(\003\">\n!NVMfRemoteControllerStatsRespo"
  "nse\022\n\n\002id\030\001 \001(\003\022\r\n\005stats\030\002 \001(\t*\264\001\n\021NvmeT"
  "ransportType\022#\n\037NVME_TRANSPORT_TYPE_UNSP"
  "ECIFIED\020\000\022\025\n\021NVME_TRANSPORT_FC\020\001\022\027\n\023NVME"
  "_TRANSPORT_PCIE\020\002\022\027\n\023NVME_TRANSPORT_RDMA"
  "\020\003\022\026\n\022NVME_TRANSPORT_TCP\020\004\022\031\n\025NVME_TRANS"
  "PORT_CUSTOM\020\005*\250\001\n\021NvmeAddressFamily\022#\n\037N"
  "VME_ADDRESS_FAMILY_UNSPECIFIED\020\000\022\024\n\020NVMF"
  "_ADRFAM_IPV4\020\001\022\024\n\020NVMF_ADRFAM_IPV6\020\002\022\022\n\016"
  "NVMF_ADRFAM_IB\020\003\022\022\n\016NVMF_ADRFAM_FC\020\004\022\032\n\026"
  "NVMF_ADRFAM_INTRA_HOST\020\005*\206\001\n\rNvmeMultipa"
  "th\022\036\n\032NVME_MULTIPATH_UNSPECIFIED\020\000\022\032\n\026NV"
  "ME_MULTIPATH_DISABLE\020\001\022\033\n\027NVME_MULTIPATH"
  "_FAILOVER\020\002\022\034\n\030NVME_MULTIPATH_MULTIPATH\020"
  "\0032\367\006\n\033NVMfRemoteControllerService\022\220\001\n\033NV"
  "MfRemoteControllerConnect\0226.opi_api.stor"
  "age.v1.NVMfRemoteControllerConnectReques"
  "t\0327.opi_api.storage.v1.NVMfRemoteControl"
  "lerConnectResponse\"\000\022\231\001\n\036NVMfRemoteContr"
  "ollerDisconnect\0229.opi_api.storage.v1.NVM"
  "fRemoteControllerDisconnectRequest\032:.opi"
  "_api.storage.v1.NVMfRemoteControllerDisc"
  "onnectResponse\"\000\022\212\001\n\031NVMfRemoteControlle"
  "rReset\0224.opi_api.storage.v1.NVMfRemoteCo"
  "ntrollerResetRequest\0325.opi_api.storage.v"
  "1.NVMfRemoteControllerResetResponse\"\000\022\207\001"
  "\n\030NVMfRemoteControllerList\0223.opi_api.sto"
  "rage.v1.NVMfRemoteControllerListRequest\032"
  "4.opi_api.storage.v1.NVMfRemoteControlle"
  "rListResponse\"\000\022\204\001\n\027NVMfRemoteController"
  "Get\0222.opi_api.storage.v1.NVMfRemoteContr"
  "ollerGetRequest\0323.opi_api.storage.v1.NVM"
  "fRemoteControllerGetResponse\"\000\022\212\001\n\031NVMfR"
  "emoteControllerStats\0224.opi_api.storage.v"
  "1.NVMfRemoteControllerStatsRequest\0325.opi"
  "_api.storage.v1.NVMfRemoteControllerStat"
  "sResponse\"\000Bb\n\022opi_api.storage.v1B\023Backe"
  "ndNvmeTcpProtoP\001Z5github.com/opiproject/"
  "opi-api/storage/v1alpha1/gen/gob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backend_5fnvme_5ftcp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fnvme_5ftcp_2eproto = {
  false, false, 2559, descriptor_table_protodef_backend_5fnvme_5ftcp_2eproto, "backend_nvme_tcp.proto", 
  &descriptor_table_backend_5fnvme_5ftcp_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_backend_5fnvme_5ftcp_2eproto::offsets,
  file_level_metadata_backend_5fnvme_5ftcp_2eproto, file_level_enum_descriptors_backend_5fnvme_5ftcp_2eproto, file_level_service_descriptors_backend_5fnvme_5ftcp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_backend_5fnvme_5ftcp_2eproto_getter() {
  return &descriptor_table_backend_5fnvme_5ftcp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_backend_5fnvme_5ftcp_2eproto(&descriptor_table_backend_5fnvme_5ftcp_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeTransportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fnvme_5ftcp_2eproto);
  return file_level_enum_descriptors_backend_5fnvme_5ftcp_2eproto[0];
}
bool NvmeTransportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeAddressFamily_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fnvme_5ftcp_2eproto);
  return file_level_enum_descriptors_backend_5fnvme_5ftcp_2eproto[1];
}
bool NvmeAddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeMultipath_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fnvme_5ftcp_2eproto);
  return file_level_enum_descriptors_backend_5fnvme_5ftcp_2eproto[2];
}
bool NvmeMultipath_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NVMfRemoteController::_Internal {
 public:
};

NVMfRemoteController::NVMfRemoteController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteController)
}
NVMfRemoteController::NVMfRemoteController(const NVMfRemoteController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  traddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    traddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traddr().empty()) {
    traddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_traddr(), 
      GetArenaForAllocation());
  }
  subnqn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subnqn().empty()) {
    subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subnqn(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(queue_size_));
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteController)
}

inline void NVMfRemoteController::SharedCtor() {
traddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  traddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subnqn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&queue_size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(queue_size_));
}

NVMfRemoteController::~NVMfRemoteController() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteController)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteController::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  traddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subnqn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NVMfRemoteController::ArenaDtor(void* object) {
  NVMfRemoteController* _this = reinterpret_cast< NVMfRemoteController* >(object);
  (void)_this;
}
void NVMfRemoteController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteController::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteController)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traddr_.ClearToEmpty();
  subnqn_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(queue_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.NvmeTransportType trtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trtype(static_cast<::opi_api::storage::v1::NvmeTransportType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adrfam(static_cast<::opi_api::storage::v1::NvmeAddressFamily>(val));
        } else
          goto handle_unusual;
        continue;
      // string traddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_traddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.NVMfRemoteController.traddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 trsvcid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          trsvcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subnqn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_subnqn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.NVMfRemoteController.subnqn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hdgst = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hdgst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ddgst = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ddgst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.NvmeMultipath multipath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_multipath(static_cast<::opi_api::storage::v1::NvmeMultipath>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 io_queues_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          io_queues_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 queue_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteController::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteController)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .opi_api.storage.v1.NvmeTransportType trtype = 2;
  if (this->_internal_trtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_trtype(), target);
  }

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
  if (this->_internal_adrfam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_adrfam(), target);
  }

  // string traddr = 4;
  if (!this->_internal_traddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traddr().data(), static_cast<int>(this->_internal_traddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.NVMfRemoteController.traddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_traddr(), target);
  }

  // int64 trsvcid = 5;
  if (this->_internal_trsvcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_trsvcid(), target);
  }

  // string subnqn = 6;
  if (!this->_internal_subnqn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subnqn().data(), static_cast<int>(this->_internal_subnqn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.NVMfRemoteController.subnqn");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_subnqn(), target);
  }

  // bool hdgst = 7;
  if (this->_internal_hdgst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hdgst(), target);
  }

  // bool ddgst = 8;
  if (this->_internal_ddgst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ddgst(), target);
  }

  // .opi_api.storage.v1.NvmeMultipath multipath = 9;
  if (this->_internal_multipath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_multipath(), target);
  }

  // int64 io_queues_count = 10;
  if (this->_internal_io_queues_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_io_queues_count(), target);
  }

  // int64 queue_size = 11;
  if (this->_internal_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteController)
  return target;
}

size_t NVMfRemoteController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteController)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string traddr = 4;
  if (!this->_internal_traddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traddr());
  }

  // string subnqn = 6;
  if (!this->_internal_subnqn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subnqn());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // .opi_api.storage.v1.NvmeTransportType trtype = 2;
  if (this->_internal_trtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trtype());
  }

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
  if (this->_internal_adrfam() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adrfam());
  }

  // int64 trsvcid = 5;
  if (this->_internal_trsvcid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_trsvcid());
  }

  // bool hdgst = 7;
  if (this->_internal_hdgst() != 0) {
    total_size += 1 + 1;
  }

  // bool ddgst = 8;
  if (this->_internal_ddgst() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.storage.v1.NvmeMultipath multipath = 9;
  if (this->_internal_multipath() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_multipath());
  }

  // int64 io_queues_count = 10;
  if (this->_internal_io_queues_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_io_queues_count());
  }

  // int64 queue_size = 11;
  if (this->_internal_queue_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_queue_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteController::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteController::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteController::GetClassData() const { return &_class_data_; }

void NVMfRemoteController::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteController *>(to)->MergeFrom(
      static_cast<const NVMfRemoteController &>(from));
}


void NVMfRemoteController::MergeFrom(const NVMfRemoteController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteController)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_traddr().empty()) {
    _internal_set_traddr(from._internal_traddr());
  }
  if (!from._internal_subnqn().empty()) {
    _internal_set_subnqn(from._internal_subnqn());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_trtype() != 0) {
    _internal_set_trtype(from._internal_trtype());
  }
  if (from._internal_adrfam() != 0) {
    _internal_set_adrfam(from._internal_adrfam());
  }
  if (from._internal_trsvcid() != 0) {
    _internal_set_trsvcid(from._internal_trsvcid());
  }
  if (from._internal_hdgst() != 0) {
    _internal_set_hdgst(from._internal_hdgst());
  }
  if (from._internal_ddgst() != 0) {
    _internal_set_ddgst(from._internal_ddgst());
  }
  if (from._internal_multipath() != 0) {
    _internal_set_multipath(from._internal_multipath());
  }
  if (from._internal_io_queues_count() != 0) {
    _internal_set_io_queues_count(from._internal_io_queues_count());
  }
  if (from._internal_queue_size() != 0) {
    _internal_set_queue_size(from._internal_queue_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteController::CopyFrom(const NVMfRemoteController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteController::IsInitialized() const {
  return true;
}

void NVMfRemoteController::InternalSwap(NVMfRemoteController* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &traddr_, lhs_arena,
      &other->traddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subnqn_, lhs_arena,
      &other->subnqn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NVMfRemoteController, queue_size_)
      + sizeof(NVMfRemoteController::queue_size_)
      - PROTOBUF_FIELD_OFFSET(NVMfRemoteController, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteController::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[0]);
}

// ===================================================================

class NVMfRemoteControllerConnectRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::NVMfRemoteController& ctrl(const NVMfRemoteControllerConnectRequest* msg);
};

const ::opi_api::storage::v1::NVMfRemoteController&
NVMfRemoteControllerConnectRequest::_Internal::ctrl(const NVMfRemoteControllerConnectRequest* msg) {
  return *msg->ctrl_;
}
NVMfRemoteControllerConnectRequest::NVMfRemoteControllerConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
}
NVMfRemoteControllerConnectRequest::NVMfRemoteControllerConnectRequest(const NVMfRemoteControllerConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ctrl()) {
    ctrl_ = new ::opi_api::storage::v1::NVMfRemoteController(*from.ctrl_);
  } else {
    ctrl_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
}

inline void NVMfRemoteControllerConnectRequest::SharedCtor() {
ctrl_ = nullptr;
}

NVMfRemoteControllerConnectRequest::~NVMfRemoteControllerConnectRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ctrl_;
}

void NVMfRemoteControllerConnectRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerConnectRequest* _this = reinterpret_cast< NVMfRemoteControllerConnectRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ctrl_ != nullptr) {
    delete ctrl_;
  }
  ctrl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctrl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerConnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  if (this->_internal_has_ctrl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ctrl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  return target;
}

size_t NVMfRemoteControllerConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  if (this->_internal_has_ctrl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctrl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerConnectRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerConnectRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerConnectRequest &>(from));
}


void NVMfRemoteControllerConnectRequest::MergeFrom(const NVMfRemoteControllerConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ctrl()) {
    _internal_mutable_ctrl()->::opi_api::storage::v1::NVMfRemoteController::MergeFrom(from._internal_ctrl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerConnectRequest::CopyFrom(const NVMfRemoteControllerConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerConnectRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerConnectRequest::InternalSwap(NVMfRemoteControllerConnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ctrl_, other->ctrl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerConnectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[1]);
}

// ===================================================================

class NVMfRemoteControllerConnectResponse::_Internal {
 public:
};

NVMfRemoteControllerConnectResponse::NVMfRemoteControllerConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerConnectResponse)
}
NVMfRemoteControllerConnectResponse::NVMfRemoteControllerConnectResponse(const NVMfRemoteControllerConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerConnectResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerConnectResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerConnectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[2]);
}

// ===================================================================

class NVMfRemoteControllerDisconnectRequest::_Internal {
 public:
};

NVMfRemoteControllerDisconnectRequest::NVMfRemoteControllerDisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
}
NVMfRemoteControllerDisconnectRequest::NVMfRemoteControllerDisconnectRequest(const NVMfRemoteControllerDisconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
}

inline void NVMfRemoteControllerDisconnectRequest::SharedCtor() {
id_ = int64_t{0};
}

NVMfRemoteControllerDisconnectRequest::~NVMfRemoteControllerDisconnectRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerDisconnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerDisconnectRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerDisconnectRequest* _this = reinterpret_cast< NVMfRemoteControllerDisconnectRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerDisconnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerDisconnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerDisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerDisconnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerDisconnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  return target;
}

size_t NVMfRemoteControllerDisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerDisconnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerDisconnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerDisconnectRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerDisconnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerDisconnectRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerDisconnectRequest &>(from));
}


void NVMfRemoteControllerDisconnectRequest::MergeFrom(const NVMfRemoteControllerDisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerDisconnectRequest::CopyFrom(const NVMfRemoteControllerDisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerDisconnectRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerDisconnectRequest::InternalSwap(NVMfRemoteControllerDisconnectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerDisconnectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[3]);
}

// ===================================================================

class NVMfRemoteControllerDisconnectResponse::_Internal {
 public:
};

NVMfRemoteControllerDisconnectResponse::NVMfRemoteControllerDisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerDisconnectResponse)
}
NVMfRemoteControllerDisconnectResponse::NVMfRemoteControllerDisconnectResponse(const NVMfRemoteControllerDisconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerDisconnectResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerDisconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerDisconnectResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerDisconnectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[4]);
}

// ===================================================================

class NVMfRemoteControllerResetRequest::_Internal {
 public:
};

NVMfRemoteControllerResetRequest::NVMfRemoteControllerResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
}
NVMfRemoteControllerResetRequest::NVMfRemoteControllerResetRequest(const NVMfRemoteControllerResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
}

inline void NVMfRemoteControllerResetRequest::SharedCtor() {
id_ = int64_t{0};
}

NVMfRemoteControllerResetRequest::~NVMfRemoteControllerResetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerResetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerResetRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerResetRequest* _this = reinterpret_cast< NVMfRemoteControllerResetRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerResetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerResetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerResetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerResetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  return target;
}

size_t NVMfRemoteControllerResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerResetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerResetRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerResetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerResetRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerResetRequest &>(from));
}


void NVMfRemoteControllerResetRequest::MergeFrom(const NVMfRemoteControllerResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerResetRequest::CopyFrom(const NVMfRemoteControllerResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerResetRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerResetRequest::InternalSwap(NVMfRemoteControllerResetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerResetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[5]);
}

// ===================================================================

class NVMfRemoteControllerResetResponse::_Internal {
 public:
};

NVMfRemoteControllerResetResponse::NVMfRemoteControllerResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerResetResponse)
}
NVMfRemoteControllerResetResponse::NVMfRemoteControllerResetResponse(const NVMfRemoteControllerResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerResetResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerResetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerResetResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerResetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[6]);
}

// ===================================================================

class NVMfRemoteControllerListRequest::_Internal {
 public:
};

NVMfRemoteControllerListRequest::NVMfRemoteControllerListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerListRequest)
}
NVMfRemoteControllerListRequest::NVMfRemoteControllerListRequest(const NVMfRemoteControllerListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerListRequest)
}

inline void NVMfRemoteControllerListRequest::SharedCtor() {
id_ = int64_t{0};
}

NVMfRemoteControllerListRequest::~NVMfRemoteControllerListRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerListRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerListRequest* _this = reinterpret_cast< NVMfRemoteControllerListRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  return target;
}

size_t NVMfRemoteControllerListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerListRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerListRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerListRequest &>(from));
}


void NVMfRemoteControllerListRequest::MergeFrom(const NVMfRemoteControllerListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerListRequest::CopyFrom(const NVMfRemoteControllerListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerListRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerListRequest::InternalSwap(NVMfRemoteControllerListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[7]);
}

// ===================================================================

class NVMfRemoteControllerListResponse::_Internal {
 public:
};

NVMfRemoteControllerListResponse::NVMfRemoteControllerListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ctrl_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerListResponse)
}
NVMfRemoteControllerListResponse::NVMfRemoteControllerListResponse(const NVMfRemoteControllerListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrl_(from.ctrl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerListResponse)
}

inline void NVMfRemoteControllerListResponse::SharedCtor() {
}

NVMfRemoteControllerListResponse::~NVMfRemoteControllerListResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerListResponse::ArenaDtor(void* object) {
  NVMfRemoteControllerListResponse* _this = reinterpret_cast< NVMfRemoteControllerListResponse* >(object);
  (void)_this;
}
void NVMfRemoteControllerListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ctrl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  return target;
}

size_t NVMfRemoteControllerListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  total_size += 1UL * this->_internal_ctrl_size();
  for (const auto& msg : this->ctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerListResponse::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerListResponse *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerListResponse &>(from));
}


void NVMfRemoteControllerListResponse::MergeFrom(const NVMfRemoteControllerListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_.MergeFrom(from.ctrl_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerListResponse::CopyFrom(const NVMfRemoteControllerListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerListResponse::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerListResponse::InternalSwap(NVMfRemoteControllerListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ctrl_.InternalSwap(&other->ctrl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[8]);
}

// ===================================================================

class NVMfRemoteControllerGetRequest::_Internal {
 public:
};

NVMfRemoteControllerGetRequest::NVMfRemoteControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
}
NVMfRemoteControllerGetRequest::NVMfRemoteControllerGetRequest(const NVMfRemoteControllerGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
}

inline void NVMfRemoteControllerGetRequest::SharedCtor() {
id_ = int64_t{0};
}

NVMfRemoteControllerGetRequest::~NVMfRemoteControllerGetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerGetRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerGetRequest* _this = reinterpret_cast< NVMfRemoteControllerGetRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  return target;
}

size_t NVMfRemoteControllerGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerGetRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerGetRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerGetRequest &>(from));
}


void NVMfRemoteControllerGetRequest::MergeFrom(const NVMfRemoteControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerGetRequest::CopyFrom(const NVMfRemoteControllerGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerGetRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerGetRequest::InternalSwap(NVMfRemoteControllerGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[9]);
}

// ===================================================================

class NVMfRemoteControllerGetResponse::_Internal {
 public:
  static const ::opi_api::storage::v1::NVMfRemoteController& ctrl(const NVMfRemoteControllerGetResponse* msg);
};

const ::opi_api::storage::v1::NVMfRemoteController&
NVMfRemoteControllerGetResponse::_Internal::ctrl(const NVMfRemoteControllerGetResponse* msg) {
  return *msg->ctrl_;
}
NVMfRemoteControllerGetResponse::NVMfRemoteControllerGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
}
NVMfRemoteControllerGetResponse::NVMfRemoteControllerGetResponse(const NVMfRemoteControllerGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ctrl()) {
    ctrl_ = new ::opi_api::storage::v1::NVMfRemoteController(*from.ctrl_);
  } else {
    ctrl_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
}

inline void NVMfRemoteControllerGetResponse::SharedCtor() {
ctrl_ = nullptr;
}

NVMfRemoteControllerGetResponse::~NVMfRemoteControllerGetResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ctrl_;
}

void NVMfRemoteControllerGetResponse::ArenaDtor(void* object) {
  NVMfRemoteControllerGetResponse* _this = reinterpret_cast< NVMfRemoteControllerGetResponse* >(object);
  (void)_this;
}
void NVMfRemoteControllerGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ctrl_ != nullptr) {
    delete ctrl_;
  }
  ctrl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctrl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  if (this->_internal_has_ctrl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ctrl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  return target;
}

size_t NVMfRemoteControllerGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.NVMfRemoteController ctrl = 1;
  if (this->_internal_has_ctrl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctrl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerGetResponse::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerGetResponse *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerGetResponse &>(from));
}


void NVMfRemoteControllerGetResponse::MergeFrom(const NVMfRemoteControllerGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ctrl()) {
    _internal_mutable_ctrl()->::opi_api::storage::v1::NVMfRemoteController::MergeFrom(from._internal_ctrl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerGetResponse::CopyFrom(const NVMfRemoteControllerGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerGetResponse::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerGetResponse::InternalSwap(NVMfRemoteControllerGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ctrl_, other->ctrl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[10]);
}

// ===================================================================

class NVMfRemoteControllerStatsRequest::_Internal {
 public:
};

NVMfRemoteControllerStatsRequest::NVMfRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
}
NVMfRemoteControllerStatsRequest::NVMfRemoteControllerStatsRequest(const NVMfRemoteControllerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
}

inline void NVMfRemoteControllerStatsRequest::SharedCtor() {
id_ = int64_t{0};
}

NVMfRemoteControllerStatsRequest::~NVMfRemoteControllerStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NVMfRemoteControllerStatsRequest::ArenaDtor(void* object) {
  NVMfRemoteControllerStatsRequest* _this = reinterpret_cast< NVMfRemoteControllerStatsRequest* >(object);
  (void)_this;
}
void NVMfRemoteControllerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  return target;
}

size_t NVMfRemoteControllerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerStatsRequest::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerStatsRequest *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerStatsRequest &>(from));
}


void NVMfRemoteControllerStatsRequest::MergeFrom(const NVMfRemoteControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerStatsRequest::CopyFrom(const NVMfRemoteControllerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerStatsRequest::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerStatsRequest::InternalSwap(NVMfRemoteControllerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[11]);
}

// ===================================================================

class NVMfRemoteControllerStatsResponse::_Internal {
 public:
};

NVMfRemoteControllerStatsResponse::NVMfRemoteControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
}
NVMfRemoteControllerStatsResponse::NVMfRemoteControllerStatsResponse(const NVMfRemoteControllerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stats().empty()) {
    stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
}

inline void NVMfRemoteControllerStatsResponse::SharedCtor() {
stats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

NVMfRemoteControllerStatsResponse::~NVMfRemoteControllerStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NVMfRemoteControllerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NVMfRemoteControllerStatsResponse::ArenaDtor(void* object) {
  NVMfRemoteControllerStatsResponse* _this = reinterpret_cast< NVMfRemoteControllerStatsResponse* >(object);
  (void)_this;
}
void NVMfRemoteControllerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVMfRemoteControllerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NVMfRemoteControllerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVMfRemoteControllerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NVMfRemoteControllerStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stats().data(), static_cast<int>(this->_internal_stats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  return target;
}

size_t NVMfRemoteControllerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stats = 2;
  if (!this->_internal_stats().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stats());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NVMfRemoteControllerStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NVMfRemoteControllerStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NVMfRemoteControllerStatsResponse::GetClassData() const { return &_class_data_; }

void NVMfRemoteControllerStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NVMfRemoteControllerStatsResponse *>(to)->MergeFrom(
      static_cast<const NVMfRemoteControllerStatsResponse &>(from));
}


void NVMfRemoteControllerStatsResponse::MergeFrom(const NVMfRemoteControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stats().empty()) {
    _internal_set_stats(from._internal_stats());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NVMfRemoteControllerStatsResponse::CopyFrom(const NVMfRemoteControllerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVMfRemoteControllerStatsResponse::IsInitialized() const {
  return true;
}

void NVMfRemoteControllerStatsResponse::InternalSwap(NVMfRemoteControllerStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_, lhs_arena,
      &other->stats_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVMfRemoteControllerStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fnvme_5ftcp_2eproto_getter, &descriptor_table_backend_5fnvme_5ftcp_2eproto_once,
      file_level_metadata_backend_5fnvme_5ftcp_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteController* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteController >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerDisconnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerResetResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerListRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerListResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerGetRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerGetResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
