// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_blk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "object_key.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fblk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fblk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fblk_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateVirtioBlkRequest;
struct CreateVirtioBlkRequestDefaultTypeInternal;
extern CreateVirtioBlkRequestDefaultTypeInternal _CreateVirtioBlkRequest_default_instance_;
class DeleteVirtioBlkRequest;
struct DeleteVirtioBlkRequestDefaultTypeInternal;
extern DeleteVirtioBlkRequestDefaultTypeInternal _DeleteVirtioBlkRequest_default_instance_;
class GetVirtioBlkRequest;
struct GetVirtioBlkRequestDefaultTypeInternal;
extern GetVirtioBlkRequestDefaultTypeInternal _GetVirtioBlkRequest_default_instance_;
class ListVirtioBlkRequest;
struct ListVirtioBlkRequestDefaultTypeInternal;
extern ListVirtioBlkRequestDefaultTypeInternal _ListVirtioBlkRequest_default_instance_;
class ListVirtioBlkResponse;
struct ListVirtioBlkResponseDefaultTypeInternal;
extern ListVirtioBlkResponseDefaultTypeInternal _ListVirtioBlkResponse_default_instance_;
class UpdateVirtioBlkRequest;
struct UpdateVirtioBlkRequestDefaultTypeInternal;
extern UpdateVirtioBlkRequestDefaultTypeInternal _UpdateVirtioBlkRequest_default_instance_;
class VirtioBlk;
struct VirtioBlkDefaultTypeInternal;
extern VirtioBlkDefaultTypeInternal _VirtioBlk_default_instance_;
class VirtioBlkStatsRequest;
struct VirtioBlkStatsRequestDefaultTypeInternal;
extern VirtioBlkStatsRequestDefaultTypeInternal _VirtioBlkStatsRequest_default_instance_;
class VirtioBlkStatsResponse;
struct VirtioBlkStatsResponseDefaultTypeInternal;
extern VirtioBlkStatsResponseDefaultTypeInternal _VirtioBlkStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioBlkResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioBlkResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioBlkRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioBlkRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlk* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioBlkStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioBlkStatsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioBlk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlk) */ {
 public:
  inline VirtioBlk() : VirtioBlk(nullptr) {}
  ~VirtioBlk() override;
  explicit constexpr VirtioBlk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlk(const VirtioBlk& from);
  VirtioBlk(VirtioBlk&& from) noexcept
    : VirtioBlk() {
    *this = ::std::move(from);
  }

  inline VirtioBlk& operator=(const VirtioBlk& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlk& operator=(VirtioBlk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlk& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlk* internal_default_instance() {
    return reinterpret_cast<const VirtioBlk*>(
               &_VirtioBlk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioBlk& a, VirtioBlk& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlk";
  }
  protected:
  explicit VirtioBlk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdevFieldNumber = 3,
    kSerialNumberFieldNumber = 5,
    kIdFieldNumber = 1,
    kPcieIdFieldNumber = 2,
    kMaxIoQpsFieldNumber = 4,
  };
  // string bdev = 3;
  void clear_bdev();
  const std::string& bdev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bdev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bdev();
  PROTOBUF_NODISCARD std::string* release_bdev();
  void set_allocated_bdev(std::string* bdev);
  private:
  const std::string& _internal_bdev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bdev(const std::string& value);
  std::string* _internal_mutable_bdev();
  public:

  // string serial_number = 5;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2;
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::PciEndpoint& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::PciEndpoint* release_pcie_id();
  ::opi_api::storage::v1::PciEndpoint* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id);
  private:
  const ::opi_api::storage::v1::PciEndpoint& _internal_pcie_id() const;
  ::opi_api::storage::v1::PciEndpoint* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::PciEndpoint* pcie_id);
  ::opi_api::storage::v1::PciEndpoint* unsafe_arena_release_pcie_id();

  // int64 max_io_qps = 4;
  void clear_max_io_qps();
  int64_t max_io_qps() const;
  void set_max_io_qps(int64_t value);
  private:
  int64_t _internal_max_io_qps() const;
  void _internal_set_max_io_qps(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::storage::v1::PciEndpoint* pcie_id_;
  int64_t max_io_qps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioBlkRequest) */ {
 public:
  inline CreateVirtioBlkRequest() : CreateVirtioBlkRequest(nullptr) {}
  ~CreateVirtioBlkRequest() override;
  explicit constexpr CreateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioBlkRequest(const CreateVirtioBlkRequest& from);
  CreateVirtioBlkRequest(CreateVirtioBlkRequest&& from) noexcept
    : CreateVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioBlkRequest& operator=(const CreateVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioBlkRequest& operator=(CreateVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioBlkRequest*>(
               &_CreateVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateVirtioBlkRequest& a, CreateVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVirtioBlkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioBlkRequest";
  }
  protected:
  explicit CreateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioBlk controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioBlk& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioBlk* controller);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioBlk* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioBlkRequest) */ {
 public:
  inline DeleteVirtioBlkRequest() : DeleteVirtioBlkRequest(nullptr) {}
  ~DeleteVirtioBlkRequest() override;
  explicit constexpr DeleteVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioBlkRequest(const DeleteVirtioBlkRequest& from);
  DeleteVirtioBlkRequest(DeleteVirtioBlkRequest&& from) noexcept
    : DeleteVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioBlkRequest& operator=(const DeleteVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioBlkRequest& operator=(DeleteVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioBlkRequest*>(
               &_DeleteVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteVirtioBlkRequest& a, DeleteVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVirtioBlkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioBlkRequest";
  }
  protected:
  explicit DeleteVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioBlkRequest) */ {
 public:
  inline UpdateVirtioBlkRequest() : UpdateVirtioBlkRequest(nullptr) {}
  ~UpdateVirtioBlkRequest() override;
  explicit constexpr UpdateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioBlkRequest(const UpdateVirtioBlkRequest& from);
  UpdateVirtioBlkRequest(UpdateVirtioBlkRequest&& from) noexcept
    : UpdateVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioBlkRequest& operator=(const UpdateVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioBlkRequest& operator=(UpdateVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioBlkRequest*>(
               &_UpdateVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateVirtioBlkRequest& a, UpdateVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVirtioBlkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioBlkRequest";
  }
  protected:
  explicit UpdateVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioBlk controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioBlk& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioBlk* release_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller);
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller() const;
  ::opi_api::storage::v1::VirtioBlk* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioBlk* controller);
  ::opi_api::storage::v1::VirtioBlk* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioBlk* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioBlkRequest) */ {
 public:
  inline ListVirtioBlkRequest() : ListVirtioBlkRequest(nullptr) {}
  explicit constexpr ListVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioBlkRequest(const ListVirtioBlkRequest& from);
  ListVirtioBlkRequest(ListVirtioBlkRequest&& from) noexcept
    : ListVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioBlkRequest& operator=(const ListVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioBlkRequest& operator=(ListVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioBlkRequest*>(
               &_ListVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListVirtioBlkRequest& a, ListVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListVirtioBlkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListVirtioBlkRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioBlkRequest";
  }
  protected:
  explicit ListVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioBlkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioBlkResponse) */ {
 public:
  inline ListVirtioBlkResponse() : ListVirtioBlkResponse(nullptr) {}
  ~ListVirtioBlkResponse() override;
  explicit constexpr ListVirtioBlkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioBlkResponse(const ListVirtioBlkResponse& from);
  ListVirtioBlkResponse(ListVirtioBlkResponse&& from) noexcept
    : ListVirtioBlkResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioBlkResponse& operator=(const ListVirtioBlkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioBlkResponse& operator=(ListVirtioBlkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioBlkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioBlkResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioBlkResponse*>(
               &_ListVirtioBlkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListVirtioBlkResponse& a, ListVirtioBlkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioBlkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioBlkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioBlkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioBlkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioBlkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVirtioBlkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioBlkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioBlkResponse";
  }
  protected:
  explicit ListVirtioBlkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.VirtioBlk controller = 1;
  int controller_size() const;
  private:
  int _internal_controller_size() const;
  public:
  void clear_controller();
  ::opi_api::storage::v1::VirtioBlk* mutable_controller(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >*
      mutable_controller();
  private:
  const ::opi_api::storage::v1::VirtioBlk& _internal_controller(int index) const;
  ::opi_api::storage::v1::VirtioBlk* _internal_add_controller();
  public:
  const ::opi_api::storage::v1::VirtioBlk& controller(int index) const;
  ::opi_api::storage::v1::VirtioBlk* add_controller();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >&
      controller() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioBlkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk > controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioBlkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioBlkRequest) */ {
 public:
  inline GetVirtioBlkRequest() : GetVirtioBlkRequest(nullptr) {}
  ~GetVirtioBlkRequest() override;
  explicit constexpr GetVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioBlkRequest(const GetVirtioBlkRequest& from);
  GetVirtioBlkRequest(GetVirtioBlkRequest&& from) noexcept
    : GetVirtioBlkRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioBlkRequest& operator=(const GetVirtioBlkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioBlkRequest& operator=(GetVirtioBlkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioBlkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioBlkRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioBlkRequest*>(
               &_GetVirtioBlkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetVirtioBlkRequest& a, GetVirtioBlkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioBlkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioBlkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioBlkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioBlkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioBlkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtioBlkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioBlkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioBlkRequest";
  }
  protected:
  explicit GetVirtioBlkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioBlkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkStatsRequest) */ {
 public:
  inline VirtioBlkStatsRequest() : VirtioBlkStatsRequest(nullptr) {}
  ~VirtioBlkStatsRequest() override;
  explicit constexpr VirtioBlkStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkStatsRequest(const VirtioBlkStatsRequest& from);
  VirtioBlkStatsRequest(VirtioBlkStatsRequest&& from) noexcept
    : VirtioBlkStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioBlkStatsRequest& operator=(const VirtioBlkStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkStatsRequest& operator=(VirtioBlkStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkStatsRequest*>(
               &_VirtioBlkStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VirtioBlkStatsRequest& a, VirtioBlkStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkStatsRequest";
  }
  protected:
  explicit VirtioBlkStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// -------------------------------------------------------------------

class VirtioBlkStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioBlkStatsResponse) */ {
 public:
  inline VirtioBlkStatsResponse() : VirtioBlkStatsResponse(nullptr) {}
  ~VirtioBlkStatsResponse() override;
  explicit constexpr VirtioBlkStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioBlkStatsResponse(const VirtioBlkStatsResponse& from);
  VirtioBlkStatsResponse(VirtioBlkStatsResponse&& from) noexcept
    : VirtioBlkStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioBlkStatsResponse& operator=(const VirtioBlkStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioBlkStatsResponse& operator=(VirtioBlkStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioBlkStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioBlkStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioBlkStatsResponse*>(
               &_VirtioBlkStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VirtioBlkStatsResponse& a, VirtioBlkStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioBlkStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioBlkStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioBlkStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioBlkStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioBlkStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioBlkStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioBlkStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioBlkStatsResponse";
  }
  protected:
  explicit VirtioBlkStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioBlkStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fblk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioBlk

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioBlk::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioBlk::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlk::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlk::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.id)
  return _internal_id();
}
inline void VirtioBlk::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlk::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlk::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlk::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlk::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.id)
  return _msg;
}
inline void VirtioBlk::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.id)
}

// .opi_api.storage.v1.PciEndpoint pcie_id = 2;
inline bool VirtioBlk::_internal_has_pcie_id() const {
  return this != internal_default_instance() && pcie_id_ != nullptr;
}
inline bool VirtioBlk::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioBlk::_internal_pcie_id() const {
  const ::opi_api::storage::v1::PciEndpoint* p = pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::PciEndpoint&>(
      ::opi_api::storage::v1::_PciEndpoint_default_instance_);
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioBlk::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioBlk::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::PciEndpoint* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::release_pcie_id() {
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.pcie_id)
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::_internal_mutable_pcie_id() {
  
  if (pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(GetArenaForAllocation());
    pcie_id_ = p;
  }
  return pcie_id_;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioBlk::mutable_pcie_id() {
  ::opi_api::storage::v1::PciEndpoint* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.pcie_id)
  return _msg;
}
inline void VirtioBlk::set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.pcie_id)
}

// string bdev = 3;
inline void VirtioBlk::clear_bdev() {
  bdev_.ClearToEmpty();
}
inline const std::string& VirtioBlk::bdev() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.bdev)
  return _internal_bdev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_bdev(ArgT0&& arg0, ArgT... args) {
 
 bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.bdev)
}
inline std::string* VirtioBlk::mutable_bdev() {
  std::string* _s = _internal_mutable_bdev();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.bdev)
  return _s;
}
inline const std::string& VirtioBlk::_internal_bdev() const {
  return bdev_.Get();
}
inline void VirtioBlk::_internal_set_bdev(const std::string& value) {
  
  bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_bdev() {
  
  return bdev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_bdev() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.bdev)
  return bdev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlk::set_allocated_bdev(std::string* bdev) {
  if (bdev != nullptr) {
    
  } else {
    
  }
  bdev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bdev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.bdev)
}

// int64 max_io_qps = 4;
inline void VirtioBlk::clear_max_io_qps() {
  max_io_qps_ = int64_t{0};
}
inline int64_t VirtioBlk::_internal_max_io_qps() const {
  return max_io_qps_;
}
inline int64_t VirtioBlk::max_io_qps() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.max_io_qps)
  return _internal_max_io_qps();
}
inline void VirtioBlk::_internal_set_max_io_qps(int64_t value) {
  
  max_io_qps_ = value;
}
inline void VirtioBlk::set_max_io_qps(int64_t value) {
  _internal_set_max_io_qps(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.max_io_qps)
}

// string serial_number = 5;
inline void VirtioBlk::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& VirtioBlk::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlk.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlk::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlk.serial_number)
}
inline std::string* VirtioBlk::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlk.serial_number)
  return _s;
}
inline const std::string& VirtioBlk::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void VirtioBlk::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlk::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlk::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlk.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlk::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlk.serial_number)
}

// -------------------------------------------------------------------

// CreateVirtioBlkRequest

// .opi_api.storage.v1.VirtioBlk controller = 1;
inline bool CreateVirtioBlkRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool CreateVirtioBlkRequest::has_controller() const {
  return _internal_has_controller();
}
inline void CreateVirtioBlkRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& CreateVirtioBlkRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioBlk* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& CreateVirtioBlkRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioBlkRequest.controller)
  return _internal_controller();
}
inline void CreateVirtioBlkRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioBlk* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioBlkRequest.controller)
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioBlkRequest.controller)
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioBlk* CreateVirtioBlkRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioBlkRequest.controller)
  return _msg;
}
inline void CreateVirtioBlkRequest::set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioBlk>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioBlkRequest.controller)
}

// -------------------------------------------------------------------

// DeleteVirtioBlkRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool DeleteVirtioBlkRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool DeleteVirtioBlkRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioBlkRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioBlkRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioBlkRequest.controller_id)
  return _internal_controller_id();
}
inline void DeleteVirtioBlkRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteVirtioBlkRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioBlkRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioBlkRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioBlkRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioBlkRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioBlkRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioBlkRequest.controller_id)
  return _msg;
}
inline void DeleteVirtioBlkRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioBlkRequest.controller_id)
}

// -------------------------------------------------------------------

// UpdateVirtioBlkRequest

// .opi_api.storage.v1.VirtioBlk controller = 1;
inline bool UpdateVirtioBlkRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool UpdateVirtioBlkRequest::has_controller() const {
  return _internal_has_controller();
}
inline void UpdateVirtioBlkRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioBlk& UpdateVirtioBlkRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioBlk* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioBlk&>(
      ::opi_api::storage::v1::_VirtioBlk_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioBlk& UpdateVirtioBlkRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioBlkRequest.controller)
  return _internal_controller();
}
inline void UpdateVirtioBlkRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioBlk* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.controller)
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioBlkRequest.controller)
  
  ::opi_api::storage::v1::VirtioBlk* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioBlk>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioBlk* UpdateVirtioBlkRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioBlk* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioBlkRequest.controller)
  return _msg;
}
inline void UpdateVirtioBlkRequest::set_allocated_controller(::opi_api::storage::v1::VirtioBlk* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioBlk>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioBlkRequest.controller)
}

// -------------------------------------------------------------------

// ListVirtioBlkRequest

// -------------------------------------------------------------------

// ListVirtioBlkResponse

// repeated .opi_api.storage.v1.VirtioBlk controller = 1;
inline int ListVirtioBlkResponse::_internal_controller_size() const {
  return controller_.size();
}
inline int ListVirtioBlkResponse::controller_size() const {
  return _internal_controller_size();
}
inline void ListVirtioBlkResponse::clear_controller() {
  controller_.Clear();
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlkResponse::mutable_controller(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioBlkResponse.controller)
  return controller_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >*
ListVirtioBlkResponse::mutable_controller() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioBlkResponse.controller)
  return &controller_;
}
inline const ::opi_api::storage::v1::VirtioBlk& ListVirtioBlkResponse::_internal_controller(int index) const {
  return controller_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioBlk& ListVirtioBlkResponse::controller(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioBlkResponse.controller)
  return _internal_controller(index);
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlkResponse::_internal_add_controller() {
  return controller_.Add();
}
inline ::opi_api::storage::v1::VirtioBlk* ListVirtioBlkResponse::add_controller() {
  ::opi_api::storage::v1::VirtioBlk* _add = _internal_add_controller();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioBlkResponse.controller)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioBlk >&
ListVirtioBlkResponse::controller() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioBlkResponse.controller)
  return controller_;
}

// -------------------------------------------------------------------

// GetVirtioBlkRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool GetVirtioBlkRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool GetVirtioBlkRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioBlkRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioBlkRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioBlkRequest.controller_id)
  return _internal_controller_id();
}
inline void GetVirtioBlkRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.GetVirtioBlkRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioBlkRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioBlkRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioBlkRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioBlkRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioBlkRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioBlkRequest.controller_id)
  return _msg;
}
inline void GetVirtioBlkRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioBlkRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioBlkStatsRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioBlkStatsRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioBlkStatsRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlkStatsRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlkStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioBlkStatsRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
  return _msg;
}
inline void VirtioBlkStatsRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkStatsRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioBlkStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioBlkStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioBlkStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlkStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioBlkStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsResponse.id)
  return _internal_id();
}
inline void VirtioBlkStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioBlkStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioBlkStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkStatsResponse.id)
  return _msg;
}
inline void VirtioBlkStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkStatsResponse.id)
}

// string stats = 2;
inline void VirtioBlkStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioBlkStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioBlkStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
}
inline std::string* VirtioBlkStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioBlkStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioBlkStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioBlkStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioBlkStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioBlkStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioBlkStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fblk_2eproto
