// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_scsi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opicommon.pb.h"
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fscsi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fscsi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fscsi_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateVirtioScsiControllerRequest;
struct CreateVirtioScsiControllerRequestDefaultTypeInternal;
extern CreateVirtioScsiControllerRequestDefaultTypeInternal _CreateVirtioScsiControllerRequest_default_instance_;
class CreateVirtioScsiLunRequest;
struct CreateVirtioScsiLunRequestDefaultTypeInternal;
extern CreateVirtioScsiLunRequestDefaultTypeInternal _CreateVirtioScsiLunRequest_default_instance_;
class CreateVirtioScsiTargetRequest;
struct CreateVirtioScsiTargetRequestDefaultTypeInternal;
extern CreateVirtioScsiTargetRequestDefaultTypeInternal _CreateVirtioScsiTargetRequest_default_instance_;
class DeleteVirtioScsiControllerRequest;
struct DeleteVirtioScsiControllerRequestDefaultTypeInternal;
extern DeleteVirtioScsiControllerRequestDefaultTypeInternal _DeleteVirtioScsiControllerRequest_default_instance_;
class DeleteVirtioScsiLunRequest;
struct DeleteVirtioScsiLunRequestDefaultTypeInternal;
extern DeleteVirtioScsiLunRequestDefaultTypeInternal _DeleteVirtioScsiLunRequest_default_instance_;
class DeleteVirtioScsiTargetRequest;
struct DeleteVirtioScsiTargetRequestDefaultTypeInternal;
extern DeleteVirtioScsiTargetRequestDefaultTypeInternal _DeleteVirtioScsiTargetRequest_default_instance_;
class GetVirtioScsiControllerRequest;
struct GetVirtioScsiControllerRequestDefaultTypeInternal;
extern GetVirtioScsiControllerRequestDefaultTypeInternal _GetVirtioScsiControllerRequest_default_instance_;
class GetVirtioScsiLunRequest;
struct GetVirtioScsiLunRequestDefaultTypeInternal;
extern GetVirtioScsiLunRequestDefaultTypeInternal _GetVirtioScsiLunRequest_default_instance_;
class GetVirtioScsiTargetRequest;
struct GetVirtioScsiTargetRequestDefaultTypeInternal;
extern GetVirtioScsiTargetRequestDefaultTypeInternal _GetVirtioScsiTargetRequest_default_instance_;
class ListVirtioScsiControllersRequest;
struct ListVirtioScsiControllersRequestDefaultTypeInternal;
extern ListVirtioScsiControllersRequestDefaultTypeInternal _ListVirtioScsiControllersRequest_default_instance_;
class ListVirtioScsiControllersResponse;
struct ListVirtioScsiControllersResponseDefaultTypeInternal;
extern ListVirtioScsiControllersResponseDefaultTypeInternal _ListVirtioScsiControllersResponse_default_instance_;
class ListVirtioScsiLunsRequest;
struct ListVirtioScsiLunsRequestDefaultTypeInternal;
extern ListVirtioScsiLunsRequestDefaultTypeInternal _ListVirtioScsiLunsRequest_default_instance_;
class ListVirtioScsiLunsResponse;
struct ListVirtioScsiLunsResponseDefaultTypeInternal;
extern ListVirtioScsiLunsResponseDefaultTypeInternal _ListVirtioScsiLunsResponse_default_instance_;
class ListVirtioScsiTargetsRequest;
struct ListVirtioScsiTargetsRequestDefaultTypeInternal;
extern ListVirtioScsiTargetsRequestDefaultTypeInternal _ListVirtioScsiTargetsRequest_default_instance_;
class ListVirtioScsiTargetsResponse;
struct ListVirtioScsiTargetsResponseDefaultTypeInternal;
extern ListVirtioScsiTargetsResponseDefaultTypeInternal _ListVirtioScsiTargetsResponse_default_instance_;
class StatsVirtioScsiControllerRequest;
struct StatsVirtioScsiControllerRequestDefaultTypeInternal;
extern StatsVirtioScsiControllerRequestDefaultTypeInternal _StatsVirtioScsiControllerRequest_default_instance_;
class StatsVirtioScsiControllerResponse;
struct StatsVirtioScsiControllerResponseDefaultTypeInternal;
extern StatsVirtioScsiControllerResponseDefaultTypeInternal _StatsVirtioScsiControllerResponse_default_instance_;
class StatsVirtioScsiLunRequest;
struct StatsVirtioScsiLunRequestDefaultTypeInternal;
extern StatsVirtioScsiLunRequestDefaultTypeInternal _StatsVirtioScsiLunRequest_default_instance_;
class StatsVirtioScsiLunResponse;
struct StatsVirtioScsiLunResponseDefaultTypeInternal;
extern StatsVirtioScsiLunResponseDefaultTypeInternal _StatsVirtioScsiLunResponse_default_instance_;
class StatsVirtioScsiTargetRequest;
struct StatsVirtioScsiTargetRequestDefaultTypeInternal;
extern StatsVirtioScsiTargetRequestDefaultTypeInternal _StatsVirtioScsiTargetRequest_default_instance_;
class StatsVirtioScsiTargetResponse;
struct StatsVirtioScsiTargetResponseDefaultTypeInternal;
extern StatsVirtioScsiTargetResponseDefaultTypeInternal _StatsVirtioScsiTargetResponse_default_instance_;
class UpdateVirtioScsiControllerRequest;
struct UpdateVirtioScsiControllerRequestDefaultTypeInternal;
extern UpdateVirtioScsiControllerRequestDefaultTypeInternal _UpdateVirtioScsiControllerRequest_default_instance_;
class UpdateVirtioScsiLunRequest;
struct UpdateVirtioScsiLunRequestDefaultTypeInternal;
extern UpdateVirtioScsiLunRequestDefaultTypeInternal _UpdateVirtioScsiLunRequest_default_instance_;
class UpdateVirtioScsiTargetRequest;
struct UpdateVirtioScsiTargetRequestDefaultTypeInternal;
extern UpdateVirtioScsiTargetRequestDefaultTypeInternal _UpdateVirtioScsiTargetRequest_default_instance_;
class VirtioScsiController;
struct VirtioScsiControllerDefaultTypeInternal;
extern VirtioScsiControllerDefaultTypeInternal _VirtioScsiController_default_instance_;
class VirtioScsiLun;
struct VirtioScsiLunDefaultTypeInternal;
extern VirtioScsiLunDefaultTypeInternal _VirtioScsiLun_default_instance_;
class VirtioScsiTarget;
struct VirtioScsiTargetDefaultTypeInternal;
extern VirtioScsiTargetDefaultTypeInternal _VirtioScsiTarget_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::CreateVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::CreateVirtioScsiTargetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioScsiTargetRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioScsiTargetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioScsiTargetRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioScsiTargetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioScsiTargetRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiControllersRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiControllersRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiControllersResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiControllersResponse>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiLunsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiLunsRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiLunsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiLunsResponse>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiTargetsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiTargetsRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiTargetsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiTargetsResponse>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiControllerResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiControllerResponse>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiLunResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiLunResponse>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiTargetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiTargetRequest>(Arena*);
template<> ::opi_api::storage::v1::StatsVirtioScsiTargetResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::StatsVirtioScsiTargetResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioScsiTargetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioScsiTargetRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiController* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLun* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiTarget* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioScsiTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiTarget) */ {
 public:
  inline VirtioScsiTarget() : VirtioScsiTarget(nullptr) {}
  ~VirtioScsiTarget() override;
  explicit PROTOBUF_CONSTEXPR VirtioScsiTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiTarget(const VirtioScsiTarget& from);
  VirtioScsiTarget(VirtioScsiTarget&& from) noexcept
    : VirtioScsiTarget() {
    *this = ::std::move(from);
  }

  inline VirtioScsiTarget& operator=(const VirtioScsiTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiTarget& operator=(VirtioScsiTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiTarget* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiTarget*>(
               &_VirtioScsiTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioScsiTarget& a, VirtioScsiTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioScsiTarget& from) {
    VirtioScsiTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiTarget";
  }
  protected:
  explicit VirtioScsiTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMaxLunsFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 max_luns = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_max_luns();
  int32_t max_luns() const;
  void set_max_luns(int32_t value);
  private:
  int32_t _internal_max_luns() const;
  void _internal_set_max_luns(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t max_luns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiController) */ {
 public:
  inline VirtioScsiController() : VirtioScsiController(nullptr) {}
  ~VirtioScsiController() override;
  explicit PROTOBUF_CONSTEXPR VirtioScsiController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiController(const VirtioScsiController& from);
  VirtioScsiController(VirtioScsiController&& from) noexcept
    : VirtioScsiController() {
    *this = ::std::move(from);
  }

  inline VirtioScsiController& operator=(const VirtioScsiController& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiController& operator=(VirtioScsiController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiController& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiController* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiController*>(
               &_VirtioScsiController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioScsiController& a, VirtioScsiController& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioScsiController& from) {
    VirtioScsiController::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiController";
  }
  protected:
  explicit VirtioScsiController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPcieIdFieldNumber = 2,
    kMinLimitFieldNumber = 3,
    kMaxLimitFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::PciEndpoint& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::PciEndpoint* release_pcie_id();
  ::opi_api::storage::v1::PciEndpoint* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id);
  private:
  const ::opi_api::storage::v1::PciEndpoint& _internal_pcie_id() const;
  ::opi_api::storage::v1::PciEndpoint* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::PciEndpoint* pcie_id);
  ::opi_api::storage::v1::PciEndpoint* unsafe_arena_release_pcie_id();

  // .opi_api.storage.v1.QosLimit min_limit = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_min_limit() const;
  private:
  bool _internal_has_min_limit() const;
  public:
  void clear_min_limit();
  const ::opi_api::storage::v1::QosLimit& min_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_min_limit();
  ::opi_api::storage::v1::QosLimit* mutable_min_limit();
  void set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_min_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_min_limit();
  public:
  void unsafe_arena_set_allocated_min_limit(
      ::opi_api::storage::v1::QosLimit* min_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_min_limit();

  // .opi_api.storage.v1.QosLimit max_limit = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_max_limit() const;
  private:
  bool _internal_has_max_limit() const;
  public:
  void clear_max_limit();
  const ::opi_api::storage::v1::QosLimit& max_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_max_limit();
  ::opi_api::storage::v1::QosLimit* mutable_max_limit();
  void set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_max_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_max_limit();
  public:
  void unsafe_arena_set_allocated_max_limit(
      ::opi_api::storage::v1::QosLimit* max_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_max_limit();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::opi_api::storage::v1::PciEndpoint* pcie_id_;
    ::opi_api::storage::v1::QosLimit* min_limit_;
    ::opi_api::storage::v1::QosLimit* max_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLun) */ {
 public:
  inline VirtioScsiLun() : VirtioScsiLun(nullptr) {}
  ~VirtioScsiLun() override;
  explicit PROTOBUF_CONSTEXPR VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLun(const VirtioScsiLun& from);
  VirtioScsiLun(VirtioScsiLun&& from) noexcept
    : VirtioScsiLun() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLun& operator=(const VirtioScsiLun& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLun& operator=(VirtioScsiLun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLun& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLun* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLun*>(
               &_VirtioScsiLun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtioScsiLun& a, VirtioScsiLun& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioScsiLun& from) {
    VirtioScsiLun::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLun";
  }
  protected:
  explicit VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTargetNameRefFieldNumber = 2,
    kVolumeNameRefFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string target_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_target_name_ref();
  const std::string& target_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name_ref();
  PROTOBUF_NODISCARD std::string* release_target_name_ref();
  void set_allocated_target_name_ref(std::string* target_name_ref);
  private:
  const std::string& _internal_target_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name_ref(const std::string& value);
  std::string* _internal_mutable_target_name_ref();
  public:

  // string volume_name_ref = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_volume_name_ref();
  const std::string& volume_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume_name_ref();
  PROTOBUF_NODISCARD std::string* release_volume_name_ref();
  void set_allocated_volume_name_ref(std::string* volume_name_ref);
  private:
  const std::string& _internal_volume_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume_name_ref(const std::string& value);
  std::string* _internal_mutable_volume_name_ref();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_ref_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_ref_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioScsiTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioScsiTargetRequest) */ {
 public:
  inline CreateVirtioScsiTargetRequest() : CreateVirtioScsiTargetRequest(nullptr) {}
  ~CreateVirtioScsiTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioScsiTargetRequest(const CreateVirtioScsiTargetRequest& from);
  CreateVirtioScsiTargetRequest(CreateVirtioScsiTargetRequest&& from) noexcept
    : CreateVirtioScsiTargetRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioScsiTargetRequest& operator=(const CreateVirtioScsiTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioScsiTargetRequest& operator=(CreateVirtioScsiTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioScsiTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioScsiTargetRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioScsiTargetRequest*>(
               &_CreateVirtioScsiTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateVirtioScsiTargetRequest& a, CreateVirtioScsiTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioScsiTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioScsiTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioScsiTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioScsiTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioScsiTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateVirtioScsiTargetRequest& from) {
    CreateVirtioScsiTargetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioScsiTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioScsiTargetRequest";
  }
  protected:
  explicit CreateVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiTargetIdFieldNumber = 2,
    kVirtioScsiTargetFieldNumber = 1,
  };
  // string virtio_scsi_target_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_virtio_scsi_target_id();
  const std::string& virtio_scsi_target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtio_scsi_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtio_scsi_target_id();
  PROTOBUF_NODISCARD std::string* release_virtio_scsi_target_id();
  void set_allocated_virtio_scsi_target_id(std::string* virtio_scsi_target_id);
  private:
  const std::string& _internal_virtio_scsi_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtio_scsi_target_id(const std::string& value);
  std::string* _internal_mutable_virtio_scsi_target_id();
  public:

  // .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_target = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_target() const;
  private:
  bool _internal_has_virtio_scsi_target() const;
  public:
  void clear_virtio_scsi_target();
  const ::opi_api::storage::v1::VirtioScsiTarget& virtio_scsi_target() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiTarget* release_virtio_scsi_target();
  ::opi_api::storage::v1::VirtioScsiTarget* mutable_virtio_scsi_target();
  void set_allocated_virtio_scsi_target(::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target);
  private:
  const ::opi_api::storage::v1::VirtioScsiTarget& _internal_virtio_scsi_target() const;
  ::opi_api::storage::v1::VirtioScsiTarget* _internal_mutable_virtio_scsi_target();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_target(
      ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target);
  ::opi_api::storage::v1::VirtioScsiTarget* unsafe_arena_release_virtio_scsi_target();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioScsiTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtio_scsi_target_id_;
    ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioScsiTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioScsiTargetRequest) */ {
 public:
  inline DeleteVirtioScsiTargetRequest() : DeleteVirtioScsiTargetRequest(nullptr) {}
  ~DeleteVirtioScsiTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioScsiTargetRequest(const DeleteVirtioScsiTargetRequest& from);
  DeleteVirtioScsiTargetRequest(DeleteVirtioScsiTargetRequest&& from) noexcept
    : DeleteVirtioScsiTargetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioScsiTargetRequest& operator=(const DeleteVirtioScsiTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioScsiTargetRequest& operator=(DeleteVirtioScsiTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioScsiTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioScsiTargetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioScsiTargetRequest*>(
               &_DeleteVirtioScsiTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteVirtioScsiTargetRequest& a, DeleteVirtioScsiTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioScsiTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioScsiTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioScsiTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioScsiTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioScsiTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteVirtioScsiTargetRequest& from) {
    DeleteVirtioScsiTargetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioScsiTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioScsiTargetRequest";
  }
  protected:
  explicit DeleteVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioScsiTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioScsiTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioScsiTargetRequest) */ {
 public:
  inline UpdateVirtioScsiTargetRequest() : UpdateVirtioScsiTargetRequest(nullptr) {}
  ~UpdateVirtioScsiTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioScsiTargetRequest(const UpdateVirtioScsiTargetRequest& from);
  UpdateVirtioScsiTargetRequest(UpdateVirtioScsiTargetRequest&& from) noexcept
    : UpdateVirtioScsiTargetRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioScsiTargetRequest& operator=(const UpdateVirtioScsiTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioScsiTargetRequest& operator=(UpdateVirtioScsiTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioScsiTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioScsiTargetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioScsiTargetRequest*>(
               &_UpdateVirtioScsiTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateVirtioScsiTargetRequest& a, UpdateVirtioScsiTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioScsiTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioScsiTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioScsiTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioScsiTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioScsiTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateVirtioScsiTargetRequest& from) {
    UpdateVirtioScsiTargetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioScsiTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioScsiTargetRequest";
  }
  protected:
  explicit UpdateVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiTargetFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_target = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_target() const;
  private:
  bool _internal_has_virtio_scsi_target() const;
  public:
  void clear_virtio_scsi_target();
  const ::opi_api::storage::v1::VirtioScsiTarget& virtio_scsi_target() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiTarget* release_virtio_scsi_target();
  ::opi_api::storage::v1::VirtioScsiTarget* mutable_virtio_scsi_target();
  void set_allocated_virtio_scsi_target(::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target);
  private:
  const ::opi_api::storage::v1::VirtioScsiTarget& _internal_virtio_scsi_target() const;
  ::opi_api::storage::v1::VirtioScsiTarget* _internal_mutable_virtio_scsi_target();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_target(
      ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target);
  ::opi_api::storage::v1::VirtioScsiTarget* unsafe_arena_release_virtio_scsi_target();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioScsiTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiTargetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiTargetsRequest) */ {
 public:
  inline ListVirtioScsiTargetsRequest() : ListVirtioScsiTargetsRequest(nullptr) {}
  ~ListVirtioScsiTargetsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiTargetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiTargetsRequest(const ListVirtioScsiTargetsRequest& from);
  ListVirtioScsiTargetsRequest(ListVirtioScsiTargetsRequest&& from) noexcept
    : ListVirtioScsiTargetsRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiTargetsRequest& operator=(const ListVirtioScsiTargetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiTargetsRequest& operator=(ListVirtioScsiTargetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiTargetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiTargetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiTargetsRequest*>(
               &_ListVirtioScsiTargetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListVirtioScsiTargetsRequest& a, ListVirtioScsiTargetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiTargetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiTargetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiTargetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiTargetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiTargetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiTargetsRequest& from) {
    ListVirtioScsiTargetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiTargetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiTargetsRequest";
  }
  protected:
  explicit ListVirtioScsiTargetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiTargetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiTargetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiTargetsResponse) */ {
 public:
  inline ListVirtioScsiTargetsResponse() : ListVirtioScsiTargetsResponse(nullptr) {}
  ~ListVirtioScsiTargetsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiTargetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiTargetsResponse(const ListVirtioScsiTargetsResponse& from);
  ListVirtioScsiTargetsResponse(ListVirtioScsiTargetsResponse&& from) noexcept
    : ListVirtioScsiTargetsResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiTargetsResponse& operator=(const ListVirtioScsiTargetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiTargetsResponse& operator=(ListVirtioScsiTargetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiTargetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiTargetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiTargetsResponse*>(
               &_ListVirtioScsiTargetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListVirtioScsiTargetsResponse& a, ListVirtioScsiTargetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiTargetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiTargetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiTargetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiTargetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiTargetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiTargetsResponse& from) {
    ListVirtioScsiTargetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiTargetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiTargetsResponse";
  }
  protected:
  explicit ListVirtioScsiTargetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiTargetsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_targets = 1;
  int virtio_scsi_targets_size() const;
  private:
  int _internal_virtio_scsi_targets_size() const;
  public:
  void clear_virtio_scsi_targets();
  ::opi_api::storage::v1::VirtioScsiTarget* mutable_virtio_scsi_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiTarget >*
      mutable_virtio_scsi_targets();
  private:
  const ::opi_api::storage::v1::VirtioScsiTarget& _internal_virtio_scsi_targets(int index) const;
  ::opi_api::storage::v1::VirtioScsiTarget* _internal_add_virtio_scsi_targets();
  public:
  const ::opi_api::storage::v1::VirtioScsiTarget& virtio_scsi_targets(int index) const;
  ::opi_api::storage::v1::VirtioScsiTarget* add_virtio_scsi_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiTarget >&
      virtio_scsi_targets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiTargetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiTarget > virtio_scsi_targets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioScsiTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioScsiTargetRequest) */ {
 public:
  inline GetVirtioScsiTargetRequest() : GetVirtioScsiTargetRequest(nullptr) {}
  ~GetVirtioScsiTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioScsiTargetRequest(const GetVirtioScsiTargetRequest& from);
  GetVirtioScsiTargetRequest(GetVirtioScsiTargetRequest&& from) noexcept
    : GetVirtioScsiTargetRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioScsiTargetRequest& operator=(const GetVirtioScsiTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioScsiTargetRequest& operator=(GetVirtioScsiTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioScsiTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioScsiTargetRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioScsiTargetRequest*>(
               &_GetVirtioScsiTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetVirtioScsiTargetRequest& a, GetVirtioScsiTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioScsiTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioScsiTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioScsiTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioScsiTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioScsiTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtioScsiTargetRequest& from) {
    GetVirtioScsiTargetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioScsiTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioScsiTargetRequest";
  }
  protected:
  explicit GetVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioScsiTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiTargetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiTargetRequest) */ {
 public:
  inline StatsVirtioScsiTargetRequest() : StatsVirtioScsiTargetRequest(nullptr) {}
  ~StatsVirtioScsiTargetRequest() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiTargetRequest(const StatsVirtioScsiTargetRequest& from);
  StatsVirtioScsiTargetRequest(StatsVirtioScsiTargetRequest&& from) noexcept
    : StatsVirtioScsiTargetRequest() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiTargetRequest& operator=(const StatsVirtioScsiTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiTargetRequest& operator=(StatsVirtioScsiTargetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiTargetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiTargetRequest* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiTargetRequest*>(
               &_StatsVirtioScsiTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StatsVirtioScsiTargetRequest& a, StatsVirtioScsiTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiTargetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiTargetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiTargetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiTargetRequest& from) {
    StatsVirtioScsiTargetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiTargetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiTargetRequest";
  }
  protected:
  explicit StatsVirtioScsiTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiTargetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiTargetResponse) */ {
 public:
  inline StatsVirtioScsiTargetResponse() : StatsVirtioScsiTargetResponse(nullptr) {}
  ~StatsVirtioScsiTargetResponse() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiTargetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiTargetResponse(const StatsVirtioScsiTargetResponse& from);
  StatsVirtioScsiTargetResponse(StatsVirtioScsiTargetResponse&& from) noexcept
    : StatsVirtioScsiTargetResponse() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiTargetResponse& operator=(const StatsVirtioScsiTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiTargetResponse& operator=(StatsVirtioScsiTargetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiTargetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiTargetResponse* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiTargetResponse*>(
               &_StatsVirtioScsiTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StatsVirtioScsiTargetResponse& a, StatsVirtioScsiTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiTargetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiTargetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiTargetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiTargetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiTargetResponse& from) {
    StatsVirtioScsiTargetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiTargetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiTargetResponse";
  }
  protected:
  explicit StatsVirtioScsiTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiTargetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VolumeStats* stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioScsiControllerRequest) */ {
 public:
  inline CreateVirtioScsiControllerRequest() : CreateVirtioScsiControllerRequest(nullptr) {}
  ~CreateVirtioScsiControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioScsiControllerRequest(const CreateVirtioScsiControllerRequest& from);
  CreateVirtioScsiControllerRequest(CreateVirtioScsiControllerRequest&& from) noexcept
    : CreateVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioScsiControllerRequest& operator=(const CreateVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioScsiControllerRequest& operator=(CreateVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioScsiControllerRequest*>(
               &_CreateVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateVirtioScsiControllerRequest& a, CreateVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateVirtioScsiControllerRequest& from) {
    CreateVirtioScsiControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioScsiControllerRequest";
  }
  protected:
  explicit CreateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiControllerIdFieldNumber = 2,
    kVirtioScsiControllerFieldNumber = 1,
  };
  // string virtio_scsi_controller_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_virtio_scsi_controller_id();
  const std::string& virtio_scsi_controller_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtio_scsi_controller_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtio_scsi_controller_id();
  PROTOBUF_NODISCARD std::string* release_virtio_scsi_controller_id();
  void set_allocated_virtio_scsi_controller_id(std::string* virtio_scsi_controller_id);
  private:
  const std::string& _internal_virtio_scsi_controller_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtio_scsi_controller_id(const std::string& value);
  std::string* _internal_mutable_virtio_scsi_controller_id();
  public:

  // .opi_api.storage.v1.VirtioScsiController virtio_scsi_controller = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_controller() const;
  private:
  bool _internal_has_virtio_scsi_controller() const;
  public:
  void clear_virtio_scsi_controller();
  const ::opi_api::storage::v1::VirtioScsiController& virtio_scsi_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_virtio_scsi_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_virtio_scsi_controller();
  void set_allocated_virtio_scsi_controller(::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_virtio_scsi_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_virtio_scsi_controller();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_controller(
      ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_virtio_scsi_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtio_scsi_controller_id_;
    ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioScsiControllerRequest) */ {
 public:
  inline DeleteVirtioScsiControllerRequest() : DeleteVirtioScsiControllerRequest(nullptr) {}
  ~DeleteVirtioScsiControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioScsiControllerRequest(const DeleteVirtioScsiControllerRequest& from);
  DeleteVirtioScsiControllerRequest(DeleteVirtioScsiControllerRequest&& from) noexcept
    : DeleteVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioScsiControllerRequest& operator=(const DeleteVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioScsiControllerRequest& operator=(DeleteVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioScsiControllerRequest*>(
               &_DeleteVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteVirtioScsiControllerRequest& a, DeleteVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteVirtioScsiControllerRequest& from) {
    DeleteVirtioScsiControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioScsiControllerRequest";
  }
  protected:
  explicit DeleteVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioScsiControllerRequest) */ {
 public:
  inline UpdateVirtioScsiControllerRequest() : UpdateVirtioScsiControllerRequest(nullptr) {}
  ~UpdateVirtioScsiControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioScsiControllerRequest(const UpdateVirtioScsiControllerRequest& from);
  UpdateVirtioScsiControllerRequest(UpdateVirtioScsiControllerRequest&& from) noexcept
    : UpdateVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioScsiControllerRequest& operator=(const UpdateVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioScsiControllerRequest& operator=(UpdateVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioScsiControllerRequest*>(
               &_UpdateVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateVirtioScsiControllerRequest& a, UpdateVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateVirtioScsiControllerRequest& from) {
    UpdateVirtioScsiControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioScsiControllerRequest";
  }
  protected:
  explicit UpdateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiControllerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.storage.v1.VirtioScsiController virtio_scsi_controller = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_controller() const;
  private:
  bool _internal_has_virtio_scsi_controller() const;
  public:
  void clear_virtio_scsi_controller();
  const ::opi_api::storage::v1::VirtioScsiController& virtio_scsi_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_virtio_scsi_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_virtio_scsi_controller();
  void set_allocated_virtio_scsi_controller(::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_virtio_scsi_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_virtio_scsi_controller();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_controller(
      ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_virtio_scsi_controller();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiControllersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiControllersRequest) */ {
 public:
  inline ListVirtioScsiControllersRequest() : ListVirtioScsiControllersRequest(nullptr) {}
  ~ListVirtioScsiControllersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiControllersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiControllersRequest(const ListVirtioScsiControllersRequest& from);
  ListVirtioScsiControllersRequest(ListVirtioScsiControllersRequest&& from) noexcept
    : ListVirtioScsiControllersRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiControllersRequest& operator=(const ListVirtioScsiControllersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiControllersRequest& operator=(ListVirtioScsiControllersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiControllersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiControllersRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiControllersRequest*>(
               &_ListVirtioScsiControllersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListVirtioScsiControllersRequest& a, ListVirtioScsiControllersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiControllersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiControllersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiControllersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiControllersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiControllersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiControllersRequest& from) {
    ListVirtioScsiControllersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiControllersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiControllersRequest";
  }
  protected:
  explicit ListVirtioScsiControllersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiControllersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiControllersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiControllersResponse) */ {
 public:
  inline ListVirtioScsiControllersResponse() : ListVirtioScsiControllersResponse(nullptr) {}
  ~ListVirtioScsiControllersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiControllersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiControllersResponse(const ListVirtioScsiControllersResponse& from);
  ListVirtioScsiControllersResponse(ListVirtioScsiControllersResponse&& from) noexcept
    : ListVirtioScsiControllersResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiControllersResponse& operator=(const ListVirtioScsiControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiControllersResponse& operator=(ListVirtioScsiControllersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiControllersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiControllersResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiControllersResponse*>(
               &_ListVirtioScsiControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListVirtioScsiControllersResponse& a, ListVirtioScsiControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiControllersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiControllersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiControllersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiControllersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiControllersResponse& from) {
    ListVirtioScsiControllersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiControllersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiControllersResponse";
  }
  protected:
  explicit ListVirtioScsiControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiControllersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.VirtioScsiController virtio_scsi_controllers = 1;
  int virtio_scsi_controllers_size() const;
  private:
  int _internal_virtio_scsi_controllers_size() const;
  public:
  void clear_virtio_scsi_controllers();
  ::opi_api::storage::v1::VirtioScsiController* mutable_virtio_scsi_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
      mutable_virtio_scsi_controllers();
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_virtio_scsi_controllers(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_add_virtio_scsi_controllers();
  public:
  const ::opi_api::storage::v1::VirtioScsiController& virtio_scsi_controllers(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* add_virtio_scsi_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
      virtio_scsi_controllers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController > virtio_scsi_controllers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioScsiControllerRequest) */ {
 public:
  inline GetVirtioScsiControllerRequest() : GetVirtioScsiControllerRequest(nullptr) {}
  ~GetVirtioScsiControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioScsiControllerRequest(const GetVirtioScsiControllerRequest& from);
  GetVirtioScsiControllerRequest(GetVirtioScsiControllerRequest&& from) noexcept
    : GetVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioScsiControllerRequest& operator=(const GetVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioScsiControllerRequest& operator=(GetVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioScsiControllerRequest*>(
               &_GetVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetVirtioScsiControllerRequest& a, GetVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtioScsiControllerRequest& from) {
    GetVirtioScsiControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioScsiControllerRequest";
  }
  protected:
  explicit GetVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiControllerRequest) */ {
 public:
  inline StatsVirtioScsiControllerRequest() : StatsVirtioScsiControllerRequest(nullptr) {}
  ~StatsVirtioScsiControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiControllerRequest(const StatsVirtioScsiControllerRequest& from);
  StatsVirtioScsiControllerRequest(StatsVirtioScsiControllerRequest&& from) noexcept
    : StatsVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiControllerRequest& operator=(const StatsVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiControllerRequest& operator=(StatsVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiControllerRequest*>(
               &_StatsVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StatsVirtioScsiControllerRequest& a, StatsVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiControllerRequest& from) {
    StatsVirtioScsiControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiControllerRequest";
  }
  protected:
  explicit StatsVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiControllerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiControllerResponse) */ {
 public:
  inline StatsVirtioScsiControllerResponse() : StatsVirtioScsiControllerResponse(nullptr) {}
  ~StatsVirtioScsiControllerResponse() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiControllerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiControllerResponse(const StatsVirtioScsiControllerResponse& from);
  StatsVirtioScsiControllerResponse(StatsVirtioScsiControllerResponse&& from) noexcept
    : StatsVirtioScsiControllerResponse() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiControllerResponse& operator=(const StatsVirtioScsiControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiControllerResponse& operator=(StatsVirtioScsiControllerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiControllerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiControllerResponse* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiControllerResponse*>(
               &_StatsVirtioScsiControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StatsVirtioScsiControllerResponse& a, StatsVirtioScsiControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiControllerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiControllerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiControllerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiControllerResponse& from) {
    StatsVirtioScsiControllerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiControllerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiControllerResponse";
  }
  protected:
  explicit StatsVirtioScsiControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VolumeStats* stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioScsiLunRequest) */ {
 public:
  inline CreateVirtioScsiLunRequest() : CreateVirtioScsiLunRequest(nullptr) {}
  ~CreateVirtioScsiLunRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioScsiLunRequest(const CreateVirtioScsiLunRequest& from);
  CreateVirtioScsiLunRequest(CreateVirtioScsiLunRequest&& from) noexcept
    : CreateVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioScsiLunRequest& operator=(const CreateVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioScsiLunRequest& operator=(CreateVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioScsiLunRequest*>(
               &_CreateVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateVirtioScsiLunRequest& a, CreateVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateVirtioScsiLunRequest& from) {
    CreateVirtioScsiLunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioScsiLunRequest";
  }
  protected:
  explicit CreateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiLunIdFieldNumber = 2,
    kVirtioScsiLunFieldNumber = 1,
  };
  // string virtio_scsi_lun_id = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_virtio_scsi_lun_id();
  const std::string& virtio_scsi_lun_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtio_scsi_lun_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtio_scsi_lun_id();
  PROTOBUF_NODISCARD std::string* release_virtio_scsi_lun_id();
  void set_allocated_virtio_scsi_lun_id(std::string* virtio_scsi_lun_id);
  private:
  const std::string& _internal_virtio_scsi_lun_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtio_scsi_lun_id(const std::string& value);
  std::string* _internal_mutable_virtio_scsi_lun_id();
  public:

  // .opi_api.storage.v1.VirtioScsiLun virtio_scsi_lun = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_lun() const;
  private:
  bool _internal_has_virtio_scsi_lun() const;
  public:
  void clear_virtio_scsi_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& virtio_scsi_lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_virtio_scsi_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_virtio_scsi_lun();
  void set_allocated_virtio_scsi_lun(::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_virtio_scsi_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_virtio_scsi_lun();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_lun(
      ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_virtio_scsi_lun();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtio_scsi_lun_id_;
    ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioScsiLunRequest) */ {
 public:
  inline DeleteVirtioScsiLunRequest() : DeleteVirtioScsiLunRequest(nullptr) {}
  ~DeleteVirtioScsiLunRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioScsiLunRequest(const DeleteVirtioScsiLunRequest& from);
  DeleteVirtioScsiLunRequest(DeleteVirtioScsiLunRequest&& from) noexcept
    : DeleteVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioScsiLunRequest& operator=(const DeleteVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioScsiLunRequest& operator=(DeleteVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioScsiLunRequest*>(
               &_DeleteVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteVirtioScsiLunRequest& a, DeleteVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteVirtioScsiLunRequest& from) {
    DeleteVirtioScsiLunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioScsiLunRequest";
  }
  protected:
  explicit DeleteVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioScsiLunRequest) */ {
 public:
  inline UpdateVirtioScsiLunRequest() : UpdateVirtioScsiLunRequest(nullptr) {}
  ~UpdateVirtioScsiLunRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioScsiLunRequest(const UpdateVirtioScsiLunRequest& from);
  UpdateVirtioScsiLunRequest(UpdateVirtioScsiLunRequest&& from) noexcept
    : UpdateVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioScsiLunRequest& operator=(const UpdateVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioScsiLunRequest& operator=(UpdateVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioScsiLunRequest*>(
               &_UpdateVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateVirtioScsiLunRequest& a, UpdateVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateVirtioScsiLunRequest& from) {
    UpdateVirtioScsiLunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioScsiLunRequest";
  }
  protected:
  explicit UpdateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiLunFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowMissingFieldNumber = 3,
  };
  // .opi_api.storage.v1.VirtioScsiLun virtio_scsi_lun = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_virtio_scsi_lun() const;
  private:
  bool _internal_has_virtio_scsi_lun() const;
  public:
  void clear_virtio_scsi_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& virtio_scsi_lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_virtio_scsi_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_virtio_scsi_lun();
  void set_allocated_virtio_scsi_lun(::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_virtio_scsi_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_virtio_scsi_lun();
  public:
  void unsafe_arena_set_allocated_virtio_scsi_lun(
      ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_virtio_scsi_lun();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiLunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiLunsRequest) */ {
 public:
  inline ListVirtioScsiLunsRequest() : ListVirtioScsiLunsRequest(nullptr) {}
  ~ListVirtioScsiLunsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiLunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiLunsRequest(const ListVirtioScsiLunsRequest& from);
  ListVirtioScsiLunsRequest(ListVirtioScsiLunsRequest&& from) noexcept
    : ListVirtioScsiLunsRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiLunsRequest& operator=(const ListVirtioScsiLunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiLunsRequest& operator=(ListVirtioScsiLunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiLunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiLunsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiLunsRequest*>(
               &_ListVirtioScsiLunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListVirtioScsiLunsRequest& a, ListVirtioScsiLunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiLunsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiLunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiLunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiLunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiLunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiLunsRequest& from) {
    ListVirtioScsiLunsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiLunsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiLunsRequest";
  }
  protected:
  explicit ListVirtioScsiLunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiLunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiLunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiLunsResponse) */ {
 public:
  inline ListVirtioScsiLunsResponse() : ListVirtioScsiLunsResponse(nullptr) {}
  ~ListVirtioScsiLunsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListVirtioScsiLunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiLunsResponse(const ListVirtioScsiLunsResponse& from);
  ListVirtioScsiLunsResponse(ListVirtioScsiLunsResponse&& from) noexcept
    : ListVirtioScsiLunsResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiLunsResponse& operator=(const ListVirtioScsiLunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiLunsResponse& operator=(ListVirtioScsiLunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiLunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiLunsResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiLunsResponse*>(
               &_ListVirtioScsiLunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListVirtioScsiLunsResponse& a, ListVirtioScsiLunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiLunsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiLunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiLunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiLunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiLunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListVirtioScsiLunsResponse& from) {
    ListVirtioScsiLunsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiLunsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiLunsResponse";
  }
  protected:
  explicit ListVirtioScsiLunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtioScsiLunsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.VirtioScsiLun virtio_scsi_luns = 1;
  int virtio_scsi_luns_size() const;
  private:
  int _internal_virtio_scsi_luns_size() const;
  public:
  void clear_virtio_scsi_luns();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_virtio_scsi_luns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
      mutable_virtio_scsi_luns();
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_virtio_scsi_luns(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_add_virtio_scsi_luns();
  public:
  const ::opi_api::storage::v1::VirtioScsiLun& virtio_scsi_luns(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* add_virtio_scsi_luns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
      virtio_scsi_luns() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiLunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun > virtio_scsi_luns_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioScsiLunRequest) */ {
 public:
  inline GetVirtioScsiLunRequest() : GetVirtioScsiLunRequest(nullptr) {}
  ~GetVirtioScsiLunRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioScsiLunRequest(const GetVirtioScsiLunRequest& from);
  GetVirtioScsiLunRequest(GetVirtioScsiLunRequest&& from) noexcept
    : GetVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioScsiLunRequest& operator=(const GetVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioScsiLunRequest& operator=(GetVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioScsiLunRequest*>(
               &_GetVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetVirtioScsiLunRequest& a, GetVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtioScsiLunRequest& from) {
    GetVirtioScsiLunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioScsiLunRequest";
  }
  protected:
  explicit GetVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiLunRequest) */ {
 public:
  inline StatsVirtioScsiLunRequest() : StatsVirtioScsiLunRequest(nullptr) {}
  ~StatsVirtioScsiLunRequest() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiLunRequest(const StatsVirtioScsiLunRequest& from);
  StatsVirtioScsiLunRequest(StatsVirtioScsiLunRequest&& from) noexcept
    : StatsVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiLunRequest& operator=(const StatsVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiLunRequest& operator=(StatsVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiLunRequest*>(
               &_StatsVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StatsVirtioScsiLunRequest& a, StatsVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiLunRequest& from) {
    StatsVirtioScsiLunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiLunRequest";
  }
  protected:
  explicit StatsVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kControllerNameRefFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string controller_name_ref = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_controller_name_ref();
  const std::string& controller_name_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_name_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_name_ref();
  PROTOBUF_NODISCARD std::string* release_controller_name_ref();
  void set_allocated_controller_name_ref(std::string* controller_name_ref);
  private:
  const std::string& _internal_controller_name_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_name_ref(const std::string& value);
  std::string* _internal_mutable_controller_name_ref();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_name_ref_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class StatsVirtioScsiLunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.StatsVirtioScsiLunResponse) */ {
 public:
  inline StatsVirtioScsiLunResponse() : StatsVirtioScsiLunResponse(nullptr) {}
  ~StatsVirtioScsiLunResponse() override;
  explicit PROTOBUF_CONSTEXPR StatsVirtioScsiLunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsVirtioScsiLunResponse(const StatsVirtioScsiLunResponse& from);
  StatsVirtioScsiLunResponse(StatsVirtioScsiLunResponse&& from) noexcept
    : StatsVirtioScsiLunResponse() {
    *this = ::std::move(from);
  }

  inline StatsVirtioScsiLunResponse& operator=(const StatsVirtioScsiLunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsVirtioScsiLunResponse& operator=(StatsVirtioScsiLunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsVirtioScsiLunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsVirtioScsiLunResponse* internal_default_instance() {
    return reinterpret_cast<const StatsVirtioScsiLunResponse*>(
               &_StatsVirtioScsiLunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StatsVirtioScsiLunResponse& a, StatsVirtioScsiLunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsVirtioScsiLunResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsVirtioScsiLunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsVirtioScsiLunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsVirtioScsiLunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsVirtioScsiLunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsVirtioScsiLunResponse& from) {
    StatsVirtioScsiLunResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsVirtioScsiLunResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.StatsVirtioScsiLunResponse";
  }
  protected:
  explicit StatsVirtioScsiLunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.StatsVirtioScsiLunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opi_api::storage::v1::VolumeStats* stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioScsiTarget

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void VirtioScsiTarget::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VirtioScsiTarget::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiTarget.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiTarget::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiTarget.name)
}
inline std::string* VirtioScsiTarget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiTarget.name)
  return _s;
}
inline const std::string& VirtioScsiTarget::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioScsiTarget::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioScsiTarget::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioScsiTarget::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiTarget.name)
  return _impl_.name_.Release();
}
inline void VirtioScsiTarget::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiTarget.name)
}

// int32 max_luns = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void VirtioScsiTarget::clear_max_luns() {
  _impl_.max_luns_ = 0;
}
inline int32_t VirtioScsiTarget::_internal_max_luns() const {
  return _impl_.max_luns_;
}
inline int32_t VirtioScsiTarget::max_luns() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiTarget.max_luns)
  return _internal_max_luns();
}
inline void VirtioScsiTarget::_internal_set_max_luns(int32_t value) {
  
  _impl_.max_luns_ = value;
}
inline void VirtioScsiTarget::set_max_luns(int32_t value) {
  _internal_set_max_luns(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiTarget.max_luns)
}

// -------------------------------------------------------------------

// VirtioScsiController

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void VirtioScsiController::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VirtioScsiController::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiController::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiController.name)
}
inline std::string* VirtioScsiController::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.name)
  return _s;
}
inline const std::string& VirtioScsiController::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioScsiController::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioScsiController::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioScsiController::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.name)
  return _impl_.name_.Release();
}
inline void VirtioScsiController::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.name)
}

// .opi_api.storage.v1.PciEndpoint pcie_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool VirtioScsiController::_internal_has_pcie_id() const {
  return this != internal_default_instance() && _impl_.pcie_id_ != nullptr;
}
inline bool VirtioScsiController::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioScsiController::_internal_pcie_id() const {
  const ::opi_api::storage::v1::PciEndpoint* p = _impl_.pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::PciEndpoint&>(
      ::opi_api::storage::v1::_PciEndpoint_default_instance_);
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioScsiController::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::PciEndpoint* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pcie_id_);
  }
  _impl_.pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::release_pcie_id() {
  
  ::opi_api::storage::v1::PciEndpoint* temp = _impl_.pcie_id_;
  _impl_.pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.pcie_id)
  
  ::opi_api::storage::v1::PciEndpoint* temp = _impl_.pcie_id_;
  _impl_.pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::_internal_mutable_pcie_id() {
  
  if (_impl_.pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(GetArenaForAllocation());
    _impl_.pcie_id_ = p;
  }
  return _impl_.pcie_id_;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::mutable_pcie_id() {
  ::opi_api::storage::v1::PciEndpoint* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _msg;
}
inline void VirtioScsiController::set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}

// .opi_api.storage.v1.QosLimit min_limit = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool VirtioScsiController::_internal_has_min_limit() const {
  return this != internal_default_instance() && _impl_.min_limit_ != nullptr;
}
inline bool VirtioScsiController::has_min_limit() const {
  return _internal_has_min_limit();
}
inline const ::opi_api::storage::v1::QosLimit& VirtioScsiController::_internal_min_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = _impl_.min_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& VirtioScsiController::min_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.min_limit)
  return _internal_min_limit();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_min_limit(
    ::opi_api::storage::v1::QosLimit* min_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_limit_);
  }
  _impl_.min_limit_ = min_limit;
  if (min_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.min_limit)
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::release_min_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.min_limit_;
  _impl_.min_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::unsafe_arena_release_min_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.min_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.min_limit_;
  _impl_.min_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::_internal_mutable_min_limit() {
  
  if (_impl_.min_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    _impl_.min_limit_ = p;
  }
  return _impl_.min_limit_;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::mutable_min_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_min_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.min_limit)
  return _msg;
}
inline void VirtioScsiController::set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_limit_);
  }
  if (min_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_limit));
    if (message_arena != submessage_arena) {
      min_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_limit_ = min_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.min_limit)
}

// .opi_api.storage.v1.QosLimit max_limit = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool VirtioScsiController::_internal_has_max_limit() const {
  return this != internal_default_instance() && _impl_.max_limit_ != nullptr;
}
inline bool VirtioScsiController::has_max_limit() const {
  return _internal_has_max_limit();
}
inline const ::opi_api::storage::v1::QosLimit& VirtioScsiController::_internal_max_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = _impl_.max_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& VirtioScsiController::max_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.max_limit)
  return _internal_max_limit();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_max_limit(
    ::opi_api::storage::v1::QosLimit* max_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_limit_);
  }
  _impl_.max_limit_ = max_limit;
  if (max_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.max_limit)
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::release_max_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.max_limit_;
  _impl_.max_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::unsafe_arena_release_max_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.max_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = _impl_.max_limit_;
  _impl_.max_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::_internal_mutable_max_limit() {
  
  if (_impl_.max_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    _impl_.max_limit_ = p;
  }
  return _impl_.max_limit_;
}
inline ::opi_api::storage::v1::QosLimit* VirtioScsiController::mutable_max_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_max_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.max_limit)
  return _msg;
}
inline void VirtioScsiController::set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_limit_);
  }
  if (max_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit));
    if (message_arena != submessage_arena) {
      max_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_limit_ = max_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.max_limit)
}

// -------------------------------------------------------------------

// VirtioScsiLun

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void VirtioScsiLun::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VirtioScsiLun::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLun::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLun.name)
}
inline std::string* VirtioScsiLun::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.name)
  return _s;
}
inline const std::string& VirtioScsiLun::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioScsiLun::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.name)
  return _impl_.name_.Release();
}
inline void VirtioScsiLun::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.name)
}

// string target_name_ref = 2 [(.google.api.field_behavior) = REQUIRED];
inline void VirtioScsiLun::clear_target_name_ref() {
  _impl_.target_name_ref_.ClearToEmpty();
}
inline const std::string& VirtioScsiLun::target_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.target_name_ref)
  return _internal_target_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLun::set_target_name_ref(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_name_ref_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLun.target_name_ref)
}
inline std::string* VirtioScsiLun::mutable_target_name_ref() {
  std::string* _s = _internal_mutable_target_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.target_name_ref)
  return _s;
}
inline const std::string& VirtioScsiLun::_internal_target_name_ref() const {
  return _impl_.target_name_ref_.Get();
}
inline void VirtioScsiLun::_internal_set_target_name_ref(const std::string& value) {
  
  _impl_.target_name_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::_internal_mutable_target_name_ref() {
  
  return _impl_.target_name_ref_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::release_target_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.target_name_ref)
  return _impl_.target_name_ref_.Release();
}
inline void VirtioScsiLun::set_allocated_target_name_ref(std::string* target_name_ref) {
  if (target_name_ref != nullptr) {
    
  } else {
    
  }
  _impl_.target_name_ref_.SetAllocated(target_name_ref, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_ref_.IsDefault()) {
    _impl_.target_name_ref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.target_name_ref)
}

// string volume_name_ref = 3 [(.google.api.field_behavior) = REQUIRED];
inline void VirtioScsiLun::clear_volume_name_ref() {
  _impl_.volume_name_ref_.ClearToEmpty();
}
inline const std::string& VirtioScsiLun::volume_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.volume_name_ref)
  return _internal_volume_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLun::set_volume_name_ref(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volume_name_ref_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLun.volume_name_ref)
}
inline std::string* VirtioScsiLun::mutable_volume_name_ref() {
  std::string* _s = _internal_mutable_volume_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.volume_name_ref)
  return _s;
}
inline const std::string& VirtioScsiLun::_internal_volume_name_ref() const {
  return _impl_.volume_name_ref_.Get();
}
inline void VirtioScsiLun::_internal_set_volume_name_ref(const std::string& value) {
  
  _impl_.volume_name_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::_internal_mutable_volume_name_ref() {
  
  return _impl_.volume_name_ref_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::release_volume_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.volume_name_ref)
  return _impl_.volume_name_ref_.Release();
}
inline void VirtioScsiLun::set_allocated_volume_name_ref(std::string* volume_name_ref) {
  if (volume_name_ref != nullptr) {
    
  } else {
    
  }
  _impl_.volume_name_ref_.SetAllocated(volume_name_ref, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volume_name_ref_.IsDefault()) {
    _impl_.volume_name_ref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.volume_name_ref)
}

// -------------------------------------------------------------------

// CreateVirtioScsiTargetRequest

// .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_target = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVirtioScsiTargetRequest::_internal_has_virtio_scsi_target() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_target_ != nullptr;
}
inline bool CreateVirtioScsiTargetRequest::has_virtio_scsi_target() const {
  return _internal_has_virtio_scsi_target();
}
inline void CreateVirtioScsiTargetRequest::clear_virtio_scsi_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_target_ != nullptr) {
    delete _impl_.virtio_scsi_target_;
  }
  _impl_.virtio_scsi_target_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& CreateVirtioScsiTargetRequest::_internal_virtio_scsi_target() const {
  const ::opi_api::storage::v1::VirtioScsiTarget* p = _impl_.virtio_scsi_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiTarget&>(
      ::opi_api::storage::v1::_VirtioScsiTarget_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& CreateVirtioScsiTargetRequest::virtio_scsi_target() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target)
  return _internal_virtio_scsi_target();
}
inline void CreateVirtioScsiTargetRequest::unsafe_arena_set_allocated_virtio_scsi_target(
    ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_target_);
  }
  _impl_.virtio_scsi_target_ = virtio_scsi_target;
  if (virtio_scsi_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target)
}
inline ::opi_api::storage::v1::VirtioScsiTarget* CreateVirtioScsiTargetRequest::release_virtio_scsi_target() {
  
  ::opi_api::storage::v1::VirtioScsiTarget* temp = _impl_.virtio_scsi_target_;
  _impl_.virtio_scsi_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* CreateVirtioScsiTargetRequest::unsafe_arena_release_virtio_scsi_target() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target)
  
  ::opi_api::storage::v1::VirtioScsiTarget* temp = _impl_.virtio_scsi_target_;
  _impl_.virtio_scsi_target_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* CreateVirtioScsiTargetRequest::_internal_mutable_virtio_scsi_target() {
  
  if (_impl_.virtio_scsi_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiTarget>(GetArenaForAllocation());
    _impl_.virtio_scsi_target_ = p;
  }
  return _impl_.virtio_scsi_target_;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* CreateVirtioScsiTargetRequest::mutable_virtio_scsi_target() {
  ::opi_api::storage::v1::VirtioScsiTarget* _msg = _internal_mutable_virtio_scsi_target();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target)
  return _msg;
}
inline void CreateVirtioScsiTargetRequest::set_allocated_virtio_scsi_target(::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_target_;
  }
  if (virtio_scsi_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_target);
    if (message_arena != submessage_arena) {
      virtio_scsi_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_target_ = virtio_scsi_target;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target)
}

// string virtio_scsi_target_id = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateVirtioScsiTargetRequest::clear_virtio_scsi_target_id() {
  _impl_.virtio_scsi_target_id_.ClearToEmpty();
}
inline const std::string& CreateVirtioScsiTargetRequest::virtio_scsi_target_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target_id)
  return _internal_virtio_scsi_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVirtioScsiTargetRequest::set_virtio_scsi_target_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtio_scsi_target_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target_id)
}
inline std::string* CreateVirtioScsiTargetRequest::mutable_virtio_scsi_target_id() {
  std::string* _s = _internal_mutable_virtio_scsi_target_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target_id)
  return _s;
}
inline const std::string& CreateVirtioScsiTargetRequest::_internal_virtio_scsi_target_id() const {
  return _impl_.virtio_scsi_target_id_.Get();
}
inline void CreateVirtioScsiTargetRequest::_internal_set_virtio_scsi_target_id(const std::string& value) {
  
  _impl_.virtio_scsi_target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiTargetRequest::_internal_mutable_virtio_scsi_target_id() {
  
  return _impl_.virtio_scsi_target_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiTargetRequest::release_virtio_scsi_target_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target_id)
  return _impl_.virtio_scsi_target_id_.Release();
}
inline void CreateVirtioScsiTargetRequest::set_allocated_virtio_scsi_target_id(std::string* virtio_scsi_target_id) {
  if (virtio_scsi_target_id != nullptr) {
    
  } else {
    
  }
  _impl_.virtio_scsi_target_id_.SetAllocated(virtio_scsi_target_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtio_scsi_target_id_.IsDefault()) {
    _impl_.virtio_scsi_target_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target_id)
}

// -------------------------------------------------------------------

// DeleteVirtioScsiTargetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVirtioScsiTargetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteVirtioScsiTargetRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVirtioScsiTargetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.name)
}
inline std::string* DeleteVirtioScsiTargetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.name)
  return _s;
}
inline const std::string& DeleteVirtioScsiTargetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteVirtioScsiTargetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiTargetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiTargetRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteVirtioScsiTargetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.name)
}

// bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteVirtioScsiTargetRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteVirtioScsiTargetRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteVirtioScsiTargetRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteVirtioScsiTargetRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteVirtioScsiTargetRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiTargetRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateVirtioScsiTargetRequest

// .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_target = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateVirtioScsiTargetRequest::_internal_has_virtio_scsi_target() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_target_ != nullptr;
}
inline bool UpdateVirtioScsiTargetRequest::has_virtio_scsi_target() const {
  return _internal_has_virtio_scsi_target();
}
inline void UpdateVirtioScsiTargetRequest::clear_virtio_scsi_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_target_ != nullptr) {
    delete _impl_.virtio_scsi_target_;
  }
  _impl_.virtio_scsi_target_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& UpdateVirtioScsiTargetRequest::_internal_virtio_scsi_target() const {
  const ::opi_api::storage::v1::VirtioScsiTarget* p = _impl_.virtio_scsi_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiTarget&>(
      ::opi_api::storage::v1::_VirtioScsiTarget_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& UpdateVirtioScsiTargetRequest::virtio_scsi_target() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target)
  return _internal_virtio_scsi_target();
}
inline void UpdateVirtioScsiTargetRequest::unsafe_arena_set_allocated_virtio_scsi_target(
    ::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_target_);
  }
  _impl_.virtio_scsi_target_ = virtio_scsi_target;
  if (virtio_scsi_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target)
}
inline ::opi_api::storage::v1::VirtioScsiTarget* UpdateVirtioScsiTargetRequest::release_virtio_scsi_target() {
  
  ::opi_api::storage::v1::VirtioScsiTarget* temp = _impl_.virtio_scsi_target_;
  _impl_.virtio_scsi_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* UpdateVirtioScsiTargetRequest::unsafe_arena_release_virtio_scsi_target() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target)
  
  ::opi_api::storage::v1::VirtioScsiTarget* temp = _impl_.virtio_scsi_target_;
  _impl_.virtio_scsi_target_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* UpdateVirtioScsiTargetRequest::_internal_mutable_virtio_scsi_target() {
  
  if (_impl_.virtio_scsi_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiTarget>(GetArenaForAllocation());
    _impl_.virtio_scsi_target_ = p;
  }
  return _impl_.virtio_scsi_target_;
}
inline ::opi_api::storage::v1::VirtioScsiTarget* UpdateVirtioScsiTargetRequest::mutable_virtio_scsi_target() {
  ::opi_api::storage::v1::VirtioScsiTarget* _msg = _internal_mutable_virtio_scsi_target();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target)
  return _msg;
}
inline void UpdateVirtioScsiTargetRequest::set_allocated_virtio_scsi_target(::opi_api::storage::v1::VirtioScsiTarget* virtio_scsi_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_target_;
  }
  if (virtio_scsi_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_target);
    if (message_arena != submessage_arena) {
      virtio_scsi_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_target_ = virtio_scsi_target;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateVirtioScsiTargetRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateVirtioScsiTargetRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiTargetRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiTargetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVirtioScsiTargetRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiTargetRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiTargetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiTargetRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiTargetRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask)
  return _msg;
}
inline void UpdateVirtioScsiTargetRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask)
}

// bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateVirtioScsiTargetRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool UpdateVirtioScsiTargetRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool UpdateVirtioScsiTargetRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateVirtioScsiTargetRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void UpdateVirtioScsiTargetRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.UpdateVirtioScsiTargetRequest.allow_missing)
}

// -------------------------------------------------------------------

// ListVirtioScsiTargetsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVirtioScsiTargetsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiTargetsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiTargetsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiTargetsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiTargetsRequest.parent)
}
inline std::string* ListVirtioScsiTargetsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiTargetsRequest.parent)
  return _s;
}
inline const std::string& ListVirtioScsiTargetsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListVirtioScsiTargetsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiTargetsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListVirtioScsiTargetsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiTargetsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiTargetsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListVirtioScsiTargetsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListVirtioScsiTargetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_size)
  return _internal_page_size();
}
inline void ListVirtioScsiTargetsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListVirtioScsiTargetsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiTargetsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiTargetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiTargetsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_token)
}
inline std::string* ListVirtioScsiTargetsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_token)
  return _s;
}
inline const std::string& ListVirtioScsiTargetsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListVirtioScsiTargetsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListVirtioScsiTargetsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiTargetsRequest.page_token)
}

// -------------------------------------------------------------------

// ListVirtioScsiTargetsResponse

// repeated .opi_api.storage.v1.VirtioScsiTarget virtio_scsi_targets = 1;
inline int ListVirtioScsiTargetsResponse::_internal_virtio_scsi_targets_size() const {
  return _impl_.virtio_scsi_targets_.size();
}
inline int ListVirtioScsiTargetsResponse::virtio_scsi_targets_size() const {
  return _internal_virtio_scsi_targets_size();
}
inline void ListVirtioScsiTargetsResponse::clear_virtio_scsi_targets() {
  _impl_.virtio_scsi_targets_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiTarget* ListVirtioScsiTargetsResponse::mutable_virtio_scsi_targets(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets)
  return _impl_.virtio_scsi_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiTarget >*
ListVirtioScsiTargetsResponse::mutable_virtio_scsi_targets() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets)
  return &_impl_.virtio_scsi_targets_;
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& ListVirtioScsiTargetsResponse::_internal_virtio_scsi_targets(int index) const {
  return _impl_.virtio_scsi_targets_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiTarget& ListVirtioScsiTargetsResponse::virtio_scsi_targets(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets)
  return _internal_virtio_scsi_targets(index);
}
inline ::opi_api::storage::v1::VirtioScsiTarget* ListVirtioScsiTargetsResponse::_internal_add_virtio_scsi_targets() {
  return _impl_.virtio_scsi_targets_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiTarget* ListVirtioScsiTargetsResponse::add_virtio_scsi_targets() {
  ::opi_api::storage::v1::VirtioScsiTarget* _add = _internal_add_virtio_scsi_targets();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiTarget >&
ListVirtioScsiTargetsResponse::virtio_scsi_targets() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets)
  return _impl_.virtio_scsi_targets_;
}

// string next_page_token = 2;
inline void ListVirtioScsiTargetsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiTargetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiTargetsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiTargetsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiTargetsResponse.next_page_token)
}
inline std::string* ListVirtioScsiTargetsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiTargetsResponse.next_page_token)
  return _s;
}
inline const std::string& ListVirtioScsiTargetsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListVirtioScsiTargetsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiTargetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiTargetsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListVirtioScsiTargetsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiTargetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVirtioScsiTargetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVirtioScsiTargetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetVirtioScsiTargetRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiTargetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtioScsiTargetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetVirtioScsiTargetRequest.name)
}
inline std::string* GetVirtioScsiTargetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiTargetRequest.name)
  return _s;
}
inline const std::string& GetVirtioScsiTargetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetVirtioScsiTargetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtioScsiTargetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtioScsiTargetRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiTargetRequest.name)
  return _impl_.name_.Release();
}
inline void GetVirtioScsiTargetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiTargetRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioScsiTargetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StatsVirtioScsiTargetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StatsVirtioScsiTargetRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiTargetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsVirtioScsiTargetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsVirtioScsiTargetRequest.name)
}
inline std::string* StatsVirtioScsiTargetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiTargetRequest.name)
  return _s;
}
inline const std::string& StatsVirtioScsiTargetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StatsVirtioScsiTargetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiTargetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiTargetRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiTargetRequest.name)
  return _impl_.name_.Release();
}
inline void StatsVirtioScsiTargetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiTargetRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioScsiTargetResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool StatsVirtioScsiTargetResponse::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool StatsVirtioScsiTargetResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiTargetResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiTargetResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats)
  return _internal_stats();
}
inline void StatsVirtioScsiTargetResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiTargetResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiTargetResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiTargetResponse::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiTargetResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats)
  return _msg;
}
inline void StatsVirtioScsiTargetResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats)
}

// -------------------------------------------------------------------

// CreateVirtioScsiControllerRequest

// .opi_api.storage.v1.VirtioScsiController virtio_scsi_controller = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVirtioScsiControllerRequest::_internal_has_virtio_scsi_controller() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_controller_ != nullptr;
}
inline bool CreateVirtioScsiControllerRequest::has_virtio_scsi_controller() const {
  return _internal_has_virtio_scsi_controller();
}
inline void CreateVirtioScsiControllerRequest::clear_virtio_scsi_controller() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_controller_ != nullptr) {
    delete _impl_.virtio_scsi_controller_;
  }
  _impl_.virtio_scsi_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& CreateVirtioScsiControllerRequest::_internal_virtio_scsi_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = _impl_.virtio_scsi_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& CreateVirtioScsiControllerRequest::virtio_scsi_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller)
  return _internal_virtio_scsi_controller();
}
inline void CreateVirtioScsiControllerRequest::unsafe_arena_set_allocated_virtio_scsi_controller(
    ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_controller_);
  }
  _impl_.virtio_scsi_controller_ = virtio_scsi_controller;
  if (virtio_scsi_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::release_virtio_scsi_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = _impl_.virtio_scsi_controller_;
  _impl_.virtio_scsi_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::unsafe_arena_release_virtio_scsi_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = _impl_.virtio_scsi_controller_;
  _impl_.virtio_scsi_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::_internal_mutable_virtio_scsi_controller() {
  
  if (_impl_.virtio_scsi_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    _impl_.virtio_scsi_controller_ = p;
  }
  return _impl_.virtio_scsi_controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::mutable_virtio_scsi_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_virtio_scsi_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller)
  return _msg;
}
inline void CreateVirtioScsiControllerRequest::set_allocated_virtio_scsi_controller(::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_controller_;
  }
  if (virtio_scsi_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_controller);
    if (message_arena != submessage_arena) {
      virtio_scsi_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_controller, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_controller_ = virtio_scsi_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller)
}

// string virtio_scsi_controller_id = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateVirtioScsiControllerRequest::clear_virtio_scsi_controller_id() {
  _impl_.virtio_scsi_controller_id_.ClearToEmpty();
}
inline const std::string& CreateVirtioScsiControllerRequest::virtio_scsi_controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller_id)
  return _internal_virtio_scsi_controller_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVirtioScsiControllerRequest::set_virtio_scsi_controller_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtio_scsi_controller_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller_id)
}
inline std::string* CreateVirtioScsiControllerRequest::mutable_virtio_scsi_controller_id() {
  std::string* _s = _internal_mutable_virtio_scsi_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller_id)
  return _s;
}
inline const std::string& CreateVirtioScsiControllerRequest::_internal_virtio_scsi_controller_id() const {
  return _impl_.virtio_scsi_controller_id_.Get();
}
inline void CreateVirtioScsiControllerRequest::_internal_set_virtio_scsi_controller_id(const std::string& value) {
  
  _impl_.virtio_scsi_controller_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiControllerRequest::_internal_mutable_virtio_scsi_controller_id() {
  
  return _impl_.virtio_scsi_controller_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiControllerRequest::release_virtio_scsi_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller_id)
  return _impl_.virtio_scsi_controller_id_.Release();
}
inline void CreateVirtioScsiControllerRequest::set_allocated_virtio_scsi_controller_id(std::string* virtio_scsi_controller_id) {
  if (virtio_scsi_controller_id != nullptr) {
    
  } else {
    
  }
  _impl_.virtio_scsi_controller_id_.SetAllocated(virtio_scsi_controller_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtio_scsi_controller_id_.IsDefault()) {
    _impl_.virtio_scsi_controller_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller_id)
}

// -------------------------------------------------------------------

// DeleteVirtioScsiControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVirtioScsiControllerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteVirtioScsiControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVirtioScsiControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.name)
}
inline std::string* DeleteVirtioScsiControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.name)
  return _s;
}
inline const std::string& DeleteVirtioScsiControllerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteVirtioScsiControllerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiControllerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteVirtioScsiControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.name)
}

// bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteVirtioScsiControllerRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteVirtioScsiControllerRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteVirtioScsiControllerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteVirtioScsiControllerRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteVirtioScsiControllerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateVirtioScsiControllerRequest

// .opi_api.storage.v1.VirtioScsiController virtio_scsi_controller = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateVirtioScsiControllerRequest::_internal_has_virtio_scsi_controller() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_controller_ != nullptr;
}
inline bool UpdateVirtioScsiControllerRequest::has_virtio_scsi_controller() const {
  return _internal_has_virtio_scsi_controller();
}
inline void UpdateVirtioScsiControllerRequest::clear_virtio_scsi_controller() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_controller_ != nullptr) {
    delete _impl_.virtio_scsi_controller_;
  }
  _impl_.virtio_scsi_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& UpdateVirtioScsiControllerRequest::_internal_virtio_scsi_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = _impl_.virtio_scsi_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& UpdateVirtioScsiControllerRequest::virtio_scsi_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller)
  return _internal_virtio_scsi_controller();
}
inline void UpdateVirtioScsiControllerRequest::unsafe_arena_set_allocated_virtio_scsi_controller(
    ::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_controller_);
  }
  _impl_.virtio_scsi_controller_ = virtio_scsi_controller;
  if (virtio_scsi_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::release_virtio_scsi_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = _impl_.virtio_scsi_controller_;
  _impl_.virtio_scsi_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::unsafe_arena_release_virtio_scsi_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = _impl_.virtio_scsi_controller_;
  _impl_.virtio_scsi_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::_internal_mutable_virtio_scsi_controller() {
  
  if (_impl_.virtio_scsi_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    _impl_.virtio_scsi_controller_ = p;
  }
  return _impl_.virtio_scsi_controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::mutable_virtio_scsi_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_virtio_scsi_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller)
  return _msg;
}
inline void UpdateVirtioScsiControllerRequest::set_allocated_virtio_scsi_controller(::opi_api::storage::v1::VirtioScsiController* virtio_scsi_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_controller_;
  }
  if (virtio_scsi_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_controller);
    if (message_arena != submessage_arena) {
      virtio_scsi_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_controller, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_controller_ = virtio_scsi_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateVirtioScsiControllerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateVirtioScsiControllerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiControllerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiControllerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVirtioScsiControllerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiControllerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiControllerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiControllerRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiControllerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask)
  return _msg;
}
inline void UpdateVirtioScsiControllerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask)
}

// bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateVirtioScsiControllerRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool UpdateVirtioScsiControllerRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool UpdateVirtioScsiControllerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateVirtioScsiControllerRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void UpdateVirtioScsiControllerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.allow_missing)
}

// -------------------------------------------------------------------

// ListVirtioScsiControllersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVirtioScsiControllersRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiControllersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiControllersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiControllersRequest.parent)
}
inline std::string* ListVirtioScsiControllersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiControllersRequest.parent)
  return _s;
}
inline const std::string& ListVirtioScsiControllersRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListVirtioScsiControllersRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiControllersRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListVirtioScsiControllersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiControllersRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiControllersRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListVirtioScsiControllersRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListVirtioScsiControllersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_size)
  return _internal_page_size();
}
inline void ListVirtioScsiControllersRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListVirtioScsiControllersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiControllersRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiControllersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiControllersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_token)
}
inline std::string* ListVirtioScsiControllersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_token)
  return _s;
}
inline const std::string& ListVirtioScsiControllersRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListVirtioScsiControllersRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListVirtioScsiControllersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiControllersRequest.page_token)
}

// -------------------------------------------------------------------

// ListVirtioScsiControllersResponse

// repeated .opi_api.storage.v1.VirtioScsiController virtio_scsi_controllers = 1;
inline int ListVirtioScsiControllersResponse::_internal_virtio_scsi_controllers_size() const {
  return _impl_.virtio_scsi_controllers_.size();
}
inline int ListVirtioScsiControllersResponse::virtio_scsi_controllers_size() const {
  return _internal_virtio_scsi_controllers_size();
}
inline void ListVirtioScsiControllersResponse::clear_virtio_scsi_controllers() {
  _impl_.virtio_scsi_controllers_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllersResponse::mutable_virtio_scsi_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers)
  return _impl_.virtio_scsi_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
ListVirtioScsiControllersResponse::mutable_virtio_scsi_controllers() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers)
  return &_impl_.virtio_scsi_controllers_;
}
inline const ::opi_api::storage::v1::VirtioScsiController& ListVirtioScsiControllersResponse::_internal_virtio_scsi_controllers(int index) const {
  return _impl_.virtio_scsi_controllers_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiController& ListVirtioScsiControllersResponse::virtio_scsi_controllers(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers)
  return _internal_virtio_scsi_controllers(index);
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllersResponse::_internal_add_virtio_scsi_controllers() {
  return _impl_.virtio_scsi_controllers_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllersResponse::add_virtio_scsi_controllers() {
  ::opi_api::storage::v1::VirtioScsiController* _add = _internal_add_virtio_scsi_controllers();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
ListVirtioScsiControllersResponse::virtio_scsi_controllers() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers)
  return _impl_.virtio_scsi_controllers_;
}

// string next_page_token = 2;
inline void ListVirtioScsiControllersResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiControllersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiControllersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiControllersResponse.next_page_token)
}
inline std::string* ListVirtioScsiControllersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiControllersResponse.next_page_token)
  return _s;
}
inline const std::string& ListVirtioScsiControllersResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListVirtioScsiControllersResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiControllersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiControllersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListVirtioScsiControllersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiControllersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVirtioScsiControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVirtioScsiControllerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetVirtioScsiControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtioScsiControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetVirtioScsiControllerRequest.name)
}
inline std::string* GetVirtioScsiControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiControllerRequest.name)
  return _s;
}
inline const std::string& GetVirtioScsiControllerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetVirtioScsiControllerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtioScsiControllerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtioScsiControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiControllerRequest.name)
  return _impl_.name_.Release();
}
inline void GetVirtioScsiControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiControllerRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioScsiControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StatsVirtioScsiControllerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StatsVirtioScsiControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsVirtioScsiControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsVirtioScsiControllerRequest.name)
}
inline std::string* StatsVirtioScsiControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiControllerRequest.name)
  return _s;
}
inline const std::string& StatsVirtioScsiControllerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StatsVirtioScsiControllerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiControllerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiControllerRequest.name)
  return _impl_.name_.Release();
}
inline void StatsVirtioScsiControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiControllerRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioScsiControllerResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool StatsVirtioScsiControllerResponse::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool StatsVirtioScsiControllerResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiControllerResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiControllerResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats)
  return _internal_stats();
}
inline void StatsVirtioScsiControllerResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiControllerResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiControllerResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiControllerResponse::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiControllerResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats)
  return _msg;
}
inline void StatsVirtioScsiControllerResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats)
}

// -------------------------------------------------------------------

// CreateVirtioScsiLunRequest

// .opi_api.storage.v1.VirtioScsiLun virtio_scsi_lun = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVirtioScsiLunRequest::_internal_has_virtio_scsi_lun() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_lun_ != nullptr;
}
inline bool CreateVirtioScsiLunRequest::has_virtio_scsi_lun() const {
  return _internal_has_virtio_scsi_lun();
}
inline void CreateVirtioScsiLunRequest::clear_virtio_scsi_lun() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_lun_ != nullptr) {
    delete _impl_.virtio_scsi_lun_;
  }
  _impl_.virtio_scsi_lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& CreateVirtioScsiLunRequest::_internal_virtio_scsi_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = _impl_.virtio_scsi_lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& CreateVirtioScsiLunRequest::virtio_scsi_lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun)
  return _internal_virtio_scsi_lun();
}
inline void CreateVirtioScsiLunRequest::unsafe_arena_set_allocated_virtio_scsi_lun(
    ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_lun_);
  }
  _impl_.virtio_scsi_lun_ = virtio_scsi_lun;
  if (virtio_scsi_lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::release_virtio_scsi_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = _impl_.virtio_scsi_lun_;
  _impl_.virtio_scsi_lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::unsafe_arena_release_virtio_scsi_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = _impl_.virtio_scsi_lun_;
  _impl_.virtio_scsi_lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::_internal_mutable_virtio_scsi_lun() {
  
  if (_impl_.virtio_scsi_lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    _impl_.virtio_scsi_lun_ = p;
  }
  return _impl_.virtio_scsi_lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::mutable_virtio_scsi_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_virtio_scsi_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun)
  return _msg;
}
inline void CreateVirtioScsiLunRequest::set_allocated_virtio_scsi_lun(::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_lun_;
  }
  if (virtio_scsi_lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_lun);
    if (message_arena != submessage_arena) {
      virtio_scsi_lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_lun, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_lun_ = virtio_scsi_lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun)
}

// string virtio_scsi_lun_id = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateVirtioScsiLunRequest::clear_virtio_scsi_lun_id() {
  _impl_.virtio_scsi_lun_id_.ClearToEmpty();
}
inline const std::string& CreateVirtioScsiLunRequest::virtio_scsi_lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun_id)
  return _internal_virtio_scsi_lun_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVirtioScsiLunRequest::set_virtio_scsi_lun_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtio_scsi_lun_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun_id)
}
inline std::string* CreateVirtioScsiLunRequest::mutable_virtio_scsi_lun_id() {
  std::string* _s = _internal_mutable_virtio_scsi_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun_id)
  return _s;
}
inline const std::string& CreateVirtioScsiLunRequest::_internal_virtio_scsi_lun_id() const {
  return _impl_.virtio_scsi_lun_id_.Get();
}
inline void CreateVirtioScsiLunRequest::_internal_set_virtio_scsi_lun_id(const std::string& value) {
  
  _impl_.virtio_scsi_lun_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiLunRequest::_internal_mutable_virtio_scsi_lun_id() {
  
  return _impl_.virtio_scsi_lun_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateVirtioScsiLunRequest::release_virtio_scsi_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun_id)
  return _impl_.virtio_scsi_lun_id_.Release();
}
inline void CreateVirtioScsiLunRequest::set_allocated_virtio_scsi_lun_id(std::string* virtio_scsi_lun_id) {
  if (virtio_scsi_lun_id != nullptr) {
    
  } else {
    
  }
  _impl_.virtio_scsi_lun_id_.SetAllocated(virtio_scsi_lun_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtio_scsi_lun_id_.IsDefault()) {
    _impl_.virtio_scsi_lun_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun_id)
}

// -------------------------------------------------------------------

// DeleteVirtioScsiLunRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVirtioScsiLunRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteVirtioScsiLunRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiLunRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVirtioScsiLunRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiLunRequest.name)
}
inline std::string* DeleteVirtioScsiLunRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiLunRequest.name)
  return _s;
}
inline const std::string& DeleteVirtioScsiLunRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteVirtioScsiLunRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiLunRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteVirtioScsiLunRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiLunRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteVirtioScsiLunRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiLunRequest.name)
}

// bool allow_missing = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteVirtioScsiLunRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteVirtioScsiLunRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteVirtioScsiLunRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiLunRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteVirtioScsiLunRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteVirtioScsiLunRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteVirtioScsiLunRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateVirtioScsiLunRequest

// .opi_api.storage.v1.VirtioScsiLun virtio_scsi_lun = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateVirtioScsiLunRequest::_internal_has_virtio_scsi_lun() const {
  return this != internal_default_instance() && _impl_.virtio_scsi_lun_ != nullptr;
}
inline bool UpdateVirtioScsiLunRequest::has_virtio_scsi_lun() const {
  return _internal_has_virtio_scsi_lun();
}
inline void UpdateVirtioScsiLunRequest::clear_virtio_scsi_lun() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtio_scsi_lun_ != nullptr) {
    delete _impl_.virtio_scsi_lun_;
  }
  _impl_.virtio_scsi_lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& UpdateVirtioScsiLunRequest::_internal_virtio_scsi_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = _impl_.virtio_scsi_lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& UpdateVirtioScsiLunRequest::virtio_scsi_lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun)
  return _internal_virtio_scsi_lun();
}
inline void UpdateVirtioScsiLunRequest::unsafe_arena_set_allocated_virtio_scsi_lun(
    ::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtio_scsi_lun_);
  }
  _impl_.virtio_scsi_lun_ = virtio_scsi_lun;
  if (virtio_scsi_lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::release_virtio_scsi_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = _impl_.virtio_scsi_lun_;
  _impl_.virtio_scsi_lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::unsafe_arena_release_virtio_scsi_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = _impl_.virtio_scsi_lun_;
  _impl_.virtio_scsi_lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::_internal_mutable_virtio_scsi_lun() {
  
  if (_impl_.virtio_scsi_lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    _impl_.virtio_scsi_lun_ = p;
  }
  return _impl_.virtio_scsi_lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::mutable_virtio_scsi_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_virtio_scsi_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun)
  return _msg;
}
inline void UpdateVirtioScsiLunRequest::set_allocated_virtio_scsi_lun(::opi_api::storage::v1::VirtioScsiLun* virtio_scsi_lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtio_scsi_lun_;
  }
  if (virtio_scsi_lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtio_scsi_lun);
    if (message_arena != submessage_arena) {
      virtio_scsi_lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_scsi_lun, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtio_scsi_lun_ = virtio_scsi_lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateVirtioScsiLunRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateVirtioScsiLunRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiLunRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVirtioScsiLunRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVirtioScsiLunRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiLunRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiLunRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiLunRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVirtioScsiLunRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask)
  return _msg;
}
inline void UpdateVirtioScsiLunRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask)
}

// bool allow_missing = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateVirtioScsiLunRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool UpdateVirtioScsiLunRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool UpdateVirtioScsiLunRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiLunRequest.allow_missing)
  return _internal_allow_missing();
}
inline void UpdateVirtioScsiLunRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void UpdateVirtioScsiLunRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.UpdateVirtioScsiLunRequest.allow_missing)
}

// -------------------------------------------------------------------

// ListVirtioScsiLunsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVirtioScsiLunsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiLunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiLunsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiLunsRequest.parent)
}
inline std::string* ListVirtioScsiLunsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunsRequest.parent)
  return _s;
}
inline const std::string& ListVirtioScsiLunsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListVirtioScsiLunsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiLunsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListVirtioScsiLunsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiLunsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiLunsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListVirtioScsiLunsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListVirtioScsiLunsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_size)
  return _internal_page_size();
}
inline void ListVirtioScsiLunsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListVirtioScsiLunsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListVirtioScsiLunsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiLunsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiLunsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_token)
}
inline std::string* ListVirtioScsiLunsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_token)
  return _s;
}
inline const std::string& ListVirtioScsiLunsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListVirtioScsiLunsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListVirtioScsiLunsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiLunsRequest.page_token)
}

// -------------------------------------------------------------------

// ListVirtioScsiLunsResponse

// repeated .opi_api.storage.v1.VirtioScsiLun virtio_scsi_luns = 1;
inline int ListVirtioScsiLunsResponse::_internal_virtio_scsi_luns_size() const {
  return _impl_.virtio_scsi_luns_.size();
}
inline int ListVirtioScsiLunsResponse::virtio_scsi_luns_size() const {
  return _internal_virtio_scsi_luns_size();
}
inline void ListVirtioScsiLunsResponse::clear_virtio_scsi_luns() {
  _impl_.virtio_scsi_luns_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunsResponse::mutable_virtio_scsi_luns(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns)
  return _impl_.virtio_scsi_luns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
ListVirtioScsiLunsResponse::mutable_virtio_scsi_luns() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns)
  return &_impl_.virtio_scsi_luns_;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& ListVirtioScsiLunsResponse::_internal_virtio_scsi_luns(int index) const {
  return _impl_.virtio_scsi_luns_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& ListVirtioScsiLunsResponse::virtio_scsi_luns(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns)
  return _internal_virtio_scsi_luns(index);
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunsResponse::_internal_add_virtio_scsi_luns() {
  return _impl_.virtio_scsi_luns_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunsResponse::add_virtio_scsi_luns() {
  ::opi_api::storage::v1::VirtioScsiLun* _add = _internal_add_virtio_scsi_luns();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
ListVirtioScsiLunsResponse::virtio_scsi_luns() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns)
  return _impl_.virtio_scsi_luns_;
}

// string next_page_token = 2;
inline void ListVirtioScsiLunsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListVirtioScsiLunsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVirtioScsiLunsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListVirtioScsiLunsResponse.next_page_token)
}
inline std::string* ListVirtioScsiLunsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunsResponse.next_page_token)
  return _s;
}
inline const std::string& ListVirtioScsiLunsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListVirtioScsiLunsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListVirtioScsiLunsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiLunsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListVirtioScsiLunsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiLunsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVirtioScsiLunRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVirtioScsiLunRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetVirtioScsiLunRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiLunRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtioScsiLunRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetVirtioScsiLunRequest.name)
}
inline std::string* GetVirtioScsiLunRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiLunRequest.name)
  return _s;
}
inline const std::string& GetVirtioScsiLunRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetVirtioScsiLunRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtioScsiLunRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtioScsiLunRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiLunRequest.name)
  return _impl_.name_.Release();
}
inline void GetVirtioScsiLunRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiLunRequest.name)
}

// -------------------------------------------------------------------

// StatsVirtioScsiLunRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StatsVirtioScsiLunRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StatsVirtioScsiLunRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiLunRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsVirtioScsiLunRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsVirtioScsiLunRequest.name)
}
inline std::string* StatsVirtioScsiLunRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiLunRequest.name)
  return _s;
}
inline const std::string& StatsVirtioScsiLunRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StatsVirtioScsiLunRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiLunRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiLunRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiLunRequest.name)
  return _impl_.name_.Release();
}
inline void StatsVirtioScsiLunRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiLunRequest.name)
}

// string controller_name_ref = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void StatsVirtioScsiLunRequest::clear_controller_name_ref() {
  _impl_.controller_name_ref_.ClearToEmpty();
}
inline const std::string& StatsVirtioScsiLunRequest::controller_name_ref() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiLunRequest.controller_name_ref)
  return _internal_controller_name_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsVirtioScsiLunRequest::set_controller_name_ref(ArgT0&& arg0, ArgT... args) {
 
 _impl_.controller_name_ref_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.StatsVirtioScsiLunRequest.controller_name_ref)
}
inline std::string* StatsVirtioScsiLunRequest::mutable_controller_name_ref() {
  std::string* _s = _internal_mutable_controller_name_ref();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiLunRequest.controller_name_ref)
  return _s;
}
inline const std::string& StatsVirtioScsiLunRequest::_internal_controller_name_ref() const {
  return _impl_.controller_name_ref_.Get();
}
inline void StatsVirtioScsiLunRequest::_internal_set_controller_name_ref(const std::string& value) {
  
  _impl_.controller_name_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiLunRequest::_internal_mutable_controller_name_ref() {
  
  return _impl_.controller_name_ref_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsVirtioScsiLunRequest::release_controller_name_ref() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiLunRequest.controller_name_ref)
  return _impl_.controller_name_ref_.Release();
}
inline void StatsVirtioScsiLunRequest::set_allocated_controller_name_ref(std::string* controller_name_ref) {
  if (controller_name_ref != nullptr) {
    
  } else {
    
  }
  _impl_.controller_name_ref_.SetAllocated(controller_name_ref, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.controller_name_ref_.IsDefault()) {
    _impl_.controller_name_ref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiLunRequest.controller_name_ref)
}

// -------------------------------------------------------------------

// StatsVirtioScsiLunResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool StatsVirtioScsiLunResponse::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool StatsVirtioScsiLunResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiLunResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& StatsVirtioScsiLunResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.StatsVirtioScsiLunResponse.stats)
  return _internal_stats();
}
inline void StatsVirtioScsiLunResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.StatsVirtioScsiLunResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiLunResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiLunResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.StatsVirtioScsiLunResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiLunResponse::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::opi_api::storage::v1::VolumeStats* StatsVirtioScsiLunResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.StatsVirtioScsiLunResponse.stats)
  return _msg;
}
inline void StatsVirtioScsiLunResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.StatsVirtioScsiLunResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
