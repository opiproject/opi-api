// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_scsi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "object_key.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fscsi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fscsi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fscsi_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class VirtioScsiController;
struct VirtioScsiControllerDefaultTypeInternal;
extern VirtioScsiControllerDefaultTypeInternal _VirtioScsiController_default_instance_;
class VirtioScsiControllerCreateRequest;
struct VirtioScsiControllerCreateRequestDefaultTypeInternal;
extern VirtioScsiControllerCreateRequestDefaultTypeInternal _VirtioScsiControllerCreateRequest_default_instance_;
class VirtioScsiControllerDeleteRequest;
struct VirtioScsiControllerDeleteRequestDefaultTypeInternal;
extern VirtioScsiControllerDeleteRequestDefaultTypeInternal _VirtioScsiControllerDeleteRequest_default_instance_;
class VirtioScsiControllerGetRequest;
struct VirtioScsiControllerGetRequestDefaultTypeInternal;
extern VirtioScsiControllerGetRequestDefaultTypeInternal _VirtioScsiControllerGetRequest_default_instance_;
class VirtioScsiControllerListRequest;
struct VirtioScsiControllerListRequestDefaultTypeInternal;
extern VirtioScsiControllerListRequestDefaultTypeInternal _VirtioScsiControllerListRequest_default_instance_;
class VirtioScsiControllerListResponse;
struct VirtioScsiControllerListResponseDefaultTypeInternal;
extern VirtioScsiControllerListResponseDefaultTypeInternal _VirtioScsiControllerListResponse_default_instance_;
class VirtioScsiControllerStatsRequest;
struct VirtioScsiControllerStatsRequestDefaultTypeInternal;
extern VirtioScsiControllerStatsRequestDefaultTypeInternal _VirtioScsiControllerStatsRequest_default_instance_;
class VirtioScsiControllerStatsResponse;
struct VirtioScsiControllerStatsResponseDefaultTypeInternal;
extern VirtioScsiControllerStatsResponseDefaultTypeInternal _VirtioScsiControllerStatsResponse_default_instance_;
class VirtioScsiControllerUpdateRequest;
struct VirtioScsiControllerUpdateRequestDefaultTypeInternal;
extern VirtioScsiControllerUpdateRequestDefaultTypeInternal _VirtioScsiControllerUpdateRequest_default_instance_;
class VirtioScsiLun;
struct VirtioScsiLunDefaultTypeInternal;
extern VirtioScsiLunDefaultTypeInternal _VirtioScsiLun_default_instance_;
class VirtioScsiLunCreateRequest;
struct VirtioScsiLunCreateRequestDefaultTypeInternal;
extern VirtioScsiLunCreateRequestDefaultTypeInternal _VirtioScsiLunCreateRequest_default_instance_;
class VirtioScsiLunDeleteRequest;
struct VirtioScsiLunDeleteRequestDefaultTypeInternal;
extern VirtioScsiLunDeleteRequestDefaultTypeInternal _VirtioScsiLunDeleteRequest_default_instance_;
class VirtioScsiLunGetRequest;
struct VirtioScsiLunGetRequestDefaultTypeInternal;
extern VirtioScsiLunGetRequestDefaultTypeInternal _VirtioScsiLunGetRequest_default_instance_;
class VirtioScsiLunListRequest;
struct VirtioScsiLunListRequestDefaultTypeInternal;
extern VirtioScsiLunListRequestDefaultTypeInternal _VirtioScsiLunListRequest_default_instance_;
class VirtioScsiLunListResponse;
struct VirtioScsiLunListResponseDefaultTypeInternal;
extern VirtioScsiLunListResponseDefaultTypeInternal _VirtioScsiLunListResponse_default_instance_;
class VirtioScsiLunStatsRequest;
struct VirtioScsiLunStatsRequestDefaultTypeInternal;
extern VirtioScsiLunStatsRequestDefaultTypeInternal _VirtioScsiLunStatsRequest_default_instance_;
class VirtioScsiLunStatsResponse;
struct VirtioScsiLunStatsResponseDefaultTypeInternal;
extern VirtioScsiLunStatsResponseDefaultTypeInternal _VirtioScsiLunStatsResponse_default_instance_;
class VirtioScsiLunUpdateRequest;
struct VirtioScsiLunUpdateRequestDefaultTypeInternal;
extern VirtioScsiLunUpdateRequestDefaultTypeInternal _VirtioScsiLunUpdateRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::VirtioScsiController* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerCreateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerCreateRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerDeleteRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerDeleteRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerGetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerGetRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerListRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerListRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerListResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerListResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerUpdateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerUpdateRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLun* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunCreateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunCreateRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunDeleteRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunDeleteRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunGetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunGetRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunListRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunListRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunListResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunListResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunUpdateRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioScsiController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiController) */ {
 public:
  inline VirtioScsiController() : VirtioScsiController(nullptr) {}
  ~VirtioScsiController() override;
  explicit constexpr VirtioScsiController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiController(const VirtioScsiController& from);
  VirtioScsiController(VirtioScsiController&& from) noexcept
    : VirtioScsiController() {
    *this = ::std::move(from);
  }

  inline VirtioScsiController& operator=(const VirtioScsiController& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiController& operator=(VirtioScsiController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiController& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiController* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiController*>(
               &_VirtioScsiController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioScsiController& a, VirtioScsiController& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiController";
  }
  protected:
  explicit VirtioScsiController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPcieIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.NvmeControllerPciId pcie_id = 2;
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::NvmeControllerPciId& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeControllerPciId* release_pcie_id();
  ::opi_api::storage::v1::NvmeControllerPciId* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::NvmeControllerPciId* pcie_id);
  private:
  const ::opi_api::storage::v1::NvmeControllerPciId& _internal_pcie_id() const;
  ::opi_api::storage::v1::NvmeControllerPciId* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::NvmeControllerPciId* pcie_id);
  ::opi_api::storage::v1::NvmeControllerPciId* unsafe_arena_release_pcie_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::storage::v1::NvmeControllerPciId* pcie_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLun) */ {
 public:
  inline VirtioScsiLun() : VirtioScsiLun(nullptr) {}
  ~VirtioScsiLun() override;
  explicit constexpr VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLun(const VirtioScsiLun& from);
  VirtioScsiLun(VirtioScsiLun&& from) noexcept
    : VirtioScsiLun() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLun& operator=(const VirtioScsiLun& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLun& operator=(VirtioScsiLun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLun& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLun* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLun*>(
               &_VirtioScsiLun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioScsiLun& a, VirtioScsiLun& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLun& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLun";
  }
  protected:
  explicit VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdevFieldNumber = 3,
    kIdFieldNumber = 1,
    kControllerIdFieldNumber = 2,
  };
  // string bdev = 3;
  void clear_bdev();
  const std::string& bdev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bdev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bdev();
  PROTOBUF_NODISCARD std::string* release_bdev();
  void set_allocated_bdev(std::string* bdev);
  private:
  const std::string& _internal_bdev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bdev(const std::string& value);
  std::string* _internal_mutable_bdev();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey controller_id = 2;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdev_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerCreateRequest) */ {
 public:
  inline VirtioScsiControllerCreateRequest() : VirtioScsiControllerCreateRequest(nullptr) {}
  ~VirtioScsiControllerCreateRequest() override;
  explicit constexpr VirtioScsiControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerCreateRequest(const VirtioScsiControllerCreateRequest& from);
  VirtioScsiControllerCreateRequest(VirtioScsiControllerCreateRequest&& from) noexcept
    : VirtioScsiControllerCreateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerCreateRequest& operator=(const VirtioScsiControllerCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerCreateRequest& operator=(VirtioScsiControllerCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerCreateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerCreateRequest*>(
               &_VirtioScsiControllerCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtioScsiControllerCreateRequest& a, VirtioScsiControllerCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerCreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerCreateRequest";
  }
  protected:
  explicit VirtioScsiControllerCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioScsiController& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioScsiController* controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiController* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerDeleteRequest) */ {
 public:
  inline VirtioScsiControllerDeleteRequest() : VirtioScsiControllerDeleteRequest(nullptr) {}
  ~VirtioScsiControllerDeleteRequest() override;
  explicit constexpr VirtioScsiControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerDeleteRequest(const VirtioScsiControllerDeleteRequest& from);
  VirtioScsiControllerDeleteRequest(VirtioScsiControllerDeleteRequest&& from) noexcept
    : VirtioScsiControllerDeleteRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerDeleteRequest& operator=(const VirtioScsiControllerDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerDeleteRequest& operator=(VirtioScsiControllerDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerDeleteRequest*>(
               &_VirtioScsiControllerDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VirtioScsiControllerDeleteRequest& a, VirtioScsiControllerDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerDeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerDeleteRequest";
  }
  protected:
  explicit VirtioScsiControllerDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerUpdateRequest) */ {
 public:
  inline VirtioScsiControllerUpdateRequest() : VirtioScsiControllerUpdateRequest(nullptr) {}
  ~VirtioScsiControllerUpdateRequest() override;
  explicit constexpr VirtioScsiControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerUpdateRequest(const VirtioScsiControllerUpdateRequest& from);
  VirtioScsiControllerUpdateRequest(VirtioScsiControllerUpdateRequest&& from) noexcept
    : VirtioScsiControllerUpdateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerUpdateRequest& operator=(const VirtioScsiControllerUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerUpdateRequest& operator=(VirtioScsiControllerUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerUpdateRequest*>(
               &_VirtioScsiControllerUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VirtioScsiControllerUpdateRequest& a, VirtioScsiControllerUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerUpdateRequest";
  }
  protected:
  explicit VirtioScsiControllerUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioScsiController& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioScsiController* controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiController* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerListRequest) */ {
 public:
  inline VirtioScsiControllerListRequest() : VirtioScsiControllerListRequest(nullptr) {}
  explicit constexpr VirtioScsiControllerListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerListRequest(const VirtioScsiControllerListRequest& from);
  VirtioScsiControllerListRequest(VirtioScsiControllerListRequest&& from) noexcept
    : VirtioScsiControllerListRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerListRequest& operator=(const VirtioScsiControllerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerListRequest& operator=(VirtioScsiControllerListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerListRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerListRequest*>(
               &_VirtioScsiControllerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VirtioScsiControllerListRequest& a, VirtioScsiControllerListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VirtioScsiControllerListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VirtioScsiControllerListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerListRequest";
  }
  protected:
  explicit VirtioScsiControllerListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerListResponse) */ {
 public:
  inline VirtioScsiControllerListResponse() : VirtioScsiControllerListResponse(nullptr) {}
  ~VirtioScsiControllerListResponse() override;
  explicit constexpr VirtioScsiControllerListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerListResponse(const VirtioScsiControllerListResponse& from);
  VirtioScsiControllerListResponse(VirtioScsiControllerListResponse&& from) noexcept
    : VirtioScsiControllerListResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerListResponse& operator=(const VirtioScsiControllerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerListResponse& operator=(VirtioScsiControllerListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerListResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerListResponse*>(
               &_VirtioScsiControllerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VirtioScsiControllerListResponse& a, VirtioScsiControllerListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerListResponse";
  }
  protected:
  explicit VirtioScsiControllerListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
  int controller_size() const;
  private:
  int _internal_controller_size() const;
  public:
  void clear_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
      mutable_controller();
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_add_controller();
  public:
  const ::opi_api::storage::v1::VirtioScsiController& controller(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* add_controller();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
      controller() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController > controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerGetRequest) */ {
 public:
  inline VirtioScsiControllerGetRequest() : VirtioScsiControllerGetRequest(nullptr) {}
  ~VirtioScsiControllerGetRequest() override;
  explicit constexpr VirtioScsiControllerGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerGetRequest(const VirtioScsiControllerGetRequest& from);
  VirtioScsiControllerGetRequest(VirtioScsiControllerGetRequest&& from) noexcept
    : VirtioScsiControllerGetRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerGetRequest& operator=(const VirtioScsiControllerGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerGetRequest& operator=(VirtioScsiControllerGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerGetRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerGetRequest*>(
               &_VirtioScsiControllerGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VirtioScsiControllerGetRequest& a, VirtioScsiControllerGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerGetRequest";
  }
  protected:
  explicit VirtioScsiControllerGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerStatsRequest) */ {
 public:
  inline VirtioScsiControllerStatsRequest() : VirtioScsiControllerStatsRequest(nullptr) {}
  ~VirtioScsiControllerStatsRequest() override;
  explicit constexpr VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerStatsRequest(const VirtioScsiControllerStatsRequest& from);
  VirtioScsiControllerStatsRequest(VirtioScsiControllerStatsRequest&& from) noexcept
    : VirtioScsiControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerStatsRequest& operator=(const VirtioScsiControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerStatsRequest& operator=(VirtioScsiControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerStatsRequest*>(
               &_VirtioScsiControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VirtioScsiControllerStatsRequest& a, VirtioScsiControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerStatsRequest";
  }
  protected:
  explicit VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerStatsResponse) */ {
 public:
  inline VirtioScsiControllerStatsResponse() : VirtioScsiControllerStatsResponse(nullptr) {}
  ~VirtioScsiControllerStatsResponse() override;
  explicit constexpr VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerStatsResponse(const VirtioScsiControllerStatsResponse& from);
  VirtioScsiControllerStatsResponse(VirtioScsiControllerStatsResponse&& from) noexcept
    : VirtioScsiControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerStatsResponse& operator=(const VirtioScsiControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerStatsResponse& operator=(VirtioScsiControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerStatsResponse*>(
               &_VirtioScsiControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VirtioScsiControllerStatsResponse& a, VirtioScsiControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerStatsResponse";
  }
  protected:
  explicit VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunCreateRequest) */ {
 public:
  inline VirtioScsiLunCreateRequest() : VirtioScsiLunCreateRequest(nullptr) {}
  ~VirtioScsiLunCreateRequest() override;
  explicit constexpr VirtioScsiLunCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunCreateRequest(const VirtioScsiLunCreateRequest& from);
  VirtioScsiLunCreateRequest(VirtioScsiLunCreateRequest&& from) noexcept
    : VirtioScsiLunCreateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunCreateRequest& operator=(const VirtioScsiLunCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunCreateRequest& operator=(VirtioScsiLunCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunCreateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunCreateRequest*>(
               &_VirtioScsiLunCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VirtioScsiLunCreateRequest& a, VirtioScsiLunCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunCreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunCreateRequest";
  }
  protected:
  explicit VirtioScsiLunCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  bool has_lun() const;
  private:
  bool _internal_has_lun() const;
  public:
  void clear_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun();
  void set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_lun();
  public:
  void unsafe_arena_set_allocated_lun(
      ::opi_api::storage::v1::VirtioScsiLun* lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_lun();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiLun* lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunDeleteRequest) */ {
 public:
  inline VirtioScsiLunDeleteRequest() : VirtioScsiLunDeleteRequest(nullptr) {}
  ~VirtioScsiLunDeleteRequest() override;
  explicit constexpr VirtioScsiLunDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunDeleteRequest(const VirtioScsiLunDeleteRequest& from);
  VirtioScsiLunDeleteRequest(VirtioScsiLunDeleteRequest&& from) noexcept
    : VirtioScsiLunDeleteRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunDeleteRequest& operator=(const VirtioScsiLunDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunDeleteRequest& operator=(VirtioScsiLunDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunDeleteRequest*>(
               &_VirtioScsiLunDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VirtioScsiLunDeleteRequest& a, VirtioScsiLunDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunDeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunDeleteRequest";
  }
  protected:
  explicit VirtioScsiLunDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunUpdateRequest) */ {
 public:
  inline VirtioScsiLunUpdateRequest() : VirtioScsiLunUpdateRequest(nullptr) {}
  ~VirtioScsiLunUpdateRequest() override;
  explicit constexpr VirtioScsiLunUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunUpdateRequest(const VirtioScsiLunUpdateRequest& from);
  VirtioScsiLunUpdateRequest(VirtioScsiLunUpdateRequest&& from) noexcept
    : VirtioScsiLunUpdateRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunUpdateRequest& operator=(const VirtioScsiLunUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunUpdateRequest& operator=(VirtioScsiLunUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunUpdateRequest*>(
               &_VirtioScsiLunUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VirtioScsiLunUpdateRequest& a, VirtioScsiLunUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunUpdateRequest";
  }
  protected:
  explicit VirtioScsiLunUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  bool has_lun() const;
  private:
  bool _internal_has_lun() const;
  public:
  void clear_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun();
  void set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_lun();
  public:
  void unsafe_arena_set_allocated_lun(
      ::opi_api::storage::v1::VirtioScsiLun* lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_lun();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiLun* lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunListRequest) */ {
 public:
  inline VirtioScsiLunListRequest() : VirtioScsiLunListRequest(nullptr) {}
  ~VirtioScsiLunListRequest() override;
  explicit constexpr VirtioScsiLunListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunListRequest(const VirtioScsiLunListRequest& from);
  VirtioScsiLunListRequest(VirtioScsiLunListRequest&& from) noexcept
    : VirtioScsiLunListRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunListRequest& operator=(const VirtioScsiLunListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunListRequest& operator=(VirtioScsiLunListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunListRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunListRequest*>(
               &_VirtioScsiLunListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VirtioScsiLunListRequest& a, VirtioScsiLunListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunListRequest";
  }
  protected:
  explicit VirtioScsiLunListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunListResponse) */ {
 public:
  inline VirtioScsiLunListResponse() : VirtioScsiLunListResponse(nullptr) {}
  ~VirtioScsiLunListResponse() override;
  explicit constexpr VirtioScsiLunListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunListResponse(const VirtioScsiLunListResponse& from);
  VirtioScsiLunListResponse(VirtioScsiLunListResponse&& from) noexcept
    : VirtioScsiLunListResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunListResponse& operator=(const VirtioScsiLunListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunListResponse& operator=(VirtioScsiLunListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunListResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunListResponse*>(
               &_VirtioScsiLunListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VirtioScsiLunListResponse& a, VirtioScsiLunListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunListResponse";
  }
  protected:
  explicit VirtioScsiLunListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
  int lun_size() const;
  private:
  int _internal_lun_size() const;
  public:
  void clear_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
      mutable_lun();
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_add_lun();
  public:
  const ::opi_api::storage::v1::VirtioScsiLun& lun(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* add_lun();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
      lun() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun > lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunGetRequest) */ {
 public:
  inline VirtioScsiLunGetRequest() : VirtioScsiLunGetRequest(nullptr) {}
  ~VirtioScsiLunGetRequest() override;
  explicit constexpr VirtioScsiLunGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunGetRequest(const VirtioScsiLunGetRequest& from);
  VirtioScsiLunGetRequest(VirtioScsiLunGetRequest&& from) noexcept
    : VirtioScsiLunGetRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunGetRequest& operator=(const VirtioScsiLunGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunGetRequest& operator=(VirtioScsiLunGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunGetRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunGetRequest*>(
               &_VirtioScsiLunGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VirtioScsiLunGetRequest& a, VirtioScsiLunGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunGetRequest";
  }
  protected:
  explicit VirtioScsiLunGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunStatsRequest) */ {
 public:
  inline VirtioScsiLunStatsRequest() : VirtioScsiLunStatsRequest(nullptr) {}
  ~VirtioScsiLunStatsRequest() override;
  explicit constexpr VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunStatsRequest(const VirtioScsiLunStatsRequest& from);
  VirtioScsiLunStatsRequest(VirtioScsiLunStatsRequest&& from) noexcept
    : VirtioScsiLunStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunStatsRequest& operator=(const VirtioScsiLunStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunStatsRequest& operator=(VirtioScsiLunStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunStatsRequest*>(
               &_VirtioScsiLunStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VirtioScsiLunStatsRequest& a, VirtioScsiLunStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunStatsRequest";
  }
  protected:
  explicit VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunStatsResponse) */ {
 public:
  inline VirtioScsiLunStatsResponse() : VirtioScsiLunStatsResponse(nullptr) {}
  ~VirtioScsiLunStatsResponse() override;
  explicit constexpr VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunStatsResponse(const VirtioScsiLunStatsResponse& from);
  VirtioScsiLunStatsResponse(VirtioScsiLunStatsResponse&& from) noexcept
    : VirtioScsiLunStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunStatsResponse& operator=(const VirtioScsiLunStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunStatsResponse& operator=(VirtioScsiLunStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunStatsResponse*>(
               &_VirtioScsiLunStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VirtioScsiLunStatsResponse& a, VirtioScsiLunStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunStatsResponse";
  }
  protected:
  explicit VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioScsiController

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiController::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiController::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiController::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiController::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.id)
  return _internal_id();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.id)
  return _msg;
}
inline void VirtioScsiController::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.id)
}

// .opi_api.storage.v1.NvmeControllerPciId pcie_id = 2;
inline bool VirtioScsiController::_internal_has_pcie_id() const {
  return this != internal_default_instance() && pcie_id_ != nullptr;
}
inline bool VirtioScsiController::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::NvmeControllerPciId& VirtioScsiController::_internal_pcie_id() const {
  const ::opi_api::storage::v1::NvmeControllerPciId* p = pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeControllerPciId&>(
      ::opi_api::storage::v1::_NvmeControllerPciId_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeControllerPciId& VirtioScsiController::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::NvmeControllerPciId* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioScsiController::release_pcie_id() {
  
  ::opi_api::storage::v1::NvmeControllerPciId* temp = pcie_id_;
  pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioScsiController::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.pcie_id)
  
  ::opi_api::storage::v1::NvmeControllerPciId* temp = pcie_id_;
  pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioScsiController::_internal_mutable_pcie_id() {
  
  if (pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerPciId>(GetArenaForAllocation());
    pcie_id_ = p;
  }
  return pcie_id_;
}
inline ::opi_api::storage::v1::NvmeControllerPciId* VirtioScsiController::mutable_pcie_id() {
  ::opi_api::storage::v1::NvmeControllerPciId* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _msg;
}
inline void VirtioScsiController::set_allocated_pcie_id(::opi_api::storage::v1::NvmeControllerPciId* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}

// -------------------------------------------------------------------

// VirtioScsiLun

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiLun::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiLun::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.id)
  return _internal_id();
}
inline void VirtioScsiLun::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLun.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.id)
  return _msg;
}
inline void VirtioScsiLun::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.id)
}

// .opi_api.common.v1.ObjectKey controller_id = 2;
inline bool VirtioScsiLun::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLun::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLun::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLun.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.controller_id)
  return _msg;
}
inline void VirtioScsiLun::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.controller_id)
}

// string bdev = 3;
inline void VirtioScsiLun::clear_bdev() {
  bdev_.ClearToEmpty();
}
inline const std::string& VirtioScsiLun::bdev() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.bdev)
  return _internal_bdev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLun::set_bdev(ArgT0&& arg0, ArgT... args) {
 
 bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLun.bdev)
}
inline std::string* VirtioScsiLun::mutable_bdev() {
  std::string* _s = _internal_mutable_bdev();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.bdev)
  return _s;
}
inline const std::string& VirtioScsiLun::_internal_bdev() const {
  return bdev_.Get();
}
inline void VirtioScsiLun::_internal_set_bdev(const std::string& value) {
  
  bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::_internal_mutable_bdev() {
  
  return bdev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::release_bdev() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.bdev)
  return bdev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiLun::set_allocated_bdev(std::string* bdev) {
  if (bdev != nullptr) {
    
  } else {
    
  }
  bdev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bdev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.bdev)
}

// -------------------------------------------------------------------

// VirtioScsiControllerCreateRequest

// .opi_api.storage.v1.VirtioScsiController controller = 1;
inline bool VirtioScsiControllerCreateRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool VirtioScsiControllerCreateRequest::has_controller() const {
  return _internal_has_controller();
}
inline void VirtioScsiControllerCreateRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerCreateRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerCreateRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerCreateRequest.controller)
  return _internal_controller();
}
inline void VirtioScsiControllerCreateRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioScsiController* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerCreateRequest.controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerCreateRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerCreateRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerCreateRequest.controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerCreateRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerCreateRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerCreateRequest.controller)
  return _msg;
}
inline void VirtioScsiControllerCreateRequest::set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiController>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerCreateRequest.controller)
}

// -------------------------------------------------------------------

// VirtioScsiControllerDeleteRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiControllerDeleteRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiControllerDeleteRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerDeleteRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerDeleteRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerDeleteRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiControllerDeleteRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerDeleteRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerDeleteRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerDeleteRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerDeleteRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerDeleteRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerDeleteRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerDeleteRequest.controller_id)
  return _msg;
}
inline void VirtioScsiControllerDeleteRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerDeleteRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiControllerUpdateRequest

// .opi_api.storage.v1.VirtioScsiController controller = 1;
inline bool VirtioScsiControllerUpdateRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool VirtioScsiControllerUpdateRequest::has_controller() const {
  return _internal_has_controller();
}
inline void VirtioScsiControllerUpdateRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerUpdateRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerUpdateRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerUpdateRequest.controller)
  return _internal_controller();
}
inline void VirtioScsiControllerUpdateRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioScsiController* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerUpdateRequest.controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerUpdateRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerUpdateRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerUpdateRequest.controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerUpdateRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerUpdateRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerUpdateRequest.controller)
  return _msg;
}
inline void VirtioScsiControllerUpdateRequest::set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiController>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerUpdateRequest.controller)
}

// -------------------------------------------------------------------

// VirtioScsiControllerListRequest

// -------------------------------------------------------------------

// VirtioScsiControllerListResponse

// repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
inline int VirtioScsiControllerListResponse::_internal_controller_size() const {
  return controller_.size();
}
inline int VirtioScsiControllerListResponse::controller_size() const {
  return _internal_controller_size();
}
inline void VirtioScsiControllerListResponse::clear_controller() {
  controller_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerListResponse::mutable_controller(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerListResponse.controller)
  return controller_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
VirtioScsiControllerListResponse::mutable_controller() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.VirtioScsiControllerListResponse.controller)
  return &controller_;
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerListResponse::_internal_controller(int index) const {
  return controller_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiController& VirtioScsiControllerListResponse::controller(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerListResponse.controller)
  return _internal_controller(index);
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerListResponse::_internal_add_controller() {
  return controller_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiController* VirtioScsiControllerListResponse::add_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _add = _internal_add_controller();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.VirtioScsiControllerListResponse.controller)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
VirtioScsiControllerListResponse::controller() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.VirtioScsiControllerListResponse.controller)
  return controller_;
}

// -------------------------------------------------------------------

// VirtioScsiControllerGetRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiControllerGetRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiControllerGetRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerGetRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerGetRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerGetRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiControllerGetRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerGetRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerGetRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerGetRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerGetRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerGetRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerGetRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerGetRequest.controller_id)
  return _msg;
}
inline void VirtioScsiControllerGetRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerGetRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiControllerStatsRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiControllerStatsRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiControllerStatsRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiControllerStatsRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  return _msg;
}
inline void VirtioScsiControllerStatsRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiControllerStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiControllerStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiControllerStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  return _internal_id();
}
inline void VirtioScsiControllerStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  return _msg;
}
inline void VirtioScsiControllerStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
}

// string stats = 2;
inline void VirtioScsiControllerStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioScsiControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiControllerStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
}
inline std::string* VirtioScsiControllerStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioScsiControllerStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioScsiControllerStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiControllerStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiControllerStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiControllerStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
}

// -------------------------------------------------------------------

// VirtioScsiLunCreateRequest

// .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline bool VirtioScsiLunCreateRequest::_internal_has_lun() const {
  return this != internal_default_instance() && lun_ != nullptr;
}
inline bool VirtioScsiLunCreateRequest::has_lun() const {
  return _internal_has_lun();
}
inline void VirtioScsiLunCreateRequest::clear_lun() {
  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunCreateRequest::_internal_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunCreateRequest::lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunCreateRequest.lun)
  return _internal_lun();
}
inline void VirtioScsiLunCreateRequest::unsafe_arena_set_allocated_lun(
    ::opi_api::storage::v1::VirtioScsiLun* lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_);
  }
  lun_ = lun;
  if (lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunCreateRequest.lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunCreateRequest::release_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunCreateRequest::unsafe_arena_release_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunCreateRequest.lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunCreateRequest::_internal_mutable_lun() {
  
  if (lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    lun_ = p;
  }
  return lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunCreateRequest::mutable_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunCreateRequest.lun)
  return _msg;
}
inline void VirtioScsiLunCreateRequest::set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lun_;
  }
  if (lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiLun>::GetOwningArena(lun);
    if (message_arena != submessage_arena) {
      lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun, submessage_arena);
    }
    
  } else {
    
  }
  lun_ = lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunCreateRequest.lun)
}

// -------------------------------------------------------------------

// VirtioScsiLunDeleteRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiLunDeleteRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLunDeleteRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunDeleteRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunDeleteRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunDeleteRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLunDeleteRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunDeleteRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunDeleteRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunDeleteRequest.controller_id)
  return _msg;
}
inline void VirtioScsiLunDeleteRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunDeleteRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool VirtioScsiLunDeleteRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool VirtioScsiLunDeleteRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunDeleteRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunDeleteRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunDeleteRequest.lun_id)
  return _internal_lun_id();
}
inline void VirtioScsiLunDeleteRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunDeleteRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunDeleteRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunDeleteRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunDeleteRequest.lun_id)
  return _msg;
}
inline void VirtioScsiLunDeleteRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunDeleteRequest.lun_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunUpdateRequest

// .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline bool VirtioScsiLunUpdateRequest::_internal_has_lun() const {
  return this != internal_default_instance() && lun_ != nullptr;
}
inline bool VirtioScsiLunUpdateRequest::has_lun() const {
  return _internal_has_lun();
}
inline void VirtioScsiLunUpdateRequest::clear_lun() {
  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunUpdateRequest::_internal_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunUpdateRequest::lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunUpdateRequest.lun)
  return _internal_lun();
}
inline void VirtioScsiLunUpdateRequest::unsafe_arena_set_allocated_lun(
    ::opi_api::storage::v1::VirtioScsiLun* lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_);
  }
  lun_ = lun;
  if (lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunUpdateRequest.lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunUpdateRequest::release_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunUpdateRequest::unsafe_arena_release_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunUpdateRequest.lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunUpdateRequest::_internal_mutable_lun() {
  
  if (lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    lun_ = p;
  }
  return lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunUpdateRequest::mutable_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunUpdateRequest.lun)
  return _msg;
}
inline void VirtioScsiLunUpdateRequest::set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lun_;
  }
  if (lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiLun>::GetOwningArena(lun);
    if (message_arena != submessage_arena) {
      lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun, submessage_arena);
    }
    
  } else {
    
  }
  lun_ = lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunUpdateRequest.lun)
}

// -------------------------------------------------------------------

// VirtioScsiLunListRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiLunListRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLunListRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunListRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunListRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunListRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLunListRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunListRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunListRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunListRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunListRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunListRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunListRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunListRequest.controller_id)
  return _msg;
}
inline void VirtioScsiLunListRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunListRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunListResponse

// repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline int VirtioScsiLunListResponse::_internal_lun_size() const {
  return lun_.size();
}
inline int VirtioScsiLunListResponse::lun_size() const {
  return _internal_lun_size();
}
inline void VirtioScsiLunListResponse::clear_lun() {
  lun_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunListResponse::mutable_lun(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunListResponse.lun)
  return lun_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
VirtioScsiLunListResponse::mutable_lun() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.VirtioScsiLunListResponse.lun)
  return &lun_;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunListResponse::_internal_lun(int index) const {
  return lun_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& VirtioScsiLunListResponse::lun(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunListResponse.lun)
  return _internal_lun(index);
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunListResponse::_internal_add_lun() {
  return lun_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiLun* VirtioScsiLunListResponse::add_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _add = _internal_add_lun();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.VirtioScsiLunListResponse.lun)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
VirtioScsiLunListResponse::lun() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.VirtioScsiLunListResponse.lun)
  return lun_;
}

// -------------------------------------------------------------------

// VirtioScsiLunGetRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiLunGetRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLunGetRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunGetRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunGetRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunGetRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLunGetRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunGetRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunGetRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunGetRequest.controller_id)
  return _msg;
}
inline void VirtioScsiLunGetRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunGetRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool VirtioScsiLunGetRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool VirtioScsiLunGetRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunGetRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunGetRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunGetRequest.lun_id)
  return _internal_lun_id();
}
inline void VirtioScsiLunGetRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunGetRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunGetRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunGetRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunGetRequest.lun_id)
  return _msg;
}
inline void VirtioScsiLunGetRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunGetRequest.lun_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunStatsRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiLunStatsRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLunStatsRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLunStatsRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  return _msg;
}
inline void VirtioScsiLunStatsRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool VirtioScsiLunStatsRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool VirtioScsiLunStatsRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  return _internal_lun_id();
}
inline void VirtioScsiLunStatsRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  return _msg;
}
inline void VirtioScsiLunStatsRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiLunStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiLunStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  return _internal_id();
}
inline void VirtioScsiLunStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  return _msg;
}
inline void VirtioScsiLunStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
}

// string stats = 2;
inline void VirtioScsiLunStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioScsiLunStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLunStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
}
inline std::string* VirtioScsiLunStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioScsiLunStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioScsiLunStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLunStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiLunStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiLunStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
