// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_scsi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "object_key.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fvirtio_5fscsi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fvirtio_5fscsi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fvirtio_5fscsi_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateVirtioScsiControllerRequest;
struct CreateVirtioScsiControllerRequestDefaultTypeInternal;
extern CreateVirtioScsiControllerRequestDefaultTypeInternal _CreateVirtioScsiControllerRequest_default_instance_;
class CreateVirtioScsiLunRequest;
struct CreateVirtioScsiLunRequestDefaultTypeInternal;
extern CreateVirtioScsiLunRequestDefaultTypeInternal _CreateVirtioScsiLunRequest_default_instance_;
class DeleteVirtioScsiControllerRequest;
struct DeleteVirtioScsiControllerRequestDefaultTypeInternal;
extern DeleteVirtioScsiControllerRequestDefaultTypeInternal _DeleteVirtioScsiControllerRequest_default_instance_;
class DeleteVirtioScsiLunRequest;
struct DeleteVirtioScsiLunRequestDefaultTypeInternal;
extern DeleteVirtioScsiLunRequestDefaultTypeInternal _DeleteVirtioScsiLunRequest_default_instance_;
class GetVirtioScsiControllerRequest;
struct GetVirtioScsiControllerRequestDefaultTypeInternal;
extern GetVirtioScsiControllerRequestDefaultTypeInternal _GetVirtioScsiControllerRequest_default_instance_;
class GetVirtioScsiLunRequest;
struct GetVirtioScsiLunRequestDefaultTypeInternal;
extern GetVirtioScsiLunRequestDefaultTypeInternal _GetVirtioScsiLunRequest_default_instance_;
class ListVirtioScsiControllerRequest;
struct ListVirtioScsiControllerRequestDefaultTypeInternal;
extern ListVirtioScsiControllerRequestDefaultTypeInternal _ListVirtioScsiControllerRequest_default_instance_;
class ListVirtioScsiControllerResponse;
struct ListVirtioScsiControllerResponseDefaultTypeInternal;
extern ListVirtioScsiControllerResponseDefaultTypeInternal _ListVirtioScsiControllerResponse_default_instance_;
class ListVirtioScsiLunRequest;
struct ListVirtioScsiLunRequestDefaultTypeInternal;
extern ListVirtioScsiLunRequestDefaultTypeInternal _ListVirtioScsiLunRequest_default_instance_;
class ListVirtioScsiLunResponse;
struct ListVirtioScsiLunResponseDefaultTypeInternal;
extern ListVirtioScsiLunResponseDefaultTypeInternal _ListVirtioScsiLunResponse_default_instance_;
class UpdateVirtioScsiControllerRequest;
struct UpdateVirtioScsiControllerRequestDefaultTypeInternal;
extern UpdateVirtioScsiControllerRequestDefaultTypeInternal _UpdateVirtioScsiControllerRequest_default_instance_;
class UpdateVirtioScsiLunRequest;
struct UpdateVirtioScsiLunRequestDefaultTypeInternal;
extern UpdateVirtioScsiLunRequestDefaultTypeInternal _UpdateVirtioScsiLunRequest_default_instance_;
class VirtioScsiController;
struct VirtioScsiControllerDefaultTypeInternal;
extern VirtioScsiControllerDefaultTypeInternal _VirtioScsiController_default_instance_;
class VirtioScsiControllerStatsRequest;
struct VirtioScsiControllerStatsRequestDefaultTypeInternal;
extern VirtioScsiControllerStatsRequestDefaultTypeInternal _VirtioScsiControllerStatsRequest_default_instance_;
class VirtioScsiControllerStatsResponse;
struct VirtioScsiControllerStatsResponseDefaultTypeInternal;
extern VirtioScsiControllerStatsResponseDefaultTypeInternal _VirtioScsiControllerStatsResponse_default_instance_;
class VirtioScsiLun;
struct VirtioScsiLunDefaultTypeInternal;
extern VirtioScsiLunDefaultTypeInternal _VirtioScsiLun_default_instance_;
class VirtioScsiLunStatsRequest;
struct VirtioScsiLunStatsRequestDefaultTypeInternal;
extern VirtioScsiLunStatsRequestDefaultTypeInternal _VirtioScsiLunStatsRequest_default_instance_;
class VirtioScsiLunStatsResponse;
struct VirtioScsiLunStatsResponseDefaultTypeInternal;
extern VirtioScsiLunStatsResponseDefaultTypeInternal _VirtioScsiLunStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::CreateVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::GetVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiControllerResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiControllerResponse>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::ListVirtioScsiLunResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListVirtioScsiLunResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioScsiControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioScsiControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::UpdateVirtioScsiLunRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateVirtioScsiLunRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiController* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiControllerStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLun* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::VirtioScsiLunStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLunStatsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class VirtioScsiController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiController) */ {
 public:
  inline VirtioScsiController() : VirtioScsiController(nullptr) {}
  ~VirtioScsiController() override;
  explicit constexpr VirtioScsiController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiController(const VirtioScsiController& from);
  VirtioScsiController(VirtioScsiController&& from) noexcept
    : VirtioScsiController() {
    *this = ::std::move(from);
  }

  inline VirtioScsiController& operator=(const VirtioScsiController& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiController& operator=(VirtioScsiController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiController& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiController* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiController*>(
               &_VirtioScsiController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioScsiController& a, VirtioScsiController& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiController";
  }
  protected:
  explicit VirtioScsiController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPcieIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.PciEndpoint pcie_id = 2;
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::PciEndpoint& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::PciEndpoint* release_pcie_id();
  ::opi_api::storage::v1::PciEndpoint* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id);
  private:
  const ::opi_api::storage::v1::PciEndpoint& _internal_pcie_id() const;
  ::opi_api::storage::v1::PciEndpoint* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::PciEndpoint* pcie_id);
  ::opi_api::storage::v1::PciEndpoint* unsafe_arena_release_pcie_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::storage::v1::PciEndpoint* pcie_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLun) */ {
 public:
  inline VirtioScsiLun() : VirtioScsiLun(nullptr) {}
  ~VirtioScsiLun() override;
  explicit constexpr VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLun(const VirtioScsiLun& from);
  VirtioScsiLun(VirtioScsiLun&& from) noexcept
    : VirtioScsiLun() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLun& operator=(const VirtioScsiLun& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLun& operator=(VirtioScsiLun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLun& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLun* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLun*>(
               &_VirtioScsiLun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioScsiLun& a, VirtioScsiLun& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLun& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLun";
  }
  protected:
  explicit VirtioScsiLun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdevFieldNumber = 3,
    kIdFieldNumber = 1,
    kControllerIdFieldNumber = 2,
  };
  // string bdev = 3;
  void clear_bdev();
  const std::string& bdev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bdev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bdev();
  PROTOBUF_NODISCARD std::string* release_bdev();
  void set_allocated_bdev(std::string* bdev);
  private:
  const std::string& _internal_bdev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bdev(const std::string& value);
  std::string* _internal_mutable_bdev();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey controller_id = 2;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdev_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioScsiControllerRequest) */ {
 public:
  inline CreateVirtioScsiControllerRequest() : CreateVirtioScsiControllerRequest(nullptr) {}
  ~CreateVirtioScsiControllerRequest() override;
  explicit constexpr CreateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioScsiControllerRequest(const CreateVirtioScsiControllerRequest& from);
  CreateVirtioScsiControllerRequest(CreateVirtioScsiControllerRequest&& from) noexcept
    : CreateVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioScsiControllerRequest& operator=(const CreateVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioScsiControllerRequest& operator=(CreateVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioScsiControllerRequest*>(
               &_CreateVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateVirtioScsiControllerRequest& a, CreateVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVirtioScsiControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioScsiControllerRequest";
  }
  protected:
  explicit CreateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioScsiController& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioScsiController* controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiController* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioScsiControllerRequest) */ {
 public:
  inline DeleteVirtioScsiControllerRequest() : DeleteVirtioScsiControllerRequest(nullptr) {}
  ~DeleteVirtioScsiControllerRequest() override;
  explicit constexpr DeleteVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioScsiControllerRequest(const DeleteVirtioScsiControllerRequest& from);
  DeleteVirtioScsiControllerRequest(DeleteVirtioScsiControllerRequest&& from) noexcept
    : DeleteVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioScsiControllerRequest& operator=(const DeleteVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioScsiControllerRequest& operator=(DeleteVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioScsiControllerRequest*>(
               &_DeleteVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteVirtioScsiControllerRequest& a, DeleteVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVirtioScsiControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioScsiControllerRequest";
  }
  protected:
  explicit DeleteVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioScsiControllerRequest) */ {
 public:
  inline UpdateVirtioScsiControllerRequest() : UpdateVirtioScsiControllerRequest(nullptr) {}
  ~UpdateVirtioScsiControllerRequest() override;
  explicit constexpr UpdateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioScsiControllerRequest(const UpdateVirtioScsiControllerRequest& from);
  UpdateVirtioScsiControllerRequest(UpdateVirtioScsiControllerRequest&& from) noexcept
    : UpdateVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioScsiControllerRequest& operator=(const UpdateVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioScsiControllerRequest& operator=(UpdateVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioScsiControllerRequest*>(
               &_UpdateVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateVirtioScsiControllerRequest& a, UpdateVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVirtioScsiControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioScsiControllerRequest";
  }
  protected:
  explicit UpdateVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiController controller = 1;
  bool has_controller() const;
  private:
  bool _internal_has_controller() const;
  public:
  void clear_controller();
  const ::opi_api::storage::v1::VirtioScsiController& controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiController* release_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller();
  void set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller);
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller() const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_mutable_controller();
  public:
  void unsafe_arena_set_allocated_controller(
      ::opi_api::storage::v1::VirtioScsiController* controller);
  ::opi_api::storage::v1::VirtioScsiController* unsafe_arena_release_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiController* controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiControllerRequest) */ {
 public:
  inline ListVirtioScsiControllerRequest() : ListVirtioScsiControllerRequest(nullptr) {}
  explicit constexpr ListVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiControllerRequest(const ListVirtioScsiControllerRequest& from);
  ListVirtioScsiControllerRequest(ListVirtioScsiControllerRequest&& from) noexcept
    : ListVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiControllerRequest& operator=(const ListVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiControllerRequest& operator=(ListVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiControllerRequest*>(
               &_ListVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListVirtioScsiControllerRequest& a, ListVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListVirtioScsiControllerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListVirtioScsiControllerRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiControllerRequest";
  }
  protected:
  explicit ListVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiControllerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiControllerResponse) */ {
 public:
  inline ListVirtioScsiControllerResponse() : ListVirtioScsiControllerResponse(nullptr) {}
  ~ListVirtioScsiControllerResponse() override;
  explicit constexpr ListVirtioScsiControllerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiControllerResponse(const ListVirtioScsiControllerResponse& from);
  ListVirtioScsiControllerResponse(ListVirtioScsiControllerResponse&& from) noexcept
    : ListVirtioScsiControllerResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiControllerResponse& operator=(const ListVirtioScsiControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiControllerResponse& operator=(ListVirtioScsiControllerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiControllerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiControllerResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiControllerResponse*>(
               &_ListVirtioScsiControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListVirtioScsiControllerResponse& a, ListVirtioScsiControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiControllerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiControllerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiControllerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVirtioScsiControllerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiControllerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiControllerResponse";
  }
  protected:
  explicit ListVirtioScsiControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
  int controller_size() const;
  private:
  int _internal_controller_size() const;
  public:
  void clear_controller();
  ::opi_api::storage::v1::VirtioScsiController* mutable_controller(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
      mutable_controller();
  private:
  const ::opi_api::storage::v1::VirtioScsiController& _internal_controller(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* _internal_add_controller();
  public:
  const ::opi_api::storage::v1::VirtioScsiController& controller(int index) const;
  ::opi_api::storage::v1::VirtioScsiController* add_controller();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
      controller() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController > controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioScsiControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioScsiControllerRequest) */ {
 public:
  inline GetVirtioScsiControllerRequest() : GetVirtioScsiControllerRequest(nullptr) {}
  ~GetVirtioScsiControllerRequest() override;
  explicit constexpr GetVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioScsiControllerRequest(const GetVirtioScsiControllerRequest& from);
  GetVirtioScsiControllerRequest(GetVirtioScsiControllerRequest&& from) noexcept
    : GetVirtioScsiControllerRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioScsiControllerRequest& operator=(const GetVirtioScsiControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioScsiControllerRequest& operator=(GetVirtioScsiControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioScsiControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioScsiControllerRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioScsiControllerRequest*>(
               &_GetVirtioScsiControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetVirtioScsiControllerRequest& a, GetVirtioScsiControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioScsiControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioScsiControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioScsiControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioScsiControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioScsiControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtioScsiControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioScsiControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioScsiControllerRequest";
  }
  protected:
  explicit GetVirtioScsiControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioScsiControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerStatsRequest) */ {
 public:
  inline VirtioScsiControllerStatsRequest() : VirtioScsiControllerStatsRequest(nullptr) {}
  ~VirtioScsiControllerStatsRequest() override;
  explicit constexpr VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerStatsRequest(const VirtioScsiControllerStatsRequest& from);
  VirtioScsiControllerStatsRequest(VirtioScsiControllerStatsRequest&& from) noexcept
    : VirtioScsiControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerStatsRequest& operator=(const VirtioScsiControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerStatsRequest& operator=(VirtioScsiControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerStatsRequest*>(
               &_VirtioScsiControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VirtioScsiControllerStatsRequest& a, VirtioScsiControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerStatsRequest";
  }
  protected:
  explicit VirtioScsiControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiControllerStatsResponse) */ {
 public:
  inline VirtioScsiControllerStatsResponse() : VirtioScsiControllerStatsResponse(nullptr) {}
  ~VirtioScsiControllerStatsResponse() override;
  explicit constexpr VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiControllerStatsResponse(const VirtioScsiControllerStatsResponse& from);
  VirtioScsiControllerStatsResponse(VirtioScsiControllerStatsResponse&& from) noexcept
    : VirtioScsiControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiControllerStatsResponse& operator=(const VirtioScsiControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiControllerStatsResponse& operator=(VirtioScsiControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiControllerStatsResponse*>(
               &_VirtioScsiControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VirtioScsiControllerStatsResponse& a, VirtioScsiControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiControllerStatsResponse";
  }
  protected:
  explicit VirtioScsiControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class CreateVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateVirtioScsiLunRequest) */ {
 public:
  inline CreateVirtioScsiLunRequest() : CreateVirtioScsiLunRequest(nullptr) {}
  ~CreateVirtioScsiLunRequest() override;
  explicit constexpr CreateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVirtioScsiLunRequest(const CreateVirtioScsiLunRequest& from);
  CreateVirtioScsiLunRequest(CreateVirtioScsiLunRequest&& from) noexcept
    : CreateVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline CreateVirtioScsiLunRequest& operator=(const CreateVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVirtioScsiLunRequest& operator=(CreateVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVirtioScsiLunRequest*>(
               &_CreateVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateVirtioScsiLunRequest& a, CreateVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVirtioScsiLunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateVirtioScsiLunRequest";
  }
  protected:
  explicit CreateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  bool has_lun() const;
  private:
  bool _internal_has_lun() const;
  public:
  void clear_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun();
  void set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_lun();
  public:
  void unsafe_arena_set_allocated_lun(
      ::opi_api::storage::v1::VirtioScsiLun* lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_lun();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiLun* lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class DeleteVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteVirtioScsiLunRequest) */ {
 public:
  inline DeleteVirtioScsiLunRequest() : DeleteVirtioScsiLunRequest(nullptr) {}
  ~DeleteVirtioScsiLunRequest() override;
  explicit constexpr DeleteVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVirtioScsiLunRequest(const DeleteVirtioScsiLunRequest& from);
  DeleteVirtioScsiLunRequest(DeleteVirtioScsiLunRequest&& from) noexcept
    : DeleteVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVirtioScsiLunRequest& operator=(const DeleteVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVirtioScsiLunRequest& operator=(DeleteVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVirtioScsiLunRequest*>(
               &_DeleteVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteVirtioScsiLunRequest& a, DeleteVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVirtioScsiLunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteVirtioScsiLunRequest";
  }
  protected:
  explicit DeleteVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class UpdateVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateVirtioScsiLunRequest) */ {
 public:
  inline UpdateVirtioScsiLunRequest() : UpdateVirtioScsiLunRequest(nullptr) {}
  ~UpdateVirtioScsiLunRequest() override;
  explicit constexpr UpdateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVirtioScsiLunRequest(const UpdateVirtioScsiLunRequest& from);
  UpdateVirtioScsiLunRequest(UpdateVirtioScsiLunRequest&& from) noexcept
    : UpdateVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVirtioScsiLunRequest& operator=(const UpdateVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVirtioScsiLunRequest& operator=(UpdateVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVirtioScsiLunRequest*>(
               &_UpdateVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateVirtioScsiLunRequest& a, UpdateVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVirtioScsiLunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateVirtioScsiLunRequest";
  }
  protected:
  explicit UpdateVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // .opi_api.storage.v1.VirtioScsiLun lun = 1;
  bool has_lun() const;
  private:
  bool _internal_has_lun() const;
  public:
  void clear_lun();
  const ::opi_api::storage::v1::VirtioScsiLun& lun() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VirtioScsiLun* release_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun();
  void set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun);
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun() const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_mutable_lun();
  public:
  void unsafe_arena_set_allocated_lun(
      ::opi_api::storage::v1::VirtioScsiLun* lun);
  ::opi_api::storage::v1::VirtioScsiLun* unsafe_arena_release_lun();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VirtioScsiLun* lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiLunRequest) */ {
 public:
  inline ListVirtioScsiLunRequest() : ListVirtioScsiLunRequest(nullptr) {}
  ~ListVirtioScsiLunRequest() override;
  explicit constexpr ListVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiLunRequest(const ListVirtioScsiLunRequest& from);
  ListVirtioScsiLunRequest(ListVirtioScsiLunRequest&& from) noexcept
    : ListVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiLunRequest& operator=(const ListVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiLunRequest& operator=(ListVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiLunRequest*>(
               &_ListVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListVirtioScsiLunRequest& a, ListVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVirtioScsiLunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiLunRequest";
  }
  protected:
  explicit ListVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class ListVirtioScsiLunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListVirtioScsiLunResponse) */ {
 public:
  inline ListVirtioScsiLunResponse() : ListVirtioScsiLunResponse(nullptr) {}
  ~ListVirtioScsiLunResponse() override;
  explicit constexpr ListVirtioScsiLunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVirtioScsiLunResponse(const ListVirtioScsiLunResponse& from);
  ListVirtioScsiLunResponse(ListVirtioScsiLunResponse&& from) noexcept
    : ListVirtioScsiLunResponse() {
    *this = ::std::move(from);
  }

  inline ListVirtioScsiLunResponse& operator=(const ListVirtioScsiLunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVirtioScsiLunResponse& operator=(ListVirtioScsiLunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVirtioScsiLunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVirtioScsiLunResponse* internal_default_instance() {
    return reinterpret_cast<const ListVirtioScsiLunResponse*>(
               &_ListVirtioScsiLunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListVirtioScsiLunResponse& a, ListVirtioScsiLunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVirtioScsiLunResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVirtioScsiLunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVirtioScsiLunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVirtioScsiLunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVirtioScsiLunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVirtioScsiLunResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVirtioScsiLunResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListVirtioScsiLunResponse";
  }
  protected:
  explicit ListVirtioScsiLunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLunFieldNumber = 1,
  };
  // repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
  int lun_size() const;
  private:
  int _internal_lun_size() const;
  public:
  void clear_lun();
  ::opi_api::storage::v1::VirtioScsiLun* mutable_lun(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
      mutable_lun();
  private:
  const ::opi_api::storage::v1::VirtioScsiLun& _internal_lun(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* _internal_add_lun();
  public:
  const ::opi_api::storage::v1::VirtioScsiLun& lun(int index) const;
  ::opi_api::storage::v1::VirtioScsiLun* add_lun();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
      lun() const;

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListVirtioScsiLunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun > lun_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class GetVirtioScsiLunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetVirtioScsiLunRequest) */ {
 public:
  inline GetVirtioScsiLunRequest() : GetVirtioScsiLunRequest(nullptr) {}
  ~GetVirtioScsiLunRequest() override;
  explicit constexpr GetVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtioScsiLunRequest(const GetVirtioScsiLunRequest& from);
  GetVirtioScsiLunRequest(GetVirtioScsiLunRequest&& from) noexcept
    : GetVirtioScsiLunRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtioScsiLunRequest& operator=(const GetVirtioScsiLunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtioScsiLunRequest& operator=(GetVirtioScsiLunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtioScsiLunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtioScsiLunRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtioScsiLunRequest*>(
               &_GetVirtioScsiLunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetVirtioScsiLunRequest& a, GetVirtioScsiLunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtioScsiLunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtioScsiLunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtioScsiLunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtioScsiLunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtioScsiLunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtioScsiLunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtioScsiLunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetVirtioScsiLunRequest";
  }
  protected:
  explicit GetVirtioScsiLunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetVirtioScsiLunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunStatsRequest) */ {
 public:
  inline VirtioScsiLunStatsRequest() : VirtioScsiLunStatsRequest(nullptr) {}
  ~VirtioScsiLunStatsRequest() override;
  explicit constexpr VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunStatsRequest(const VirtioScsiLunStatsRequest& from);
  VirtioScsiLunStatsRequest(VirtioScsiLunStatsRequest&& from) noexcept
    : VirtioScsiLunStatsRequest() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunStatsRequest& operator=(const VirtioScsiLunStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunStatsRequest& operator=(VirtioScsiLunStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunStatsRequest* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunStatsRequest*>(
               &_VirtioScsiLunStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VirtioScsiLunStatsRequest& a, VirtioScsiLunStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunStatsRequest";
  }
  protected:
  explicit VirtioScsiLunStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerIdFieldNumber = 1,
    kLunIdFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey controller_id = 1;
  bool has_controller_id() const;
  private:
  bool _internal_has_controller_id() const;
  public:
  void clear_controller_id();
  const ::opi_api::common::v1::ObjectKey& controller_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_controller_id();
  ::opi_api::common::v1::ObjectKey* mutable_controller_id();
  void set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_controller_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_controller_id();
  public:
  void unsafe_arena_set_allocated_controller_id(
      ::opi_api::common::v1::ObjectKey* controller_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_controller_id();

  // .opi_api.common.v1.ObjectKey lun_id = 2;
  bool has_lun_id() const;
  private:
  bool _internal_has_lun_id() const;
  public:
  void clear_lun_id();
  const ::opi_api::common::v1::ObjectKey& lun_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_lun_id();
  ::opi_api::common::v1::ObjectKey* mutable_lun_id();
  void set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_lun_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_lun_id();
  public:
  void unsafe_arena_set_allocated_lun_id(
      ::opi_api::common::v1::ObjectKey* lun_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_lun_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* controller_id_;
  ::opi_api::common::v1::ObjectKey* lun_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// -------------------------------------------------------------------

class VirtioScsiLunStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.VirtioScsiLunStatsResponse) */ {
 public:
  inline VirtioScsiLunStatsResponse() : VirtioScsiLunStatsResponse(nullptr) {}
  ~VirtioScsiLunStatsResponse() override;
  explicit constexpr VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioScsiLunStatsResponse(const VirtioScsiLunStatsResponse& from);
  VirtioScsiLunStatsResponse(VirtioScsiLunStatsResponse&& from) noexcept
    : VirtioScsiLunStatsResponse() {
    *this = ::std::move(from);
  }

  inline VirtioScsiLunStatsResponse& operator=(const VirtioScsiLunStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioScsiLunStatsResponse& operator=(VirtioScsiLunStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioScsiLunStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioScsiLunStatsResponse* internal_default_instance() {
    return reinterpret_cast<const VirtioScsiLunStatsResponse*>(
               &_VirtioScsiLunStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VirtioScsiLunStatsResponse& a, VirtioScsiLunStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioScsiLunStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioScsiLunStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioScsiLunStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioScsiLunStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioScsiLunStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioScsiLunStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioScsiLunStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.VirtioScsiLunStatsResponse";
  }
  protected:
  explicit VirtioScsiLunStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string stats = 2;
  void clear_stats();
  const std::string& stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats();
  PROTOBUF_NODISCARD std::string* release_stats();
  void set_allocated_stats(std::string* stats);
  private:
  const std::string& _internal_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats(const std::string& value);
  std::string* _internal_mutable_stats();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.VirtioScsiLunStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fvirtio_5fscsi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioScsiController

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiController::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiController::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiController::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiController::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.id)
  return _internal_id();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiController::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.id)
  return _msg;
}
inline void VirtioScsiController::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.id)
}

// .opi_api.storage.v1.PciEndpoint pcie_id = 2;
inline bool VirtioScsiController::_internal_has_pcie_id() const {
  return this != internal_default_instance() && pcie_id_ != nullptr;
}
inline bool VirtioScsiController::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioScsiController::_internal_pcie_id() const {
  const ::opi_api::storage::v1::PciEndpoint* p = pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::PciEndpoint&>(
      ::opi_api::storage::v1::_PciEndpoint_default_instance_);
}
inline const ::opi_api::storage::v1::PciEndpoint& VirtioScsiController::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _internal_pcie_id();
}
inline void VirtioScsiController::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::PciEndpoint* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::release_pcie_id() {
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiController.pcie_id)
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::_internal_mutable_pcie_id() {
  
  if (pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(GetArenaForAllocation());
    pcie_id_ = p;
  }
  return pcie_id_;
}
inline ::opi_api::storage::v1::PciEndpoint* VirtioScsiController::mutable_pcie_id() {
  ::opi_api::storage::v1::PciEndpoint* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiController.pcie_id)
  return _msg;
}
inline void VirtioScsiController::set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiController.pcie_id)
}

// -------------------------------------------------------------------

// VirtioScsiLun

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiLun::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiLun::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.id)
  return _internal_id();
}
inline void VirtioScsiLun::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLun.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.id)
  return _msg;
}
inline void VirtioScsiLun::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.id)
}

// .opi_api.common.v1.ObjectKey controller_id = 2;
inline bool VirtioScsiLun::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLun::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLun::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLun::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLun.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLun::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.controller_id)
  return _msg;
}
inline void VirtioScsiLun::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.controller_id)
}

// string bdev = 3;
inline void VirtioScsiLun::clear_bdev() {
  bdev_.ClearToEmpty();
}
inline const std::string& VirtioScsiLun::bdev() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLun.bdev)
  return _internal_bdev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLun::set_bdev(ArgT0&& arg0, ArgT... args) {
 
 bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLun.bdev)
}
inline std::string* VirtioScsiLun::mutable_bdev() {
  std::string* _s = _internal_mutable_bdev();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLun.bdev)
  return _s;
}
inline const std::string& VirtioScsiLun::_internal_bdev() const {
  return bdev_.Get();
}
inline void VirtioScsiLun::_internal_set_bdev(const std::string& value) {
  
  bdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::_internal_mutable_bdev() {
  
  return bdev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiLun::release_bdev() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLun.bdev)
  return bdev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiLun::set_allocated_bdev(std::string* bdev) {
  if (bdev != nullptr) {
    
  } else {
    
  }
  bdev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bdev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bdev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLun.bdev)
}

// -------------------------------------------------------------------

// CreateVirtioScsiControllerRequest

// .opi_api.storage.v1.VirtioScsiController controller = 1;
inline bool CreateVirtioScsiControllerRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool CreateVirtioScsiControllerRequest::has_controller() const {
  return _internal_has_controller();
}
inline void CreateVirtioScsiControllerRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& CreateVirtioScsiControllerRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& CreateVirtioScsiControllerRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiControllerRequest.controller)
  return _internal_controller();
}
inline void CreateVirtioScsiControllerRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioScsiController* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioScsiControllerRequest.controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiControllerRequest.controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* CreateVirtioScsiControllerRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiControllerRequest.controller)
  return _msg;
}
inline void CreateVirtioScsiControllerRequest::set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiController>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiControllerRequest.controller)
}

// -------------------------------------------------------------------

// DeleteVirtioScsiControllerRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool DeleteVirtioScsiControllerRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool DeleteVirtioScsiControllerRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiControllerRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiControllerRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.controller_id)
  return _internal_controller_id();
}
inline void DeleteVirtioScsiControllerRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiControllerRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiControllerRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiControllerRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiControllerRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.controller_id)
  return _msg;
}
inline void DeleteVirtioScsiControllerRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiControllerRequest.controller_id)
}

// -------------------------------------------------------------------

// UpdateVirtioScsiControllerRequest

// .opi_api.storage.v1.VirtioScsiController controller = 1;
inline bool UpdateVirtioScsiControllerRequest::_internal_has_controller() const {
  return this != internal_default_instance() && controller_ != nullptr;
}
inline bool UpdateVirtioScsiControllerRequest::has_controller() const {
  return _internal_has_controller();
}
inline void UpdateVirtioScsiControllerRequest::clear_controller() {
  if (GetArenaForAllocation() == nullptr && controller_ != nullptr) {
    delete controller_;
  }
  controller_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiController& UpdateVirtioScsiControllerRequest::_internal_controller() const {
  const ::opi_api::storage::v1::VirtioScsiController* p = controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiController&>(
      ::opi_api::storage::v1::_VirtioScsiController_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiController& UpdateVirtioScsiControllerRequest::controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.controller)
  return _internal_controller();
}
inline void UpdateVirtioScsiControllerRequest::unsafe_arena_set_allocated_controller(
    ::opi_api::storage::v1::VirtioScsiController* controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_);
  }
  controller_ = controller;
  if (controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.controller)
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::release_controller() {
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::unsafe_arena_release_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.controller)
  
  ::opi_api::storage::v1::VirtioScsiController* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::_internal_mutable_controller() {
  
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiController>(GetArenaForAllocation());
    controller_ = p;
  }
  return controller_;
}
inline ::opi_api::storage::v1::VirtioScsiController* UpdateVirtioScsiControllerRequest::mutable_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _msg = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.controller)
  return _msg;
}
inline void UpdateVirtioScsiControllerRequest::set_allocated_controller(::opi_api::storage::v1::VirtioScsiController* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiController>::GetOwningArena(controller);
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    
  } else {
    
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiControllerRequest.controller)
}

// -------------------------------------------------------------------

// ListVirtioScsiControllerRequest

// -------------------------------------------------------------------

// ListVirtioScsiControllerResponse

// repeated .opi_api.storage.v1.VirtioScsiController controller = 1;
inline int ListVirtioScsiControllerResponse::_internal_controller_size() const {
  return controller_.size();
}
inline int ListVirtioScsiControllerResponse::controller_size() const {
  return _internal_controller_size();
}
inline void ListVirtioScsiControllerResponse::clear_controller() {
  controller_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllerResponse::mutable_controller(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiControllerResponse.controller)
  return controller_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >*
ListVirtioScsiControllerResponse::mutable_controller() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioScsiControllerResponse.controller)
  return &controller_;
}
inline const ::opi_api::storage::v1::VirtioScsiController& ListVirtioScsiControllerResponse::_internal_controller(int index) const {
  return controller_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiController& ListVirtioScsiControllerResponse::controller(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiControllerResponse.controller)
  return _internal_controller(index);
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllerResponse::_internal_add_controller() {
  return controller_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiController* ListVirtioScsiControllerResponse::add_controller() {
  ::opi_api::storage::v1::VirtioScsiController* _add = _internal_add_controller();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioScsiControllerResponse.controller)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiController >&
ListVirtioScsiControllerResponse::controller() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioScsiControllerResponse.controller)
  return controller_;
}

// -------------------------------------------------------------------

// GetVirtioScsiControllerRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool GetVirtioScsiControllerRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool GetVirtioScsiControllerRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiControllerRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiControllerRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiControllerRequest.controller_id)
  return _internal_controller_id();
}
inline void GetVirtioScsiControllerRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.GetVirtioScsiControllerRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiControllerRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiControllerRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiControllerRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiControllerRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiControllerRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiControllerRequest.controller_id)
  return _msg;
}
inline void GetVirtioScsiControllerRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiControllerRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiControllerStatsRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiControllerStatsRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiControllerStatsRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiControllerStatsRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
  return _msg;
}
inline void VirtioScsiControllerStatsRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsRequest.controller_id)
}

// -------------------------------------------------------------------

// VirtioScsiControllerStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiControllerStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiControllerStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiControllerStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  return _internal_id();
}
inline void VirtioScsiControllerStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiControllerStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
  return _msg;
}
inline void VirtioScsiControllerStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.id)
}

// string stats = 2;
inline void VirtioScsiControllerStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioScsiControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiControllerStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
}
inline std::string* VirtioScsiControllerStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioScsiControllerStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioScsiControllerStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiControllerStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiControllerStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiControllerStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiControllerStatsResponse.stats)
}

// -------------------------------------------------------------------

// CreateVirtioScsiLunRequest

// .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline bool CreateVirtioScsiLunRequest::_internal_has_lun() const {
  return this != internal_default_instance() && lun_ != nullptr;
}
inline bool CreateVirtioScsiLunRequest::has_lun() const {
  return _internal_has_lun();
}
inline void CreateVirtioScsiLunRequest::clear_lun() {
  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& CreateVirtioScsiLunRequest::_internal_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& CreateVirtioScsiLunRequest::lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateVirtioScsiLunRequest.lun)
  return _internal_lun();
}
inline void CreateVirtioScsiLunRequest::unsafe_arena_set_allocated_lun(
    ::opi_api::storage::v1::VirtioScsiLun* lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_);
  }
  lun_ = lun;
  if (lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateVirtioScsiLunRequest.lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::release_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::unsafe_arena_release_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateVirtioScsiLunRequest.lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::_internal_mutable_lun() {
  
  if (lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    lun_ = p;
  }
  return lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* CreateVirtioScsiLunRequest::mutable_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateVirtioScsiLunRequest.lun)
  return _msg;
}
inline void CreateVirtioScsiLunRequest::set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lun_;
  }
  if (lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiLun>::GetOwningArena(lun);
    if (message_arena != submessage_arena) {
      lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun, submessage_arena);
    }
    
  } else {
    
  }
  lun_ = lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateVirtioScsiLunRequest.lun)
}

// -------------------------------------------------------------------

// DeleteVirtioScsiLunRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool DeleteVirtioScsiLunRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool DeleteVirtioScsiLunRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiLunRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiLunRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiLunRequest.controller_id)
  return _internal_controller_id();
}
inline void DeleteVirtioScsiLunRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteVirtioScsiLunRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiLunRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiLunRequest.controller_id)
  return _msg;
}
inline void DeleteVirtioScsiLunRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiLunRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool DeleteVirtioScsiLunRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool DeleteVirtioScsiLunRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiLunRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteVirtioScsiLunRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteVirtioScsiLunRequest.lun_id)
  return _internal_lun_id();
}
inline void DeleteVirtioScsiLunRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteVirtioScsiLunRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteVirtioScsiLunRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteVirtioScsiLunRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteVirtioScsiLunRequest.lun_id)
  return _msg;
}
inline void DeleteVirtioScsiLunRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteVirtioScsiLunRequest.lun_id)
}

// -------------------------------------------------------------------

// UpdateVirtioScsiLunRequest

// .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline bool UpdateVirtioScsiLunRequest::_internal_has_lun() const {
  return this != internal_default_instance() && lun_ != nullptr;
}
inline bool UpdateVirtioScsiLunRequest::has_lun() const {
  return _internal_has_lun();
}
inline void UpdateVirtioScsiLunRequest::clear_lun() {
  if (GetArenaForAllocation() == nullptr && lun_ != nullptr) {
    delete lun_;
  }
  lun_ = nullptr;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& UpdateVirtioScsiLunRequest::_internal_lun() const {
  const ::opi_api::storage::v1::VirtioScsiLun* p = lun_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VirtioScsiLun&>(
      ::opi_api::storage::v1::_VirtioScsiLun_default_instance_);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& UpdateVirtioScsiLunRequest::lun() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateVirtioScsiLunRequest.lun)
  return _internal_lun();
}
inline void UpdateVirtioScsiLunRequest::unsafe_arena_set_allocated_lun(
    ::opi_api::storage::v1::VirtioScsiLun* lun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_);
  }
  lun_ = lun;
  if (lun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.lun)
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::release_lun() {
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::unsafe_arena_release_lun() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateVirtioScsiLunRequest.lun)
  
  ::opi_api::storage::v1::VirtioScsiLun* temp = lun_;
  lun_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::_internal_mutable_lun() {
  
  if (lun_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VirtioScsiLun>(GetArenaForAllocation());
    lun_ = p;
  }
  return lun_;
}
inline ::opi_api::storage::v1::VirtioScsiLun* UpdateVirtioScsiLunRequest::mutable_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _msg = _internal_mutable_lun();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateVirtioScsiLunRequest.lun)
  return _msg;
}
inline void UpdateVirtioScsiLunRequest::set_allocated_lun(::opi_api::storage::v1::VirtioScsiLun* lun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lun_;
  }
  if (lun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::VirtioScsiLun>::GetOwningArena(lun);
    if (message_arena != submessage_arena) {
      lun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun, submessage_arena);
    }
    
  } else {
    
  }
  lun_ = lun;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateVirtioScsiLunRequest.lun)
}

// -------------------------------------------------------------------

// ListVirtioScsiLunRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool ListVirtioScsiLunRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool ListVirtioScsiLunRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& ListVirtioScsiLunRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& ListVirtioScsiLunRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunRequest.controller_id)
  return _internal_controller_id();
}
inline void ListVirtioScsiLunRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.ListVirtioScsiLunRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* ListVirtioScsiLunRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* ListVirtioScsiLunRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListVirtioScsiLunRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* ListVirtioScsiLunRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* ListVirtioScsiLunRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunRequest.controller_id)
  return _msg;
}
inline void ListVirtioScsiLunRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListVirtioScsiLunRequest.controller_id)
}

// -------------------------------------------------------------------

// ListVirtioScsiLunResponse

// repeated .opi_api.storage.v1.VirtioScsiLun lun = 1;
inline int ListVirtioScsiLunResponse::_internal_lun_size() const {
  return lun_.size();
}
inline int ListVirtioScsiLunResponse::lun_size() const {
  return _internal_lun_size();
}
inline void ListVirtioScsiLunResponse::clear_lun() {
  lun_.Clear();
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunResponse::mutable_lun(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListVirtioScsiLunResponse.lun)
  return lun_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >*
ListVirtioScsiLunResponse::mutable_lun() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListVirtioScsiLunResponse.lun)
  return &lun_;
}
inline const ::opi_api::storage::v1::VirtioScsiLun& ListVirtioScsiLunResponse::_internal_lun(int index) const {
  return lun_.Get(index);
}
inline const ::opi_api::storage::v1::VirtioScsiLun& ListVirtioScsiLunResponse::lun(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListVirtioScsiLunResponse.lun)
  return _internal_lun(index);
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunResponse::_internal_add_lun() {
  return lun_.Add();
}
inline ::opi_api::storage::v1::VirtioScsiLun* ListVirtioScsiLunResponse::add_lun() {
  ::opi_api::storage::v1::VirtioScsiLun* _add = _internal_add_lun();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListVirtioScsiLunResponse.lun)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::VirtioScsiLun >&
ListVirtioScsiLunResponse::lun() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListVirtioScsiLunResponse.lun)
  return lun_;
}

// -------------------------------------------------------------------

// GetVirtioScsiLunRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool GetVirtioScsiLunRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool GetVirtioScsiLunRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiLunRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiLunRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiLunRequest.controller_id)
  return _internal_controller_id();
}
inline void GetVirtioScsiLunRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.GetVirtioScsiLunRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiLunRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiLunRequest.controller_id)
  return _msg;
}
inline void GetVirtioScsiLunRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiLunRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool GetVirtioScsiLunRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool GetVirtioScsiLunRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiLunRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& GetVirtioScsiLunRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetVirtioScsiLunRequest.lun_id)
  return _internal_lun_id();
}
inline void GetVirtioScsiLunRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.GetVirtioScsiLunRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetVirtioScsiLunRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* GetVirtioScsiLunRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetVirtioScsiLunRequest.lun_id)
  return _msg;
}
inline void GetVirtioScsiLunRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetVirtioScsiLunRequest.lun_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunStatsRequest

// .opi_api.common.v1.ObjectKey controller_id = 1;
inline bool VirtioScsiLunStatsRequest::_internal_has_controller_id() const {
  return this != internal_default_instance() && controller_id_ != nullptr;
}
inline bool VirtioScsiLunStatsRequest::has_controller_id() const {
  return _internal_has_controller_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::_internal_controller_id() const {
  const ::opi_api::common::v1::ObjectKey* p = controller_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  return _internal_controller_id();
}
inline void VirtioScsiLunStatsRequest::unsafe_arena_set_allocated_controller_id(
    ::opi_api::common::v1::ObjectKey* controller_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  controller_id_ = controller_id;
  if (controller_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::release_controller_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  
  ::opi_api::common::v1::ObjectKey* temp = controller_id_;
  controller_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::_internal_mutable_controller_id() {
  
  if (controller_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    controller_id_ = p;
  }
  return controller_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::mutable_controller_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
  return _msg;
}
inline void VirtioScsiLunStatsRequest::set_allocated_controller_id(::opi_api::common::v1::ObjectKey* controller_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id_);
  }
  if (controller_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_id));
    if (message_arena != submessage_arena) {
      controller_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_id, submessage_arena);
    }
    
  } else {
    
  }
  controller_id_ = controller_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.controller_id)
}

// .opi_api.common.v1.ObjectKey lun_id = 2;
inline bool VirtioScsiLunStatsRequest::_internal_has_lun_id() const {
  return this != internal_default_instance() && lun_id_ != nullptr;
}
inline bool VirtioScsiLunStatsRequest::has_lun_id() const {
  return _internal_has_lun_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::_internal_lun_id() const {
  const ::opi_api::common::v1::ObjectKey* p = lun_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsRequest::lun_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  return _internal_lun_id();
}
inline void VirtioScsiLunStatsRequest::unsafe_arena_set_allocated_lun_id(
    ::opi_api::common::v1::ObjectKey* lun_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  lun_id_ = lun_id;
  if (lun_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::release_lun_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::unsafe_arena_release_lun_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  
  ::opi_api::common::v1::ObjectKey* temp = lun_id_;
  lun_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::_internal_mutable_lun_id() {
  
  if (lun_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    lun_id_ = p;
  }
  return lun_id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsRequest::mutable_lun_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_lun_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
  return _msg;
}
inline void VirtioScsiLunStatsRequest::set_allocated_lun_id(::opi_api::common::v1::ObjectKey* lun_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id_);
  }
  if (lun_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lun_id));
    if (message_arena != submessage_arena) {
      lun_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lun_id, submessage_arena);
    }
    
  } else {
    
  }
  lun_id_ = lun_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsRequest.lun_id)
}

// -------------------------------------------------------------------

// VirtioScsiLunStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VirtioScsiLunStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VirtioScsiLunStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VirtioScsiLunStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  return _internal_id();
}
inline void VirtioScsiLunStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VirtioScsiLunStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
  return _msg;
}
inline void VirtioScsiLunStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.id)
}

// string stats = 2;
inline void VirtioScsiLunStatsResponse::clear_stats() {
  stats_.ClearToEmpty();
}
inline const std::string& VirtioScsiLunStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return _internal_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtioScsiLunStatsResponse::set_stats(ArgT0&& arg0, ArgT... args) {
 
 stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
}
inline std::string* VirtioScsiLunStatsResponse::mutable_stats() {
  std::string* _s = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return _s;
}
inline const std::string& VirtioScsiLunStatsResponse::_internal_stats() const {
  return stats_.Get();
}
inline void VirtioScsiLunStatsResponse::_internal_set_stats(const std::string& value) {
  
  stats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VirtioScsiLunStatsResponse::_internal_mutable_stats() {
  
  return stats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VirtioScsiLunStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
  return stats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VirtioScsiLunStatsResponse::set_allocated_stats(std::string* stats) {
  if (stats != nullptr) {
    
  } else {
    
  }
  stats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stats,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stats_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stats_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.VirtioScsiLunStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fvirtio_5fscsi_2eproto
