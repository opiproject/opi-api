// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: middleend.proto

#include "middleend.pb.h"
#include "middleend.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* MiddleendService_method_names[] = {
  "/opi_api.storage.v1.MiddleendService/CreateCrypto",
  "/opi_api.storage.v1.MiddleendService/DeleteCrypto",
  "/opi_api.storage.v1.MiddleendService/UpdateCrypto",
  "/opi_api.storage.v1.MiddleendService/ListCrypto",
  "/opi_api.storage.v1.MiddleendService/GetCrypto",
  "/opi_api.storage.v1.MiddleendService/CryptoStats",
};

std::unique_ptr< MiddleendService::Stub> MiddleendService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MiddleendService::Stub> stub(new MiddleendService::Stub(channel, options));
  return stub;
}

MiddleendService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateCrypto_(MiddleendService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCrypto_(MiddleendService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCrypto_(MiddleendService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCrypto_(MiddleendService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCrypto_(MiddleendService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CryptoStats_(MiddleendService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MiddleendService::Stub::CreateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateCryptoRequest& request, ::opi_api::storage::v1::Crypto* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCrypto_, context, request, response);
}

void MiddleendService::Stub::async::CreateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCrypto_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::CreateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCrypto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::PrepareAsyncCreateCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::Crypto, ::opi_api::storage::v1::CreateCryptoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCrypto_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::AsyncCreateCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCryptoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendService::Stub::DeleteCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteCryptoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCrypto_, context, request, response);
}

void MiddleendService::Stub::async::DeleteCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteCryptoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCrypto_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::DeleteCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCrypto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MiddleendService::Stub::PrepareAsyncDeleteCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteCryptoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCrypto_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MiddleendService::Stub::AsyncDeleteCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCryptoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendService::Stub::UpdateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest& request, ::opi_api::storage::v1::Crypto* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCrypto_, context, request, response);
}

void MiddleendService::Stub::async::UpdateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCrypto_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::UpdateCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCrypto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::PrepareAsyncUpdateCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::Crypto, ::opi_api::storage::v1::UpdateCryptoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCrypto_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::AsyncUpdateCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCryptoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendService::Stub::ListCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListCryptoRequest& request, ::opi_api::storage::v1::ListCryptoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListCryptoRequest, ::opi_api::storage::v1::ListCryptoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCrypto_, context, request, response);
}

void MiddleendService::Stub::async::ListCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListCryptoRequest* request, ::opi_api::storage::v1::ListCryptoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListCryptoRequest, ::opi_api::storage::v1::ListCryptoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCrypto_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::ListCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListCryptoRequest* request, ::opi_api::storage::v1::ListCryptoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCrypto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListCryptoResponse>* MiddleendService::Stub::PrepareAsyncListCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListCryptoResponse, ::opi_api::storage::v1::ListCryptoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCrypto_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListCryptoResponse>* MiddleendService::Stub::AsyncListCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCryptoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendService::Stub::GetCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetCryptoRequest& request, ::opi_api::storage::v1::Crypto* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCrypto_, context, request, response);
}

void MiddleendService::Stub::async::GetCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCrypto_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::GetCrypto(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetCryptoRequest* request, ::opi_api::storage::v1::Crypto* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCrypto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::PrepareAsyncGetCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::Crypto, ::opi_api::storage::v1::GetCryptoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCrypto_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::Crypto>* MiddleendService::Stub::AsyncGetCryptoRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetCryptoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCryptoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiddleendService::Stub::CryptoStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::CryptoStatsRequest& request, ::opi_api::storage::v1::CryptoStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CryptoStatsRequest, ::opi_api::storage::v1::CryptoStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CryptoStats_, context, request, response);
}

void MiddleendService::Stub::async::CryptoStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::CryptoStatsRequest* request, ::opi_api::storage::v1::CryptoStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CryptoStatsRequest, ::opi_api::storage::v1::CryptoStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CryptoStats_, context, request, response, std::move(f));
}

void MiddleendService::Stub::async::CryptoStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::CryptoStatsRequest* request, ::opi_api::storage::v1::CryptoStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CryptoStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::CryptoStatsResponse>* MiddleendService::Stub::PrepareAsyncCryptoStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CryptoStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::CryptoStatsResponse, ::opi_api::storage::v1::CryptoStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CryptoStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::CryptoStatsResponse>* MiddleendService::Stub::AsyncCryptoStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CryptoStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCryptoStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

MiddleendService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::CreateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateCryptoRequest* req,
             ::opi_api::storage::v1::Crypto* resp) {
               return service->CreateCrypto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::DeleteCryptoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteCryptoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteCrypto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::UpdateCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateCryptoRequest* req,
             ::opi_api::storage::v1::Crypto* resp) {
               return service->UpdateCrypto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::ListCryptoRequest, ::opi_api::storage::v1::ListCryptoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListCryptoRequest* req,
             ::opi_api::storage::v1::ListCryptoResponse* resp) {
               return service->ListCrypto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::GetCryptoRequest, ::opi_api::storage::v1::Crypto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetCryptoRequest* req,
             ::opi_api::storage::v1::Crypto* resp) {
               return service->GetCrypto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiddleendService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiddleendService::Service, ::opi_api::storage::v1::CryptoStatsRequest, ::opi_api::storage::v1::CryptoStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiddleendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CryptoStatsRequest* req,
             ::opi_api::storage::v1::CryptoStatsResponse* resp) {
               return service->CryptoStats(ctx, req, resp);
             }, this)));
}

MiddleendService::Service::~Service() {
}

::grpc::Status MiddleendService::Service::CreateCrypto(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendService::Service::DeleteCrypto(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteCryptoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendService::Service::UpdateCrypto(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateCryptoRequest* request, ::opi_api::storage::v1::Crypto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendService::Service::ListCrypto(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListCryptoRequest* request, ::opi_api::storage::v1::ListCryptoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendService::Service::GetCrypto(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetCryptoRequest* request, ::opi_api::storage::v1::Crypto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiddleendService::Service::CryptoStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::CryptoStatsRequest* request, ::opi_api::storage::v1::CryptoStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

