// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_nvme_pcie.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fnvme_5fpcie_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fnvme_5fpcie_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opicommon.pb.h"
#include "object_key.pb.h"
#include "uuid.pb.h"
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fnvme_5fpcie_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fnvme_5fpcie_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fnvme_5fpcie_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateNvmeControllerRequest;
struct CreateNvmeControllerRequestDefaultTypeInternal;
extern CreateNvmeControllerRequestDefaultTypeInternal _CreateNvmeControllerRequest_default_instance_;
class CreateNvmeNamespaceRequest;
struct CreateNvmeNamespaceRequestDefaultTypeInternal;
extern CreateNvmeNamespaceRequestDefaultTypeInternal _CreateNvmeNamespaceRequest_default_instance_;
class CreateNvmeSubsystemRequest;
struct CreateNvmeSubsystemRequestDefaultTypeInternal;
extern CreateNvmeSubsystemRequestDefaultTypeInternal _CreateNvmeSubsystemRequest_default_instance_;
class DeleteNvmeControllerRequest;
struct DeleteNvmeControllerRequestDefaultTypeInternal;
extern DeleteNvmeControllerRequestDefaultTypeInternal _DeleteNvmeControllerRequest_default_instance_;
class DeleteNvmeNamespaceRequest;
struct DeleteNvmeNamespaceRequestDefaultTypeInternal;
extern DeleteNvmeNamespaceRequestDefaultTypeInternal _DeleteNvmeNamespaceRequest_default_instance_;
class DeleteNvmeSubsystemRequest;
struct DeleteNvmeSubsystemRequestDefaultTypeInternal;
extern DeleteNvmeSubsystemRequestDefaultTypeInternal _DeleteNvmeSubsystemRequest_default_instance_;
class GetNvmeControllerRequest;
struct GetNvmeControllerRequestDefaultTypeInternal;
extern GetNvmeControllerRequestDefaultTypeInternal _GetNvmeControllerRequest_default_instance_;
class GetNvmeNamespaceRequest;
struct GetNvmeNamespaceRequestDefaultTypeInternal;
extern GetNvmeNamespaceRequestDefaultTypeInternal _GetNvmeNamespaceRequest_default_instance_;
class GetNvmeSubsystemRequest;
struct GetNvmeSubsystemRequestDefaultTypeInternal;
extern GetNvmeSubsystemRequestDefaultTypeInternal _GetNvmeSubsystemRequest_default_instance_;
class ListNvmeControllersRequest;
struct ListNvmeControllersRequestDefaultTypeInternal;
extern ListNvmeControllersRequestDefaultTypeInternal _ListNvmeControllersRequest_default_instance_;
class ListNvmeControllersResponse;
struct ListNvmeControllersResponseDefaultTypeInternal;
extern ListNvmeControllersResponseDefaultTypeInternal _ListNvmeControllersResponse_default_instance_;
class ListNvmeNamespacesRequest;
struct ListNvmeNamespacesRequestDefaultTypeInternal;
extern ListNvmeNamespacesRequestDefaultTypeInternal _ListNvmeNamespacesRequest_default_instance_;
class ListNvmeNamespacesResponse;
struct ListNvmeNamespacesResponseDefaultTypeInternal;
extern ListNvmeNamespacesResponseDefaultTypeInternal _ListNvmeNamespacesResponse_default_instance_;
class ListNvmeSubsystemsRequest;
struct ListNvmeSubsystemsRequestDefaultTypeInternal;
extern ListNvmeSubsystemsRequestDefaultTypeInternal _ListNvmeSubsystemsRequest_default_instance_;
class ListNvmeSubsystemsResponse;
struct ListNvmeSubsystemsResponseDefaultTypeInternal;
extern ListNvmeSubsystemsResponseDefaultTypeInternal _ListNvmeSubsystemsResponse_default_instance_;
class NvmeController;
struct NvmeControllerDefaultTypeInternal;
extern NvmeControllerDefaultTypeInternal _NvmeController_default_instance_;
class NvmeControllerSpec;
struct NvmeControllerSpecDefaultTypeInternal;
extern NvmeControllerSpecDefaultTypeInternal _NvmeControllerSpec_default_instance_;
class NvmeControllerStatsRequest;
struct NvmeControllerStatsRequestDefaultTypeInternal;
extern NvmeControllerStatsRequestDefaultTypeInternal _NvmeControllerStatsRequest_default_instance_;
class NvmeControllerStatsResponse;
struct NvmeControllerStatsResponseDefaultTypeInternal;
extern NvmeControllerStatsResponseDefaultTypeInternal _NvmeControllerStatsResponse_default_instance_;
class NvmeControllerStatus;
struct NvmeControllerStatusDefaultTypeInternal;
extern NvmeControllerStatusDefaultTypeInternal _NvmeControllerStatus_default_instance_;
class NvmeNamespace;
struct NvmeNamespaceDefaultTypeInternal;
extern NvmeNamespaceDefaultTypeInternal _NvmeNamespace_default_instance_;
class NvmeNamespaceSpec;
struct NvmeNamespaceSpecDefaultTypeInternal;
extern NvmeNamespaceSpecDefaultTypeInternal _NvmeNamespaceSpec_default_instance_;
class NvmeNamespaceStatsRequest;
struct NvmeNamespaceStatsRequestDefaultTypeInternal;
extern NvmeNamespaceStatsRequestDefaultTypeInternal _NvmeNamespaceStatsRequest_default_instance_;
class NvmeNamespaceStatsResponse;
struct NvmeNamespaceStatsResponseDefaultTypeInternal;
extern NvmeNamespaceStatsResponseDefaultTypeInternal _NvmeNamespaceStatsResponse_default_instance_;
class NvmeNamespaceStatus;
struct NvmeNamespaceStatusDefaultTypeInternal;
extern NvmeNamespaceStatusDefaultTypeInternal _NvmeNamespaceStatus_default_instance_;
class NvmeSubsystem;
struct NvmeSubsystemDefaultTypeInternal;
extern NvmeSubsystemDefaultTypeInternal _NvmeSubsystem_default_instance_;
class NvmeSubsystemSpec;
struct NvmeSubsystemSpecDefaultTypeInternal;
extern NvmeSubsystemSpecDefaultTypeInternal _NvmeSubsystemSpec_default_instance_;
class NvmeSubsystemStatsRequest;
struct NvmeSubsystemStatsRequestDefaultTypeInternal;
extern NvmeSubsystemStatsRequestDefaultTypeInternal _NvmeSubsystemStatsRequest_default_instance_;
class NvmeSubsystemStatsResponse;
struct NvmeSubsystemStatsResponseDefaultTypeInternal;
extern NvmeSubsystemStatsResponseDefaultTypeInternal _NvmeSubsystemStatsResponse_default_instance_;
class NvmeSubsystemStatus;
struct NvmeSubsystemStatusDefaultTypeInternal;
extern NvmeSubsystemStatusDefaultTypeInternal _NvmeSubsystemStatus_default_instance_;
class UpdateNvmeControllerRequest;
struct UpdateNvmeControllerRequestDefaultTypeInternal;
extern UpdateNvmeControllerRequestDefaultTypeInternal _UpdateNvmeControllerRequest_default_instance_;
class UpdateNvmeNamespaceRequest;
struct UpdateNvmeNamespaceRequestDefaultTypeInternal;
extern UpdateNvmeNamespaceRequestDefaultTypeInternal _UpdateNvmeNamespaceRequest_default_instance_;
class UpdateNvmeSubsystemRequest;
struct UpdateNvmeSubsystemRequestDefaultTypeInternal;
extern UpdateNvmeSubsystemRequestDefaultTypeInternal _UpdateNvmeSubsystemRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateNvmeControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNvmeControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::CreateNvmeNamespaceRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNvmeNamespaceRequest>(Arena*);
template<> ::opi_api::storage::v1::CreateNvmeSubsystemRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNvmeSubsystemRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNvmeControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNvmeControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNvmeNamespaceRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNvmeSubsystemRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNvmeControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNvmeControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNvmeNamespaceRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNvmeNamespaceRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNvmeSubsystemRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNvmeSubsystemRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeControllersRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeControllersRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeControllersResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeControllersResponse>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeNamespacesRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeNamespacesRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeNamespacesResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeNamespacesResponse>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeSubsystemsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeSubsystemsRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNvmeSubsystemsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNvmeSubsystemsResponse>(Arena*);
template<> ::opi_api::storage::v1::NvmeController* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeController>(Arena*);
template<> ::opi_api::storage::v1::NvmeControllerSpec* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerSpec>(Arena*);
template<> ::opi_api::storage::v1::NvmeControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NvmeControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::NvmeControllerStatus* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerStatus>(Arena*);
template<> ::opi_api::storage::v1::NvmeNamespace* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespace>(Arena*);
template<> ::opi_api::storage::v1::NvmeNamespaceSpec* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceSpec>(Arena*);
template<> ::opi_api::storage::v1::NvmeNamespaceStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NvmeNamespaceStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::NvmeNamespaceStatus* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceStatus>(Arena*);
template<> ::opi_api::storage::v1::NvmeSubsystem* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystem>(Arena*);
template<> ::opi_api::storage::v1::NvmeSubsystemSpec* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemSpec>(Arena*);
template<> ::opi_api::storage::v1::NvmeSubsystemStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NvmeSubsystemStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::NvmeSubsystemStatus* Arena::CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemStatus>(Arena*);
template<> ::opi_api::storage::v1::UpdateNvmeControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNvmeControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNvmeNamespaceRequest>(Arena*);
template<> ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNvmeSubsystemRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

enum NvmeNamespacePciState : int {
  NVME_NAMESPACE_PCI_STATE_UNSPECIFIED = 0,
  NVME_NAMESPACE_PCI_STATE_DISABLED = 1,
  NVME_NAMESPACE_PCI_STATE_ENABLED = 2,
  NVME_NAMESPACE_PCI_STATE_DELETING = 3,
  NvmeNamespacePciState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeNamespacePciState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeNamespacePciState_IsValid(int value);
constexpr NvmeNamespacePciState NvmeNamespacePciState_MIN = NVME_NAMESPACE_PCI_STATE_UNSPECIFIED;
constexpr NvmeNamespacePciState NvmeNamespacePciState_MAX = NVME_NAMESPACE_PCI_STATE_DELETING;
constexpr int NvmeNamespacePciState_ARRAYSIZE = NvmeNamespacePciState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeNamespacePciState_descriptor();
template<typename T>
inline const std::string& NvmeNamespacePciState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeNamespacePciState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeNamespacePciState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeNamespacePciState_descriptor(), enum_t_value);
}
inline bool NvmeNamespacePciState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeNamespacePciState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeNamespacePciState>(
    NvmeNamespacePciState_descriptor(), name, value);
}
enum NvmeNamespacePciOperState : int {
  NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED = 0,
  NVME_NAMESPACE_PCI_OPER_STATE_ONLINE = 1,
  NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE = 2,
  NvmeNamespacePciOperState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeNamespacePciOperState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeNamespacePciOperState_IsValid(int value);
constexpr NvmeNamespacePciOperState NvmeNamespacePciOperState_MIN = NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED;
constexpr NvmeNamespacePciOperState NvmeNamespacePciOperState_MAX = NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE;
constexpr int NvmeNamespacePciOperState_ARRAYSIZE = NvmeNamespacePciOperState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeNamespacePciOperState_descriptor();
template<typename T>
inline const std::string& NvmeNamespacePciOperState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeNamespacePciOperState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeNamespacePciOperState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeNamespacePciOperState_descriptor(), enum_t_value);
}
inline bool NvmeNamespacePciOperState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeNamespacePciOperState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeNamespacePciOperState>(
    NvmeNamespacePciOperState_descriptor(), name, value);
}
// ===================================================================

class NvmeSubsystem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeSubsystem) */ {
 public:
  inline NvmeSubsystem() : NvmeSubsystem(nullptr) {}
  ~NvmeSubsystem() override;
  explicit constexpr NvmeSubsystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeSubsystem(const NvmeSubsystem& from);
  NvmeSubsystem(NvmeSubsystem&& from) noexcept
    : NvmeSubsystem() {
    *this = ::std::move(from);
  }

  inline NvmeSubsystem& operator=(const NvmeSubsystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeSubsystem& operator=(NvmeSubsystem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeSubsystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeSubsystem* internal_default_instance() {
    return reinterpret_cast<const NvmeSubsystem*>(
               &_NvmeSubsystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NvmeSubsystem& a, NvmeSubsystem& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeSubsystem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeSubsystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeSubsystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeSubsystem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeSubsystem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeSubsystem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeSubsystem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeSubsystem";
  }
  protected:
  explicit NvmeSubsystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.storage.v1.NvmeSubsystemSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::storage::v1::NvmeSubsystemSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeSubsystemSpec* release_spec();
  ::opi_api::storage::v1::NvmeSubsystemSpec* mutable_spec();
  void set_allocated_spec(::opi_api::storage::v1::NvmeSubsystemSpec* spec);
  private:
  const ::opi_api::storage::v1::NvmeSubsystemSpec& _internal_spec() const;
  ::opi_api::storage::v1::NvmeSubsystemSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::storage::v1::NvmeSubsystemSpec* spec);
  ::opi_api::storage::v1::NvmeSubsystemSpec* unsafe_arena_release_spec();

  // .opi_api.storage.v1.NvmeSubsystemStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::storage::v1::NvmeSubsystemStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeSubsystemStatus* release_status();
  ::opi_api::storage::v1::NvmeSubsystemStatus* mutable_status();
  void set_allocated_status(::opi_api::storage::v1::NvmeSubsystemStatus* status);
  private:
  const ::opi_api::storage::v1::NvmeSubsystemStatus& _internal_status() const;
  ::opi_api::storage::v1::NvmeSubsystemStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::storage::v1::NvmeSubsystemStatus* status);
  ::opi_api::storage::v1::NvmeSubsystemStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeSubsystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::storage::v1::NvmeSubsystemSpec* spec_;
  ::opi_api::storage::v1::NvmeSubsystemStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeSubsystemSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeSubsystemSpec) */ {
 public:
  inline NvmeSubsystemSpec() : NvmeSubsystemSpec(nullptr) {}
  ~NvmeSubsystemSpec() override;
  explicit constexpr NvmeSubsystemSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeSubsystemSpec(const NvmeSubsystemSpec& from);
  NvmeSubsystemSpec(NvmeSubsystemSpec&& from) noexcept
    : NvmeSubsystemSpec() {
    *this = ::std::move(from);
  }

  inline NvmeSubsystemSpec& operator=(const NvmeSubsystemSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeSubsystemSpec& operator=(NvmeSubsystemSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeSubsystemSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeSubsystemSpec* internal_default_instance() {
    return reinterpret_cast<const NvmeSubsystemSpec*>(
               &_NvmeSubsystemSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NvmeSubsystemSpec& a, NvmeSubsystemSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeSubsystemSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeSubsystemSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeSubsystemSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeSubsystemSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeSubsystemSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeSubsystemSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeSubsystemSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeSubsystemSpec";
  }
  protected:
  explicit NvmeSubsystemSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNqnFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kModelNumberFieldNumber = 3,
    kMaxNamespacesFieldNumber = 4,
  };
  // string nqn = 1;
  void clear_nqn();
  const std::string& nqn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nqn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nqn();
  PROTOBUF_NODISCARD std::string* release_nqn();
  void set_allocated_nqn(std::string* nqn);
  private:
  const std::string& _internal_nqn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nqn(const std::string& value);
  std::string* _internal_mutable_nqn();
  public:

  // string serial_number = 2;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string model_number = 3;
  void clear_model_number();
  const std::string& model_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_number();
  PROTOBUF_NODISCARD std::string* release_model_number();
  void set_allocated_model_number(std::string* model_number);
  private:
  const std::string& _internal_model_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_number(const std::string& value);
  std::string* _internal_mutable_model_number();
  public:

  // int64 max_namespaces = 4;
  void clear_max_namespaces();
  int64_t max_namespaces() const;
  void set_max_namespaces(int64_t value);
  private:
  int64_t _internal_max_namespaces() const;
  void _internal_set_max_namespaces(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeSubsystemSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_number_;
  int64_t max_namespaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeSubsystemStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeSubsystemStatus) */ {
 public:
  inline NvmeSubsystemStatus() : NvmeSubsystemStatus(nullptr) {}
  ~NvmeSubsystemStatus() override;
  explicit constexpr NvmeSubsystemStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeSubsystemStatus(const NvmeSubsystemStatus& from);
  NvmeSubsystemStatus(NvmeSubsystemStatus&& from) noexcept
    : NvmeSubsystemStatus() {
    *this = ::std::move(from);
  }

  inline NvmeSubsystemStatus& operator=(const NvmeSubsystemStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeSubsystemStatus& operator=(NvmeSubsystemStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeSubsystemStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeSubsystemStatus* internal_default_instance() {
    return reinterpret_cast<const NvmeSubsystemStatus*>(
               &_NvmeSubsystemStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NvmeSubsystemStatus& a, NvmeSubsystemStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeSubsystemStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeSubsystemStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeSubsystemStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeSubsystemStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeSubsystemStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeSubsystemStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeSubsystemStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeSubsystemStatus";
  }
  protected:
  explicit NvmeSubsystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareRevisionFieldNumber = 1,
    kFruGuidFieldNumber = 2,
  };
  // string firmware_revision = 1;
  void clear_firmware_revision();
  const std::string& firmware_revision() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firmware_revision(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firmware_revision();
  PROTOBUF_NODISCARD std::string* release_firmware_revision();
  void set_allocated_firmware_revision(std::string* firmware_revision);
  private:
  const std::string& _internal_firmware_revision() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmware_revision(const std::string& value);
  std::string* _internal_mutable_firmware_revision();
  public:

  // bytes fru_guid = 2;
  void clear_fru_guid();
  const std::string& fru_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fru_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fru_guid();
  PROTOBUF_NODISCARD std::string* release_fru_guid();
  void set_allocated_fru_guid(std::string* fru_guid);
  private:
  const std::string& _internal_fru_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fru_guid(const std::string& value);
  std::string* _internal_mutable_fru_guid();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeSubsystemStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fru_guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeController) */ {
 public:
  inline NvmeController() : NvmeController(nullptr) {}
  ~NvmeController() override;
  explicit constexpr NvmeController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeController(const NvmeController& from);
  NvmeController(NvmeController&& from) noexcept
    : NvmeController() {
    *this = ::std::move(from);
  }

  inline NvmeController& operator=(const NvmeController& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeController& operator=(NvmeController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeController& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeController* internal_default_instance() {
    return reinterpret_cast<const NvmeController*>(
               &_NvmeController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NvmeController& a, NvmeController& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeController";
  }
  protected:
  explicit NvmeController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.storage.v1.NvmeControllerSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::storage::v1::NvmeControllerSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeControllerSpec* release_spec();
  ::opi_api::storage::v1::NvmeControllerSpec* mutable_spec();
  void set_allocated_spec(::opi_api::storage::v1::NvmeControllerSpec* spec);
  private:
  const ::opi_api::storage::v1::NvmeControllerSpec& _internal_spec() const;
  ::opi_api::storage::v1::NvmeControllerSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::storage::v1::NvmeControllerSpec* spec);
  ::opi_api::storage::v1::NvmeControllerSpec* unsafe_arena_release_spec();

  // .opi_api.storage.v1.NvmeControllerStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::storage::v1::NvmeControllerStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeControllerStatus* release_status();
  ::opi_api::storage::v1::NvmeControllerStatus* mutable_status();
  void set_allocated_status(::opi_api::storage::v1::NvmeControllerStatus* status);
  private:
  const ::opi_api::storage::v1::NvmeControllerStatus& _internal_status() const;
  ::opi_api::storage::v1::NvmeControllerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::storage::v1::NvmeControllerStatus* status);
  ::opi_api::storage::v1::NvmeControllerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::storage::v1::NvmeControllerSpec* spec_;
  ::opi_api::storage::v1::NvmeControllerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeControllerSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeControllerSpec) */ {
 public:
  inline NvmeControllerSpec() : NvmeControllerSpec(nullptr) {}
  ~NvmeControllerSpec() override;
  explicit constexpr NvmeControllerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeControllerSpec(const NvmeControllerSpec& from);
  NvmeControllerSpec(NvmeControllerSpec&& from) noexcept
    : NvmeControllerSpec() {
    *this = ::std::move(from);
  }

  inline NvmeControllerSpec& operator=(const NvmeControllerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeControllerSpec& operator=(NvmeControllerSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeControllerSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeControllerSpec* internal_default_instance() {
    return reinterpret_cast<const NvmeControllerSpec*>(
               &_NvmeControllerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NvmeControllerSpec& a, NvmeControllerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeControllerSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeControllerSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeControllerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeControllerSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeControllerSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeControllerSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeControllerSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeControllerSpec";
  }
  protected:
  explicit NvmeControllerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsystemIdFieldNumber = 2,
    kPcieIdFieldNumber = 3,
    kMinLimitFieldNumber = 9,
    kMaxLimitFieldNumber = 10,
    kNvmeControllerIdFieldNumber = 1,
    kMaxNsqFieldNumber = 4,
    kMaxNcqFieldNumber = 5,
    kSqesFieldNumber = 6,
    kCqesFieldNumber = 7,
    kMaxNamespacesFieldNumber = 8,
  };
  // .opi_api.common.v1.ObjectKey subsystem_id = 2;
  bool has_subsystem_id() const;
  private:
  bool _internal_has_subsystem_id() const;
  public:
  void clear_subsystem_id();
  const ::opi_api::common::v1::ObjectKey& subsystem_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_subsystem_id();
  ::opi_api::common::v1::ObjectKey* mutable_subsystem_id();
  void set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_subsystem_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_subsystem_id();
  public:
  void unsafe_arena_set_allocated_subsystem_id(
      ::opi_api::common::v1::ObjectKey* subsystem_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_subsystem_id();

  // .opi_api.storage.v1.PciEndpoint pcie_id = 3;
  bool has_pcie_id() const;
  private:
  bool _internal_has_pcie_id() const;
  public:
  void clear_pcie_id();
  const ::opi_api::storage::v1::PciEndpoint& pcie_id() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::PciEndpoint* release_pcie_id();
  ::opi_api::storage::v1::PciEndpoint* mutable_pcie_id();
  void set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id);
  private:
  const ::opi_api::storage::v1::PciEndpoint& _internal_pcie_id() const;
  ::opi_api::storage::v1::PciEndpoint* _internal_mutable_pcie_id();
  public:
  void unsafe_arena_set_allocated_pcie_id(
      ::opi_api::storage::v1::PciEndpoint* pcie_id);
  ::opi_api::storage::v1::PciEndpoint* unsafe_arena_release_pcie_id();

  // .opi_api.storage.v1.QosLimit min_limit = 9;
  bool has_min_limit() const;
  private:
  bool _internal_has_min_limit() const;
  public:
  void clear_min_limit();
  const ::opi_api::storage::v1::QosLimit& min_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_min_limit();
  ::opi_api::storage::v1::QosLimit* mutable_min_limit();
  void set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_min_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_min_limit();
  public:
  void unsafe_arena_set_allocated_min_limit(
      ::opi_api::storage::v1::QosLimit* min_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_min_limit();

  // .opi_api.storage.v1.QosLimit max_limit = 10;
  bool has_max_limit() const;
  private:
  bool _internal_has_max_limit() const;
  public:
  void clear_max_limit();
  const ::opi_api::storage::v1::QosLimit& max_limit() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::QosLimit* release_max_limit();
  ::opi_api::storage::v1::QosLimit* mutable_max_limit();
  void set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit);
  private:
  const ::opi_api::storage::v1::QosLimit& _internal_max_limit() const;
  ::opi_api::storage::v1::QosLimit* _internal_mutable_max_limit();
  public:
  void unsafe_arena_set_allocated_max_limit(
      ::opi_api::storage::v1::QosLimit* max_limit);
  ::opi_api::storage::v1::QosLimit* unsafe_arena_release_max_limit();

  // int32 nvme_controller_id = 1;
  void clear_nvme_controller_id();
  int32_t nvme_controller_id() const;
  void set_nvme_controller_id(int32_t value);
  private:
  int32_t _internal_nvme_controller_id() const;
  void _internal_set_nvme_controller_id(int32_t value);
  public:

  // int32 max_nsq = 4;
  void clear_max_nsq();
  int32_t max_nsq() const;
  void set_max_nsq(int32_t value);
  private:
  int32_t _internal_max_nsq() const;
  void _internal_set_max_nsq(int32_t value);
  public:

  // int32 max_ncq = 5;
  void clear_max_ncq();
  int32_t max_ncq() const;
  void set_max_ncq(int32_t value);
  private:
  int32_t _internal_max_ncq() const;
  void _internal_set_max_ncq(int32_t value);
  public:

  // int32 sqes = 6;
  void clear_sqes();
  int32_t sqes() const;
  void set_sqes(int32_t value);
  private:
  int32_t _internal_sqes() const;
  void _internal_set_sqes(int32_t value);
  public:

  // int32 cqes = 7;
  void clear_cqes();
  int32_t cqes() const;
  void set_cqes(int32_t value);
  private:
  int32_t _internal_cqes() const;
  void _internal_set_cqes(int32_t value);
  public:

  // int32 max_namespaces = 8;
  void clear_max_namespaces();
  int32_t max_namespaces() const;
  void set_max_namespaces(int32_t value);
  private:
  int32_t _internal_max_namespaces() const;
  void _internal_set_max_namespaces(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeControllerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* subsystem_id_;
  ::opi_api::storage::v1::PciEndpoint* pcie_id_;
  ::opi_api::storage::v1::QosLimit* min_limit_;
  ::opi_api::storage::v1::QosLimit* max_limit_;
  int32_t nvme_controller_id_;
  int32_t max_nsq_;
  int32_t max_ncq_;
  int32_t sqes_;
  int32_t cqes_;
  int32_t max_namespaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeControllerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeControllerStatus) */ {
 public:
  inline NvmeControllerStatus() : NvmeControllerStatus(nullptr) {}
  ~NvmeControllerStatus() override;
  explicit constexpr NvmeControllerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeControllerStatus(const NvmeControllerStatus& from);
  NvmeControllerStatus(NvmeControllerStatus&& from) noexcept
    : NvmeControllerStatus() {
    *this = ::std::move(from);
  }

  inline NvmeControllerStatus& operator=(const NvmeControllerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeControllerStatus& operator=(NvmeControllerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeControllerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeControllerStatus* internal_default_instance() {
    return reinterpret_cast<const NvmeControllerStatus*>(
               &_NvmeControllerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NvmeControllerStatus& a, NvmeControllerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeControllerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeControllerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeControllerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeControllerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeControllerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeControllerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeControllerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeControllerStatus";
  }
  protected:
  explicit NvmeControllerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveFieldNumber = 1,
  };
  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeControllerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeNamespace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeNamespace) */ {
 public:
  inline NvmeNamespace() : NvmeNamespace(nullptr) {}
  ~NvmeNamespace() override;
  explicit constexpr NvmeNamespace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeNamespace(const NvmeNamespace& from);
  NvmeNamespace(NvmeNamespace&& from) noexcept
    : NvmeNamespace() {
    *this = ::std::move(from);
  }

  inline NvmeNamespace& operator=(const NvmeNamespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeNamespace& operator=(NvmeNamespace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeNamespace& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeNamespace* internal_default_instance() {
    return reinterpret_cast<const NvmeNamespace*>(
               &_NvmeNamespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NvmeNamespace& a, NvmeNamespace& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeNamespace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeNamespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeNamespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeNamespace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeNamespace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeNamespace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeNamespace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeNamespace";
  }
  protected:
  explicit NvmeNamespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.storage.v1.NvmeNamespaceSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::storage::v1::NvmeNamespaceSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeNamespaceSpec* release_spec();
  ::opi_api::storage::v1::NvmeNamespaceSpec* mutable_spec();
  void set_allocated_spec(::opi_api::storage::v1::NvmeNamespaceSpec* spec);
  private:
  const ::opi_api::storage::v1::NvmeNamespaceSpec& _internal_spec() const;
  ::opi_api::storage::v1::NvmeNamespaceSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::storage::v1::NvmeNamespaceSpec* spec);
  ::opi_api::storage::v1::NvmeNamespaceSpec* unsafe_arena_release_spec();

  // .opi_api.storage.v1.NvmeNamespaceStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::storage::v1::NvmeNamespaceStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeNamespaceStatus* release_status();
  ::opi_api::storage::v1::NvmeNamespaceStatus* mutable_status();
  void set_allocated_status(::opi_api::storage::v1::NvmeNamespaceStatus* status);
  private:
  const ::opi_api::storage::v1::NvmeNamespaceStatus& _internal_status() const;
  ::opi_api::storage::v1::NvmeNamespaceStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::storage::v1::NvmeNamespaceStatus* status);
  ::opi_api::storage::v1::NvmeNamespaceStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeNamespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::storage::v1::NvmeNamespaceSpec* spec_;
  ::opi_api::storage::v1::NvmeNamespaceStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeNamespaceSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeNamespaceSpec) */ {
 public:
  inline NvmeNamespaceSpec() : NvmeNamespaceSpec(nullptr) {}
  ~NvmeNamespaceSpec() override;
  explicit constexpr NvmeNamespaceSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeNamespaceSpec(const NvmeNamespaceSpec& from);
  NvmeNamespaceSpec(NvmeNamespaceSpec&& from) noexcept
    : NvmeNamespaceSpec() {
    *this = ::std::move(from);
  }

  inline NvmeNamespaceSpec& operator=(const NvmeNamespaceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeNamespaceSpec& operator=(NvmeNamespaceSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeNamespaceSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeNamespaceSpec* internal_default_instance() {
    return reinterpret_cast<const NvmeNamespaceSpec*>(
               &_NvmeNamespaceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NvmeNamespaceSpec& a, NvmeNamespaceSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeNamespaceSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeNamespaceSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeNamespaceSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeNamespaceSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeNamespaceSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeNamespaceSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeNamespaceSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeNamespaceSpec";
  }
  protected:
  explicit NvmeNamespaceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNguidFieldNumber = 3,
    kSubsystemIdFieldNumber = 1,
    kUuidFieldNumber = 5,
    kVolumeIdFieldNumber = 6,
    kEui64FieldNumber = 4,
    kHostNsidFieldNumber = 2,
  };
  // string nguid = 3;
  void clear_nguid();
  const std::string& nguid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nguid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nguid();
  PROTOBUF_NODISCARD std::string* release_nguid();
  void set_allocated_nguid(std::string* nguid);
  private:
  const std::string& _internal_nguid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nguid(const std::string& value);
  std::string* _internal_mutable_nguid();
  public:

  // .opi_api.common.v1.ObjectKey subsystem_id = 1;
  bool has_subsystem_id() const;
  private:
  bool _internal_has_subsystem_id() const;
  public:
  void clear_subsystem_id();
  const ::opi_api::common::v1::ObjectKey& subsystem_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_subsystem_id();
  ::opi_api::common::v1::ObjectKey* mutable_subsystem_id();
  void set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_subsystem_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_subsystem_id();
  public:
  void unsafe_arena_set_allocated_subsystem_id(
      ::opi_api::common::v1::ObjectKey* subsystem_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_subsystem_id();

  // .opi_api.common.v1.Uuid uuid = 5;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::opi_api::common::v1::Uuid& uuid() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::Uuid* release_uuid();
  ::opi_api::common::v1::Uuid* mutable_uuid();
  void set_allocated_uuid(::opi_api::common::v1::Uuid* uuid);
  private:
  const ::opi_api::common::v1::Uuid& _internal_uuid() const;
  ::opi_api::common::v1::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::opi_api::common::v1::Uuid* uuid);
  ::opi_api::common::v1::Uuid* unsafe_arena_release_uuid();

  // .opi_api.common.v1.ObjectKey volume_id = 6;
  bool has_volume_id() const;
  private:
  bool _internal_has_volume_id() const;
  public:
  void clear_volume_id();
  const ::opi_api::common::v1::ObjectKey& volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_volume_id();
  void set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_volume_id();
  public:
  void unsafe_arena_set_allocated_volume_id(
      ::opi_api::common::v1::ObjectKey* volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_volume_id();

  // int64 eui64 = 4;
  void clear_eui64();
  int64_t eui64() const;
  void set_eui64(int64_t value);
  private:
  int64_t _internal_eui64() const;
  void _internal_set_eui64(int64_t value);
  public:

  // int32 host_nsid = 2;
  void clear_host_nsid();
  int32_t host_nsid() const;
  void set_host_nsid(int32_t value);
  private:
  int32_t _internal_host_nsid() const;
  void _internal_set_host_nsid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeNamespaceSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nguid_;
  ::opi_api::common::v1::ObjectKey* subsystem_id_;
  ::opi_api::common::v1::Uuid* uuid_;
  ::opi_api::common::v1::ObjectKey* volume_id_;
  int64_t eui64_;
  int32_t host_nsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeNamespaceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeNamespaceStatus) */ {
 public:
  inline NvmeNamespaceStatus() : NvmeNamespaceStatus(nullptr) {}
  ~NvmeNamespaceStatus() override;
  explicit constexpr NvmeNamespaceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeNamespaceStatus(const NvmeNamespaceStatus& from);
  NvmeNamespaceStatus(NvmeNamespaceStatus&& from) noexcept
    : NvmeNamespaceStatus() {
    *this = ::std::move(from);
  }

  inline NvmeNamespaceStatus& operator=(const NvmeNamespaceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeNamespaceStatus& operator=(NvmeNamespaceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeNamespaceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeNamespaceStatus* internal_default_instance() {
    return reinterpret_cast<const NvmeNamespaceStatus*>(
               &_NvmeNamespaceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NvmeNamespaceStatus& a, NvmeNamespaceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeNamespaceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeNamespaceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeNamespaceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeNamespaceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeNamespaceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeNamespaceStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeNamespaceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeNamespaceStatus";
  }
  protected:
  explicit NvmeNamespaceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPciStateFieldNumber = 1,
    kPciOperStateFieldNumber = 2,
  };
  // .opi_api.storage.v1.NvmeNamespacePciState pci_state = 1;
  void clear_pci_state();
  ::opi_api::storage::v1::NvmeNamespacePciState pci_state() const;
  void set_pci_state(::opi_api::storage::v1::NvmeNamespacePciState value);
  private:
  ::opi_api::storage::v1::NvmeNamespacePciState _internal_pci_state() const;
  void _internal_set_pci_state(::opi_api::storage::v1::NvmeNamespacePciState value);
  public:

  // .opi_api.storage.v1.NvmeNamespacePciOperState pci_oper_state = 2;
  void clear_pci_oper_state();
  ::opi_api::storage::v1::NvmeNamespacePciOperState pci_oper_state() const;
  void set_pci_oper_state(::opi_api::storage::v1::NvmeNamespacePciOperState value);
  private:
  ::opi_api::storage::v1::NvmeNamespacePciOperState _internal_pci_oper_state() const;
  void _internal_set_pci_oper_state(::opi_api::storage::v1::NvmeNamespacePciOperState value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeNamespaceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int pci_state_;
  int pci_oper_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class CreateNvmeSubsystemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNvmeSubsystemRequest) */ {
 public:
  inline CreateNvmeSubsystemRequest() : CreateNvmeSubsystemRequest(nullptr) {}
  ~CreateNvmeSubsystemRequest() override;
  explicit constexpr CreateNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNvmeSubsystemRequest(const CreateNvmeSubsystemRequest& from);
  CreateNvmeSubsystemRequest(CreateNvmeSubsystemRequest&& from) noexcept
    : CreateNvmeSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline CreateNvmeSubsystemRequest& operator=(const CreateNvmeSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNvmeSubsystemRequest& operator=(CreateNvmeSubsystemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNvmeSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNvmeSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNvmeSubsystemRequest*>(
               &_CreateNvmeSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateNvmeSubsystemRequest& a, CreateNvmeSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNvmeSubsystemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNvmeSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNvmeSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNvmeSubsystemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNvmeSubsystemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNvmeSubsystemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNvmeSubsystemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNvmeSubsystemRequest";
  }
  protected:
  explicit CreateNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeSubsystemIdFieldNumber = 3,
    kNvmeSubsystemFieldNumber = 2,
  };
  // string nvme_subsystem_id = 3;
  void clear_nvme_subsystem_id();
  const std::string& nvme_subsystem_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nvme_subsystem_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nvme_subsystem_id();
  PROTOBUF_NODISCARD std::string* release_nvme_subsystem_id();
  void set_allocated_nvme_subsystem_id(std::string* nvme_subsystem_id);
  private:
  const std::string& _internal_nvme_subsystem_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nvme_subsystem_id(const std::string& value);
  std::string* _internal_mutable_nvme_subsystem_id();
  public:

  // .opi_api.storage.v1.NvmeSubsystem nvme_subsystem = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nvme_subsystem() const;
  private:
  bool _internal_has_nvme_subsystem() const;
  public:
  void clear_nvme_subsystem();
  const ::opi_api::storage::v1::NvmeSubsystem& nvme_subsystem() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeSubsystem* release_nvme_subsystem();
  ::opi_api::storage::v1::NvmeSubsystem* mutable_nvme_subsystem();
  void set_allocated_nvme_subsystem(::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem);
  private:
  const ::opi_api::storage::v1::NvmeSubsystem& _internal_nvme_subsystem() const;
  ::opi_api::storage::v1::NvmeSubsystem* _internal_mutable_nvme_subsystem();
  public:
  void unsafe_arena_set_allocated_nvme_subsystem(
      ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem);
  ::opi_api::storage::v1::NvmeSubsystem* unsafe_arena_release_nvme_subsystem();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNvmeSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nvme_subsystem_id_;
  ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class DeleteNvmeSubsystemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNvmeSubsystemRequest) */ {
 public:
  inline DeleteNvmeSubsystemRequest() : DeleteNvmeSubsystemRequest(nullptr) {}
  ~DeleteNvmeSubsystemRequest() override;
  explicit constexpr DeleteNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNvmeSubsystemRequest(const DeleteNvmeSubsystemRequest& from);
  DeleteNvmeSubsystemRequest(DeleteNvmeSubsystemRequest&& from) noexcept
    : DeleteNvmeSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNvmeSubsystemRequest& operator=(const DeleteNvmeSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNvmeSubsystemRequest& operator=(DeleteNvmeSubsystemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNvmeSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNvmeSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNvmeSubsystemRequest*>(
               &_DeleteNvmeSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteNvmeSubsystemRequest& a, DeleteNvmeSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNvmeSubsystemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNvmeSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNvmeSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNvmeSubsystemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNvmeSubsystemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNvmeSubsystemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNvmeSubsystemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNvmeSubsystemRequest";
  }
  protected:
  explicit DeleteNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNvmeSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class UpdateNvmeSubsystemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNvmeSubsystemRequest) */ {
 public:
  inline UpdateNvmeSubsystemRequest() : UpdateNvmeSubsystemRequest(nullptr) {}
  ~UpdateNvmeSubsystemRequest() override;
  explicit constexpr UpdateNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNvmeSubsystemRequest(const UpdateNvmeSubsystemRequest& from);
  UpdateNvmeSubsystemRequest(UpdateNvmeSubsystemRequest&& from) noexcept
    : UpdateNvmeSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNvmeSubsystemRequest& operator=(const UpdateNvmeSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNvmeSubsystemRequest& operator=(UpdateNvmeSubsystemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNvmeSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNvmeSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNvmeSubsystemRequest*>(
               &_UpdateNvmeSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateNvmeSubsystemRequest& a, UpdateNvmeSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNvmeSubsystemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNvmeSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNvmeSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNvmeSubsystemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNvmeSubsystemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNvmeSubsystemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNvmeSubsystemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNvmeSubsystemRequest";
  }
  protected:
  explicit UpdateNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeSubsystemFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.NvmeSubsystem nvme_subsystem = 1;
  bool has_nvme_subsystem() const;
  private:
  bool _internal_has_nvme_subsystem() const;
  public:
  void clear_nvme_subsystem();
  const ::opi_api::storage::v1::NvmeSubsystem& nvme_subsystem() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeSubsystem* release_nvme_subsystem();
  ::opi_api::storage::v1::NvmeSubsystem* mutable_nvme_subsystem();
  void set_allocated_nvme_subsystem(::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem);
  private:
  const ::opi_api::storage::v1::NvmeSubsystem& _internal_nvme_subsystem() const;
  ::opi_api::storage::v1::NvmeSubsystem* _internal_mutable_nvme_subsystem();
  public:
  void unsafe_arena_set_allocated_nvme_subsystem(
      ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem);
  ::opi_api::storage::v1::NvmeSubsystem* unsafe_arena_release_nvme_subsystem();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNvmeSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeSubsystemsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeSubsystemsRequest) */ {
 public:
  inline ListNvmeSubsystemsRequest() : ListNvmeSubsystemsRequest(nullptr) {}
  ~ListNvmeSubsystemsRequest() override;
  explicit constexpr ListNvmeSubsystemsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeSubsystemsRequest(const ListNvmeSubsystemsRequest& from);
  ListNvmeSubsystemsRequest(ListNvmeSubsystemsRequest&& from) noexcept
    : ListNvmeSubsystemsRequest() {
    *this = ::std::move(from);
  }

  inline ListNvmeSubsystemsRequest& operator=(const ListNvmeSubsystemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeSubsystemsRequest& operator=(ListNvmeSubsystemsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeSubsystemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeSubsystemsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNvmeSubsystemsRequest*>(
               &_ListNvmeSubsystemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListNvmeSubsystemsRequest& a, ListNvmeSubsystemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeSubsystemsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeSubsystemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeSubsystemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeSubsystemsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeSubsystemsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeSubsystemsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeSubsystemsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeSubsystemsRequest";
  }
  protected:
  explicit ListNvmeSubsystemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeSubsystemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeSubsystemsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeSubsystemsResponse) */ {
 public:
  inline ListNvmeSubsystemsResponse() : ListNvmeSubsystemsResponse(nullptr) {}
  ~ListNvmeSubsystemsResponse() override;
  explicit constexpr ListNvmeSubsystemsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeSubsystemsResponse(const ListNvmeSubsystemsResponse& from);
  ListNvmeSubsystemsResponse(ListNvmeSubsystemsResponse&& from) noexcept
    : ListNvmeSubsystemsResponse() {
    *this = ::std::move(from);
  }

  inline ListNvmeSubsystemsResponse& operator=(const ListNvmeSubsystemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeSubsystemsResponse& operator=(ListNvmeSubsystemsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeSubsystemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeSubsystemsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNvmeSubsystemsResponse*>(
               &_ListNvmeSubsystemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListNvmeSubsystemsResponse& a, ListNvmeSubsystemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeSubsystemsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeSubsystemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeSubsystemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeSubsystemsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeSubsystemsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeSubsystemsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeSubsystemsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeSubsystemsResponse";
  }
  protected:
  explicit ListNvmeSubsystemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeSubsystemsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NvmeSubsystem nvme_subsystems = 1;
  int nvme_subsystems_size() const;
  private:
  int _internal_nvme_subsystems_size() const;
  public:
  void clear_nvme_subsystems();
  ::opi_api::storage::v1::NvmeSubsystem* mutable_nvme_subsystems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeSubsystem >*
      mutable_nvme_subsystems();
  private:
  const ::opi_api::storage::v1::NvmeSubsystem& _internal_nvme_subsystems(int index) const;
  ::opi_api::storage::v1::NvmeSubsystem* _internal_add_nvme_subsystems();
  public:
  const ::opi_api::storage::v1::NvmeSubsystem& nvme_subsystems(int index) const;
  ::opi_api::storage::v1::NvmeSubsystem* add_nvme_subsystems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeSubsystem >&
      nvme_subsystems() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeSubsystemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeSubsystem > nvme_subsystems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class GetNvmeSubsystemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNvmeSubsystemRequest) */ {
 public:
  inline GetNvmeSubsystemRequest() : GetNvmeSubsystemRequest(nullptr) {}
  ~GetNvmeSubsystemRequest() override;
  explicit constexpr GetNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNvmeSubsystemRequest(const GetNvmeSubsystemRequest& from);
  GetNvmeSubsystemRequest(GetNvmeSubsystemRequest&& from) noexcept
    : GetNvmeSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline GetNvmeSubsystemRequest& operator=(const GetNvmeSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNvmeSubsystemRequest& operator=(GetNvmeSubsystemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNvmeSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNvmeSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const GetNvmeSubsystemRequest*>(
               &_GetNvmeSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetNvmeSubsystemRequest& a, GetNvmeSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNvmeSubsystemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNvmeSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNvmeSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNvmeSubsystemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNvmeSubsystemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNvmeSubsystemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNvmeSubsystemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNvmeSubsystemRequest";
  }
  protected:
  explicit GetNvmeSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNvmeSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeSubsystemStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeSubsystemStatsRequest) */ {
 public:
  inline NvmeSubsystemStatsRequest() : NvmeSubsystemStatsRequest(nullptr) {}
  ~NvmeSubsystemStatsRequest() override;
  explicit constexpr NvmeSubsystemStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeSubsystemStatsRequest(const NvmeSubsystemStatsRequest& from);
  NvmeSubsystemStatsRequest(NvmeSubsystemStatsRequest&& from) noexcept
    : NvmeSubsystemStatsRequest() {
    *this = ::std::move(from);
  }

  inline NvmeSubsystemStatsRequest& operator=(const NvmeSubsystemStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeSubsystemStatsRequest& operator=(NvmeSubsystemStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeSubsystemStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeSubsystemStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NvmeSubsystemStatsRequest*>(
               &_NvmeSubsystemStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NvmeSubsystemStatsRequest& a, NvmeSubsystemStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeSubsystemStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeSubsystemStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeSubsystemStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeSubsystemStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeSubsystemStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeSubsystemStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeSubsystemStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeSubsystemStatsRequest";
  }
  protected:
  explicit NvmeSubsystemStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsystemIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey subsystem_id = 1;
  bool has_subsystem_id() const;
  private:
  bool _internal_has_subsystem_id() const;
  public:
  void clear_subsystem_id();
  const ::opi_api::common::v1::ObjectKey& subsystem_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_subsystem_id();
  ::opi_api::common::v1::ObjectKey* mutable_subsystem_id();
  void set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_subsystem_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_subsystem_id();
  public:
  void unsafe_arena_set_allocated_subsystem_id(
      ::opi_api::common::v1::ObjectKey* subsystem_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_subsystem_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeSubsystemStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* subsystem_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeSubsystemStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeSubsystemStatsResponse) */ {
 public:
  inline NvmeSubsystemStatsResponse() : NvmeSubsystemStatsResponse(nullptr) {}
  ~NvmeSubsystemStatsResponse() override;
  explicit constexpr NvmeSubsystemStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeSubsystemStatsResponse(const NvmeSubsystemStatsResponse& from);
  NvmeSubsystemStatsResponse(NvmeSubsystemStatsResponse&& from) noexcept
    : NvmeSubsystemStatsResponse() {
    *this = ::std::move(from);
  }

  inline NvmeSubsystemStatsResponse& operator=(const NvmeSubsystemStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeSubsystemStatsResponse& operator=(NvmeSubsystemStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeSubsystemStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeSubsystemStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NvmeSubsystemStatsResponse*>(
               &_NvmeSubsystemStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NvmeSubsystemStatsResponse& a, NvmeSubsystemStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeSubsystemStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeSubsystemStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeSubsystemStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeSubsystemStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeSubsystemStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeSubsystemStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeSubsystemStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeSubsystemStatsResponse";
  }
  protected:
  explicit NvmeSubsystemStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeSubsystemStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class CreateNvmeControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNvmeControllerRequest) */ {
 public:
  inline CreateNvmeControllerRequest() : CreateNvmeControllerRequest(nullptr) {}
  ~CreateNvmeControllerRequest() override;
  explicit constexpr CreateNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNvmeControllerRequest(const CreateNvmeControllerRequest& from);
  CreateNvmeControllerRequest(CreateNvmeControllerRequest&& from) noexcept
    : CreateNvmeControllerRequest() {
    *this = ::std::move(from);
  }

  inline CreateNvmeControllerRequest& operator=(const CreateNvmeControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNvmeControllerRequest& operator=(CreateNvmeControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNvmeControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNvmeControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNvmeControllerRequest*>(
               &_CreateNvmeControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateNvmeControllerRequest& a, CreateNvmeControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNvmeControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNvmeControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNvmeControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNvmeControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNvmeControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNvmeControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNvmeControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNvmeControllerRequest";
  }
  protected:
  explicit CreateNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeControllerIdFieldNumber = 3,
    kNvmeControllerFieldNumber = 2,
  };
  // string nvme_controller_id = 3;
  void clear_nvme_controller_id();
  const std::string& nvme_controller_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nvme_controller_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nvme_controller_id();
  PROTOBUF_NODISCARD std::string* release_nvme_controller_id();
  void set_allocated_nvme_controller_id(std::string* nvme_controller_id);
  private:
  const std::string& _internal_nvme_controller_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nvme_controller_id(const std::string& value);
  std::string* _internal_mutable_nvme_controller_id();
  public:

  // .opi_api.storage.v1.NvmeController nvme_controller = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nvme_controller() const;
  private:
  bool _internal_has_nvme_controller() const;
  public:
  void clear_nvme_controller();
  const ::opi_api::storage::v1::NvmeController& nvme_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeController* release_nvme_controller();
  ::opi_api::storage::v1::NvmeController* mutable_nvme_controller();
  void set_allocated_nvme_controller(::opi_api::storage::v1::NvmeController* nvme_controller);
  private:
  const ::opi_api::storage::v1::NvmeController& _internal_nvme_controller() const;
  ::opi_api::storage::v1::NvmeController* _internal_mutable_nvme_controller();
  public:
  void unsafe_arena_set_allocated_nvme_controller(
      ::opi_api::storage::v1::NvmeController* nvme_controller);
  ::opi_api::storage::v1::NvmeController* unsafe_arena_release_nvme_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNvmeControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nvme_controller_id_;
  ::opi_api::storage::v1::NvmeController* nvme_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class DeleteNvmeControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNvmeControllerRequest) */ {
 public:
  inline DeleteNvmeControllerRequest() : DeleteNvmeControllerRequest(nullptr) {}
  ~DeleteNvmeControllerRequest() override;
  explicit constexpr DeleteNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNvmeControllerRequest(const DeleteNvmeControllerRequest& from);
  DeleteNvmeControllerRequest(DeleteNvmeControllerRequest&& from) noexcept
    : DeleteNvmeControllerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNvmeControllerRequest& operator=(const DeleteNvmeControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNvmeControllerRequest& operator=(DeleteNvmeControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNvmeControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNvmeControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNvmeControllerRequest*>(
               &_DeleteNvmeControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteNvmeControllerRequest& a, DeleteNvmeControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNvmeControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNvmeControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNvmeControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNvmeControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNvmeControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNvmeControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNvmeControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNvmeControllerRequest";
  }
  protected:
  explicit DeleteNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNvmeControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class UpdateNvmeControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNvmeControllerRequest) */ {
 public:
  inline UpdateNvmeControllerRequest() : UpdateNvmeControllerRequest(nullptr) {}
  ~UpdateNvmeControllerRequest() override;
  explicit constexpr UpdateNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNvmeControllerRequest(const UpdateNvmeControllerRequest& from);
  UpdateNvmeControllerRequest(UpdateNvmeControllerRequest&& from) noexcept
    : UpdateNvmeControllerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNvmeControllerRequest& operator=(const UpdateNvmeControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNvmeControllerRequest& operator=(UpdateNvmeControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNvmeControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNvmeControllerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNvmeControllerRequest*>(
               &_UpdateNvmeControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateNvmeControllerRequest& a, UpdateNvmeControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNvmeControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNvmeControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNvmeControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNvmeControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNvmeControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNvmeControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNvmeControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNvmeControllerRequest";
  }
  protected:
  explicit UpdateNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeControllerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.NvmeController nvme_controller = 1;
  bool has_nvme_controller() const;
  private:
  bool _internal_has_nvme_controller() const;
  public:
  void clear_nvme_controller();
  const ::opi_api::storage::v1::NvmeController& nvme_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeController* release_nvme_controller();
  ::opi_api::storage::v1::NvmeController* mutable_nvme_controller();
  void set_allocated_nvme_controller(::opi_api::storage::v1::NvmeController* nvme_controller);
  private:
  const ::opi_api::storage::v1::NvmeController& _internal_nvme_controller() const;
  ::opi_api::storage::v1::NvmeController* _internal_mutable_nvme_controller();
  public:
  void unsafe_arena_set_allocated_nvme_controller(
      ::opi_api::storage::v1::NvmeController* nvme_controller);
  ::opi_api::storage::v1::NvmeController* unsafe_arena_release_nvme_controller();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNvmeControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NvmeController* nvme_controller_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeControllersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeControllersRequest) */ {
 public:
  inline ListNvmeControllersRequest() : ListNvmeControllersRequest(nullptr) {}
  ~ListNvmeControllersRequest() override;
  explicit constexpr ListNvmeControllersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeControllersRequest(const ListNvmeControllersRequest& from);
  ListNvmeControllersRequest(ListNvmeControllersRequest&& from) noexcept
    : ListNvmeControllersRequest() {
    *this = ::std::move(from);
  }

  inline ListNvmeControllersRequest& operator=(const ListNvmeControllersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeControllersRequest& operator=(ListNvmeControllersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeControllersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeControllersRequest* internal_default_instance() {
    return reinterpret_cast<const ListNvmeControllersRequest*>(
               &_ListNvmeControllersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListNvmeControllersRequest& a, ListNvmeControllersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeControllersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeControllersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeControllersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeControllersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeControllersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeControllersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeControllersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeControllersRequest";
  }
  protected:
  explicit ListNvmeControllersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeControllersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeControllersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeControllersResponse) */ {
 public:
  inline ListNvmeControllersResponse() : ListNvmeControllersResponse(nullptr) {}
  ~ListNvmeControllersResponse() override;
  explicit constexpr ListNvmeControllersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeControllersResponse(const ListNvmeControllersResponse& from);
  ListNvmeControllersResponse(ListNvmeControllersResponse&& from) noexcept
    : ListNvmeControllersResponse() {
    *this = ::std::move(from);
  }

  inline ListNvmeControllersResponse& operator=(const ListNvmeControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeControllersResponse& operator=(ListNvmeControllersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeControllersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeControllersResponse* internal_default_instance() {
    return reinterpret_cast<const ListNvmeControllersResponse*>(
               &_ListNvmeControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListNvmeControllersResponse& a, ListNvmeControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeControllersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeControllersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeControllersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeControllersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeControllersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeControllersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeControllersResponse";
  }
  protected:
  explicit ListNvmeControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeControllersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NvmeController nvme_controllers = 1;
  int nvme_controllers_size() const;
  private:
  int _internal_nvme_controllers_size() const;
  public:
  void clear_nvme_controllers();
  ::opi_api::storage::v1::NvmeController* mutable_nvme_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeController >*
      mutable_nvme_controllers();
  private:
  const ::opi_api::storage::v1::NvmeController& _internal_nvme_controllers(int index) const;
  ::opi_api::storage::v1::NvmeController* _internal_add_nvme_controllers();
  public:
  const ::opi_api::storage::v1::NvmeController& nvme_controllers(int index) const;
  ::opi_api::storage::v1::NvmeController* add_nvme_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeController >&
      nvme_controllers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeController > nvme_controllers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class GetNvmeControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNvmeControllerRequest) */ {
 public:
  inline GetNvmeControllerRequest() : GetNvmeControllerRequest(nullptr) {}
  ~GetNvmeControllerRequest() override;
  explicit constexpr GetNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNvmeControllerRequest(const GetNvmeControllerRequest& from);
  GetNvmeControllerRequest(GetNvmeControllerRequest&& from) noexcept
    : GetNvmeControllerRequest() {
    *this = ::std::move(from);
  }

  inline GetNvmeControllerRequest& operator=(const GetNvmeControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNvmeControllerRequest& operator=(GetNvmeControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNvmeControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNvmeControllerRequest* internal_default_instance() {
    return reinterpret_cast<const GetNvmeControllerRequest*>(
               &_GetNvmeControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetNvmeControllerRequest& a, GetNvmeControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNvmeControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNvmeControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNvmeControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNvmeControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNvmeControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNvmeControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNvmeControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNvmeControllerRequest";
  }
  protected:
  explicit GetNvmeControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNvmeControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeControllerStatsRequest) */ {
 public:
  inline NvmeControllerStatsRequest() : NvmeControllerStatsRequest(nullptr) {}
  ~NvmeControllerStatsRequest() override;
  explicit constexpr NvmeControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeControllerStatsRequest(const NvmeControllerStatsRequest& from);
  NvmeControllerStatsRequest(NvmeControllerStatsRequest&& from) noexcept
    : NvmeControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline NvmeControllerStatsRequest& operator=(const NvmeControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeControllerStatsRequest& operator=(NvmeControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NvmeControllerStatsRequest*>(
               &_NvmeControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(NvmeControllerStatsRequest& a, NvmeControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeControllerStatsRequest";
  }
  protected:
  explicit NvmeControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeControllerStatsResponse) */ {
 public:
  inline NvmeControllerStatsResponse() : NvmeControllerStatsResponse(nullptr) {}
  ~NvmeControllerStatsResponse() override;
  explicit constexpr NvmeControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeControllerStatsResponse(const NvmeControllerStatsResponse& from);
  NvmeControllerStatsResponse(NvmeControllerStatsResponse&& from) noexcept
    : NvmeControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline NvmeControllerStatsResponse& operator=(const NvmeControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeControllerStatsResponse& operator=(NvmeControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NvmeControllerStatsResponse*>(
               &_NvmeControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NvmeControllerStatsResponse& a, NvmeControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeControllerStatsResponse";
  }
  protected:
  explicit NvmeControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.VolumeStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class CreateNvmeNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNvmeNamespaceRequest) */ {
 public:
  inline CreateNvmeNamespaceRequest() : CreateNvmeNamespaceRequest(nullptr) {}
  ~CreateNvmeNamespaceRequest() override;
  explicit constexpr CreateNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNvmeNamespaceRequest(const CreateNvmeNamespaceRequest& from);
  CreateNvmeNamespaceRequest(CreateNvmeNamespaceRequest&& from) noexcept
    : CreateNvmeNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline CreateNvmeNamespaceRequest& operator=(const CreateNvmeNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNvmeNamespaceRequest& operator=(CreateNvmeNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNvmeNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNvmeNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNvmeNamespaceRequest*>(
               &_CreateNvmeNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CreateNvmeNamespaceRequest& a, CreateNvmeNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNvmeNamespaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNvmeNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNvmeNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNvmeNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNvmeNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNvmeNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNvmeNamespaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNvmeNamespaceRequest";
  }
  protected:
  explicit CreateNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeNamespaceIdFieldNumber = 3,
    kNvmeNamespaceFieldNumber = 2,
  };
  // string nvme_namespace_id = 3;
  void clear_nvme_namespace_id();
  const std::string& nvme_namespace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nvme_namespace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nvme_namespace_id();
  PROTOBUF_NODISCARD std::string* release_nvme_namespace_id();
  void set_allocated_nvme_namespace_id(std::string* nvme_namespace_id);
  private:
  const std::string& _internal_nvme_namespace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nvme_namespace_id(const std::string& value);
  std::string* _internal_mutable_nvme_namespace_id();
  public:

  // .opi_api.storage.v1.NvmeNamespace nvme_namespace = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nvme_namespace() const;
  private:
  bool _internal_has_nvme_namespace() const;
  public:
  void clear_nvme_namespace();
  const ::opi_api::storage::v1::NvmeNamespace& nvme_namespace() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeNamespace* release_nvme_namespace();
  ::opi_api::storage::v1::NvmeNamespace* mutable_nvme_namespace();
  void set_allocated_nvme_namespace(::opi_api::storage::v1::NvmeNamespace* nvme_namespace);
  private:
  const ::opi_api::storage::v1::NvmeNamespace& _internal_nvme_namespace() const;
  ::opi_api::storage::v1::NvmeNamespace* _internal_mutable_nvme_namespace();
  public:
  void unsafe_arena_set_allocated_nvme_namespace(
      ::opi_api::storage::v1::NvmeNamespace* nvme_namespace);
  ::opi_api::storage::v1::NvmeNamespace* unsafe_arena_release_nvme_namespace();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNvmeNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nvme_namespace_id_;
  ::opi_api::storage::v1::NvmeNamespace* nvme_namespace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class DeleteNvmeNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNvmeNamespaceRequest) */ {
 public:
  inline DeleteNvmeNamespaceRequest() : DeleteNvmeNamespaceRequest(nullptr) {}
  ~DeleteNvmeNamespaceRequest() override;
  explicit constexpr DeleteNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNvmeNamespaceRequest(const DeleteNvmeNamespaceRequest& from);
  DeleteNvmeNamespaceRequest(DeleteNvmeNamespaceRequest&& from) noexcept
    : DeleteNvmeNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNvmeNamespaceRequest& operator=(const DeleteNvmeNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNvmeNamespaceRequest& operator=(DeleteNvmeNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNvmeNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNvmeNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNvmeNamespaceRequest*>(
               &_DeleteNvmeNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteNvmeNamespaceRequest& a, DeleteNvmeNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNvmeNamespaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNvmeNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNvmeNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNvmeNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNvmeNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNvmeNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNvmeNamespaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNvmeNamespaceRequest";
  }
  protected:
  explicit DeleteNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNvmeNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class UpdateNvmeNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNvmeNamespaceRequest) */ {
 public:
  inline UpdateNvmeNamespaceRequest() : UpdateNvmeNamespaceRequest(nullptr) {}
  ~UpdateNvmeNamespaceRequest() override;
  explicit constexpr UpdateNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNvmeNamespaceRequest(const UpdateNvmeNamespaceRequest& from);
  UpdateNvmeNamespaceRequest(UpdateNvmeNamespaceRequest&& from) noexcept
    : UpdateNvmeNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNvmeNamespaceRequest& operator=(const UpdateNvmeNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNvmeNamespaceRequest& operator=(UpdateNvmeNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNvmeNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNvmeNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNvmeNamespaceRequest*>(
               &_UpdateNvmeNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UpdateNvmeNamespaceRequest& a, UpdateNvmeNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNvmeNamespaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNvmeNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNvmeNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNvmeNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNvmeNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNvmeNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNvmeNamespaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNvmeNamespaceRequest";
  }
  protected:
  explicit UpdateNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeNamespaceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.NvmeNamespace nvme_namespace = 1;
  bool has_nvme_namespace() const;
  private:
  bool _internal_has_nvme_namespace() const;
  public:
  void clear_nvme_namespace();
  const ::opi_api::storage::v1::NvmeNamespace& nvme_namespace() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NvmeNamespace* release_nvme_namespace();
  ::opi_api::storage::v1::NvmeNamespace* mutable_nvme_namespace();
  void set_allocated_nvme_namespace(::opi_api::storage::v1::NvmeNamespace* nvme_namespace);
  private:
  const ::opi_api::storage::v1::NvmeNamespace& _internal_nvme_namespace() const;
  ::opi_api::storage::v1::NvmeNamespace* _internal_mutable_nvme_namespace();
  public:
  void unsafe_arena_set_allocated_nvme_namespace(
      ::opi_api::storage::v1::NvmeNamespace* nvme_namespace);
  ::opi_api::storage::v1::NvmeNamespace* unsafe_arena_release_nvme_namespace();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNvmeNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NvmeNamespace* nvme_namespace_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeNamespacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeNamespacesRequest) */ {
 public:
  inline ListNvmeNamespacesRequest() : ListNvmeNamespacesRequest(nullptr) {}
  ~ListNvmeNamespacesRequest() override;
  explicit constexpr ListNvmeNamespacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeNamespacesRequest(const ListNvmeNamespacesRequest& from);
  ListNvmeNamespacesRequest(ListNvmeNamespacesRequest&& from) noexcept
    : ListNvmeNamespacesRequest() {
    *this = ::std::move(from);
  }

  inline ListNvmeNamespacesRequest& operator=(const ListNvmeNamespacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeNamespacesRequest& operator=(ListNvmeNamespacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeNamespacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeNamespacesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNvmeNamespacesRequest*>(
               &_ListNvmeNamespacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListNvmeNamespacesRequest& a, ListNvmeNamespacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeNamespacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeNamespacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeNamespacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeNamespacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeNamespacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeNamespacesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeNamespacesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeNamespacesRequest";
  }
  protected:
  explicit ListNvmeNamespacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeNamespacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class ListNvmeNamespacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNvmeNamespacesResponse) */ {
 public:
  inline ListNvmeNamespacesResponse() : ListNvmeNamespacesResponse(nullptr) {}
  ~ListNvmeNamespacesResponse() override;
  explicit constexpr ListNvmeNamespacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNvmeNamespacesResponse(const ListNvmeNamespacesResponse& from);
  ListNvmeNamespacesResponse(ListNvmeNamespacesResponse&& from) noexcept
    : ListNvmeNamespacesResponse() {
    *this = ::std::move(from);
  }

  inline ListNvmeNamespacesResponse& operator=(const ListNvmeNamespacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNvmeNamespacesResponse& operator=(ListNvmeNamespacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNvmeNamespacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNvmeNamespacesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNvmeNamespacesResponse*>(
               &_ListNvmeNamespacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ListNvmeNamespacesResponse& a, ListNvmeNamespacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNvmeNamespacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNvmeNamespacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNvmeNamespacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNvmeNamespacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNvmeNamespacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNvmeNamespacesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNvmeNamespacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNvmeNamespacesResponse";
  }
  protected:
  explicit ListNvmeNamespacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvmeNamespacesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NvmeNamespace nvme_namespaces = 1;
  int nvme_namespaces_size() const;
  private:
  int _internal_nvme_namespaces_size() const;
  public:
  void clear_nvme_namespaces();
  ::opi_api::storage::v1::NvmeNamespace* mutable_nvme_namespaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeNamespace >*
      mutable_nvme_namespaces();
  private:
  const ::opi_api::storage::v1::NvmeNamespace& _internal_nvme_namespaces(int index) const;
  ::opi_api::storage::v1::NvmeNamespace* _internal_add_nvme_namespaces();
  public:
  const ::opi_api::storage::v1::NvmeNamespace& nvme_namespaces(int index) const;
  ::opi_api::storage::v1::NvmeNamespace* add_nvme_namespaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeNamespace >&
      nvme_namespaces() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNvmeNamespacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeNamespace > nvme_namespaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class GetNvmeNamespaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNvmeNamespaceRequest) */ {
 public:
  inline GetNvmeNamespaceRequest() : GetNvmeNamespaceRequest(nullptr) {}
  ~GetNvmeNamespaceRequest() override;
  explicit constexpr GetNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNvmeNamespaceRequest(const GetNvmeNamespaceRequest& from);
  GetNvmeNamespaceRequest(GetNvmeNamespaceRequest&& from) noexcept
    : GetNvmeNamespaceRequest() {
    *this = ::std::move(from);
  }

  inline GetNvmeNamespaceRequest& operator=(const GetNvmeNamespaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNvmeNamespaceRequest& operator=(GetNvmeNamespaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNvmeNamespaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNvmeNamespaceRequest* internal_default_instance() {
    return reinterpret_cast<const GetNvmeNamespaceRequest*>(
               &_GetNvmeNamespaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetNvmeNamespaceRequest& a, GetNvmeNamespaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNvmeNamespaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNvmeNamespaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNvmeNamespaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNvmeNamespaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNvmeNamespaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNvmeNamespaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNvmeNamespaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNvmeNamespaceRequest";
  }
  protected:
  explicit GetNvmeNamespaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNvmeNamespaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeNamespaceStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeNamespaceStatsRequest) */ {
 public:
  inline NvmeNamespaceStatsRequest() : NvmeNamespaceStatsRequest(nullptr) {}
  ~NvmeNamespaceStatsRequest() override;
  explicit constexpr NvmeNamespaceStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeNamespaceStatsRequest(const NvmeNamespaceStatsRequest& from);
  NvmeNamespaceStatsRequest(NvmeNamespaceStatsRequest&& from) noexcept
    : NvmeNamespaceStatsRequest() {
    *this = ::std::move(from);
  }

  inline NvmeNamespaceStatsRequest& operator=(const NvmeNamespaceStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeNamespaceStatsRequest& operator=(NvmeNamespaceStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeNamespaceStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeNamespaceStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NvmeNamespaceStatsRequest*>(
               &_NvmeNamespaceStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NvmeNamespaceStatsRequest& a, NvmeNamespaceStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeNamespaceStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeNamespaceStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeNamespaceStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeNamespaceStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeNamespaceStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeNamespaceStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeNamespaceStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeNamespaceStatsRequest";
  }
  protected:
  explicit NvmeNamespaceStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey namespace_id = 1;
  bool has_namespace_id() const;
  private:
  bool _internal_has_namespace_id() const;
  public:
  void clear_namespace_id();
  const ::opi_api::common::v1::ObjectKey& namespace_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_namespace_id();
  ::opi_api::common::v1::ObjectKey* mutable_namespace_id();
  void set_allocated_namespace_id(::opi_api::common::v1::ObjectKey* namespace_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_namespace_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_namespace_id();
  public:
  void unsafe_arena_set_allocated_namespace_id(
      ::opi_api::common::v1::ObjectKey* namespace_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_namespace_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeNamespaceStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* namespace_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// -------------------------------------------------------------------

class NvmeNamespaceStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NvmeNamespaceStatsResponse) */ {
 public:
  inline NvmeNamespaceStatsResponse() : NvmeNamespaceStatsResponse(nullptr) {}
  ~NvmeNamespaceStatsResponse() override;
  explicit constexpr NvmeNamespaceStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NvmeNamespaceStatsResponse(const NvmeNamespaceStatsResponse& from);
  NvmeNamespaceStatsResponse(NvmeNamespaceStatsResponse&& from) noexcept
    : NvmeNamespaceStatsResponse() {
    *this = ::std::move(from);
  }

  inline NvmeNamespaceStatsResponse& operator=(const NvmeNamespaceStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvmeNamespaceStatsResponse& operator=(NvmeNamespaceStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvmeNamespaceStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvmeNamespaceStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NvmeNamespaceStatsResponse*>(
               &_NvmeNamespaceStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(NvmeNamespaceStatsResponse& a, NvmeNamespaceStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NvmeNamespaceStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvmeNamespaceStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvmeNamespaceStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NvmeNamespaceStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NvmeNamespaceStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NvmeNamespaceStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NvmeNamespaceStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NvmeNamespaceStatsResponse";
  }
  protected:
  explicit NvmeNamespaceStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.VolumeStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NvmeNamespaceStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fnvme_5fpcie_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NvmeSubsystem

// string name = 1;
inline void NvmeSubsystem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NvmeSubsystem::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystem.name)
}
inline std::string* NvmeSubsystem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystem.name)
  return _s;
}
inline const std::string& NvmeSubsystem::_internal_name() const {
  return name_.Get();
}
inline void NvmeSubsystem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystem::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystem.name)
}

// .opi_api.storage.v1.NvmeSubsystemSpec spec = 2;
inline bool NvmeSubsystem::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool NvmeSubsystem::has_spec() const {
  return _internal_has_spec();
}
inline void NvmeSubsystem::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeSubsystemSpec& NvmeSubsystem::_internal_spec() const {
  const ::opi_api::storage::v1::NvmeSubsystemSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeSubsystemSpec&>(
      ::opi_api::storage::v1::_NvmeSubsystemSpec_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeSubsystemSpec& NvmeSubsystem::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystem.spec)
  return _internal_spec();
}
inline void NvmeSubsystem::unsafe_arena_set_allocated_spec(
    ::opi_api::storage::v1::NvmeSubsystemSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeSubsystem.spec)
}
inline ::opi_api::storage::v1::NvmeSubsystemSpec* NvmeSubsystem::release_spec() {
  
  ::opi_api::storage::v1::NvmeSubsystemSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystemSpec* NvmeSubsystem::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystem.spec)
  
  ::opi_api::storage::v1::NvmeSubsystemSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystemSpec* NvmeSubsystem::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::storage::v1::NvmeSubsystemSpec* NvmeSubsystem::mutable_spec() {
  ::opi_api::storage::v1::NvmeSubsystemSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystem.spec)
  return _msg;
}
inline void NvmeSubsystem::set_allocated_spec(::opi_api::storage::v1::NvmeSubsystemSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeSubsystemSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystem.spec)
}

// .opi_api.storage.v1.NvmeSubsystemStatus status = 3;
inline bool NvmeSubsystem::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NvmeSubsystem::has_status() const {
  return _internal_has_status();
}
inline void NvmeSubsystem::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeSubsystemStatus& NvmeSubsystem::_internal_status() const {
  const ::opi_api::storage::v1::NvmeSubsystemStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeSubsystemStatus&>(
      ::opi_api::storage::v1::_NvmeSubsystemStatus_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeSubsystemStatus& NvmeSubsystem::status() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystem.status)
  return _internal_status();
}
inline void NvmeSubsystem::unsafe_arena_set_allocated_status(
    ::opi_api::storage::v1::NvmeSubsystemStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeSubsystem.status)
}
inline ::opi_api::storage::v1::NvmeSubsystemStatus* NvmeSubsystem::release_status() {
  
  ::opi_api::storage::v1::NvmeSubsystemStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystemStatus* NvmeSubsystem::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystem.status)
  
  ::opi_api::storage::v1::NvmeSubsystemStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystemStatus* NvmeSubsystem::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystemStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::storage::v1::NvmeSubsystemStatus* NvmeSubsystem::mutable_status() {
  ::opi_api::storage::v1::NvmeSubsystemStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystem.status)
  return _msg;
}
inline void NvmeSubsystem::set_allocated_status(::opi_api::storage::v1::NvmeSubsystemStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeSubsystemStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystem.status)
}

// -------------------------------------------------------------------

// NvmeSubsystemSpec

// string nqn = 1;
inline void NvmeSubsystemSpec::clear_nqn() {
  nqn_.ClearToEmpty();
}
inline const std::string& NvmeSubsystemSpec::nqn() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemSpec.nqn)
  return _internal_nqn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystemSpec::set_nqn(ArgT0&& arg0, ArgT... args) {
 
 nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemSpec.nqn)
}
inline std::string* NvmeSubsystemSpec::mutable_nqn() {
  std::string* _s = _internal_mutable_nqn();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemSpec.nqn)
  return _s;
}
inline const std::string& NvmeSubsystemSpec::_internal_nqn() const {
  return nqn_.Get();
}
inline void NvmeSubsystemSpec::_internal_set_nqn(const std::string& value) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::_internal_mutable_nqn() {
  
  return nqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::release_nqn() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemSpec.nqn)
  return nqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystemSpec::set_allocated_nqn(std::string* nqn) {
  if (nqn != nullptr) {
    
  } else {
    
  }
  nqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nqn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nqn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemSpec.nqn)
}

// string serial_number = 2;
inline void NvmeSubsystemSpec::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& NvmeSubsystemSpec::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemSpec.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystemSpec::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemSpec.serial_number)
}
inline std::string* NvmeSubsystemSpec::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemSpec.serial_number)
  return _s;
}
inline const std::string& NvmeSubsystemSpec::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void NvmeSubsystemSpec::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemSpec.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystemSpec::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemSpec.serial_number)
}

// string model_number = 3;
inline void NvmeSubsystemSpec::clear_model_number() {
  model_number_.ClearToEmpty();
}
inline const std::string& NvmeSubsystemSpec::model_number() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemSpec.model_number)
  return _internal_model_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystemSpec::set_model_number(ArgT0&& arg0, ArgT... args) {
 
 model_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemSpec.model_number)
}
inline std::string* NvmeSubsystemSpec::mutable_model_number() {
  std::string* _s = _internal_mutable_model_number();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemSpec.model_number)
  return _s;
}
inline const std::string& NvmeSubsystemSpec::_internal_model_number() const {
  return model_number_.Get();
}
inline void NvmeSubsystemSpec::_internal_set_model_number(const std::string& value) {
  
  model_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::_internal_mutable_model_number() {
  
  return model_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemSpec::release_model_number() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemSpec.model_number)
  return model_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystemSpec::set_allocated_model_number(std::string* model_number) {
  if (model_number != nullptr) {
    
  } else {
    
  }
  model_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemSpec.model_number)
}

// int64 max_namespaces = 4;
inline void NvmeSubsystemSpec::clear_max_namespaces() {
  max_namespaces_ = int64_t{0};
}
inline int64_t NvmeSubsystemSpec::_internal_max_namespaces() const {
  return max_namespaces_;
}
inline int64_t NvmeSubsystemSpec::max_namespaces() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemSpec.max_namespaces)
  return _internal_max_namespaces();
}
inline void NvmeSubsystemSpec::_internal_set_max_namespaces(int64_t value) {
  
  max_namespaces_ = value;
}
inline void NvmeSubsystemSpec::set_max_namespaces(int64_t value) {
  _internal_set_max_namespaces(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemSpec.max_namespaces)
}

// -------------------------------------------------------------------

// NvmeSubsystemStatus

// string firmware_revision = 1;
inline void NvmeSubsystemStatus::clear_firmware_revision() {
  firmware_revision_.ClearToEmpty();
}
inline const std::string& NvmeSubsystemStatus::firmware_revision() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemStatus.firmware_revision)
  return _internal_firmware_revision();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystemStatus::set_firmware_revision(ArgT0&& arg0, ArgT... args) {
 
 firmware_revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemStatus.firmware_revision)
}
inline std::string* NvmeSubsystemStatus::mutable_firmware_revision() {
  std::string* _s = _internal_mutable_firmware_revision();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemStatus.firmware_revision)
  return _s;
}
inline const std::string& NvmeSubsystemStatus::_internal_firmware_revision() const {
  return firmware_revision_.Get();
}
inline void NvmeSubsystemStatus::_internal_set_firmware_revision(const std::string& value) {
  
  firmware_revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemStatus::_internal_mutable_firmware_revision() {
  
  return firmware_revision_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemStatus::release_firmware_revision() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemStatus.firmware_revision)
  return firmware_revision_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystemStatus::set_allocated_firmware_revision(std::string* firmware_revision) {
  if (firmware_revision != nullptr) {
    
  } else {
    
  }
  firmware_revision_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_revision,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firmware_revision_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firmware_revision_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemStatus.firmware_revision)
}

// bytes fru_guid = 2;
inline void NvmeSubsystemStatus::clear_fru_guid() {
  fru_guid_.ClearToEmpty();
}
inline const std::string& NvmeSubsystemStatus::fru_guid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemStatus.fru_guid)
  return _internal_fru_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeSubsystemStatus::set_fru_guid(ArgT0&& arg0, ArgT... args) {
 
 fru_guid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeSubsystemStatus.fru_guid)
}
inline std::string* NvmeSubsystemStatus::mutable_fru_guid() {
  std::string* _s = _internal_mutable_fru_guid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemStatus.fru_guid)
  return _s;
}
inline const std::string& NvmeSubsystemStatus::_internal_fru_guid() const {
  return fru_guid_.Get();
}
inline void NvmeSubsystemStatus::_internal_set_fru_guid(const std::string& value) {
  
  fru_guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemStatus::_internal_mutable_fru_guid() {
  
  return fru_guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeSubsystemStatus::release_fru_guid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemStatus.fru_guid)
  return fru_guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeSubsystemStatus::set_allocated_fru_guid(std::string* fru_guid) {
  if (fru_guid != nullptr) {
    
  } else {
    
  }
  fru_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fru_guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fru_guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fru_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemStatus.fru_guid)
}

// -------------------------------------------------------------------

// NvmeController

// string name = 1;
inline void NvmeController::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NvmeController::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeController.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeController::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeController.name)
}
inline std::string* NvmeController::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeController.name)
  return _s;
}
inline const std::string& NvmeController::_internal_name() const {
  return name_.Get();
}
inline void NvmeController::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeController::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeController::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeController.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeController::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeController.name)
}

// .opi_api.storage.v1.NvmeControllerSpec spec = 2;
inline bool NvmeController::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool NvmeController::has_spec() const {
  return _internal_has_spec();
}
inline void NvmeController::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeControllerSpec& NvmeController::_internal_spec() const {
  const ::opi_api::storage::v1::NvmeControllerSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeControllerSpec&>(
      ::opi_api::storage::v1::_NvmeControllerSpec_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeControllerSpec& NvmeController::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeController.spec)
  return _internal_spec();
}
inline void NvmeController::unsafe_arena_set_allocated_spec(
    ::opi_api::storage::v1::NvmeControllerSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeController.spec)
}
inline ::opi_api::storage::v1::NvmeControllerSpec* NvmeController::release_spec() {
  
  ::opi_api::storage::v1::NvmeControllerSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerSpec* NvmeController::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeController.spec)
  
  ::opi_api::storage::v1::NvmeControllerSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerSpec* NvmeController::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::storage::v1::NvmeControllerSpec* NvmeController::mutable_spec() {
  ::opi_api::storage::v1::NvmeControllerSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeController.spec)
  return _msg;
}
inline void NvmeController::set_allocated_spec(::opi_api::storage::v1::NvmeControllerSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeControllerSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeController.spec)
}

// .opi_api.storage.v1.NvmeControllerStatus status = 3;
inline bool NvmeController::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NvmeController::has_status() const {
  return _internal_has_status();
}
inline void NvmeController::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeControllerStatus& NvmeController::_internal_status() const {
  const ::opi_api::storage::v1::NvmeControllerStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeControllerStatus&>(
      ::opi_api::storage::v1::_NvmeControllerStatus_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeControllerStatus& NvmeController::status() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeController.status)
  return _internal_status();
}
inline void NvmeController::unsafe_arena_set_allocated_status(
    ::opi_api::storage::v1::NvmeControllerStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeController.status)
}
inline ::opi_api::storage::v1::NvmeControllerStatus* NvmeController::release_status() {
  
  ::opi_api::storage::v1::NvmeControllerStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerStatus* NvmeController::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeController.status)
  
  ::opi_api::storage::v1::NvmeControllerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeControllerStatus* NvmeController::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeControllerStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::storage::v1::NvmeControllerStatus* NvmeController::mutable_status() {
  ::opi_api::storage::v1::NvmeControllerStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeController.status)
  return _msg;
}
inline void NvmeController::set_allocated_status(::opi_api::storage::v1::NvmeControllerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeControllerStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeController.status)
}

// -------------------------------------------------------------------

// NvmeControllerSpec

// int32 nvme_controller_id = 1;
inline void NvmeControllerSpec::clear_nvme_controller_id() {
  nvme_controller_id_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_nvme_controller_id() const {
  return nvme_controller_id_;
}
inline int32_t NvmeControllerSpec::nvme_controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.nvme_controller_id)
  return _internal_nvme_controller_id();
}
inline void NvmeControllerSpec::_internal_set_nvme_controller_id(int32_t value) {
  
  nvme_controller_id_ = value;
}
inline void NvmeControllerSpec::set_nvme_controller_id(int32_t value) {
  _internal_set_nvme_controller_id(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.nvme_controller_id)
}

// .opi_api.common.v1.ObjectKey subsystem_id = 2;
inline bool NvmeControllerSpec::_internal_has_subsystem_id() const {
  return this != internal_default_instance() && subsystem_id_ != nullptr;
}
inline bool NvmeControllerSpec::has_subsystem_id() const {
  return _internal_has_subsystem_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerSpec::_internal_subsystem_id() const {
  const ::opi_api::common::v1::ObjectKey* p = subsystem_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerSpec::subsystem_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.subsystem_id)
  return _internal_subsystem_id();
}
inline void NvmeControllerSpec::unsafe_arena_set_allocated_subsystem_id(
    ::opi_api::common::v1::ObjectKey* subsystem_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  subsystem_id_ = subsystem_id;
  if (subsystem_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerSpec.subsystem_id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerSpec::release_subsystem_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerSpec::unsafe_arena_release_subsystem_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerSpec.subsystem_id)
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerSpec::_internal_mutable_subsystem_id() {
  
  if (subsystem_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    subsystem_id_ = p;
  }
  return subsystem_id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerSpec::mutable_subsystem_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_subsystem_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerSpec.subsystem_id)
  return _msg;
}
inline void NvmeControllerSpec::set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  if (subsystem_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id));
    if (message_arena != submessage_arena) {
      subsystem_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subsystem_id, submessage_arena);
    }
    
  } else {
    
  }
  subsystem_id_ = subsystem_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerSpec.subsystem_id)
}

// .opi_api.storage.v1.PciEndpoint pcie_id = 3;
inline bool NvmeControllerSpec::_internal_has_pcie_id() const {
  return this != internal_default_instance() && pcie_id_ != nullptr;
}
inline bool NvmeControllerSpec::has_pcie_id() const {
  return _internal_has_pcie_id();
}
inline const ::opi_api::storage::v1::PciEndpoint& NvmeControllerSpec::_internal_pcie_id() const {
  const ::opi_api::storage::v1::PciEndpoint* p = pcie_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::PciEndpoint&>(
      ::opi_api::storage::v1::_PciEndpoint_default_instance_);
}
inline const ::opi_api::storage::v1::PciEndpoint& NvmeControllerSpec::pcie_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.pcie_id)
  return _internal_pcie_id();
}
inline void NvmeControllerSpec::unsafe_arena_set_allocated_pcie_id(
    ::opi_api::storage::v1::PciEndpoint* pcie_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  pcie_id_ = pcie_id;
  if (pcie_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerSpec.pcie_id)
}
inline ::opi_api::storage::v1::PciEndpoint* NvmeControllerSpec::release_pcie_id() {
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* NvmeControllerSpec::unsafe_arena_release_pcie_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerSpec.pcie_id)
  
  ::opi_api::storage::v1::PciEndpoint* temp = pcie_id_;
  pcie_id_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::PciEndpoint* NvmeControllerSpec::_internal_mutable_pcie_id() {
  
  if (pcie_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::PciEndpoint>(GetArenaForAllocation());
    pcie_id_ = p;
  }
  return pcie_id_;
}
inline ::opi_api::storage::v1::PciEndpoint* NvmeControllerSpec::mutable_pcie_id() {
  ::opi_api::storage::v1::PciEndpoint* _msg = _internal_mutable_pcie_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerSpec.pcie_id)
  return _msg;
}
inline void NvmeControllerSpec::set_allocated_pcie_id(::opi_api::storage::v1::PciEndpoint* pcie_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id_);
  }
  if (pcie_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_id));
    if (message_arena != submessage_arena) {
      pcie_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_id, submessage_arena);
    }
    
  } else {
    
  }
  pcie_id_ = pcie_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerSpec.pcie_id)
}

// int32 max_nsq = 4;
inline void NvmeControllerSpec::clear_max_nsq() {
  max_nsq_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_max_nsq() const {
  return max_nsq_;
}
inline int32_t NvmeControllerSpec::max_nsq() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.max_nsq)
  return _internal_max_nsq();
}
inline void NvmeControllerSpec::_internal_set_max_nsq(int32_t value) {
  
  max_nsq_ = value;
}
inline void NvmeControllerSpec::set_max_nsq(int32_t value) {
  _internal_set_max_nsq(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.max_nsq)
}

// int32 max_ncq = 5;
inline void NvmeControllerSpec::clear_max_ncq() {
  max_ncq_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_max_ncq() const {
  return max_ncq_;
}
inline int32_t NvmeControllerSpec::max_ncq() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.max_ncq)
  return _internal_max_ncq();
}
inline void NvmeControllerSpec::_internal_set_max_ncq(int32_t value) {
  
  max_ncq_ = value;
}
inline void NvmeControllerSpec::set_max_ncq(int32_t value) {
  _internal_set_max_ncq(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.max_ncq)
}

// int32 sqes = 6;
inline void NvmeControllerSpec::clear_sqes() {
  sqes_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_sqes() const {
  return sqes_;
}
inline int32_t NvmeControllerSpec::sqes() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.sqes)
  return _internal_sqes();
}
inline void NvmeControllerSpec::_internal_set_sqes(int32_t value) {
  
  sqes_ = value;
}
inline void NvmeControllerSpec::set_sqes(int32_t value) {
  _internal_set_sqes(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.sqes)
}

// int32 cqes = 7;
inline void NvmeControllerSpec::clear_cqes() {
  cqes_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_cqes() const {
  return cqes_;
}
inline int32_t NvmeControllerSpec::cqes() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.cqes)
  return _internal_cqes();
}
inline void NvmeControllerSpec::_internal_set_cqes(int32_t value) {
  
  cqes_ = value;
}
inline void NvmeControllerSpec::set_cqes(int32_t value) {
  _internal_set_cqes(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.cqes)
}

// int32 max_namespaces = 8;
inline void NvmeControllerSpec::clear_max_namespaces() {
  max_namespaces_ = 0;
}
inline int32_t NvmeControllerSpec::_internal_max_namespaces() const {
  return max_namespaces_;
}
inline int32_t NvmeControllerSpec::max_namespaces() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.max_namespaces)
  return _internal_max_namespaces();
}
inline void NvmeControllerSpec::_internal_set_max_namespaces(int32_t value) {
  
  max_namespaces_ = value;
}
inline void NvmeControllerSpec::set_max_namespaces(int32_t value) {
  _internal_set_max_namespaces(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerSpec.max_namespaces)
}

// .opi_api.storage.v1.QosLimit min_limit = 9;
inline bool NvmeControllerSpec::_internal_has_min_limit() const {
  return this != internal_default_instance() && min_limit_ != nullptr;
}
inline bool NvmeControllerSpec::has_min_limit() const {
  return _internal_has_min_limit();
}
inline const ::opi_api::storage::v1::QosLimit& NvmeControllerSpec::_internal_min_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = min_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& NvmeControllerSpec::min_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.min_limit)
  return _internal_min_limit();
}
inline void NvmeControllerSpec::unsafe_arena_set_allocated_min_limit(
    ::opi_api::storage::v1::QosLimit* min_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_limit_);
  }
  min_limit_ = min_limit;
  if (min_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerSpec.min_limit)
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::release_min_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = min_limit_;
  min_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::unsafe_arena_release_min_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerSpec.min_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = min_limit_;
  min_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::_internal_mutable_min_limit() {
  
  if (min_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    min_limit_ = p;
  }
  return min_limit_;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::mutable_min_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_min_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerSpec.min_limit)
  return _msg;
}
inline void NvmeControllerSpec::set_allocated_min_limit(::opi_api::storage::v1::QosLimit* min_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_limit_);
  }
  if (min_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_limit));
    if (message_arena != submessage_arena) {
      min_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_limit, submessage_arena);
    }
    
  } else {
    
  }
  min_limit_ = min_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerSpec.min_limit)
}

// .opi_api.storage.v1.QosLimit max_limit = 10;
inline bool NvmeControllerSpec::_internal_has_max_limit() const {
  return this != internal_default_instance() && max_limit_ != nullptr;
}
inline bool NvmeControllerSpec::has_max_limit() const {
  return _internal_has_max_limit();
}
inline const ::opi_api::storage::v1::QosLimit& NvmeControllerSpec::_internal_max_limit() const {
  const ::opi_api::storage::v1::QosLimit* p = max_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::QosLimit&>(
      ::opi_api::storage::v1::_QosLimit_default_instance_);
}
inline const ::opi_api::storage::v1::QosLimit& NvmeControllerSpec::max_limit() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerSpec.max_limit)
  return _internal_max_limit();
}
inline void NvmeControllerSpec::unsafe_arena_set_allocated_max_limit(
    ::opi_api::storage::v1::QosLimit* max_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit_);
  }
  max_limit_ = max_limit;
  if (max_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerSpec.max_limit)
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::release_max_limit() {
  
  ::opi_api::storage::v1::QosLimit* temp = max_limit_;
  max_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::unsafe_arena_release_max_limit() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerSpec.max_limit)
  
  ::opi_api::storage::v1::QosLimit* temp = max_limit_;
  max_limit_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::_internal_mutable_max_limit() {
  
  if (max_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::QosLimit>(GetArenaForAllocation());
    max_limit_ = p;
  }
  return max_limit_;
}
inline ::opi_api::storage::v1::QosLimit* NvmeControllerSpec::mutable_max_limit() {
  ::opi_api::storage::v1::QosLimit* _msg = _internal_mutable_max_limit();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerSpec.max_limit)
  return _msg;
}
inline void NvmeControllerSpec::set_allocated_max_limit(::opi_api::storage::v1::QosLimit* max_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit_);
  }
  if (max_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit));
    if (message_arena != submessage_arena) {
      max_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_limit, submessage_arena);
    }
    
  } else {
    
  }
  max_limit_ = max_limit;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerSpec.max_limit)
}

// -------------------------------------------------------------------

// NvmeControllerStatus

// bool active = 1;
inline void NvmeControllerStatus::clear_active() {
  active_ = false;
}
inline bool NvmeControllerStatus::_internal_active() const {
  return active_;
}
inline bool NvmeControllerStatus::active() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerStatus.active)
  return _internal_active();
}
inline void NvmeControllerStatus::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void NvmeControllerStatus::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeControllerStatus.active)
}

// -------------------------------------------------------------------

// NvmeNamespace

// string name = 1;
inline void NvmeNamespace::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NvmeNamespace::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespace.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeNamespace::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespace.name)
}
inline std::string* NvmeNamespace::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespace.name)
  return _s;
}
inline const std::string& NvmeNamespace::_internal_name() const {
  return name_.Get();
}
inline void NvmeNamespace::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeNamespace::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeNamespace::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespace.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeNamespace::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespace.name)
}

// .opi_api.storage.v1.NvmeNamespaceSpec spec = 2;
inline bool NvmeNamespace::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool NvmeNamespace::has_spec() const {
  return _internal_has_spec();
}
inline void NvmeNamespace::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeNamespaceSpec& NvmeNamespace::_internal_spec() const {
  const ::opi_api::storage::v1::NvmeNamespaceSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeNamespaceSpec&>(
      ::opi_api::storage::v1::_NvmeNamespaceSpec_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeNamespaceSpec& NvmeNamespace::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespace.spec)
  return _internal_spec();
}
inline void NvmeNamespace::unsafe_arena_set_allocated_spec(
    ::opi_api::storage::v1::NvmeNamespaceSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespace.spec)
}
inline ::opi_api::storage::v1::NvmeNamespaceSpec* NvmeNamespace::release_spec() {
  
  ::opi_api::storage::v1::NvmeNamespaceSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespaceSpec* NvmeNamespace::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespace.spec)
  
  ::opi_api::storage::v1::NvmeNamespaceSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespaceSpec* NvmeNamespace::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::storage::v1::NvmeNamespaceSpec* NvmeNamespace::mutable_spec() {
  ::opi_api::storage::v1::NvmeNamespaceSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespace.spec)
  return _msg;
}
inline void NvmeNamespace::set_allocated_spec(::opi_api::storage::v1::NvmeNamespaceSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeNamespaceSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespace.spec)
}

// .opi_api.storage.v1.NvmeNamespaceStatus status = 3;
inline bool NvmeNamespace::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NvmeNamespace::has_status() const {
  return _internal_has_status();
}
inline void NvmeNamespace::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeNamespaceStatus& NvmeNamespace::_internal_status() const {
  const ::opi_api::storage::v1::NvmeNamespaceStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeNamespaceStatus&>(
      ::opi_api::storage::v1::_NvmeNamespaceStatus_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeNamespaceStatus& NvmeNamespace::status() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespace.status)
  return _internal_status();
}
inline void NvmeNamespace::unsafe_arena_set_allocated_status(
    ::opi_api::storage::v1::NvmeNamespaceStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespace.status)
}
inline ::opi_api::storage::v1::NvmeNamespaceStatus* NvmeNamespace::release_status() {
  
  ::opi_api::storage::v1::NvmeNamespaceStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespaceStatus* NvmeNamespace::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespace.status)
  
  ::opi_api::storage::v1::NvmeNamespaceStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespaceStatus* NvmeNamespace::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespaceStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::storage::v1::NvmeNamespaceStatus* NvmeNamespace::mutable_status() {
  ::opi_api::storage::v1::NvmeNamespaceStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespace.status)
  return _msg;
}
inline void NvmeNamespace::set_allocated_status(::opi_api::storage::v1::NvmeNamespaceStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeNamespaceStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespace.status)
}

// -------------------------------------------------------------------

// NvmeNamespaceSpec

// .opi_api.common.v1.ObjectKey subsystem_id = 1;
inline bool NvmeNamespaceSpec::_internal_has_subsystem_id() const {
  return this != internal_default_instance() && subsystem_id_ != nullptr;
}
inline bool NvmeNamespaceSpec::has_subsystem_id() const {
  return _internal_has_subsystem_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceSpec::_internal_subsystem_id() const {
  const ::opi_api::common::v1::ObjectKey* p = subsystem_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceSpec::subsystem_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.subsystem_id)
  return _internal_subsystem_id();
}
inline void NvmeNamespaceSpec::unsafe_arena_set_allocated_subsystem_id(
    ::opi_api::common::v1::ObjectKey* subsystem_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  subsystem_id_ = subsystem_id;
  if (subsystem_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.subsystem_id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::release_subsystem_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::unsafe_arena_release_subsystem_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceSpec.subsystem_id)
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::_internal_mutable_subsystem_id() {
  
  if (subsystem_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    subsystem_id_ = p;
  }
  return subsystem_id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::mutable_subsystem_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_subsystem_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceSpec.subsystem_id)
  return _msg;
}
inline void NvmeNamespaceSpec::set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  if (subsystem_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id));
    if (message_arena != submessage_arena) {
      subsystem_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subsystem_id, submessage_arena);
    }
    
  } else {
    
  }
  subsystem_id_ = subsystem_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.subsystem_id)
}

// int32 host_nsid = 2;
inline void NvmeNamespaceSpec::clear_host_nsid() {
  host_nsid_ = 0;
}
inline int32_t NvmeNamespaceSpec::_internal_host_nsid() const {
  return host_nsid_;
}
inline int32_t NvmeNamespaceSpec::host_nsid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.host_nsid)
  return _internal_host_nsid();
}
inline void NvmeNamespaceSpec::_internal_set_host_nsid(int32_t value) {
  
  host_nsid_ = value;
}
inline void NvmeNamespaceSpec::set_host_nsid(int32_t value) {
  _internal_set_host_nsid(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespaceSpec.host_nsid)
}

// string nguid = 3;
inline void NvmeNamespaceSpec::clear_nguid() {
  nguid_.ClearToEmpty();
}
inline const std::string& NvmeNamespaceSpec::nguid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.nguid)
  return _internal_nguid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NvmeNamespaceSpec::set_nguid(ArgT0&& arg0, ArgT... args) {
 
 nguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespaceSpec.nguid)
}
inline std::string* NvmeNamespaceSpec::mutable_nguid() {
  std::string* _s = _internal_mutable_nguid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceSpec.nguid)
  return _s;
}
inline const std::string& NvmeNamespaceSpec::_internal_nguid() const {
  return nguid_.Get();
}
inline void NvmeNamespaceSpec::_internal_set_nguid(const std::string& value) {
  
  nguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NvmeNamespaceSpec::_internal_mutable_nguid() {
  
  return nguid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NvmeNamespaceSpec::release_nguid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceSpec.nguid)
  return nguid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NvmeNamespaceSpec::set_allocated_nguid(std::string* nguid) {
  if (nguid != nullptr) {
    
  } else {
    
  }
  nguid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nguid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nguid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nguid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.nguid)
}

// int64 eui64 = 4;
inline void NvmeNamespaceSpec::clear_eui64() {
  eui64_ = int64_t{0};
}
inline int64_t NvmeNamespaceSpec::_internal_eui64() const {
  return eui64_;
}
inline int64_t NvmeNamespaceSpec::eui64() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.eui64)
  return _internal_eui64();
}
inline void NvmeNamespaceSpec::_internal_set_eui64(int64_t value) {
  
  eui64_ = value;
}
inline void NvmeNamespaceSpec::set_eui64(int64_t value) {
  _internal_set_eui64(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespaceSpec.eui64)
}

// .opi_api.common.v1.Uuid uuid = 5;
inline bool NvmeNamespaceSpec::_internal_has_uuid() const {
  return this != internal_default_instance() && uuid_ != nullptr;
}
inline bool NvmeNamespaceSpec::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::opi_api::common::v1::Uuid& NvmeNamespaceSpec::_internal_uuid() const {
  const ::opi_api::common::v1::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::Uuid&>(
      ::opi_api::common::v1::_Uuid_default_instance_);
}
inline const ::opi_api::common::v1::Uuid& NvmeNamespaceSpec::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.uuid)
  return _internal_uuid();
}
inline void NvmeNamespaceSpec::unsafe_arena_set_allocated_uuid(
    ::opi_api::common::v1::Uuid* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.uuid)
}
inline ::opi_api::common::v1::Uuid* NvmeNamespaceSpec::release_uuid() {
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::Uuid* NvmeNamespaceSpec::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceSpec.uuid)
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::Uuid* NvmeNamespaceSpec::_internal_mutable_uuid() {
  
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::Uuid>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::opi_api::common::v1::Uuid* NvmeNamespaceSpec::mutable_uuid() {
  ::opi_api::common::v1::Uuid* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceSpec.uuid)
  return _msg;
}
inline void NvmeNamespaceSpec::set_allocated_uuid(::opi_api::common::v1::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    
  } else {
    
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.uuid)
}

// .opi_api.common.v1.ObjectKey volume_id = 6;
inline bool NvmeNamespaceSpec::_internal_has_volume_id() const {
  return this != internal_default_instance() && volume_id_ != nullptr;
}
inline bool NvmeNamespaceSpec::has_volume_id() const {
  return _internal_has_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceSpec::_internal_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceSpec::volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceSpec.volume_id)
  return _internal_volume_id();
}
inline void NvmeNamespaceSpec::unsafe_arena_set_allocated_volume_id(
    ::opi_api::common::v1::ObjectKey* volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  volume_id_ = volume_id;
  if (volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.volume_id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::release_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::unsafe_arena_release_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceSpec.volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::_internal_mutable_volume_id() {
  
  if (volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    volume_id_ = p;
  }
  return volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceSpec::mutable_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceSpec.volume_id)
  return _msg;
}
inline void NvmeNamespaceSpec::set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  if (volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id));
    if (message_arena != submessage_arena) {
      volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume_id, submessage_arena);
    }
    
  } else {
    
  }
  volume_id_ = volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceSpec.volume_id)
}

// -------------------------------------------------------------------

// NvmeNamespaceStatus

// .opi_api.storage.v1.NvmeNamespacePciState pci_state = 1;
inline void NvmeNamespaceStatus::clear_pci_state() {
  pci_state_ = 0;
}
inline ::opi_api::storage::v1::NvmeNamespacePciState NvmeNamespaceStatus::_internal_pci_state() const {
  return static_cast< ::opi_api::storage::v1::NvmeNamespacePciState >(pci_state_);
}
inline ::opi_api::storage::v1::NvmeNamespacePciState NvmeNamespaceStatus::pci_state() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceStatus.pci_state)
  return _internal_pci_state();
}
inline void NvmeNamespaceStatus::_internal_set_pci_state(::opi_api::storage::v1::NvmeNamespacePciState value) {
  
  pci_state_ = value;
}
inline void NvmeNamespaceStatus::set_pci_state(::opi_api::storage::v1::NvmeNamespacePciState value) {
  _internal_set_pci_state(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespaceStatus.pci_state)
}

// .opi_api.storage.v1.NvmeNamespacePciOperState pci_oper_state = 2;
inline void NvmeNamespaceStatus::clear_pci_oper_state() {
  pci_oper_state_ = 0;
}
inline ::opi_api::storage::v1::NvmeNamespacePciOperState NvmeNamespaceStatus::_internal_pci_oper_state() const {
  return static_cast< ::opi_api::storage::v1::NvmeNamespacePciOperState >(pci_oper_state_);
}
inline ::opi_api::storage::v1::NvmeNamespacePciOperState NvmeNamespaceStatus::pci_oper_state() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceStatus.pci_oper_state)
  return _internal_pci_oper_state();
}
inline void NvmeNamespaceStatus::_internal_set_pci_oper_state(::opi_api::storage::v1::NvmeNamespacePciOperState value) {
  
  pci_oper_state_ = value;
}
inline void NvmeNamespaceStatus::set_pci_oper_state(::opi_api::storage::v1::NvmeNamespacePciOperState value) {
  _internal_set_pci_oper_state(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NvmeNamespaceStatus.pci_oper_state)
}

// -------------------------------------------------------------------

// CreateNvmeSubsystemRequest

// .opi_api.storage.v1.NvmeSubsystem nvme_subsystem = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNvmeSubsystemRequest::_internal_has_nvme_subsystem() const {
  return this != internal_default_instance() && nvme_subsystem_ != nullptr;
}
inline bool CreateNvmeSubsystemRequest::has_nvme_subsystem() const {
  return _internal_has_nvme_subsystem();
}
inline void CreateNvmeSubsystemRequest::clear_nvme_subsystem() {
  if (GetArenaForAllocation() == nullptr && nvme_subsystem_ != nullptr) {
    delete nvme_subsystem_;
  }
  nvme_subsystem_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeSubsystem& CreateNvmeSubsystemRequest::_internal_nvme_subsystem() const {
  const ::opi_api::storage::v1::NvmeSubsystem* p = nvme_subsystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeSubsystem&>(
      ::opi_api::storage::v1::_NvmeSubsystem_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeSubsystem& CreateNvmeSubsystemRequest::nvme_subsystem() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem)
  return _internal_nvme_subsystem();
}
inline void CreateNvmeSubsystemRequest::unsafe_arena_set_allocated_nvme_subsystem(
    ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_subsystem_);
  }
  nvme_subsystem_ = nvme_subsystem;
  if (nvme_subsystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem)
}
inline ::opi_api::storage::v1::NvmeSubsystem* CreateNvmeSubsystemRequest::release_nvme_subsystem() {
  
  ::opi_api::storage::v1::NvmeSubsystem* temp = nvme_subsystem_;
  nvme_subsystem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystem* CreateNvmeSubsystemRequest::unsafe_arena_release_nvme_subsystem() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem)
  
  ::opi_api::storage::v1::NvmeSubsystem* temp = nvme_subsystem_;
  nvme_subsystem_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystem* CreateNvmeSubsystemRequest::_internal_mutable_nvme_subsystem() {
  
  if (nvme_subsystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystem>(GetArenaForAllocation());
    nvme_subsystem_ = p;
  }
  return nvme_subsystem_;
}
inline ::opi_api::storage::v1::NvmeSubsystem* CreateNvmeSubsystemRequest::mutable_nvme_subsystem() {
  ::opi_api::storage::v1::NvmeSubsystem* _msg = _internal_mutable_nvme_subsystem();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem)
  return _msg;
}
inline void CreateNvmeSubsystemRequest::set_allocated_nvme_subsystem(::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_subsystem_;
  }
  if (nvme_subsystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeSubsystem>::GetOwningArena(nvme_subsystem);
    if (message_arena != submessage_arena) {
      nvme_subsystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_subsystem, submessage_arena);
    }
    
  } else {
    
  }
  nvme_subsystem_ = nvme_subsystem;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem)
}

// string nvme_subsystem_id = 3;
inline void CreateNvmeSubsystemRequest::clear_nvme_subsystem_id() {
  nvme_subsystem_id_.ClearToEmpty();
}
inline const std::string& CreateNvmeSubsystemRequest::nvme_subsystem_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem_id)
  return _internal_nvme_subsystem_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNvmeSubsystemRequest::set_nvme_subsystem_id(ArgT0&& arg0, ArgT... args) {
 
 nvme_subsystem_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem_id)
}
inline std::string* CreateNvmeSubsystemRequest::mutable_nvme_subsystem_id() {
  std::string* _s = _internal_mutable_nvme_subsystem_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem_id)
  return _s;
}
inline const std::string& CreateNvmeSubsystemRequest::_internal_nvme_subsystem_id() const {
  return nvme_subsystem_id_.Get();
}
inline void CreateNvmeSubsystemRequest::_internal_set_nvme_subsystem_id(const std::string& value) {
  
  nvme_subsystem_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNvmeSubsystemRequest::_internal_mutable_nvme_subsystem_id() {
  
  return nvme_subsystem_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNvmeSubsystemRequest::release_nvme_subsystem_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem_id)
  return nvme_subsystem_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNvmeSubsystemRequest::set_allocated_nvme_subsystem_id(std::string* nvme_subsystem_id) {
  if (nvme_subsystem_id != nullptr) {
    
  } else {
    
  }
  nvme_subsystem_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nvme_subsystem_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nvme_subsystem_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nvme_subsystem_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem_id)
}

// -------------------------------------------------------------------

// DeleteNvmeSubsystemRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNvmeSubsystemRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNvmeSubsystemRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeSubsystemRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNvmeSubsystemRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeSubsystemRequest.name)
}
inline std::string* DeleteNvmeSubsystemRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNvmeSubsystemRequest.name)
  return _s;
}
inline const std::string& DeleteNvmeSubsystemRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNvmeSubsystemRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNvmeSubsystemRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNvmeSubsystemRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNvmeSubsystemRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNvmeSubsystemRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNvmeSubsystemRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNvmeSubsystemRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNvmeSubsystemRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNvmeSubsystemRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeSubsystemRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNvmeSubsystemRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNvmeSubsystemRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeSubsystemRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNvmeSubsystemRequest

// .opi_api.storage.v1.NvmeSubsystem nvme_subsystem = 1;
inline bool UpdateNvmeSubsystemRequest::_internal_has_nvme_subsystem() const {
  return this != internal_default_instance() && nvme_subsystem_ != nullptr;
}
inline bool UpdateNvmeSubsystemRequest::has_nvme_subsystem() const {
  return _internal_has_nvme_subsystem();
}
inline void UpdateNvmeSubsystemRequest::clear_nvme_subsystem() {
  if (GetArenaForAllocation() == nullptr && nvme_subsystem_ != nullptr) {
    delete nvme_subsystem_;
  }
  nvme_subsystem_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeSubsystem& UpdateNvmeSubsystemRequest::_internal_nvme_subsystem() const {
  const ::opi_api::storage::v1::NvmeSubsystem* p = nvme_subsystem_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeSubsystem&>(
      ::opi_api::storage::v1::_NvmeSubsystem_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeSubsystem& UpdateNvmeSubsystemRequest::nvme_subsystem() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem)
  return _internal_nvme_subsystem();
}
inline void UpdateNvmeSubsystemRequest::unsafe_arena_set_allocated_nvme_subsystem(
    ::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_subsystem_);
  }
  nvme_subsystem_ = nvme_subsystem;
  if (nvme_subsystem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem)
}
inline ::opi_api::storage::v1::NvmeSubsystem* UpdateNvmeSubsystemRequest::release_nvme_subsystem() {
  
  ::opi_api::storage::v1::NvmeSubsystem* temp = nvme_subsystem_;
  nvme_subsystem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystem* UpdateNvmeSubsystemRequest::unsafe_arena_release_nvme_subsystem() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem)
  
  ::opi_api::storage::v1::NvmeSubsystem* temp = nvme_subsystem_;
  nvme_subsystem_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeSubsystem* UpdateNvmeSubsystemRequest::_internal_mutable_nvme_subsystem() {
  
  if (nvme_subsystem_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeSubsystem>(GetArenaForAllocation());
    nvme_subsystem_ = p;
  }
  return nvme_subsystem_;
}
inline ::opi_api::storage::v1::NvmeSubsystem* UpdateNvmeSubsystemRequest::mutable_nvme_subsystem() {
  ::opi_api::storage::v1::NvmeSubsystem* _msg = _internal_mutable_nvme_subsystem();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem)
  return _msg;
}
inline void UpdateNvmeSubsystemRequest::set_allocated_nvme_subsystem(::opi_api::storage::v1::NvmeSubsystem* nvme_subsystem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_subsystem_;
  }
  if (nvme_subsystem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeSubsystem>::GetOwningArena(nvme_subsystem);
    if (message_arena != submessage_arena) {
      nvme_subsystem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_subsystem, submessage_arena);
    }
    
  } else {
    
  }
  nvme_subsystem_ = nvme_subsystem;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNvmeSubsystemRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNvmeSubsystemRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeSubsystemRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeSubsystemRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNvmeSubsystemRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeSubsystemRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeSubsystemRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeSubsystemRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeSubsystemRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask)
  return _msg;
}
inline void UpdateNvmeSubsystemRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNvmeSubsystemsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNvmeSubsystemsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNvmeSubsystemsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeSubsystemsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeSubsystemsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeSubsystemsRequest.parent)
}
inline std::string* ListNvmeSubsystemsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeSubsystemsRequest.parent)
  return _s;
}
inline const std::string& ListNvmeSubsystemsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNvmeSubsystemsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeSubsystemsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeSubsystemsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeSubsystemsRequest.parent)
}

// int32 page_size = 2;
inline void ListNvmeSubsystemsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNvmeSubsystemsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNvmeSubsystemsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_size)
  return _internal_page_size();
}
inline void ListNvmeSubsystemsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNvmeSubsystemsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_size)
}

// string page_token = 3;
inline void ListNvmeSubsystemsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeSubsystemsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeSubsystemsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_token)
}
inline std::string* ListNvmeSubsystemsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_token)
  return _s;
}
inline const std::string& ListNvmeSubsystemsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNvmeSubsystemsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeSubsystemsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeSubsystemsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNvmeSubsystemsResponse

// repeated .opi_api.storage.v1.NvmeSubsystem nvme_subsystems = 1;
inline int ListNvmeSubsystemsResponse::_internal_nvme_subsystems_size() const {
  return nvme_subsystems_.size();
}
inline int ListNvmeSubsystemsResponse::nvme_subsystems_size() const {
  return _internal_nvme_subsystems_size();
}
inline void ListNvmeSubsystemsResponse::clear_nvme_subsystems() {
  nvme_subsystems_.Clear();
}
inline ::opi_api::storage::v1::NvmeSubsystem* ListNvmeSubsystemsResponse::mutable_nvme_subsystems(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems)
  return nvme_subsystems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeSubsystem >*
ListNvmeSubsystemsResponse::mutable_nvme_subsystems() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems)
  return &nvme_subsystems_;
}
inline const ::opi_api::storage::v1::NvmeSubsystem& ListNvmeSubsystemsResponse::_internal_nvme_subsystems(int index) const {
  return nvme_subsystems_.Get(index);
}
inline const ::opi_api::storage::v1::NvmeSubsystem& ListNvmeSubsystemsResponse::nvme_subsystems(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems)
  return _internal_nvme_subsystems(index);
}
inline ::opi_api::storage::v1::NvmeSubsystem* ListNvmeSubsystemsResponse::_internal_add_nvme_subsystems() {
  return nvme_subsystems_.Add();
}
inline ::opi_api::storage::v1::NvmeSubsystem* ListNvmeSubsystemsResponse::add_nvme_subsystems() {
  ::opi_api::storage::v1::NvmeSubsystem* _add = _internal_add_nvme_subsystems();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeSubsystem >&
ListNvmeSubsystemsResponse::nvme_subsystems() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems)
  return nvme_subsystems_;
}

// string next_page_token = 2;
inline void ListNvmeSubsystemsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeSubsystemsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeSubsystemsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeSubsystemsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeSubsystemsResponse.next_page_token)
}
inline std::string* ListNvmeSubsystemsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeSubsystemsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNvmeSubsystemsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNvmeSubsystemsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeSubsystemsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeSubsystemsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeSubsystemsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeSubsystemsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNvmeSubsystemRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNvmeSubsystemRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNvmeSubsystemRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNvmeSubsystemRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNvmeSubsystemRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNvmeSubsystemRequest.name)
}
inline std::string* GetNvmeSubsystemRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNvmeSubsystemRequest.name)
  return _s;
}
inline const std::string& GetNvmeSubsystemRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNvmeSubsystemRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNvmeSubsystemRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNvmeSubsystemRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNvmeSubsystemRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNvmeSubsystemRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNvmeSubsystemRequest.name)
}

// -------------------------------------------------------------------

// NvmeSubsystemStatsRequest

// .opi_api.common.v1.ObjectKey subsystem_id = 1;
inline bool NvmeSubsystemStatsRequest::_internal_has_subsystem_id() const {
  return this != internal_default_instance() && subsystem_id_ != nullptr;
}
inline bool NvmeSubsystemStatsRequest::has_subsystem_id() const {
  return _internal_has_subsystem_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeSubsystemStatsRequest::_internal_subsystem_id() const {
  const ::opi_api::common::v1::ObjectKey* p = subsystem_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeSubsystemStatsRequest::subsystem_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemStatsRequest.subsystem_id)
  return _internal_subsystem_id();
}
inline void NvmeSubsystemStatsRequest::unsafe_arena_set_allocated_subsystem_id(
    ::opi_api::common::v1::ObjectKey* subsystem_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  subsystem_id_ = subsystem_id;
  if (subsystem_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeSubsystemStatsRequest.subsystem_id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeSubsystemStatsRequest::release_subsystem_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeSubsystemStatsRequest::unsafe_arena_release_subsystem_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemStatsRequest.subsystem_id)
  
  ::opi_api::common::v1::ObjectKey* temp = subsystem_id_;
  subsystem_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeSubsystemStatsRequest::_internal_mutable_subsystem_id() {
  
  if (subsystem_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    subsystem_id_ = p;
  }
  return subsystem_id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeSubsystemStatsRequest::mutable_subsystem_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_subsystem_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemStatsRequest.subsystem_id)
  return _msg;
}
inline void NvmeSubsystemStatsRequest::set_allocated_subsystem_id(::opi_api::common::v1::ObjectKey* subsystem_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id_);
  }
  if (subsystem_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subsystem_id));
    if (message_arena != submessage_arena) {
      subsystem_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subsystem_id, submessage_arena);
    }
    
  } else {
    
  }
  subsystem_id_ = subsystem_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemStatsRequest.subsystem_id)
}

// -------------------------------------------------------------------

// NvmeSubsystemStatsResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool NvmeSubsystemStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool NvmeSubsystemStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeSubsystemStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeSubsystemStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeSubsystemStatsResponse.stats)
  return _internal_stats();
}
inline void NvmeSubsystemStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeSubsystemStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* NvmeSubsystemStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeSubsystemStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeSubsystemStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeSubsystemStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeSubsystemStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeSubsystemStatsResponse.stats)
  return _msg;
}
inline void NvmeSubsystemStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeSubsystemStatsResponse.stats)
}

// -------------------------------------------------------------------

// CreateNvmeControllerRequest

// .opi_api.storage.v1.NvmeController nvme_controller = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNvmeControllerRequest::_internal_has_nvme_controller() const {
  return this != internal_default_instance() && nvme_controller_ != nullptr;
}
inline bool CreateNvmeControllerRequest::has_nvme_controller() const {
  return _internal_has_nvme_controller();
}
inline void CreateNvmeControllerRequest::clear_nvme_controller() {
  if (GetArenaForAllocation() == nullptr && nvme_controller_ != nullptr) {
    delete nvme_controller_;
  }
  nvme_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeController& CreateNvmeControllerRequest::_internal_nvme_controller() const {
  const ::opi_api::storage::v1::NvmeController* p = nvme_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeController&>(
      ::opi_api::storage::v1::_NvmeController_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeController& CreateNvmeControllerRequest::nvme_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller)
  return _internal_nvme_controller();
}
inline void CreateNvmeControllerRequest::unsafe_arena_set_allocated_nvme_controller(
    ::opi_api::storage::v1::NvmeController* nvme_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_controller_);
  }
  nvme_controller_ = nvme_controller;
  if (nvme_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller)
}
inline ::opi_api::storage::v1::NvmeController* CreateNvmeControllerRequest::release_nvme_controller() {
  
  ::opi_api::storage::v1::NvmeController* temp = nvme_controller_;
  nvme_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeController* CreateNvmeControllerRequest::unsafe_arena_release_nvme_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller)
  
  ::opi_api::storage::v1::NvmeController* temp = nvme_controller_;
  nvme_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeController* CreateNvmeControllerRequest::_internal_mutable_nvme_controller() {
  
  if (nvme_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeController>(GetArenaForAllocation());
    nvme_controller_ = p;
  }
  return nvme_controller_;
}
inline ::opi_api::storage::v1::NvmeController* CreateNvmeControllerRequest::mutable_nvme_controller() {
  ::opi_api::storage::v1::NvmeController* _msg = _internal_mutable_nvme_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller)
  return _msg;
}
inline void CreateNvmeControllerRequest::set_allocated_nvme_controller(::opi_api::storage::v1::NvmeController* nvme_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_controller_;
  }
  if (nvme_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeController>::GetOwningArena(nvme_controller);
    if (message_arena != submessage_arena) {
      nvme_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_controller, submessage_arena);
    }
    
  } else {
    
  }
  nvme_controller_ = nvme_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller)
}

// string nvme_controller_id = 3;
inline void CreateNvmeControllerRequest::clear_nvme_controller_id() {
  nvme_controller_id_.ClearToEmpty();
}
inline const std::string& CreateNvmeControllerRequest::nvme_controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller_id)
  return _internal_nvme_controller_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNvmeControllerRequest::set_nvme_controller_id(ArgT0&& arg0, ArgT... args) {
 
 nvme_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller_id)
}
inline std::string* CreateNvmeControllerRequest::mutable_nvme_controller_id() {
  std::string* _s = _internal_mutable_nvme_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller_id)
  return _s;
}
inline const std::string& CreateNvmeControllerRequest::_internal_nvme_controller_id() const {
  return nvme_controller_id_.Get();
}
inline void CreateNvmeControllerRequest::_internal_set_nvme_controller_id(const std::string& value) {
  
  nvme_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNvmeControllerRequest::_internal_mutable_nvme_controller_id() {
  
  return nvme_controller_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNvmeControllerRequest::release_nvme_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller_id)
  return nvme_controller_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNvmeControllerRequest::set_allocated_nvme_controller_id(std::string* nvme_controller_id) {
  if (nvme_controller_id != nullptr) {
    
  } else {
    
  }
  nvme_controller_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nvme_controller_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nvme_controller_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nvme_controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller_id)
}

// -------------------------------------------------------------------

// DeleteNvmeControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNvmeControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNvmeControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNvmeControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeControllerRequest.name)
}
inline std::string* DeleteNvmeControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNvmeControllerRequest.name)
  return _s;
}
inline const std::string& DeleteNvmeControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNvmeControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNvmeControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNvmeControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNvmeControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNvmeControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNvmeControllerRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNvmeControllerRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNvmeControllerRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNvmeControllerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeControllerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNvmeControllerRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNvmeControllerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeControllerRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNvmeControllerRequest

// .opi_api.storage.v1.NvmeController nvme_controller = 1;
inline bool UpdateNvmeControllerRequest::_internal_has_nvme_controller() const {
  return this != internal_default_instance() && nvme_controller_ != nullptr;
}
inline bool UpdateNvmeControllerRequest::has_nvme_controller() const {
  return _internal_has_nvme_controller();
}
inline void UpdateNvmeControllerRequest::clear_nvme_controller() {
  if (GetArenaForAllocation() == nullptr && nvme_controller_ != nullptr) {
    delete nvme_controller_;
  }
  nvme_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeController& UpdateNvmeControllerRequest::_internal_nvme_controller() const {
  const ::opi_api::storage::v1::NvmeController* p = nvme_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeController&>(
      ::opi_api::storage::v1::_NvmeController_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeController& UpdateNvmeControllerRequest::nvme_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller)
  return _internal_nvme_controller();
}
inline void UpdateNvmeControllerRequest::unsafe_arena_set_allocated_nvme_controller(
    ::opi_api::storage::v1::NvmeController* nvme_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_controller_);
  }
  nvme_controller_ = nvme_controller;
  if (nvme_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller)
}
inline ::opi_api::storage::v1::NvmeController* UpdateNvmeControllerRequest::release_nvme_controller() {
  
  ::opi_api::storage::v1::NvmeController* temp = nvme_controller_;
  nvme_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeController* UpdateNvmeControllerRequest::unsafe_arena_release_nvme_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller)
  
  ::opi_api::storage::v1::NvmeController* temp = nvme_controller_;
  nvme_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeController* UpdateNvmeControllerRequest::_internal_mutable_nvme_controller() {
  
  if (nvme_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeController>(GetArenaForAllocation());
    nvme_controller_ = p;
  }
  return nvme_controller_;
}
inline ::opi_api::storage::v1::NvmeController* UpdateNvmeControllerRequest::mutable_nvme_controller() {
  ::opi_api::storage::v1::NvmeController* _msg = _internal_mutable_nvme_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller)
  return _msg;
}
inline void UpdateNvmeControllerRequest::set_allocated_nvme_controller(::opi_api::storage::v1::NvmeController* nvme_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_controller_;
  }
  if (nvme_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeController>::GetOwningArena(nvme_controller);
    if (message_arena != submessage_arena) {
      nvme_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_controller, submessage_arena);
    }
    
  } else {
    
  }
  nvme_controller_ = nvme_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNvmeControllerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNvmeControllerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeControllerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeControllerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNvmeControllerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeControllerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeControllerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeControllerRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeControllerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask)
  return _msg;
}
inline void UpdateNvmeControllerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNvmeControllersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNvmeControllersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNvmeControllersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeControllersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeControllersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeControllersRequest.parent)
}
inline std::string* ListNvmeControllersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeControllersRequest.parent)
  return _s;
}
inline const std::string& ListNvmeControllersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNvmeControllersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeControllersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeControllersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeControllersRequest.parent)
}

// int32 page_size = 2;
inline void ListNvmeControllersRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNvmeControllersRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNvmeControllersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeControllersRequest.page_size)
  return _internal_page_size();
}
inline void ListNvmeControllersRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNvmeControllersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeControllersRequest.page_size)
}

// string page_token = 3;
inline void ListNvmeControllersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeControllersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeControllersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeControllersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeControllersRequest.page_token)
}
inline std::string* ListNvmeControllersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeControllersRequest.page_token)
  return _s;
}
inline const std::string& ListNvmeControllersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNvmeControllersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeControllersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeControllersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeControllersRequest.page_token)
}

// -------------------------------------------------------------------

// ListNvmeControllersResponse

// repeated .opi_api.storage.v1.NvmeController nvme_controllers = 1;
inline int ListNvmeControllersResponse::_internal_nvme_controllers_size() const {
  return nvme_controllers_.size();
}
inline int ListNvmeControllersResponse::nvme_controllers_size() const {
  return _internal_nvme_controllers_size();
}
inline void ListNvmeControllersResponse::clear_nvme_controllers() {
  nvme_controllers_.Clear();
}
inline ::opi_api::storage::v1::NvmeController* ListNvmeControllersResponse::mutable_nvme_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers)
  return nvme_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeController >*
ListNvmeControllersResponse::mutable_nvme_controllers() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers)
  return &nvme_controllers_;
}
inline const ::opi_api::storage::v1::NvmeController& ListNvmeControllersResponse::_internal_nvme_controllers(int index) const {
  return nvme_controllers_.Get(index);
}
inline const ::opi_api::storage::v1::NvmeController& ListNvmeControllersResponse::nvme_controllers(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers)
  return _internal_nvme_controllers(index);
}
inline ::opi_api::storage::v1::NvmeController* ListNvmeControllersResponse::_internal_add_nvme_controllers() {
  return nvme_controllers_.Add();
}
inline ::opi_api::storage::v1::NvmeController* ListNvmeControllersResponse::add_nvme_controllers() {
  ::opi_api::storage::v1::NvmeController* _add = _internal_add_nvme_controllers();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeController >&
ListNvmeControllersResponse::nvme_controllers() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers)
  return nvme_controllers_;
}

// string next_page_token = 2;
inline void ListNvmeControllersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeControllersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeControllersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeControllersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeControllersResponse.next_page_token)
}
inline std::string* ListNvmeControllersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeControllersResponse.next_page_token)
  return _s;
}
inline const std::string& ListNvmeControllersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNvmeControllersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeControllersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeControllersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeControllersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeControllersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNvmeControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNvmeControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNvmeControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNvmeControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNvmeControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNvmeControllerRequest.name)
}
inline std::string* GetNvmeControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNvmeControllerRequest.name)
  return _s;
}
inline const std::string& GetNvmeControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNvmeControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNvmeControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNvmeControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNvmeControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNvmeControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNvmeControllerRequest.name)
}

// -------------------------------------------------------------------

// NvmeControllerStatsRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NvmeControllerStatsRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NvmeControllerStatsRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerStatsRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerStatsRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerStatsRequest.id)
  return _internal_id();
}
inline void NvmeControllerStatsRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerStatsRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerStatsRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerStatsRequest.id)
  return _msg;
}
inline void NvmeControllerStatsRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerStatsRequest.id)
}

// -------------------------------------------------------------------

// NvmeControllerStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NvmeControllerStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NvmeControllerStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeControllerStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerStatsResponse.id)
  return _internal_id();
}
inline void NvmeControllerStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeControllerStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerStatsResponse.id)
  return _msg;
}
inline void NvmeControllerStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerStatsResponse.id)
}

// .opi_api.storage.v1.VolumeStats stats = 2;
inline bool NvmeControllerStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool NvmeControllerStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeControllerStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeControllerStatsResponse.stats)
  return _internal_stats();
}
inline void NvmeControllerStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeControllerStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* NvmeControllerStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeControllerStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeControllerStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeControllerStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeControllerStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeControllerStatsResponse.stats)
  return _msg;
}
inline void NvmeControllerStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeControllerStatsResponse.stats)
}

// -------------------------------------------------------------------

// CreateNvmeNamespaceRequest

// .opi_api.storage.v1.NvmeNamespace nvme_namespace = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNvmeNamespaceRequest::_internal_has_nvme_namespace() const {
  return this != internal_default_instance() && nvme_namespace_ != nullptr;
}
inline bool CreateNvmeNamespaceRequest::has_nvme_namespace() const {
  return _internal_has_nvme_namespace();
}
inline void CreateNvmeNamespaceRequest::clear_nvme_namespace() {
  if (GetArenaForAllocation() == nullptr && nvme_namespace_ != nullptr) {
    delete nvme_namespace_;
  }
  nvme_namespace_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeNamespace& CreateNvmeNamespaceRequest::_internal_nvme_namespace() const {
  const ::opi_api::storage::v1::NvmeNamespace* p = nvme_namespace_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeNamespace&>(
      ::opi_api::storage::v1::_NvmeNamespace_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeNamespace& CreateNvmeNamespaceRequest::nvme_namespace() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace)
  return _internal_nvme_namespace();
}
inline void CreateNvmeNamespaceRequest::unsafe_arena_set_allocated_nvme_namespace(
    ::opi_api::storage::v1::NvmeNamespace* nvme_namespace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_namespace_);
  }
  nvme_namespace_ = nvme_namespace;
  if (nvme_namespace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace)
}
inline ::opi_api::storage::v1::NvmeNamespace* CreateNvmeNamespaceRequest::release_nvme_namespace() {
  
  ::opi_api::storage::v1::NvmeNamespace* temp = nvme_namespace_;
  nvme_namespace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespace* CreateNvmeNamespaceRequest::unsafe_arena_release_nvme_namespace() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace)
  
  ::opi_api::storage::v1::NvmeNamespace* temp = nvme_namespace_;
  nvme_namespace_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespace* CreateNvmeNamespaceRequest::_internal_mutable_nvme_namespace() {
  
  if (nvme_namespace_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespace>(GetArenaForAllocation());
    nvme_namespace_ = p;
  }
  return nvme_namespace_;
}
inline ::opi_api::storage::v1::NvmeNamespace* CreateNvmeNamespaceRequest::mutable_nvme_namespace() {
  ::opi_api::storage::v1::NvmeNamespace* _msg = _internal_mutable_nvme_namespace();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace)
  return _msg;
}
inline void CreateNvmeNamespaceRequest::set_allocated_nvme_namespace(::opi_api::storage::v1::NvmeNamespace* nvme_namespace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_namespace_;
  }
  if (nvme_namespace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeNamespace>::GetOwningArena(nvme_namespace);
    if (message_arena != submessage_arena) {
      nvme_namespace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_namespace, submessage_arena);
    }
    
  } else {
    
  }
  nvme_namespace_ = nvme_namespace;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace)
}

// string nvme_namespace_id = 3;
inline void CreateNvmeNamespaceRequest::clear_nvme_namespace_id() {
  nvme_namespace_id_.ClearToEmpty();
}
inline const std::string& CreateNvmeNamespaceRequest::nvme_namespace_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace_id)
  return _internal_nvme_namespace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNvmeNamespaceRequest::set_nvme_namespace_id(ArgT0&& arg0, ArgT... args) {
 
 nvme_namespace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace_id)
}
inline std::string* CreateNvmeNamespaceRequest::mutable_nvme_namespace_id() {
  std::string* _s = _internal_mutable_nvme_namespace_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace_id)
  return _s;
}
inline const std::string& CreateNvmeNamespaceRequest::_internal_nvme_namespace_id() const {
  return nvme_namespace_id_.Get();
}
inline void CreateNvmeNamespaceRequest::_internal_set_nvme_namespace_id(const std::string& value) {
  
  nvme_namespace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNvmeNamespaceRequest::_internal_mutable_nvme_namespace_id() {
  
  return nvme_namespace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNvmeNamespaceRequest::release_nvme_namespace_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace_id)
  return nvme_namespace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNvmeNamespaceRequest::set_allocated_nvme_namespace_id(std::string* nvme_namespace_id) {
  if (nvme_namespace_id != nullptr) {
    
  } else {
    
  }
  nvme_namespace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nvme_namespace_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nvme_namespace_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nvme_namespace_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace_id)
}

// -------------------------------------------------------------------

// DeleteNvmeNamespaceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNvmeNamespaceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNvmeNamespaceRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeNamespaceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNvmeNamespaceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeNamespaceRequest.name)
}
inline std::string* DeleteNvmeNamespaceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNvmeNamespaceRequest.name)
  return _s;
}
inline const std::string& DeleteNvmeNamespaceRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNvmeNamespaceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNvmeNamespaceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNvmeNamespaceRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNvmeNamespaceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNvmeNamespaceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNvmeNamespaceRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNvmeNamespaceRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNvmeNamespaceRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNvmeNamespaceRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNvmeNamespaceRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNvmeNamespaceRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNvmeNamespaceRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNvmeNamespaceRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNvmeNamespaceRequest

// .opi_api.storage.v1.NvmeNamespace nvme_namespace = 1;
inline bool UpdateNvmeNamespaceRequest::_internal_has_nvme_namespace() const {
  return this != internal_default_instance() && nvme_namespace_ != nullptr;
}
inline bool UpdateNvmeNamespaceRequest::has_nvme_namespace() const {
  return _internal_has_nvme_namespace();
}
inline void UpdateNvmeNamespaceRequest::clear_nvme_namespace() {
  if (GetArenaForAllocation() == nullptr && nvme_namespace_ != nullptr) {
    delete nvme_namespace_;
  }
  nvme_namespace_ = nullptr;
}
inline const ::opi_api::storage::v1::NvmeNamespace& UpdateNvmeNamespaceRequest::_internal_nvme_namespace() const {
  const ::opi_api::storage::v1::NvmeNamespace* p = nvme_namespace_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NvmeNamespace&>(
      ::opi_api::storage::v1::_NvmeNamespace_default_instance_);
}
inline const ::opi_api::storage::v1::NvmeNamespace& UpdateNvmeNamespaceRequest::nvme_namespace() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace)
  return _internal_nvme_namespace();
}
inline void UpdateNvmeNamespaceRequest::unsafe_arena_set_allocated_nvme_namespace(
    ::opi_api::storage::v1::NvmeNamespace* nvme_namespace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvme_namespace_);
  }
  nvme_namespace_ = nvme_namespace;
  if (nvme_namespace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace)
}
inline ::opi_api::storage::v1::NvmeNamespace* UpdateNvmeNamespaceRequest::release_nvme_namespace() {
  
  ::opi_api::storage::v1::NvmeNamespace* temp = nvme_namespace_;
  nvme_namespace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespace* UpdateNvmeNamespaceRequest::unsafe_arena_release_nvme_namespace() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace)
  
  ::opi_api::storage::v1::NvmeNamespace* temp = nvme_namespace_;
  nvme_namespace_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NvmeNamespace* UpdateNvmeNamespaceRequest::_internal_mutable_nvme_namespace() {
  
  if (nvme_namespace_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NvmeNamespace>(GetArenaForAllocation());
    nvme_namespace_ = p;
  }
  return nvme_namespace_;
}
inline ::opi_api::storage::v1::NvmeNamespace* UpdateNvmeNamespaceRequest::mutable_nvme_namespace() {
  ::opi_api::storage::v1::NvmeNamespace* _msg = _internal_mutable_nvme_namespace();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace)
  return _msg;
}
inline void UpdateNvmeNamespaceRequest::set_allocated_nvme_namespace(::opi_api::storage::v1::NvmeNamespace* nvme_namespace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nvme_namespace_;
  }
  if (nvme_namespace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NvmeNamespace>::GetOwningArena(nvme_namespace);
    if (message_arena != submessage_arena) {
      nvme_namespace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvme_namespace, submessage_arena);
    }
    
  } else {
    
  }
  nvme_namespace_ = nvme_namespace;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNvmeNamespaceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNvmeNamespaceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeNamespaceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNvmeNamespaceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNvmeNamespaceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeNamespaceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeNamespaceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeNamespaceRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNvmeNamespaceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask)
  return _msg;
}
inline void UpdateNvmeNamespaceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNvmeNamespacesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNvmeNamespacesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNvmeNamespacesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeNamespacesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeNamespacesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeNamespacesRequest.parent)
}
inline std::string* ListNvmeNamespacesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeNamespacesRequest.parent)
  return _s;
}
inline const std::string& ListNvmeNamespacesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNvmeNamespacesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeNamespacesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeNamespacesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeNamespacesRequest.parent)
}

// int32 page_size = 2;
inline void ListNvmeNamespacesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNvmeNamespacesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNvmeNamespacesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeNamespacesRequest.page_size)
  return _internal_page_size();
}
inline void ListNvmeNamespacesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNvmeNamespacesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeNamespacesRequest.page_size)
}

// string page_token = 3;
inline void ListNvmeNamespacesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeNamespacesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeNamespacesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeNamespacesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeNamespacesRequest.page_token)
}
inline std::string* ListNvmeNamespacesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeNamespacesRequest.page_token)
  return _s;
}
inline const std::string& ListNvmeNamespacesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNvmeNamespacesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeNamespacesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeNamespacesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeNamespacesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNvmeNamespacesResponse

// repeated .opi_api.storage.v1.NvmeNamespace nvme_namespaces = 1;
inline int ListNvmeNamespacesResponse::_internal_nvme_namespaces_size() const {
  return nvme_namespaces_.size();
}
inline int ListNvmeNamespacesResponse::nvme_namespaces_size() const {
  return _internal_nvme_namespaces_size();
}
inline void ListNvmeNamespacesResponse::clear_nvme_namespaces() {
  nvme_namespaces_.Clear();
}
inline ::opi_api::storage::v1::NvmeNamespace* ListNvmeNamespacesResponse::mutable_nvme_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces)
  return nvme_namespaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeNamespace >*
ListNvmeNamespacesResponse::mutable_nvme_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces)
  return &nvme_namespaces_;
}
inline const ::opi_api::storage::v1::NvmeNamespace& ListNvmeNamespacesResponse::_internal_nvme_namespaces(int index) const {
  return nvme_namespaces_.Get(index);
}
inline const ::opi_api::storage::v1::NvmeNamespace& ListNvmeNamespacesResponse::nvme_namespaces(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces)
  return _internal_nvme_namespaces(index);
}
inline ::opi_api::storage::v1::NvmeNamespace* ListNvmeNamespacesResponse::_internal_add_nvme_namespaces() {
  return nvme_namespaces_.Add();
}
inline ::opi_api::storage::v1::NvmeNamespace* ListNvmeNamespacesResponse::add_nvme_namespaces() {
  ::opi_api::storage::v1::NvmeNamespace* _add = _internal_add_nvme_namespaces();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NvmeNamespace >&
ListNvmeNamespacesResponse::nvme_namespaces() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces)
  return nvme_namespaces_;
}

// string next_page_token = 2;
inline void ListNvmeNamespacesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNvmeNamespacesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNvmeNamespacesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNvmeNamespacesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNvmeNamespacesResponse.next_page_token)
}
inline std::string* ListNvmeNamespacesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNvmeNamespacesResponse.next_page_token)
  return _s;
}
inline const std::string& ListNvmeNamespacesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNvmeNamespacesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNvmeNamespacesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNvmeNamespacesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNvmeNamespacesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNvmeNamespacesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNvmeNamespaceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNvmeNamespaceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNvmeNamespaceRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNvmeNamespaceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNvmeNamespaceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNvmeNamespaceRequest.name)
}
inline std::string* GetNvmeNamespaceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNvmeNamespaceRequest.name)
  return _s;
}
inline const std::string& GetNvmeNamespaceRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNvmeNamespaceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNvmeNamespaceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNvmeNamespaceRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNvmeNamespaceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNvmeNamespaceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNvmeNamespaceRequest.name)
}

// -------------------------------------------------------------------

// NvmeNamespaceStatsRequest

// .opi_api.common.v1.ObjectKey namespace_id = 1;
inline bool NvmeNamespaceStatsRequest::_internal_has_namespace_id() const {
  return this != internal_default_instance() && namespace_id_ != nullptr;
}
inline bool NvmeNamespaceStatsRequest::has_namespace_id() const {
  return _internal_has_namespace_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceStatsRequest::_internal_namespace_id() const {
  const ::opi_api::common::v1::ObjectKey* p = namespace_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceStatsRequest::namespace_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceStatsRequest.namespace_id)
  return _internal_namespace_id();
}
inline void NvmeNamespaceStatsRequest::unsafe_arena_set_allocated_namespace_id(
    ::opi_api::common::v1::ObjectKey* namespace_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_id_);
  }
  namespace_id_ = namespace_id;
  if (namespace_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsRequest.namespace_id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsRequest::release_namespace_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = namespace_id_;
  namespace_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsRequest::unsafe_arena_release_namespace_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceStatsRequest.namespace_id)
  
  ::opi_api::common::v1::ObjectKey* temp = namespace_id_;
  namespace_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsRequest::_internal_mutable_namespace_id() {
  
  if (namespace_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    namespace_id_ = p;
  }
  return namespace_id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsRequest::mutable_namespace_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_namespace_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceStatsRequest.namespace_id)
  return _msg;
}
inline void NvmeNamespaceStatsRequest::set_allocated_namespace_id(::opi_api::common::v1::ObjectKey* namespace_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_id_);
  }
  if (namespace_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_id));
    if (message_arena != submessage_arena) {
      namespace_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_id, submessage_arena);
    }
    
  } else {
    
  }
  namespace_id_ = namespace_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsRequest.namespace_id)
}

// -------------------------------------------------------------------

// NvmeNamespaceStatsResponse

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NvmeNamespaceStatsResponse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NvmeNamespaceStatsResponse::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceStatsResponse::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NvmeNamespaceStatsResponse::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceStatsResponse.id)
  return _internal_id();
}
inline void NvmeNamespaceStatsResponse::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsResponse.id)
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsResponse::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceStatsResponse.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsResponse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NvmeNamespaceStatsResponse::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceStatsResponse.id)
  return _msg;
}
inline void NvmeNamespaceStatsResponse::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsResponse.id)
}

// .opi_api.storage.v1.VolumeStats stats = 2;
inline bool NvmeNamespaceStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool NvmeNamespaceStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeNamespaceStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& NvmeNamespaceStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NvmeNamespaceStatsResponse.stats)
  return _internal_stats();
}
inline void NvmeNamespaceStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* NvmeNamespaceStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeNamespaceStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NvmeNamespaceStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeNamespaceStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* NvmeNamespaceStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NvmeNamespaceStatsResponse.stats)
  return _msg;
}
inline void NvmeNamespaceStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NvmeNamespaceStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeNamespacePciState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeNamespacePciState>() {
  return ::opi_api::storage::v1::NvmeNamespacePciState_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeNamespacePciOperState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeNamespacePciOperState>() {
  return ::opi_api::storage::v1::NvmeNamespacePciOperState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fnvme_5fpcie_2eproto
