// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_aio.proto

#include "backend_aio.pb.h"
#include "backend_aio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* AioVolumeService_method_names[] = {
  "/opi_api.storage.v1.AioVolumeService/CreateAioVolume",
  "/opi_api.storage.v1.AioVolumeService/DeleteAioVolume",
  "/opi_api.storage.v1.AioVolumeService/UpdateAioVolume",
  "/opi_api.storage.v1.AioVolumeService/ListAioVolumes",
  "/opi_api.storage.v1.AioVolumeService/GetAioVolume",
  "/opi_api.storage.v1.AioVolumeService/AioVolumeStats",
};

std::unique_ptr< AioVolumeService::Stub> AioVolumeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AioVolumeService::Stub> stub(new AioVolumeService::Stub(channel, options));
  return stub;
}

AioVolumeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateAioVolume_(AioVolumeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAioVolume_(AioVolumeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAioVolume_(AioVolumeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAioVolumes_(AioVolumeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAioVolume_(AioVolumeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AioVolumeStats_(AioVolumeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AioVolumeService::Stub::CreateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest& request, ::opi_api::storage::v1::AioVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAioVolume_, context, request, response);
}

void AioVolumeService::Stub::async::CreateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAioVolume_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::CreateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAioVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::PrepareAsyncCreateAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioVolume, ::opi_api::storage::v1::CreateAioVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAioVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::AsyncCreateAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAioVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioVolumeService::Stub::DeleteAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteAioVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAioVolume_, context, request, response);
}

void AioVolumeService::Stub::async::DeleteAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteAioVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAioVolume_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::DeleteAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAioVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AioVolumeService::Stub::PrepareAsyncDeleteAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteAioVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAioVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AioVolumeService::Stub::AsyncDeleteAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAioVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioVolumeService::Stub::UpdateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest& request, ::opi_api::storage::v1::AioVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAioVolume_, context, request, response);
}

void AioVolumeService::Stub::async::UpdateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAioVolume_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::UpdateAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAioVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::PrepareAsyncUpdateAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioVolume, ::opi_api::storage::v1::UpdateAioVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAioVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::AsyncUpdateAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAioVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioVolumeService::Stub::ListAioVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest& request, ::opi_api::storage::v1::ListAioVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListAioVolumesRequest, ::opi_api::storage::v1::ListAioVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAioVolumes_, context, request, response);
}

void AioVolumeService::Stub::async::ListAioVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest* request, ::opi_api::storage::v1::ListAioVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListAioVolumesRequest, ::opi_api::storage::v1::ListAioVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAioVolumes_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::ListAioVolumes(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest* request, ::opi_api::storage::v1::ListAioVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAioVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioVolumesResponse>* AioVolumeService::Stub::PrepareAsyncListAioVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListAioVolumesResponse, ::opi_api::storage::v1::ListAioVolumesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAioVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioVolumesResponse>* AioVolumeService::Stub::AsyncListAioVolumesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAioVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioVolumeService::Stub::GetAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest& request, ::opi_api::storage::v1::AioVolume* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAioVolume_, context, request, response);
}

void AioVolumeService::Stub::async::GetAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAioVolume_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::GetAioVolume(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAioVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::PrepareAsyncGetAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioVolume, ::opi_api::storage::v1::GetAioVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAioVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolume>* AioVolumeService::Stub::AsyncGetAioVolumeRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAioVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AioVolumeService::Stub::AioVolumeStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest& request, ::opi_api::storage::v1::AioVolumeStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::AioVolumeStatsRequest, ::opi_api::storage::v1::AioVolumeStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AioVolumeStats_, context, request, response);
}

void AioVolumeService::Stub::async::AioVolumeStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest* request, ::opi_api::storage::v1::AioVolumeStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::AioVolumeStatsRequest, ::opi_api::storage::v1::AioVolumeStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioVolumeStats_, context, request, response, std::move(f));
}

void AioVolumeService::Stub::async::AioVolumeStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest* request, ::opi_api::storage::v1::AioVolumeStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AioVolumeStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolumeStatsResponse>* AioVolumeService::Stub::PrepareAsyncAioVolumeStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::AioVolumeStatsResponse, ::opi_api::storage::v1::AioVolumeStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AioVolumeStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioVolumeStatsResponse>* AioVolumeService::Stub::AsyncAioVolumeStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAioVolumeStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

AioVolumeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::CreateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateAioVolumeRequest* req,
             ::opi_api::storage::v1::AioVolume* resp) {
               return service->CreateAioVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::DeleteAioVolumeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteAioVolumeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteAioVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::UpdateAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateAioVolumeRequest* req,
             ::opi_api::storage::v1::AioVolume* resp) {
               return service->UpdateAioVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::ListAioVolumesRequest, ::opi_api::storage::v1::ListAioVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListAioVolumesRequest* req,
             ::opi_api::storage::v1::ListAioVolumesResponse* resp) {
               return service->ListAioVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::GetAioVolumeRequest, ::opi_api::storage::v1::AioVolume, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetAioVolumeRequest* req,
             ::opi_api::storage::v1::AioVolume* resp) {
               return service->GetAioVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AioVolumeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AioVolumeService::Service, ::opi_api::storage::v1::AioVolumeStatsRequest, ::opi_api::storage::v1::AioVolumeStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AioVolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::AioVolumeStatsRequest* req,
             ::opi_api::storage::v1::AioVolumeStatsResponse* resp) {
               return service->AioVolumeStats(ctx, req, resp);
             }, this)));
}

AioVolumeService::Service::~Service() {
}

::grpc::Status AioVolumeService::Service::CreateAioVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioVolumeService::Service::DeleteAioVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteAioVolumeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioVolumeService::Service::UpdateAioVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioVolumeService::Service::ListAioVolumes(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListAioVolumesRequest* request, ::opi_api::storage::v1::ListAioVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioVolumeService::Service::GetAioVolume(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetAioVolumeRequest* request, ::opi_api::storage::v1::AioVolume* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AioVolumeService::Service::AioVolumeStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioVolumeStatsRequest* request, ::opi_api::storage::v1::AioVolumeStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

