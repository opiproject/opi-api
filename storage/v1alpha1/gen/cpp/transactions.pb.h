// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transactions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transactions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transactions_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateTransactionRequest;
struct CreateTransactionRequestDefaultTypeInternal;
extern CreateTransactionRequestDefaultTypeInternal _CreateTransactionRequest_default_instance_;
class DeleteTransactionRequest;
struct DeleteTransactionRequestDefaultTypeInternal;
extern DeleteTransactionRequestDefaultTypeInternal _DeleteTransactionRequest_default_instance_;
class ExecuteTransactionRequest;
struct ExecuteTransactionRequestDefaultTypeInternal;
extern ExecuteTransactionRequestDefaultTypeInternal _ExecuteTransactionRequest_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateTransactionRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateTransactionRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteTransactionRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteTransactionRequest>(Arena*);
template<> ::opi_api::storage::v1::ExecuteTransactionRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ExecuteTransactionRequest>(Arena*);
template<> ::opi_api::storage::v1::Transaction* Arena::CreateMaybeMessage<::opi_api::storage::v1::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey txn_id = 1;
  bool has_txn_id() const;
  private:
  bool _internal_has_txn_id() const;
  public:
  void clear_txn_id();
  const ::opi_api::common::v1::ObjectKey& txn_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_txn_id();
  ::opi_api::common::v1::ObjectKey* mutable_txn_id();
  void set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_txn_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_txn_id();
  public:
  void unsafe_arena_set_allocated_txn_id(
      ::opi_api::common::v1::ObjectKey* txn_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_txn_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* txn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class CreateTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateTransactionRequest) */ {
 public:
  inline CreateTransactionRequest() : CreateTransactionRequest(nullptr) {}
  explicit constexpr CreateTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransactionRequest(const CreateTransactionRequest& from);
  CreateTransactionRequest(CreateTransactionRequest&& from) noexcept
    : CreateTransactionRequest() {
    *this = ::std::move(from);
  }

  inline CreateTransactionRequest& operator=(const CreateTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransactionRequest& operator=(CreateTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTransactionRequest*>(
               &_CreateTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTransactionRequest& a, CreateTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateTransactionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateTransactionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateTransactionRequest";
  }
  protected:
  explicit CreateTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class DeleteTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteTransactionRequest) */ {
 public:
  inline DeleteTransactionRequest() : DeleteTransactionRequest(nullptr) {}
  ~DeleteTransactionRequest() override;
  explicit constexpr DeleteTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTransactionRequest(const DeleteTransactionRequest& from);
  DeleteTransactionRequest(DeleteTransactionRequest&& from) noexcept
    : DeleteTransactionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTransactionRequest& operator=(const DeleteTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTransactionRequest& operator=(DeleteTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTransactionRequest*>(
               &_DeleteTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteTransactionRequest& a, DeleteTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteTransactionRequest";
  }
  protected:
  explicit DeleteTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey txn_id = 1;
  bool has_txn_id() const;
  private:
  bool _internal_has_txn_id() const;
  public:
  void clear_txn_id();
  const ::opi_api::common::v1::ObjectKey& txn_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_txn_id();
  ::opi_api::common::v1::ObjectKey* mutable_txn_id();
  void set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_txn_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_txn_id();
  public:
  void unsafe_arena_set_allocated_txn_id(
      ::opi_api::common::v1::ObjectKey* txn_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_txn_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* txn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class ExecuteTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ExecuteTransactionRequest) */ {
 public:
  inline ExecuteTransactionRequest() : ExecuteTransactionRequest(nullptr) {}
  ~ExecuteTransactionRequest() override;
  explicit constexpr ExecuteTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteTransactionRequest(const ExecuteTransactionRequest& from);
  ExecuteTransactionRequest(ExecuteTransactionRequest&& from) noexcept
    : ExecuteTransactionRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteTransactionRequest& operator=(const ExecuteTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteTransactionRequest& operator=(ExecuteTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteTransactionRequest*>(
               &_ExecuteTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteTransactionRequest& a, ExecuteTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteTransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteTransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ExecuteTransactionRequest";
  }
  protected:
  explicit ExecuteTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey txn_id = 1;
  bool has_txn_id() const;
  private:
  bool _internal_has_txn_id() const;
  public:
  void clear_txn_id();
  const ::opi_api::common::v1::ObjectKey& txn_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_txn_id();
  ::opi_api::common::v1::ObjectKey* mutable_txn_id();
  void set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_txn_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_txn_id();
  public:
  void unsafe_arena_set_allocated_txn_id(
      ::opi_api::common::v1::ObjectKey* txn_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_txn_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ExecuteTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* txn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// .opi_api.common.v1.ObjectKey txn_id = 1;
inline bool Transaction::_internal_has_txn_id() const {
  return this != internal_default_instance() && txn_id_ != nullptr;
}
inline bool Transaction::has_txn_id() const {
  return _internal_has_txn_id();
}
inline const ::opi_api::common::v1::ObjectKey& Transaction::_internal_txn_id() const {
  const ::opi_api::common::v1::ObjectKey* p = txn_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& Transaction::txn_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.Transaction.txn_id)
  return _internal_txn_id();
}
inline void Transaction::unsafe_arena_set_allocated_txn_id(
    ::opi_api::common::v1::ObjectKey* txn_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  txn_id_ = txn_id;
  if (txn_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.Transaction.txn_id)
}
inline ::opi_api::common::v1::ObjectKey* Transaction::release_txn_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* Transaction::unsafe_arena_release_txn_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.Transaction.txn_id)
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* Transaction::_internal_mutable_txn_id() {
  
  if (txn_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    txn_id_ = p;
  }
  return txn_id_;
}
inline ::opi_api::common::v1::ObjectKey* Transaction::mutable_txn_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_txn_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.Transaction.txn_id)
  return _msg;
}
inline void Transaction::set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  if (txn_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id));
    if (message_arena != submessage_arena) {
      txn_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn_id, submessage_arena);
    }
    
  } else {
    
  }
  txn_id_ = txn_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.Transaction.txn_id)
}

// -------------------------------------------------------------------

// CreateTransactionRequest

// -------------------------------------------------------------------

// DeleteTransactionRequest

// .opi_api.common.v1.ObjectKey txn_id = 1;
inline bool DeleteTransactionRequest::_internal_has_txn_id() const {
  return this != internal_default_instance() && txn_id_ != nullptr;
}
inline bool DeleteTransactionRequest::has_txn_id() const {
  return _internal_has_txn_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeleteTransactionRequest::_internal_txn_id() const {
  const ::opi_api::common::v1::ObjectKey* p = txn_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeleteTransactionRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteTransactionRequest.txn_id)
  return _internal_txn_id();
}
inline void DeleteTransactionRequest::unsafe_arena_set_allocated_txn_id(
    ::opi_api::common::v1::ObjectKey* txn_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  txn_id_ = txn_id;
  if (txn_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.DeleteTransactionRequest.txn_id)
}
inline ::opi_api::common::v1::ObjectKey* DeleteTransactionRequest::release_txn_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteTransactionRequest::unsafe_arena_release_txn_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteTransactionRequest.txn_id)
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeleteTransactionRequest::_internal_mutable_txn_id() {
  
  if (txn_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    txn_id_ = p;
  }
  return txn_id_;
}
inline ::opi_api::common::v1::ObjectKey* DeleteTransactionRequest::mutable_txn_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_txn_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteTransactionRequest.txn_id)
  return _msg;
}
inline void DeleteTransactionRequest::set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  if (txn_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id));
    if (message_arena != submessage_arena) {
      txn_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn_id, submessage_arena);
    }
    
  } else {
    
  }
  txn_id_ = txn_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteTransactionRequest.txn_id)
}

// -------------------------------------------------------------------

// ExecuteTransactionRequest

// .opi_api.common.v1.ObjectKey txn_id = 1;
inline bool ExecuteTransactionRequest::_internal_has_txn_id() const {
  return this != internal_default_instance() && txn_id_ != nullptr;
}
inline bool ExecuteTransactionRequest::has_txn_id() const {
  return _internal_has_txn_id();
}
inline const ::opi_api::common::v1::ObjectKey& ExecuteTransactionRequest::_internal_txn_id() const {
  const ::opi_api::common::v1::ObjectKey* p = txn_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& ExecuteTransactionRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ExecuteTransactionRequest.txn_id)
  return _internal_txn_id();
}
inline void ExecuteTransactionRequest::unsafe_arena_set_allocated_txn_id(
    ::opi_api::common::v1::ObjectKey* txn_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  txn_id_ = txn_id;
  if (txn_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.ExecuteTransactionRequest.txn_id)
}
inline ::opi_api::common::v1::ObjectKey* ExecuteTransactionRequest::release_txn_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* ExecuteTransactionRequest::unsafe_arena_release_txn_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ExecuteTransactionRequest.txn_id)
  
  ::opi_api::common::v1::ObjectKey* temp = txn_id_;
  txn_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* ExecuteTransactionRequest::_internal_mutable_txn_id() {
  
  if (txn_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    txn_id_ = p;
  }
  return txn_id_;
}
inline ::opi_api::common::v1::ObjectKey* ExecuteTransactionRequest::mutable_txn_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_txn_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ExecuteTransactionRequest.txn_id)
  return _msg;
}
inline void ExecuteTransactionRequest::set_allocated_txn_id(::opi_api::common::v1::ObjectKey* txn_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id_);
  }
  if (txn_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_id));
    if (message_arena != submessage_arena) {
      txn_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn_id, submessage_arena);
    }
    
  } else {
    
  }
  txn_id_ = txn_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ExecuteTransactionRequest.txn_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
