// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: frontend_nvme_pcie.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
// Copyright (C) 2023 Intel Corporation
//
#ifndef GRPC_frontend_5fnvme_5fpcie_2eproto__INCLUDED
#define GRPC_frontend_5fnvme_5fpcie_2eproto__INCLUDED

#include "frontend_nvme_pcie.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

// Front End (host-facing) APIs. Mostly used for Nvme/PCIe emulation and host presentation.
class FrontendNvmeService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.FrontendNvmeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create an Nvme Subsystem
    virtual ::grpc::Status CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> AsyncCreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncCreateNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncCreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncCreateNvmeSubsystemRaw(context, request, cq));
    }
    // Delete an Nvme Subsystem
    // Fails if there are any associated objects
    virtual ::grpc::Status DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeSubsystemRaw(context, request, cq));
    }
    // Update an Nvme Subsystem
    virtual ::grpc::Status UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> AsyncUpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncUpdateNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncUpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncUpdateNvmeSubsystemRaw(context, request, cq));
    }
    // List Nvme Subsystems
    virtual ::grpc::Status ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>> AsyncListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>>(AsyncListNvmeSubsystemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>> PrepareAsyncListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>>(PrepareAsyncListNvmeSubsystemsRaw(context, request, cq));
    }
    // Get an Nvme Subsystem
    virtual ::grpc::Status GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> AsyncGetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncGetNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncGetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncGetNvmeSubsystemRaw(context, request, cq));
    }
    // Get an Nvme Subsystem statistics
    virtual ::grpc::Status StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>> AsyncStatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>>(AsyncStatsNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>> PrepareAsyncStatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>>(PrepareAsyncStatsNvmeSubsystemRaw(context, request, cq));
    }
    // Create an Nvme Controller
    virtual ::grpc::Status CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> AsyncCreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(AsyncCreateNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> PrepareAsyncCreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncCreateNvmeControllerRaw(context, request, cq));
    }
    // Delete an Nvme Controller
    // Fails if there are any associated objects
    virtual ::grpc::Status DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeControllerRaw(context, request, cq));
    }
    // Update an Nvme Controller
    virtual ::grpc::Status UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> AsyncUpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(AsyncUpdateNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> PrepareAsyncUpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncUpdateNvmeControllerRaw(context, request, cq));
    }
    // List Nvme Controllers
    virtual ::grpc::Status ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::opi_api::storage::v1::ListNvmeControllersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>> AsyncListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>>(AsyncListNvmeControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>> PrepareAsyncListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>>(PrepareAsyncListNvmeControllersRaw(context, request, cq));
    }
    // Get an Nvme Controller
    virtual ::grpc::Status GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> AsyncGetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(AsyncGetNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>> PrepareAsyncGetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncGetNvmeControllerRaw(context, request, cq));
    }
    // Get an Nvme Controller statistics
    virtual ::grpc::Status StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>> AsyncStatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>>(AsyncStatsNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>> PrepareAsyncStatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>>(PrepareAsyncStatsNvmeControllerRaw(context, request, cq));
    }
    // Create an Nvme Namespace
    virtual ::grpc::Status CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> AsyncCreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(AsyncCreateNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncCreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncCreateNvmeNamespaceRaw(context, request, cq));
    }
    // Delete an Nvme Namespace
    virtual ::grpc::Status DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeNamespaceRaw(context, request, cq));
    }
    // Update an Nvme Namespace
    virtual ::grpc::Status UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> AsyncUpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(AsyncUpdateNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncUpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncUpdateNvmeNamespaceRaw(context, request, cq));
    }
    // List Nvme Namespaces
    virtual ::grpc::Status ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>> AsyncListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>>(AsyncListNvmeNamespacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>> PrepareAsyncListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>>(PrepareAsyncListNvmeNamespacesRaw(context, request, cq));
    }
    // Get an Nvme Namespace
    virtual ::grpc::Status GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> AsyncGetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(AsyncGetNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncGetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncGetNvmeNamespaceRaw(context, request, cq));
    }
    // Get an Nvme Namespace statistics
    virtual ::grpc::Status StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>> AsyncStatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>>(AsyncStatsNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>> PrepareAsyncStatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>>(PrepareAsyncStatsNvmeNamespaceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create an Nvme Subsystem
      virtual void CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an Nvme Subsystem
      // Fails if there are any associated objects
      virtual void DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an Nvme Subsystem
      virtual void UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Nvme Subsystems
      virtual void ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Subsystem
      virtual void GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Subsystem statistics
      virtual void StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create an Nvme Controller
      virtual void CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an Nvme Controller
      // Fails if there are any associated objects
      virtual void DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an Nvme Controller
      virtual void UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Nvme Controllers
      virtual void ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Controller
      virtual void GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Controller statistics
      virtual void StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create an Nvme Namespace
      virtual void CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an Nvme Namespace
      virtual void DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an Nvme Namespace
      virtual void UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Nvme Namespaces
      virtual void ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Namespace
      virtual void GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an Nvme Namespace statistics
      virtual void StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* AsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* AsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* AsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* PrepareAsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* AsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* AsyncStatsNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* PrepareAsyncStatsNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* AsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* PrepareAsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* AsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* PrepareAsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>* AsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeControllersResponse>* PrepareAsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* AsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeController>* PrepareAsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>* AsyncStatsNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeControllerResponse>* PrepareAsyncStatsNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* AsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* AsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* AsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* PrepareAsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* AsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* AsyncStatsNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* PrepareAsyncStatsNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> AsyncCreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncCreateNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncCreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncCreateNvmeSubsystemRaw(context, request, cq));
    }
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeSubsystemRaw(context, request, cq));
    }
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> AsyncUpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncUpdateNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncUpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncUpdateNvmeSubsystemRaw(context, request, cq));
    }
    ::grpc::Status ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>> AsyncListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>>(AsyncListNvmeSubsystemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>> PrepareAsyncListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>>(PrepareAsyncListNvmeSubsystemsRaw(context, request, cq));
    }
    ::grpc::Status GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::opi_api::storage::v1::NvmeSubsystem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> AsyncGetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(AsyncGetNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>> PrepareAsyncGetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>>(PrepareAsyncGetNvmeSubsystemRaw(context, request, cq));
    }
    ::grpc::Status StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>> AsyncStatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>>(AsyncStatsNvmeSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>> PrepareAsyncStatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>>(PrepareAsyncStatsNvmeSubsystemRaw(context, request, cq));
    }
    ::grpc::Status CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> AsyncCreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(AsyncCreateNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> PrepareAsyncCreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncCreateNvmeControllerRaw(context, request, cq));
    }
    ::grpc::Status DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeControllerRaw(context, request, cq));
    }
    ::grpc::Status UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> AsyncUpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(AsyncUpdateNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> PrepareAsyncUpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncUpdateNvmeControllerRaw(context, request, cq));
    }
    ::grpc::Status ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::opi_api::storage::v1::ListNvmeControllersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>> AsyncListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>>(AsyncListNvmeControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>> PrepareAsyncListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>>(PrepareAsyncListNvmeControllersRaw(context, request, cq));
    }
    ::grpc::Status GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::opi_api::storage::v1::NvmeController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> AsyncGetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(AsyncGetNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>> PrepareAsyncGetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>>(PrepareAsyncGetNvmeControllerRaw(context, request, cq));
    }
    ::grpc::Status StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>> AsyncStatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>>(AsyncStatsNvmeControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>> PrepareAsyncStatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>>(PrepareAsyncStatsNvmeControllerRaw(context, request, cq));
    }
    ::grpc::Status CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> AsyncCreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(AsyncCreateNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncCreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncCreateNvmeNamespaceRaw(context, request, cq));
    }
    ::grpc::Status DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNvmeNamespaceRaw(context, request, cq));
    }
    ::grpc::Status UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> AsyncUpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(AsyncUpdateNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncUpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncUpdateNvmeNamespaceRaw(context, request, cq));
    }
    ::grpc::Status ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>> AsyncListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>>(AsyncListNvmeNamespacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>> PrepareAsyncListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>>(PrepareAsyncListNvmeNamespacesRaw(context, request, cq));
    }
    ::grpc::Status GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::opi_api::storage::v1::NvmeNamespace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> AsyncGetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(AsyncGetNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>> PrepareAsyncGetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>>(PrepareAsyncGetNvmeNamespaceRaw(context, request, cq));
    }
    ::grpc::Status StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>> AsyncStatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>>(AsyncStatsNvmeNamespaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>> PrepareAsyncStatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>>(PrepareAsyncStatsNvmeNamespaceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) override;
      void CreateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) override;
      void UpdateNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmeSubsystems(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, std::function<void(::grpc::Status)>) override;
      void GetNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response, std::function<void(::grpc::Status)>) override;
      void StatsNvmeSubsystem(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) override;
      void CreateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) override;
      void UpdateNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmeControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, std::function<void(::grpc::Status)>) override;
      void GetNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response, std::function<void(::grpc::Status)>) override;
      void StatsNvmeController(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) override;
      void CreateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) override;
      void UpdateNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNvmeNamespaces(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, std::function<void(::grpc::Status)>) override;
      void GetNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response, std::function<void(::grpc::Status)>) override;
      void StatsNvmeNamespace(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* AsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncCreateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* AsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncUpdateNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* AsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* PrepareAsyncListNvmeSubsystemsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* AsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeSubsystem>* PrepareAsyncGetNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* AsyncStatsNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* PrepareAsyncStatsNvmeSubsystemRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* AsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* PrepareAsyncCreateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* AsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* PrepareAsyncUpdateNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>* AsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeControllersResponse>* PrepareAsyncListNvmeControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* AsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeController>* PrepareAsyncGetNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>* AsyncStatsNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeControllerResponse>* PrepareAsyncStatsNvmeControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* AsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncCreateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* AsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncUpdateNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* AsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* PrepareAsyncListNvmeNamespacesRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* AsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::NvmeNamespace>* PrepareAsyncGetNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* AsyncStatsNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* PrepareAsyncStatsNvmeNamespaceRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNvmeSubsystem_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNvmeSubsystem_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNvmeSubsystem_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmeSubsystems_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNvmeSubsystem_;
    const ::grpc::internal::RpcMethod rpcmethod_StatsNvmeSubsystem_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNvmeController_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNvmeController_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNvmeController_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmeControllers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNvmeController_;
    const ::grpc::internal::RpcMethod rpcmethod_StatsNvmeController_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNvmeNamespace_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNvmeNamespace_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNvmeNamespace_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNvmeNamespaces_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNvmeNamespace_;
    const ::grpc::internal::RpcMethod rpcmethod_StatsNvmeNamespace_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create an Nvme Subsystem
    virtual ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response);
    // Delete an Nvme Subsystem
    // Fails if there are any associated objects
    virtual ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response);
    // Update an Nvme Subsystem
    virtual ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response);
    // List Nvme Subsystems
    virtual ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response);
    // Get an Nvme Subsystem
    virtual ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response);
    // Get an Nvme Subsystem statistics
    virtual ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response);
    // Create an Nvme Controller
    virtual ::grpc::Status CreateNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response);
    // Delete an Nvme Controller
    // Fails if there are any associated objects
    virtual ::grpc::Status DeleteNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response);
    // Update an Nvme Controller
    virtual ::grpc::Status UpdateNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response);
    // List Nvme Controllers
    virtual ::grpc::Status ListNvmeControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response);
    // Get an Nvme Controller
    virtual ::grpc::Status GetNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response);
    // Get an Nvme Controller statistics
    virtual ::grpc::Status StatsNvmeController(::grpc::ServerContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response);
    // Create an Nvme Namespace
    virtual ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response);
    // Delete an Nvme Namespace
    virtual ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response);
    // Update an Nvme Namespace
    virtual ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response);
    // List Nvme Namespaces
    virtual ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response);
    // Get an Nvme Namespace
    virtual ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response);
    // Get an Nvme Namespace statistics
    virtual ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeSubsystem(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeSubsystem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeSubsystem(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeSubsystem(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeSubsystem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeSubsystems(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeSubsystem(::grpc::ServerContext* context, ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeSubsystem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeSubsystem(::grpc::ServerContext* context, ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeController(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeController(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeController(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeControllers(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmeControllersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeController(::grpc::ServerContext* context, ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeController(::grpc::ServerContext* context, ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::StatsNvmeControllerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeNamespace(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeNamespace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeNamespace(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeNamespace(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeNamespace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeNamespaces(::grpc::ServerContext* context, ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListNvmeNamespacesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeNamespace(::grpc::ServerContext* context, ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::NvmeNamespace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeNamespace(::grpc::ServerContext* context, ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateNvmeSubsystem<WithAsyncMethod_DeleteNvmeSubsystem<WithAsyncMethod_UpdateNvmeSubsystem<WithAsyncMethod_ListNvmeSubsystems<WithAsyncMethod_GetNvmeSubsystem<WithAsyncMethod_StatsNvmeSubsystem<WithAsyncMethod_CreateNvmeController<WithAsyncMethod_DeleteNvmeController<WithAsyncMethod_UpdateNvmeController<WithAsyncMethod_ListNvmeControllers<WithAsyncMethod_GetNvmeController<WithAsyncMethod_StatsNvmeController<WithAsyncMethod_CreateNvmeNamespace<WithAsyncMethod_DeleteNvmeNamespace<WithAsyncMethod_UpdateNvmeNamespace<WithAsyncMethod_ListNvmeNamespaces<WithAsyncMethod_GetNvmeNamespace<WithAsyncMethod_StatsNvmeNamespace<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) { return this->CreateNvmeSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNvmeSubsystem(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNvmeSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNvmeSubsystem(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) { return this->UpdateNvmeSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNvmeSubsystem(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* request, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* response) { return this->ListNvmeSubsystems(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmeSubsystems(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeSubsystems(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* request, ::opi_api::storage::v1::NvmeSubsystem* response) { return this->GetNvmeSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_GetNvmeSubsystem(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeSubsystemRequest, ::opi_api::storage::v1::StatsNvmeSubsystemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* request, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* response) { return this->StatsNvmeSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_StatsNvmeSubsystem(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::StatsNvmeSubsystemRequest, ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeSubsystemRequest, ::opi_api::storage::v1::StatsNvmeSubsystemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) { return this->CreateNvmeController(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNvmeController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNvmeController(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNvmeController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) { return this->UpdateNvmeController(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNvmeController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmeControllersRequest* request, ::opi_api::storage::v1::ListNvmeControllersResponse* response) { return this->ListNvmeControllers(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmeControllers(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetNvmeControllerRequest* request, ::opi_api::storage::v1::NvmeController* response) { return this->GetNvmeController(context, request, response); }));}
    void SetMessageAllocatorFor_GetNvmeController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeControllerRequest, ::opi_api::storage::v1::StatsNvmeControllerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::StatsNvmeControllerRequest* request, ::opi_api::storage::v1::StatsNvmeControllerResponse* response) { return this->StatsNvmeController(context, request, response); }));}
    void SetMessageAllocatorFor_StatsNvmeController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::StatsNvmeControllerRequest, ::opi_api::storage::v1::StatsNvmeControllerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeControllerRequest, ::opi_api::storage::v1::StatsNvmeControllerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) { return this->CreateNvmeNamespace(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNvmeNamespace(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNvmeNamespace(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNvmeNamespace(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) { return this->UpdateNvmeNamespace(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNvmeNamespace(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* request, ::opi_api::storage::v1::ListNvmeNamespacesResponse* response) { return this->ListNvmeNamespaces(context, request, response); }));}
    void SetMessageAllocatorFor_ListNvmeNamespaces(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeNamespaces(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* request, ::opi_api::storage::v1::NvmeNamespace* response) { return this->GetNvmeNamespace(context, request, response); }));}
    void SetMessageAllocatorFor_GetNvmeNamespace(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeNamespaceRequest, ::opi_api::storage::v1::StatsNvmeNamespaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* request, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* response) { return this->StatsNvmeNamespace(context, request, response); }));}
    void SetMessageAllocatorFor_StatsNvmeNamespace(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::StatsNvmeNamespaceRequest, ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::StatsNvmeNamespaceRequest, ::opi_api::storage::v1::StatsNvmeNamespaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateNvmeSubsystem<WithCallbackMethod_DeleteNvmeSubsystem<WithCallbackMethod_UpdateNvmeSubsystem<WithCallbackMethod_ListNvmeSubsystems<WithCallbackMethod_GetNvmeSubsystem<WithCallbackMethod_StatsNvmeSubsystem<WithCallbackMethod_CreateNvmeController<WithCallbackMethod_DeleteNvmeController<WithCallbackMethod_UpdateNvmeController<WithCallbackMethod_ListNvmeControllers<WithCallbackMethod_GetNvmeController<WithCallbackMethod_StatsNvmeController<WithCallbackMethod_CreateNvmeNamespace<WithCallbackMethod_DeleteNvmeNamespace<WithCallbackMethod_UpdateNvmeNamespace<WithCallbackMethod_ListNvmeNamespaces<WithCallbackMethod_GetNvmeNamespace<WithCallbackMethod_StatsNvmeNamespace<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeSubsystems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeControllers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNvmeNamespace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNvmeNamespace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNvmeNamespace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNvmeNamespaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNvmeNamespace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatsNvmeNamespace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNvmeSubsystem(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNvmeSubsystem(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNvmeSubsystem(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmeSubsystems(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeSubsystems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNvmeSubsystem(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StatsNvmeSubsystem(context, request, response); }));
    }
    ~WithRawCallbackMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNvmeController(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNvmeController(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNvmeController(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmeControllers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNvmeController(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StatsNvmeController(context, request, response); }));
    }
    ~WithRawCallbackMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNvmeNamespace(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNvmeNamespace(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNvmeNamespace(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNvmeNamespaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNvmeNamespaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNvmeNamespace(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StatsNvmeNamespace(context, request, response); }));
    }
    ~WithRawCallbackMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StatsNvmeNamespace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNvmeSubsystem() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* streamer) {
                       return this->StreamedCreateNvmeSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateNvmeSubsystemRequest,::opi_api::storage::v1::NvmeSubsystem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNvmeSubsystem() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteNvmeSubsystemRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNvmeSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeSubsystemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteNvmeSubsystemRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNvmeSubsystem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* streamer) {
                       return this->StreamedUpdateNvmeSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateNvmeSubsystemRequest,::opi_api::storage::v1::NvmeSubsystem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmeSubsystems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmeSubsystems() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmeSubsystemsRequest, ::opi_api::storage::v1::ListNvmeSubsystemsResponse>* streamer) {
                       return this->StreamedListNvmeSubsystems(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmeSubsystems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmeSubsystems(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeSubsystemsRequest* /*request*/, ::opi_api::storage::v1::ListNvmeSubsystemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmeSubsystems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmeSubsystemsRequest,::opi_api::storage::v1::ListNvmeSubsystemsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNvmeSubsystem() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetNvmeSubsystemRequest, ::opi_api::storage::v1::NvmeSubsystem>* streamer) {
                       return this->StreamedGetNvmeSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::NvmeSubsystem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetNvmeSubsystemRequest,::opi_api::storage::v1::NvmeSubsystem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StatsNvmeSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StatsNvmeSubsystem() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::StatsNvmeSubsystemRequest, ::opi_api::storage::v1::StatsNvmeSubsystemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::StatsNvmeSubsystemRequest, ::opi_api::storage::v1::StatsNvmeSubsystemResponse>* streamer) {
                       return this->StreamedStatsNvmeSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StatsNvmeSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StatsNvmeSubsystem(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeSubsystemRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeSubsystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatsNvmeSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::StatsNvmeSubsystemRequest,::opi_api::storage::v1::StatsNvmeSubsystemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNvmeController() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* streamer) {
                       return this->StreamedCreateNvmeController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNvmeController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateNvmeControllerRequest,::opi_api::storage::v1::NvmeController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNvmeController() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteNvmeControllerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNvmeController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNvmeController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteNvmeControllerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNvmeController() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* streamer) {
                       return this->StreamedUpdateNvmeController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNvmeController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateNvmeControllerRequest,::opi_api::storage::v1::NvmeController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmeControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmeControllers() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmeControllersRequest, ::opi_api::storage::v1::ListNvmeControllersResponse>* streamer) {
                       return this->StreamedListNvmeControllers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmeControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmeControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeControllersRequest* /*request*/, ::opi_api::storage::v1::ListNvmeControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmeControllers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmeControllersRequest,::opi_api::storage::v1::ListNvmeControllersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNvmeController() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetNvmeControllerRequest, ::opi_api::storage::v1::NvmeController>* streamer) {
                       return this->StreamedGetNvmeController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::NvmeController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNvmeController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetNvmeControllerRequest,::opi_api::storage::v1::NvmeController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StatsNvmeController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StatsNvmeController() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::StatsNvmeControllerRequest, ::opi_api::storage::v1::StatsNvmeControllerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::StatsNvmeControllerRequest, ::opi_api::storage::v1::StatsNvmeControllerResponse>* streamer) {
                       return this->StreamedStatsNvmeController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StatsNvmeController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StatsNvmeController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeControllerRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeControllerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatsNvmeController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::StatsNvmeControllerRequest,::opi_api::storage::v1::StatsNvmeControllerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNvmeNamespace() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* streamer) {
                       return this->StreamedCreateNvmeNamespace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNvmeNamespace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateNvmeNamespaceRequest,::opi_api::storage::v1::NvmeNamespace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNvmeNamespace() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteNvmeNamespaceRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNvmeNamespace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteNvmeNamespaceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNvmeNamespace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteNvmeNamespaceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNvmeNamespace() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* streamer) {
                       return this->StreamedUpdateNvmeNamespace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNvmeNamespace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateNvmeNamespaceRequest,::opi_api::storage::v1::NvmeNamespace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNvmeNamespaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNvmeNamespaces() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListNvmeNamespacesRequest, ::opi_api::storage::v1::ListNvmeNamespacesResponse>* streamer) {
                       return this->StreamedListNvmeNamespaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNvmeNamespaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNvmeNamespaces(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListNvmeNamespacesRequest* /*request*/, ::opi_api::storage::v1::ListNvmeNamespacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNvmeNamespaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListNvmeNamespacesRequest,::opi_api::storage::v1::ListNvmeNamespacesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNvmeNamespace() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetNvmeNamespaceRequest, ::opi_api::storage::v1::NvmeNamespace>* streamer) {
                       return this->StreamedGetNvmeNamespace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::NvmeNamespace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNvmeNamespace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetNvmeNamespaceRequest,::opi_api::storage::v1::NvmeNamespace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StatsNvmeNamespace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StatsNvmeNamespace() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::StatsNvmeNamespaceRequest, ::opi_api::storage::v1::StatsNvmeNamespaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::StatsNvmeNamespaceRequest, ::opi_api::storage::v1::StatsNvmeNamespaceResponse>* streamer) {
                       return this->StreamedStatsNvmeNamespace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StatsNvmeNamespace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StatsNvmeNamespace(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::StatsNvmeNamespaceRequest* /*request*/, ::opi_api::storage::v1::StatsNvmeNamespaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatsNvmeNamespace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::StatsNvmeNamespaceRequest,::opi_api::storage::v1::StatsNvmeNamespaceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateNvmeSubsystem<WithStreamedUnaryMethod_DeleteNvmeSubsystem<WithStreamedUnaryMethod_UpdateNvmeSubsystem<WithStreamedUnaryMethod_ListNvmeSubsystems<WithStreamedUnaryMethod_GetNvmeSubsystem<WithStreamedUnaryMethod_StatsNvmeSubsystem<WithStreamedUnaryMethod_CreateNvmeController<WithStreamedUnaryMethod_DeleteNvmeController<WithStreamedUnaryMethod_UpdateNvmeController<WithStreamedUnaryMethod_ListNvmeControllers<WithStreamedUnaryMethod_GetNvmeController<WithStreamedUnaryMethod_StatsNvmeController<WithStreamedUnaryMethod_CreateNvmeNamespace<WithStreamedUnaryMethod_DeleteNvmeNamespace<WithStreamedUnaryMethod_UpdateNvmeNamespace<WithStreamedUnaryMethod_ListNvmeNamespaces<WithStreamedUnaryMethod_GetNvmeNamespace<WithStreamedUnaryMethod_StatsNvmeNamespace<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateNvmeSubsystem<WithStreamedUnaryMethod_DeleteNvmeSubsystem<WithStreamedUnaryMethod_UpdateNvmeSubsystem<WithStreamedUnaryMethod_ListNvmeSubsystems<WithStreamedUnaryMethod_GetNvmeSubsystem<WithStreamedUnaryMethod_StatsNvmeSubsystem<WithStreamedUnaryMethod_CreateNvmeController<WithStreamedUnaryMethod_DeleteNvmeController<WithStreamedUnaryMethod_UpdateNvmeController<WithStreamedUnaryMethod_ListNvmeControllers<WithStreamedUnaryMethod_GetNvmeController<WithStreamedUnaryMethod_StatsNvmeController<WithStreamedUnaryMethod_CreateNvmeNamespace<WithStreamedUnaryMethod_DeleteNvmeNamespace<WithStreamedUnaryMethod_UpdateNvmeNamespace<WithStreamedUnaryMethod_ListNvmeNamespaces<WithStreamedUnaryMethod_GetNvmeNamespace<WithStreamedUnaryMethod_StatsNvmeNamespace<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_frontend_5fnvme_5fpcie_2eproto__INCLUDED
