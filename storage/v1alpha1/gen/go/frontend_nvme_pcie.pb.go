// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: frontend_nvme_pcie.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Namespace  Administrative States
type NVMeNamespacePciState int32

const (
	// unspecified
	NVMeNamespacePciState_NV_ME_NAMESPACE_PCI_STATE_UNSPECIFIED NVMeNamespacePciState = 0
	// namespace disabled state
	NVMeNamespacePciState_NVME_NAMESPACE_PCI_STATE_DISABLED NVMeNamespacePciState = 1
	// namespace enabled state
	NVMeNamespacePciState_NVME_NAMESPACE_PCI_STATE_ENABLED NVMeNamespacePciState = 2
	// namespace being deleted
	NVMeNamespacePciState_NVME_NAMESPACE_PCI_STATE_DELETING NVMeNamespacePciState = 3
)

// Enum value maps for NVMeNamespacePciState.
var (
	NVMeNamespacePciState_name = map[int32]string{
		0: "NV_ME_NAMESPACE_PCI_STATE_UNSPECIFIED",
		1: "NVME_NAMESPACE_PCI_STATE_DISABLED",
		2: "NVME_NAMESPACE_PCI_STATE_ENABLED",
		3: "NVME_NAMESPACE_PCI_STATE_DELETING",
	}
	NVMeNamespacePciState_value = map[string]int32{
		"NV_ME_NAMESPACE_PCI_STATE_UNSPECIFIED": 0,
		"NVME_NAMESPACE_PCI_STATE_DISABLED":     1,
		"NVME_NAMESPACE_PCI_STATE_ENABLED":      2,
		"NVME_NAMESPACE_PCI_STATE_DELETING":     3,
	}
)

func (x NVMeNamespacePciState) Enum() *NVMeNamespacePciState {
	p := new(NVMeNamespacePciState)
	*p = x
	return p
}

func (x NVMeNamespacePciState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NVMeNamespacePciState) Descriptor() protoreflect.EnumDescriptor {
	return file_frontend_nvme_pcie_proto_enumTypes[0].Descriptor()
}

func (NVMeNamespacePciState) Type() protoreflect.EnumType {
	return &file_frontend_nvme_pcie_proto_enumTypes[0]
}

func (x NVMeNamespacePciState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NVMeNamespacePciState.Descriptor instead.
func (NVMeNamespacePciState) EnumDescriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{0}
}

// Namespace PCIe operational states
type NVMeNamespacePciOperState int32

const (
	// unspecified
	NVMeNamespacePciOperState_NV_ME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED NVMeNamespacePciOperState = 0
	// namespace is online and operational
	NVMeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_ONLINE NVMeNamespacePciOperState = 1
	// namespace is offline
	NVMeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE NVMeNamespacePciOperState = 2
)

// Enum value maps for NVMeNamespacePciOperState.
var (
	NVMeNamespacePciOperState_name = map[int32]string{
		0: "NV_ME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED",
		1: "NVME_NAMESPACE_PCI_OPER_STATE_ONLINE",
		2: "NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE",
	}
	NVMeNamespacePciOperState_value = map[string]int32{
		"NV_ME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED": 0,
		"NVME_NAMESPACE_PCI_OPER_STATE_ONLINE":       1,
		"NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE":      2,
	}
)

func (x NVMeNamespacePciOperState) Enum() *NVMeNamespacePciOperState {
	p := new(NVMeNamespacePciOperState)
	*p = x
	return p
}

func (x NVMeNamespacePciOperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NVMeNamespacePciOperState) Descriptor() protoreflect.EnumDescriptor {
	return file_frontend_nvme_pcie_proto_enumTypes[1].Descriptor()
}

func (NVMeNamespacePciOperState) Type() protoreflect.EnumType {
	return &file_frontend_nvme_pcie_proto_enumTypes[1]
}

func (x NVMeNamespacePciOperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NVMeNamespacePciOperState.Descriptor instead.
func (NVMeNamespacePciOperState) EnumDescriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{1}
}

type NVMeSubsystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *NVMeSubsystemSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status *NVMeSubsystemStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NVMeSubsystem) Reset() {
	*x = NVMeSubsystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystem) ProtoMessage() {}

func (x *NVMeSubsystem) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystem.ProtoReflect.Descriptor instead.
func (*NVMeSubsystem) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{0}
}

func (x *NVMeSubsystem) GetSpec() *NVMeSubsystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NVMeSubsystem) GetStatus() *NVMeSubsystemStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NVMeSubsystemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// NVMe subsystem NQN to which the controller belongs
	// Refer to the NQN format in the NVMe base specifications, must not
	// exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
	Nqn string `protobuf:"bytes,2,opt,name=nqn,proto3" json:"nqn,omitempty"`
	// serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
	ModelNumber string `protobuf:"bytes,4,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// maximum namespaces within a subsystem
	MaxNamespaces int64 `protobuf:"varint,5,opt,name=max_namespaces,json=maxNamespaces,proto3" json:"max_namespaces,omitempty"`
}

func (x *NVMeSubsystemSpec) Reset() {
	*x = NVMeSubsystemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemSpec) ProtoMessage() {}

func (x *NVMeSubsystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemSpec.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{1}
}

func (x *NVMeSubsystemSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeSubsystemSpec) GetNqn() string {
	if x != nil {
		return x.Nqn
	}
	return ""
}

func (x *NVMeSubsystemSpec) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *NVMeSubsystemSpec) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *NVMeSubsystemSpec) GetMaxNamespaces() int64 {
	if x != nil {
		return x.MaxNamespaces
	}
	return 0
}

type NVMeSubsystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
	FirmwareRevision string `protobuf:"bytes,1,opt,name=firmware_revision,json=firmwareRevision,proto3" json:"firmware_revision,omitempty"`
	// FRU identfier, 16bytes opaque identity for the type of unit
	FruGuid []byte `protobuf:"bytes,2,opt,name=fru_guid,json=fruGuid,proto3" json:"fru_guid,omitempty"`
}

func (x *NVMeSubsystemStatus) Reset() {
	*x = NVMeSubsystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatus) ProtoMessage() {}

func (x *NVMeSubsystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatus.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{2}
}

func (x *NVMeSubsystemStatus) GetFirmwareRevision() string {
	if x != nil {
		return x.FirmwareRevision
	}
	return ""
}

func (x *NVMeSubsystemStatus) GetFruGuid() []byte {
	if x != nil {
		return x.FruGuid
	}
	return nil
}

type NVMeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *NVMeControllerSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status *NVMeControllerStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NVMeController) Reset() {
	*x = NVMeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeController) ProtoMessage() {}

func (x *NVMeController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeController.ProtoReflect.Descriptor instead.
func (*NVMeController) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{3}
}

func (x *NVMeController) GetSpec() *NVMeControllerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NVMeController) GetStatus() *NVMeControllerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NVMeControllerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// subsystem controller id range: 0 to 65535.
	// must not be reused under the same subsystem
	NvmeControllerId int32 `protobuf:"varint,2,opt,name=nvme_controller_id,json=nvmeControllerId,proto3" json:"nvme_controller_id,omitempty"`
	// subsystem information
	SubsystemId *_go.ObjectKey `protobuf:"bytes,3,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	// xPU's PCI ID for the controller
	PcieId *PciEndpoint `protobuf:"bytes,4,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	// maximum number of host submission queues allowed.
	// If not set, the xPU will provide a default.
	MaxNsq int32 `protobuf:"varint,5,opt,name=max_nsq,json=maxNsq,proto3" json:"max_nsq,omitempty"`
	// maximum number of host completion queues allowed.
	// If not set, the xPU will provide a default.
	MaxNcq int32 `protobuf:"varint,6,opt,name=max_ncq,json=maxNcq,proto3" json:"max_ncq,omitempty"`
	// maximum number of submission queue entries per submission queue, as a power of 2.
	// default value as per spec is 6
	Sqes int32 `protobuf:"varint,7,opt,name=sqes,proto3" json:"sqes,omitempty"`
	// maximum number of completion queue entries per completion queue, as a power of 2.
	// default value as per spec is 4
	Cqes int32 `protobuf:"varint,8,opt,name=cqes,proto3" json:"cqes,omitempty"`
	// maximum Number of namespaces that will be provisioned under
	// the controller.
	MaxNamespaces int32 `protobuf:"varint,9,opt,name=max_namespaces,json=maxNamespaces,proto3" json:"max_namespaces,omitempty"`
}

func (x *NVMeControllerSpec) Reset() {
	*x = NVMeControllerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerSpec) ProtoMessage() {}

func (x *NVMeControllerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerSpec.ProtoReflect.Descriptor instead.
func (*NVMeControllerSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{4}
}

func (x *NVMeControllerSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeControllerSpec) GetNvmeControllerId() int32 {
	if x != nil {
		return x.NvmeControllerId
	}
	return 0
}

func (x *NVMeControllerSpec) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *NVMeControllerSpec) GetPcieId() *PciEndpoint {
	if x != nil {
		return x.PcieId
	}
	return nil
}

func (x *NVMeControllerSpec) GetMaxNsq() int32 {
	if x != nil {
		return x.MaxNsq
	}
	return 0
}

func (x *NVMeControllerSpec) GetMaxNcq() int32 {
	if x != nil {
		return x.MaxNcq
	}
	return 0
}

func (x *NVMeControllerSpec) GetSqes() int32 {
	if x != nil {
		return x.Sqes
	}
	return 0
}

func (x *NVMeControllerSpec) GetCqes() int32 {
	if x != nil {
		return x.Cqes
	}
	return 0
}

func (x *NVMeControllerSpec) GetMaxNamespaces() int32 {
	if x != nil {
		return x.MaxNamespaces
	}
	return 0
}

type NVMeControllerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device is in use by host nvme driver
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *NVMeControllerStatus) Reset() {
	*x = NVMeControllerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatus) ProtoMessage() {}

func (x *NVMeControllerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatus.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{5}
}

func (x *NVMeControllerStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type NVMeNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *NVMeNamespaceSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status *NVMeNamespaceStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NVMeNamespace) Reset() {
	*x = NVMeNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespace) ProtoMessage() {}

func (x *NVMeNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespace.ProtoReflect.Descriptor instead.
func (*NVMeNamespace) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{6}
}

func (x *NVMeNamespace) GetSpec() *NVMeNamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NVMeNamespace) GetStatus() *NVMeNamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NVMeNamespaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespace's unique key
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// subsystem for this namespace
	SubsystemId *_go.ObjectKey `protobuf:"bytes,2,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	// key of the PCIe controller object that will host this namespace.
	ControllerId *_go.ObjectKey `protobuf:"bytes,3,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	// NSID present to the host by the NVMe PCIe controller.
	// If not provided, then the controller will assign an unused NSID
	// within the max namespace range - auto assigned nsid may not work
	// for live migration
	HostNsid int32 `protobuf:"varint,4,opt,name=host_nsid,json=hostNsid,proto3" json:"host_nsid,omitempty"`
	// Block size in bytes, must be power of 2 and must be less than the max
	// io size supported. Typically tested values are 512, and 4k.
	BlockSize int64 `protobuf:"varint,5,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Size/Capacity of the namespace in blocks, size in bytes will
	// be BlockSize x NumBlocks.
	BlocksCount int64 `protobuf:"varint,6,opt,name=blocks_count,json=blocksCount,proto3" json:"blocks_count,omitempty"`
	// Globally unique identifier for the namespace
	Nguid string `protobuf:"bytes,7,opt,name=nguid,proto3" json:"nguid,omitempty"`
	// 64bit Extended unique identifier for the namespace
	// mandatory if guid is not specified
	Eui64 int64 `protobuf:"varint,8,opt,name=eui64,proto3" json:"eui64,omitempty"`
	// Globally unique identifier for the namespace
	Uuid *_go.Uuid `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The back/middle-end volume to back this namespace.
	VolumeId *_go.ObjectKey `protobuf:"bytes,10,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// optimal write size hint to host driver. Host IO stack may use
	// this to regulate IO size. Must be a multiple of the preferred write
	// granularity. Must not exceed the controller maximum IO size value
	// configured in the nvme agent config file.
	OptimalWriteSize int32 `protobuf:"varint,11,opt,name=optimal_write_size,json=optimalWriteSize,proto3" json:"optimal_write_size,omitempty"`
	// preferred write granularity hint to the host driver. Host IO
	// stack may use this to align IO sizes to the write granularity for
	// optimum performance.
	PrefWriteGranularity int32 `protobuf:"varint,12,opt,name=pref_write_granularity,json=prefWriteGranularity,proto3" json:"pref_write_granularity,omitempty"`
}

func (x *NVMeNamespaceSpec) Reset() {
	*x = NVMeNamespaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceSpec) ProtoMessage() {}

func (x *NVMeNamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceSpec.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{7}
}

func (x *NVMeNamespaceSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeNamespaceSpec) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *NVMeNamespaceSpec) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

func (x *NVMeNamespaceSpec) GetHostNsid() int32 {
	if x != nil {
		return x.HostNsid
	}
	return 0
}

func (x *NVMeNamespaceSpec) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *NVMeNamespaceSpec) GetBlocksCount() int64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *NVMeNamespaceSpec) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NVMeNamespaceSpec) GetEui64() int64 {
	if x != nil {
		return x.Eui64
	}
	return 0
}

func (x *NVMeNamespaceSpec) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *NVMeNamespaceSpec) GetVolumeId() *_go.ObjectKey {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (x *NVMeNamespaceSpec) GetOptimalWriteSize() int32 {
	if x != nil {
		return x.OptimalWriteSize
	}
	return 0
}

func (x *NVMeNamespaceSpec) GetPrefWriteGranularity() int32 {
	if x != nil {
		return x.PrefWriteGranularity
	}
	return 0
}

type NVMeNamespaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config state of the namespace object, (enabled, disable, deleting)
	PciState NVMeNamespacePciState `protobuf:"varint,1,opt,name=pci_state,json=pciState,proto3,enum=opi_api.storage.v1.NVMeNamespacePciState" json:"pci_state,omitempty"`
	// Operational state of the namespace object, (connected, disconnected)
	PciOperState NVMeNamespacePciOperState `protobuf:"varint,2,opt,name=pci_oper_state,json=pciOperState,proto3,enum=opi_api.storage.v1.NVMeNamespacePciOperState" json:"pci_oper_state,omitempty"`
}

func (x *NVMeNamespaceStatus) Reset() {
	*x = NVMeNamespaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatus) ProtoMessage() {}

func (x *NVMeNamespaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatus.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{8}
}

func (x *NVMeNamespaceStatus) GetPciState() NVMeNamespacePciState {
	if x != nil {
		return x.PciState
	}
	return NVMeNamespacePciState_NV_ME_NAMESPACE_PCI_STATE_UNSPECIFIED
}

func (x *NVMeNamespaceStatus) GetPciOperState() NVMeNamespacePciOperState {
	if x != nil {
		return x.PciOperState
	}
	return NVMeNamespacePciOperState_NV_ME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED
}

type CreateNVMeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *CreateNVMeSubsystemRequest) Reset() {
	*x = CreateNVMeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNVMeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNVMeSubsystemRequest) ProtoMessage() {}

func (x *CreateNVMeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNVMeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*CreateNVMeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNVMeSubsystemRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type DeleteNVMeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *DeleteNVMeSubsystemRequest) Reset() {
	*x = DeleteNVMeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNVMeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNVMeSubsystemRequest) ProtoMessage() {}

func (x *DeleteNVMeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNVMeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteNVMeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNVMeSubsystemRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type UpdateNVMeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *UpdateNVMeSubsystemRequest) Reset() {
	*x = UpdateNVMeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNVMeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNVMeSubsystemRequest) ProtoMessage() {}

func (x *UpdateNVMeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNVMeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*UpdateNVMeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNVMeSubsystemRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type ListNVMeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMeSubsystemRequest) Reset() {
	*x = ListNVMeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeSubsystemRequest) ProtoMessage() {}

func (x *ListNVMeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*ListNVMeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{12}
}

func (x *ListNVMeSubsystemRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMeSubsystemRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMeSubsystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystems    []*NVMeSubsystem `protobuf:"bytes,1,rep,name=subsystems,proto3" json:"subsystems,omitempty"`
	NextPageToken string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMeSubsystemResponse) Reset() {
	*x = ListNVMeSubsystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeSubsystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeSubsystemResponse) ProtoMessage() {}

func (x *ListNVMeSubsystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeSubsystemResponse.ProtoReflect.Descriptor instead.
func (*ListNVMeSubsystemResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{13}
}

func (x *ListNVMeSubsystemResponse) GetSubsystems() []*NVMeSubsystem {
	if x != nil {
		return x.Subsystems
	}
	return nil
}

func (x *ListNVMeSubsystemResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNVMeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *GetNVMeSubsystemRequest) Reset() {
	*x = GetNVMeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNVMeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNVMeSubsystemRequest) ProtoMessage() {}

func (x *GetNVMeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNVMeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*GetNVMeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{14}
}

func (x *GetNVMeSubsystemRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeSubsystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeSubsystemStatsRequest) Reset() {
	*x = NVMeSubsystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsRequest) ProtoMessage() {}

func (x *NVMeSubsystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{15}
}

func (x *NVMeSubsystemStatsRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeSubsystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats string `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeSubsystemStatsResponse) Reset() {
	*x = NVMeSubsystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsResponse) ProtoMessage() {}

func (x *NVMeSubsystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{16}
}

func (x *NVMeSubsystemStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type CreateNVMeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *CreateNVMeControllerRequest) Reset() {
	*x = CreateNVMeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNVMeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNVMeControllerRequest) ProtoMessage() {}

func (x *CreateNVMeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNVMeControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateNVMeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{17}
}

func (x *CreateNVMeControllerRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type DeleteNVMeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId *_go.ObjectKey `protobuf:"bytes,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *DeleteNVMeControllerRequest) Reset() {
	*x = DeleteNVMeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNVMeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNVMeControllerRequest) ProtoMessage() {}

func (x *DeleteNVMeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNVMeControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteNVMeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteNVMeControllerRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

type UpdateNVMeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *UpdateNVMeControllerRequest) Reset() {
	*x = UpdateNVMeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNVMeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNVMeControllerRequest) ProtoMessage() {}

func (x *UpdateNVMeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNVMeControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateNVMeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateNVMeControllerRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type ListNVMeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	PageSize    int32          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken   string         `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMeControllerRequest) Reset() {
	*x = ListNVMeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeControllerRequest) ProtoMessage() {}

func (x *ListNVMeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeControllerRequest.ProtoReflect.Descriptor instead.
func (*ListNVMeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{20}
}

func (x *ListNVMeControllerRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *ListNVMeControllerRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMeControllerRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMeControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controllers   []*NVMeController `protobuf:"bytes,1,rep,name=controllers,proto3" json:"controllers,omitempty"`
	NextPageToken string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMeControllerResponse) Reset() {
	*x = ListNVMeControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeControllerResponse) ProtoMessage() {}

func (x *ListNVMeControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeControllerResponse.ProtoReflect.Descriptor instead.
func (*ListNVMeControllerResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{21}
}

func (x *ListNVMeControllerResponse) GetControllers() []*NVMeController {
	if x != nil {
		return x.Controllers
	}
	return nil
}

func (x *ListNVMeControllerResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNVMeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId *_go.ObjectKey `protobuf:"bytes,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *GetNVMeControllerRequest) Reset() {
	*x = GetNVMeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNVMeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNVMeControllerRequest) ProtoMessage() {}

func (x *GetNVMeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNVMeControllerRequest.ProtoReflect.Descriptor instead.
func (*GetNVMeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{22}
}

func (x *GetNVMeControllerRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

type NVMeControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerStatsRequest) Reset() {
	*x = NVMeControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsRequest) ProtoMessage() {}

func (x *NVMeControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{23}
}

func (x *NVMeControllerStatsRequest) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type NVMeControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeControllerStatsResponse) Reset() {
	*x = NVMeControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsResponse) ProtoMessage() {}

func (x *NVMeControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{24}
}

func (x *NVMeControllerStatsResponse) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type CreateNVMeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CreateNVMeNamespaceRequest) Reset() {
	*x = CreateNVMeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNVMeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNVMeNamespaceRequest) ProtoMessage() {}

func (x *CreateNVMeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNVMeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNVMeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{25}
}

func (x *CreateNVMeNamespaceRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type DeleteNVMeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *DeleteNVMeNamespaceRequest) Reset() {
	*x = DeleteNVMeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNVMeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNVMeNamespaceRequest) ProtoMessage() {}

func (x *DeleteNVMeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNVMeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNVMeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteNVMeNamespaceRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type UpdateNVMeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *UpdateNVMeNamespaceRequest) Reset() {
	*x = UpdateNVMeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNVMeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNVMeNamespaceRequest) ProtoMessage() {}

func (x *UpdateNVMeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNVMeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNVMeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateNVMeNamespaceRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ListNVMeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId *_go.ObjectKey `protobuf:"bytes,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	PageSize     int32          `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken    string         `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMeNamespaceRequest) Reset() {
	*x = ListNVMeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeNamespaceRequest) ProtoMessage() {}

func (x *ListNVMeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListNVMeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{28}
}

func (x *ListNVMeNamespaceRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *ListNVMeNamespaceRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

func (x *ListNVMeNamespaceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMeNamespaceRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMeNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces    []*NVMeNamespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	NextPageToken string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMeNamespaceResponse) Reset() {
	*x = ListNVMeNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMeNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMeNamespaceResponse) ProtoMessage() {}

func (x *ListNVMeNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMeNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListNVMeNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{29}
}

func (x *ListNVMeNamespaceResponse) GetNamespaces() []*NVMeNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ListNVMeNamespaceResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNVMeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *GetNVMeNamespaceRequest) Reset() {
	*x = GetNVMeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNVMeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNVMeNamespaceRequest) ProtoMessage() {}

func (x *GetNVMeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNVMeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetNVMeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{30}
}

func (x *GetNVMeNamespaceRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type NVMeNamespaceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceStatsRequest) Reset() {
	*x = NVMeNamespaceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsRequest) ProtoMessage() {}

func (x *NVMeNamespaceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{31}
}

func (x *NVMeNamespaceStatsRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type NVMeNamespaceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeNamespaceStatsResponse) Reset() {
	*x = NVMeNamespaceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsResponse) ProtoMessage() {}

func (x *NVMeNamespaceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{32}
}

func (x *NVMeNamespaceStatsResponse) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeNamespaceStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

var File_frontend_nvme_pcie_proto protoreflect.FileDescriptor

var file_frontend_nvme_pcie_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x70, 0x63, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x71, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x71, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x72, 0x75, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x66, 0x72, 0x75, 0x47, 0x75, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x12, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x76, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07,
	0x70, 0x63, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x63, 0x69, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73,
	0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x73, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x63, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x63, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x71, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x71, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x71, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x71, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x67, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x61, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x70, 0x72, 0x65, 0x66, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x09,
	0x70, 0x63, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x63, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x63, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x63, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x63, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x63, 0x69,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x5d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x56, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x98, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x61, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xda, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2a, 0xb6, 0x01, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x63, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x25,
	0x4e, 0x56, 0x5f, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x56, 0x4d, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a, 0x19,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x63, 0x69,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x56, 0x5f,
	0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x32, 0xb0,
	0x13, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0x12, 0x90, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x32, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x8c, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x8b,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0x12, 0x78, 0x0a, 0x13,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x56,
	0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x64, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x63, 0x69, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_nvme_pcie_proto_rawDescOnce sync.Once
	file_frontend_nvme_pcie_proto_rawDescData = file_frontend_nvme_pcie_proto_rawDesc
)

func file_frontend_nvme_pcie_proto_rawDescGZIP() []byte {
	file_frontend_nvme_pcie_proto_rawDescOnce.Do(func() {
		file_frontend_nvme_pcie_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_nvme_pcie_proto_rawDescData)
	})
	return file_frontend_nvme_pcie_proto_rawDescData
}

var file_frontend_nvme_pcie_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_frontend_nvme_pcie_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_frontend_nvme_pcie_proto_goTypes = []interface{}{
	(NVMeNamespacePciState)(0),          // 0: opi_api.storage.v1.NVMeNamespacePciState
	(NVMeNamespacePciOperState)(0),      // 1: opi_api.storage.v1.NVMeNamespacePciOperState
	(*NVMeSubsystem)(nil),               // 2: opi_api.storage.v1.NVMeSubsystem
	(*NVMeSubsystemSpec)(nil),           // 3: opi_api.storage.v1.NVMeSubsystemSpec
	(*NVMeSubsystemStatus)(nil),         // 4: opi_api.storage.v1.NVMeSubsystemStatus
	(*NVMeController)(nil),              // 5: opi_api.storage.v1.NVMeController
	(*NVMeControllerSpec)(nil),          // 6: opi_api.storage.v1.NVMeControllerSpec
	(*NVMeControllerStatus)(nil),        // 7: opi_api.storage.v1.NVMeControllerStatus
	(*NVMeNamespace)(nil),               // 8: opi_api.storage.v1.NVMeNamespace
	(*NVMeNamespaceSpec)(nil),           // 9: opi_api.storage.v1.NVMeNamespaceSpec
	(*NVMeNamespaceStatus)(nil),         // 10: opi_api.storage.v1.NVMeNamespaceStatus
	(*CreateNVMeSubsystemRequest)(nil),  // 11: opi_api.storage.v1.CreateNVMeSubsystemRequest
	(*DeleteNVMeSubsystemRequest)(nil),  // 12: opi_api.storage.v1.DeleteNVMeSubsystemRequest
	(*UpdateNVMeSubsystemRequest)(nil),  // 13: opi_api.storage.v1.UpdateNVMeSubsystemRequest
	(*ListNVMeSubsystemRequest)(nil),    // 14: opi_api.storage.v1.ListNVMeSubsystemRequest
	(*ListNVMeSubsystemResponse)(nil),   // 15: opi_api.storage.v1.ListNVMeSubsystemResponse
	(*GetNVMeSubsystemRequest)(nil),     // 16: opi_api.storage.v1.GetNVMeSubsystemRequest
	(*NVMeSubsystemStatsRequest)(nil),   // 17: opi_api.storage.v1.NVMeSubsystemStatsRequest
	(*NVMeSubsystemStatsResponse)(nil),  // 18: opi_api.storage.v1.NVMeSubsystemStatsResponse
	(*CreateNVMeControllerRequest)(nil), // 19: opi_api.storage.v1.CreateNVMeControllerRequest
	(*DeleteNVMeControllerRequest)(nil), // 20: opi_api.storage.v1.DeleteNVMeControllerRequest
	(*UpdateNVMeControllerRequest)(nil), // 21: opi_api.storage.v1.UpdateNVMeControllerRequest
	(*ListNVMeControllerRequest)(nil),   // 22: opi_api.storage.v1.ListNVMeControllerRequest
	(*ListNVMeControllerResponse)(nil),  // 23: opi_api.storage.v1.ListNVMeControllerResponse
	(*GetNVMeControllerRequest)(nil),    // 24: opi_api.storage.v1.GetNVMeControllerRequest
	(*NVMeControllerStatsRequest)(nil),  // 25: opi_api.storage.v1.NVMeControllerStatsRequest
	(*NVMeControllerStatsResponse)(nil), // 26: opi_api.storage.v1.NVMeControllerStatsResponse
	(*CreateNVMeNamespaceRequest)(nil),  // 27: opi_api.storage.v1.CreateNVMeNamespaceRequest
	(*DeleteNVMeNamespaceRequest)(nil),  // 28: opi_api.storage.v1.DeleteNVMeNamespaceRequest
	(*UpdateNVMeNamespaceRequest)(nil),  // 29: opi_api.storage.v1.UpdateNVMeNamespaceRequest
	(*ListNVMeNamespaceRequest)(nil),    // 30: opi_api.storage.v1.ListNVMeNamespaceRequest
	(*ListNVMeNamespaceResponse)(nil),   // 31: opi_api.storage.v1.ListNVMeNamespaceResponse
	(*GetNVMeNamespaceRequest)(nil),     // 32: opi_api.storage.v1.GetNVMeNamespaceRequest
	(*NVMeNamespaceStatsRequest)(nil),   // 33: opi_api.storage.v1.NVMeNamespaceStatsRequest
	(*NVMeNamespaceStatsResponse)(nil),  // 34: opi_api.storage.v1.NVMeNamespaceStatsResponse
	(*_go.ObjectKey)(nil),               // 35: opi_api.common.v1.ObjectKey
	(*PciEndpoint)(nil),                 // 36: opi_api.storage.v1.PciEndpoint
	(*_go.Uuid)(nil),                    // 37: opi_api.common.v1.Uuid
	(*emptypb.Empty)(nil),               // 38: google.protobuf.Empty
}
var file_frontend_nvme_pcie_proto_depIdxs = []int32{
	3,  // 0: opi_api.storage.v1.NVMeSubsystem.spec:type_name -> opi_api.storage.v1.NVMeSubsystemSpec
	4,  // 1: opi_api.storage.v1.NVMeSubsystem.status:type_name -> opi_api.storage.v1.NVMeSubsystemStatus
	35, // 2: opi_api.storage.v1.NVMeSubsystemSpec.id:type_name -> opi_api.common.v1.ObjectKey
	6,  // 3: opi_api.storage.v1.NVMeController.spec:type_name -> opi_api.storage.v1.NVMeControllerSpec
	7,  // 4: opi_api.storage.v1.NVMeController.status:type_name -> opi_api.storage.v1.NVMeControllerStatus
	35, // 5: opi_api.storage.v1.NVMeControllerSpec.id:type_name -> opi_api.common.v1.ObjectKey
	35, // 6: opi_api.storage.v1.NVMeControllerSpec.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	36, // 7: opi_api.storage.v1.NVMeControllerSpec.pcie_id:type_name -> opi_api.storage.v1.PciEndpoint
	9,  // 8: opi_api.storage.v1.NVMeNamespace.spec:type_name -> opi_api.storage.v1.NVMeNamespaceSpec
	10, // 9: opi_api.storage.v1.NVMeNamespace.status:type_name -> opi_api.storage.v1.NVMeNamespaceStatus
	35, // 10: opi_api.storage.v1.NVMeNamespaceSpec.id:type_name -> opi_api.common.v1.ObjectKey
	35, // 11: opi_api.storage.v1.NVMeNamespaceSpec.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 12: opi_api.storage.v1.NVMeNamespaceSpec.controller_id:type_name -> opi_api.common.v1.ObjectKey
	37, // 13: opi_api.storage.v1.NVMeNamespaceSpec.uuid:type_name -> opi_api.common.v1.Uuid
	35, // 14: opi_api.storage.v1.NVMeNamespaceSpec.volume_id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 15: opi_api.storage.v1.NVMeNamespaceStatus.pci_state:type_name -> opi_api.storage.v1.NVMeNamespacePciState
	1,  // 16: opi_api.storage.v1.NVMeNamespaceStatus.pci_oper_state:type_name -> opi_api.storage.v1.NVMeNamespacePciOperState
	2,  // 17: opi_api.storage.v1.CreateNVMeSubsystemRequest.subsystem:type_name -> opi_api.storage.v1.NVMeSubsystem
	35, // 18: opi_api.storage.v1.DeleteNVMeSubsystemRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	2,  // 19: opi_api.storage.v1.UpdateNVMeSubsystemRequest.subsystem:type_name -> opi_api.storage.v1.NVMeSubsystem
	2,  // 20: opi_api.storage.v1.ListNVMeSubsystemResponse.subsystems:type_name -> opi_api.storage.v1.NVMeSubsystem
	35, // 21: opi_api.storage.v1.GetNVMeSubsystemRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 22: opi_api.storage.v1.NVMeSubsystemStatsRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 23: opi_api.storage.v1.CreateNVMeControllerRequest.controller:type_name -> opi_api.storage.v1.NVMeController
	35, // 24: opi_api.storage.v1.DeleteNVMeControllerRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 25: opi_api.storage.v1.UpdateNVMeControllerRequest.controller:type_name -> opi_api.storage.v1.NVMeController
	35, // 26: opi_api.storage.v1.ListNVMeControllerRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 27: opi_api.storage.v1.ListNVMeControllerResponse.controllers:type_name -> opi_api.storage.v1.NVMeController
	35, // 28: opi_api.storage.v1.GetNVMeControllerRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 29: opi_api.storage.v1.NVMeControllerStatsRequest.id:type_name -> opi_api.common.v1.ObjectKey
	35, // 30: opi_api.storage.v1.NVMeControllerStatsResponse.id:type_name -> opi_api.common.v1.ObjectKey
	8,  // 31: opi_api.storage.v1.CreateNVMeNamespaceRequest.namespace:type_name -> opi_api.storage.v1.NVMeNamespace
	35, // 32: opi_api.storage.v1.DeleteNVMeNamespaceRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	8,  // 33: opi_api.storage.v1.UpdateNVMeNamespaceRequest.namespace:type_name -> opi_api.storage.v1.NVMeNamespace
	35, // 34: opi_api.storage.v1.ListNVMeNamespaceRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 35: opi_api.storage.v1.ListNVMeNamespaceRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	8,  // 36: opi_api.storage.v1.ListNVMeNamespaceResponse.namespaces:type_name -> opi_api.storage.v1.NVMeNamespace
	35, // 37: opi_api.storage.v1.GetNVMeNamespaceRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 38: opi_api.storage.v1.NVMeNamespaceStatsRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	35, // 39: opi_api.storage.v1.NVMeNamespaceStatsResponse.id:type_name -> opi_api.common.v1.ObjectKey
	11, // 40: opi_api.storage.v1.FrontendNvmeService.CreateNVMeSubsystem:input_type -> opi_api.storage.v1.CreateNVMeSubsystemRequest
	12, // 41: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeSubsystem:input_type -> opi_api.storage.v1.DeleteNVMeSubsystemRequest
	13, // 42: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeSubsystem:input_type -> opi_api.storage.v1.UpdateNVMeSubsystemRequest
	14, // 43: opi_api.storage.v1.FrontendNvmeService.ListNVMeSubsystem:input_type -> opi_api.storage.v1.ListNVMeSubsystemRequest
	16, // 44: opi_api.storage.v1.FrontendNvmeService.GetNVMeSubsystem:input_type -> opi_api.storage.v1.GetNVMeSubsystemRequest
	17, // 45: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemStats:input_type -> opi_api.storage.v1.NVMeSubsystemStatsRequest
	19, // 46: opi_api.storage.v1.FrontendNvmeService.CreateNVMeController:input_type -> opi_api.storage.v1.CreateNVMeControllerRequest
	20, // 47: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeController:input_type -> opi_api.storage.v1.DeleteNVMeControllerRequest
	21, // 48: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeController:input_type -> opi_api.storage.v1.UpdateNVMeControllerRequest
	22, // 49: opi_api.storage.v1.FrontendNvmeService.ListNVMeController:input_type -> opi_api.storage.v1.ListNVMeControllerRequest
	24, // 50: opi_api.storage.v1.FrontendNvmeService.GetNVMeController:input_type -> opi_api.storage.v1.GetNVMeControllerRequest
	25, // 51: opi_api.storage.v1.FrontendNvmeService.NVMeControllerStats:input_type -> opi_api.storage.v1.NVMeControllerStatsRequest
	27, // 52: opi_api.storage.v1.FrontendNvmeService.CreateNVMeNamespace:input_type -> opi_api.storage.v1.CreateNVMeNamespaceRequest
	28, // 53: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeNamespace:input_type -> opi_api.storage.v1.DeleteNVMeNamespaceRequest
	29, // 54: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeNamespace:input_type -> opi_api.storage.v1.UpdateNVMeNamespaceRequest
	30, // 55: opi_api.storage.v1.FrontendNvmeService.ListNVMeNamespace:input_type -> opi_api.storage.v1.ListNVMeNamespaceRequest
	32, // 56: opi_api.storage.v1.FrontendNvmeService.GetNVMeNamespace:input_type -> opi_api.storage.v1.GetNVMeNamespaceRequest
	33, // 57: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceStats:input_type -> opi_api.storage.v1.NVMeNamespaceStatsRequest
	2,  // 58: opi_api.storage.v1.FrontendNvmeService.CreateNVMeSubsystem:output_type -> opi_api.storage.v1.NVMeSubsystem
	38, // 59: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeSubsystem:output_type -> google.protobuf.Empty
	2,  // 60: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeSubsystem:output_type -> opi_api.storage.v1.NVMeSubsystem
	15, // 61: opi_api.storage.v1.FrontendNvmeService.ListNVMeSubsystem:output_type -> opi_api.storage.v1.ListNVMeSubsystemResponse
	2,  // 62: opi_api.storage.v1.FrontendNvmeService.GetNVMeSubsystem:output_type -> opi_api.storage.v1.NVMeSubsystem
	18, // 63: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemStats:output_type -> opi_api.storage.v1.NVMeSubsystemStatsResponse
	5,  // 64: opi_api.storage.v1.FrontendNvmeService.CreateNVMeController:output_type -> opi_api.storage.v1.NVMeController
	38, // 65: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeController:output_type -> google.protobuf.Empty
	5,  // 66: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeController:output_type -> opi_api.storage.v1.NVMeController
	23, // 67: opi_api.storage.v1.FrontendNvmeService.ListNVMeController:output_type -> opi_api.storage.v1.ListNVMeControllerResponse
	5,  // 68: opi_api.storage.v1.FrontendNvmeService.GetNVMeController:output_type -> opi_api.storage.v1.NVMeController
	26, // 69: opi_api.storage.v1.FrontendNvmeService.NVMeControllerStats:output_type -> opi_api.storage.v1.NVMeControllerStatsResponse
	8,  // 70: opi_api.storage.v1.FrontendNvmeService.CreateNVMeNamespace:output_type -> opi_api.storage.v1.NVMeNamespace
	38, // 71: opi_api.storage.v1.FrontendNvmeService.DeleteNVMeNamespace:output_type -> google.protobuf.Empty
	8,  // 72: opi_api.storage.v1.FrontendNvmeService.UpdateNVMeNamespace:output_type -> opi_api.storage.v1.NVMeNamespace
	31, // 73: opi_api.storage.v1.FrontendNvmeService.ListNVMeNamespace:output_type -> opi_api.storage.v1.ListNVMeNamespaceResponse
	8,  // 74: opi_api.storage.v1.FrontendNvmeService.GetNVMeNamespace:output_type -> opi_api.storage.v1.NVMeNamespace
	34, // 75: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceStats:output_type -> opi_api.storage.v1.NVMeNamespaceStatsResponse
	58, // [58:76] is the sub-list for method output_type
	40, // [40:58] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_frontend_nvme_pcie_proto_init() }
func file_frontend_nvme_pcie_proto_init() {
	if File_frontend_nvme_pcie_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frontend_nvme_pcie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNVMeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNVMeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNVMeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeSubsystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNVMeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNVMeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNVMeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNVMeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNVMeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNVMeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNVMeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNVMeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMeNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNVMeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_nvme_pcie_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frontend_nvme_pcie_proto_goTypes,
		DependencyIndexes: file_frontend_nvme_pcie_proto_depIdxs,
		EnumInfos:         file_frontend_nvme_pcie_proto_enumTypes,
		MessageInfos:      file_frontend_nvme_pcie_proto_msgTypes,
	}.Build()
	File_frontend_nvme_pcie_proto = out.File
	file_frontend_nvme_pcie_proto_rawDesc = nil
	file_frontend_nvme_pcie_proto_goTypes = nil
	file_frontend_nvme_pcie_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontendNvmeServiceClient is the client API for FrontendNvmeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendNvmeServiceClient interface {
	CreateNVMeSubsystem(ctx context.Context, in *CreateNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	DeleteNVMeSubsystem(ctx context.Context, in *DeleteNVMeSubsystemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNVMeSubsystem(ctx context.Context, in *UpdateNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	ListNVMeSubsystem(ctx context.Context, in *ListNVMeSubsystemRequest, opts ...grpc.CallOption) (*ListNVMeSubsystemResponse, error)
	GetNVMeSubsystem(ctx context.Context, in *GetNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error)
	CreateNVMeController(ctx context.Context, in *CreateNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error)
	DeleteNVMeController(ctx context.Context, in *DeleteNVMeControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNVMeController(ctx context.Context, in *UpdateNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error)
	ListNVMeController(ctx context.Context, in *ListNVMeControllerRequest, opts ...grpc.CallOption) (*ListNVMeControllerResponse, error)
	GetNVMeController(ctx context.Context, in *GetNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error)
	NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error)
	CreateNVMeNamespace(ctx context.Context, in *CreateNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	DeleteNVMeNamespace(ctx context.Context, in *DeleteNVMeNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNVMeNamespace(ctx context.Context, in *UpdateNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	ListNVMeNamespace(ctx context.Context, in *ListNVMeNamespaceRequest, opts ...grpc.CallOption) (*ListNVMeNamespaceResponse, error)
	GetNVMeNamespace(ctx context.Context, in *GetNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error)
}

type frontendNvmeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendNvmeServiceClient(cc grpc.ClientConnInterface) FrontendNvmeServiceClient {
	return &frontendNvmeServiceClient{cc}
}

func (c *frontendNvmeServiceClient) CreateNVMeSubsystem(ctx context.Context, in *CreateNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNVMeSubsystem(ctx context.Context, in *DeleteNVMeSubsystemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNVMeSubsystem(ctx context.Context, in *UpdateNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNVMeSubsystem(ctx context.Context, in *ListNVMeSubsystemRequest, opts ...grpc.CallOption) (*ListNVMeSubsystemResponse, error) {
	out := new(ListNVMeSubsystemResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNVMeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNVMeSubsystem(ctx context.Context, in *GetNVMeSubsystemRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNVMeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error) {
	out := new(NVMeSubsystemStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) CreateNVMeController(ctx context.Context, in *CreateNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNVMeController(ctx context.Context, in *DeleteNVMeControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNVMeController(ctx context.Context, in *UpdateNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNVMeController(ctx context.Context, in *ListNVMeControllerRequest, opts ...grpc.CallOption) (*ListNVMeControllerResponse, error) {
	out := new(ListNVMeControllerResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNVMeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNVMeController(ctx context.Context, in *GetNVMeControllerRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNVMeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error) {
	out := new(NVMeControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) CreateNVMeNamespace(ctx context.Context, in *CreateNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNVMeNamespace(ctx context.Context, in *DeleteNVMeNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNVMeNamespace(ctx context.Context, in *UpdateNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNVMeNamespace(ctx context.Context, in *ListNVMeNamespaceRequest, opts ...grpc.CallOption) (*ListNVMeNamespaceResponse, error) {
	out := new(ListNVMeNamespaceResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNVMeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNVMeNamespace(ctx context.Context, in *GetNVMeNamespaceRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNVMeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error) {
	out := new(NVMeNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendNvmeServiceServer is the server API for FrontendNvmeService service.
type FrontendNvmeServiceServer interface {
	CreateNVMeSubsystem(context.Context, *CreateNVMeSubsystemRequest) (*NVMeSubsystem, error)
	DeleteNVMeSubsystem(context.Context, *DeleteNVMeSubsystemRequest) (*emptypb.Empty, error)
	UpdateNVMeSubsystem(context.Context, *UpdateNVMeSubsystemRequest) (*NVMeSubsystem, error)
	ListNVMeSubsystem(context.Context, *ListNVMeSubsystemRequest) (*ListNVMeSubsystemResponse, error)
	GetNVMeSubsystem(context.Context, *GetNVMeSubsystemRequest) (*NVMeSubsystem, error)
	NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error)
	CreateNVMeController(context.Context, *CreateNVMeControllerRequest) (*NVMeController, error)
	DeleteNVMeController(context.Context, *DeleteNVMeControllerRequest) (*emptypb.Empty, error)
	UpdateNVMeController(context.Context, *UpdateNVMeControllerRequest) (*NVMeController, error)
	ListNVMeController(context.Context, *ListNVMeControllerRequest) (*ListNVMeControllerResponse, error)
	GetNVMeController(context.Context, *GetNVMeControllerRequest) (*NVMeController, error)
	NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error)
	CreateNVMeNamespace(context.Context, *CreateNVMeNamespaceRequest) (*NVMeNamespace, error)
	DeleteNVMeNamespace(context.Context, *DeleteNVMeNamespaceRequest) (*emptypb.Empty, error)
	UpdateNVMeNamespace(context.Context, *UpdateNVMeNamespaceRequest) (*NVMeNamespace, error)
	ListNVMeNamespace(context.Context, *ListNVMeNamespaceRequest) (*ListNVMeNamespaceResponse, error)
	GetNVMeNamespace(context.Context, *GetNVMeNamespaceRequest) (*NVMeNamespace, error)
	NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error)
}

// UnimplementedFrontendNvmeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendNvmeServiceServer struct {
}

func (*UnimplementedFrontendNvmeServiceServer) CreateNVMeSubsystem(context.Context, *CreateNVMeSubsystemRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNVMeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNVMeSubsystem(context.Context, *DeleteNVMeSubsystemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNVMeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNVMeSubsystem(context.Context, *UpdateNVMeSubsystemRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNVMeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNVMeSubsystem(context.Context, *ListNVMeSubsystemRequest) (*ListNVMeSubsystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNVMeSubsystem(context.Context, *GetNVMeSubsystemRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNVMeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) CreateNVMeController(context.Context, *CreateNVMeControllerRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNVMeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNVMeController(context.Context, *DeleteNVMeControllerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNVMeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNVMeController(context.Context, *UpdateNVMeControllerRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNVMeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNVMeController(context.Context, *ListNVMeControllerRequest) (*ListNVMeControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNVMeController(context.Context, *GetNVMeControllerRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNVMeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) CreateNVMeNamespace(context.Context, *CreateNVMeNamespaceRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNVMeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNVMeNamespace(context.Context, *DeleteNVMeNamespaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNVMeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNVMeNamespace(context.Context, *UpdateNVMeNamespaceRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNVMeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNVMeNamespace(context.Context, *ListNVMeNamespaceRequest) (*ListNVMeNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNVMeNamespace(context.Context, *GetNVMeNamespaceRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNVMeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceStats not implemented")
}

func RegisterFrontendNvmeServiceServer(s *grpc.Server, srv FrontendNvmeServiceServer) {
	s.RegisterService(&_FrontendNvmeService_serviceDesc, srv)
}

func _FrontendNvmeService_CreateNVMeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNVMeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNVMeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNVMeSubsystem(ctx, req.(*CreateNVMeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNVMeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNVMeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeSubsystem(ctx, req.(*DeleteNVMeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNVMeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNVMeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeSubsystem(ctx, req.(*UpdateNVMeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNVMeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNVMeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNVMeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNVMeSubsystem(ctx, req.(*ListNVMeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNVMeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNVMeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNVMeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNVMeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNVMeSubsystem(ctx, req.(*GetNVMeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemStats(ctx, req.(*NVMeSubsystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_CreateNVMeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNVMeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNVMeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNVMeController(ctx, req.(*CreateNVMeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNVMeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNVMeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeController(ctx, req.(*DeleteNVMeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNVMeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNVMeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeController(ctx, req.(*UpdateNVMeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNVMeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNVMeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNVMeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNVMeController(ctx, req.(*ListNVMeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNVMeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNVMeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNVMeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNVMeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNVMeController(ctx, req.(*GetNVMeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerStats(ctx, req.(*NVMeControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_CreateNVMeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNVMeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNVMeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNVMeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNVMeNamespace(ctx, req.(*CreateNVMeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNVMeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNVMeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNVMeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNVMeNamespace(ctx, req.(*DeleteNVMeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNVMeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNVMeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNVMeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNVMeNamespace(ctx, req.(*UpdateNVMeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNVMeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNVMeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNVMeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNVMeNamespace(ctx, req.(*ListNVMeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNVMeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNVMeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNVMeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNVMeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNVMeNamespace(ctx, req.(*GetNVMeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceStats(ctx, req.(*NVMeNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendNvmeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.FrontendNvmeService",
	HandlerType: (*FrontendNvmeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNVMeSubsystem",
			Handler:    _FrontendNvmeService_CreateNVMeSubsystem_Handler,
		},
		{
			MethodName: "DeleteNVMeSubsystem",
			Handler:    _FrontendNvmeService_DeleteNVMeSubsystem_Handler,
		},
		{
			MethodName: "UpdateNVMeSubsystem",
			Handler:    _FrontendNvmeService_UpdateNVMeSubsystem_Handler,
		},
		{
			MethodName: "ListNVMeSubsystem",
			Handler:    _FrontendNvmeService_ListNVMeSubsystem_Handler,
		},
		{
			MethodName: "GetNVMeSubsystem",
			Handler:    _FrontendNvmeService_GetNVMeSubsystem_Handler,
		},
		{
			MethodName: "NVMeSubsystemStats",
			Handler:    _FrontendNvmeService_NVMeSubsystemStats_Handler,
		},
		{
			MethodName: "CreateNVMeController",
			Handler:    _FrontendNvmeService_CreateNVMeController_Handler,
		},
		{
			MethodName: "DeleteNVMeController",
			Handler:    _FrontendNvmeService_DeleteNVMeController_Handler,
		},
		{
			MethodName: "UpdateNVMeController",
			Handler:    _FrontendNvmeService_UpdateNVMeController_Handler,
		},
		{
			MethodName: "ListNVMeController",
			Handler:    _FrontendNvmeService_ListNVMeController_Handler,
		},
		{
			MethodName: "GetNVMeController",
			Handler:    _FrontendNvmeService_GetNVMeController_Handler,
		},
		{
			MethodName: "NVMeControllerStats",
			Handler:    _FrontendNvmeService_NVMeControllerStats_Handler,
		},
		{
			MethodName: "CreateNVMeNamespace",
			Handler:    _FrontendNvmeService_CreateNVMeNamespace_Handler,
		},
		{
			MethodName: "DeleteNVMeNamespace",
			Handler:    _FrontendNvmeService_DeleteNVMeNamespace_Handler,
		},
		{
			MethodName: "UpdateNVMeNamespace",
			Handler:    _FrontendNvmeService_UpdateNVMeNamespace_Handler,
		},
		{
			MethodName: "ListNVMeNamespace",
			Handler:    _FrontendNvmeService_ListNVMeNamespace_Handler,
		},
		{
			MethodName: "GetNVMeNamespace",
			Handler:    _FrontendNvmeService_GetNVMeNamespace_Handler,
		},
		{
			MethodName: "NVMeNamespaceStats",
			Handler:    _FrontendNvmeService_NVMeNamespaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend_nvme_pcie.proto",
}
