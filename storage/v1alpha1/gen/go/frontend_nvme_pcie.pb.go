// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: frontend_nvme_pcie.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NVMeSubsystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// NVMe subsystem NQN to which the controller belongs
	// Refer to the NQN format in the NVMe base specifications, must not
	// exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
	Nqn string `protobuf:"bytes,2,opt,name=nqn,proto3" json:"nqn,omitempty"`
	// serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
	ModelNumber string `protobuf:"bytes,4,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// maximum namespaces within a subsystem
	MaxNs int64 `protobuf:"varint,5,opt,name=max_ns,json=maxNs,proto3" json:"max_ns,omitempty"`
	// firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
	FirmwareRevision string `protobuf:"bytes,6,opt,name=firmware_revision,json=firmwareRevision,proto3" json:"firmware_revision,omitempty"`
	// FRU identfier, 16bytes opaque identity for the type of unit
	FruGuid []byte `protobuf:"bytes,7,opt,name=fru_guid,json=fruGuid,proto3" json:"fru_guid,omitempty"`
}

func (x *NVMeSubsystem) Reset() {
	*x = NVMeSubsystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystem) ProtoMessage() {}

func (x *NVMeSubsystem) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystem.ProtoReflect.Descriptor instead.
func (*NVMeSubsystem) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{0}
}

func (x *NVMeSubsystem) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeSubsystem) GetNqn() string {
	if x != nil {
		return x.Nqn
	}
	return ""
}

func (x *NVMeSubsystem) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *NVMeSubsystem) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *NVMeSubsystem) GetMaxNs() int64 {
	if x != nil {
		return x.MaxNs
	}
	return 0
}

func (x *NVMeSubsystem) GetFirmwareRevision() string {
	if x != nil {
		return x.FirmwareRevision
	}
	return ""
}

func (x *NVMeSubsystem) GetFruGuid() []byte {
	if x != nil {
		return x.FruGuid
	}
	return nil
}

type NVMeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// subsystem controller id range: 0 to 65535.
	// must not be reused under the same subsystem
	NvmeControllerId uint32 `protobuf:"varint,2,opt,name=nvme_controller_id,json=nvmeControllerId,proto3" json:"nvme_controller_id,omitempty"`
	// subsystem information
	SubsystemId *_go.ObjectKey `protobuf:"bytes,3,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	// xPU's PCI ID for the controller
	PcieId *NvmeControllerPciId `protobuf:"bytes,4,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	// maximum number of host submission queues allowed.
	// If not set, the xPU will provide a default.
	MaxNsq uint32 `protobuf:"varint,5,opt,name=max_nsq,json=maxNsq,proto3" json:"max_nsq,omitempty"`
	// maximum number of host completion queues allowed. Optional.
	// If not set, the xPU will provide a default.
	MaxNcq uint32 `protobuf:"varint,6,opt,name=max_ncq,json=maxNcq,proto3" json:"max_ncq,omitempty"`
	// maximum number of submission queue entries per submission queue, as a power of 2.
	// default value as per spec is 6
	Sqes uint32 `protobuf:"varint,7,opt,name=sqes,proto3" json:"sqes,omitempty"`
	// maximum number of completion queue entries per completion queue, as a power of 2.
	// default value as per spec is 4
	Cqes uint32 `protobuf:"varint,8,opt,name=cqes,proto3" json:"cqes,omitempty"`
	// maximum Number of namespaces that will be provisioned under
	// the controller.
	MaxNs uint32 `protobuf:"varint,9,opt,name=max_ns,json=maxNs,proto3" json:"max_ns,omitempty"`
}

func (x *NVMeController) Reset() {
	*x = NVMeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeController) ProtoMessage() {}

func (x *NVMeController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeController.ProtoReflect.Descriptor instead.
func (*NVMeController) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{1}
}

func (x *NVMeController) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeController) GetNvmeControllerId() uint32 {
	if x != nil {
		return x.NvmeControllerId
	}
	return 0
}

func (x *NVMeController) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *NVMeController) GetPcieId() *NvmeControllerPciId {
	if x != nil {
		return x.PcieId
	}
	return nil
}

func (x *NVMeController) GetMaxNsq() uint32 {
	if x != nil {
		return x.MaxNsq
	}
	return 0
}

func (x *NVMeController) GetMaxNcq() uint32 {
	if x != nil {
		return x.MaxNcq
	}
	return 0
}

func (x *NVMeController) GetSqes() uint32 {
	if x != nil {
		return x.Sqes
	}
	return 0
}

func (x *NVMeController) GetCqes() uint32 {
	if x != nil {
		return x.Cqes
	}
	return 0
}

func (x *NVMeController) GetMaxNs() uint32 {
	if x != nil {
		return x.MaxNs
	}
	return 0
}

type NVMeNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespace's unique key
	// replaces: int64 id = 1;
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// subsystem for this namespace
	SubsystemId *_go.ObjectKey `protobuf:"bytes,2,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	// key of the PCIe controller object that will host this namespace.
	ControllerId *_go.ObjectKey `protobuf:"bytes,3,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	// NSID present to the host by the NVMe PCIe controller.
	// If not provided, then the controller will assign an unused NSID
	// within the max namespace range - auto assigned nsid may not work
	// for live migration
	HostNsid uint32 `protobuf:"varint,4,opt,name=host_nsid,json=hostNsid,proto3" json:"host_nsid,omitempty"`
	// Block size in bytes, must be power of 2 and must be less than the max
	// io size supported. Typically tested values are 512, and 4k.
	BlockSize int64 `protobuf:"varint,5,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Size/Capacity of the namespace in blocks, size in bytes will
	// be BlockSize x NumBlocks.
	NumBlocks int64 `protobuf:"varint,6,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// Globally unique identifier for the namespace
	Nguid string `protobuf:"bytes,7,opt,name=nguid,proto3" json:"nguid,omitempty"`
	// 64bit Extended unique identifier for the namespace
	// mandatory if guid is not specified, optional otherwise
	Eui64 uint64 `protobuf:"fixed64,8,opt,name=eui64,proto3" json:"eui64,omitempty"`
	// Globally unique identifier for the namespace
	Uuid *_go.Uuid `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The back/middle-end volume to back this namespace.
	VolumeId *_go.ObjectKey `protobuf:"bytes,10,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// optimal write size hint to host driver. Host IO stack may use
	// this to regulate IO size. Must be a multiple of the preferred write
	// granularity. Must not exceed the controller maximum IO size value
	// configured in the nvme agent config file.
	OptimalWriteSize uint32 `protobuf:"varint,11,opt,name=optimal_write_size,json=optimalWriteSize,proto3" json:"optimal_write_size,omitempty"`
	// preferred write granularity hint to the host driver. Host IO
	// stack may use this to align IO sizes to the write granularity for
	// optimum performance.
	PrefWriteGranularity uint32 `protobuf:"varint,12,opt,name=pref_write_granularity,json=prefWriteGranularity,proto3" json:"pref_write_granularity,omitempty"`
}

func (x *NVMeNamespace) Reset() {
	*x = NVMeNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespace) ProtoMessage() {}

func (x *NVMeNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespace.ProtoReflect.Descriptor instead.
func (*NVMeNamespace) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{2}
}

func (x *NVMeNamespace) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeNamespace) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *NVMeNamespace) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

func (x *NVMeNamespace) GetHostNsid() uint32 {
	if x != nil {
		return x.HostNsid
	}
	return 0
}

func (x *NVMeNamespace) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *NVMeNamespace) GetNumBlocks() int64 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *NVMeNamespace) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NVMeNamespace) GetEui64() uint64 {
	if x != nil {
		return x.Eui64
	}
	return 0
}

func (x *NVMeNamespace) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *NVMeNamespace) GetVolumeId() *_go.ObjectKey {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (x *NVMeNamespace) GetOptimalWriteSize() uint32 {
	if x != nil {
		return x.OptimalWriteSize
	}
	return 0
}

func (x *NVMeNamespace) GetPrefWriteGranularity() uint32 {
	if x != nil {
		return x.PrefWriteGranularity
	}
	return 0
}

type NVMeSubsystemCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemCreateRequest) Reset() {
	*x = NVMeSubsystemCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemCreateRequest) ProtoMessage() {}

func (x *NVMeSubsystemCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{3}
}

func (x *NVMeSubsystemCreateRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeSubsystemDeleteRequest) Reset() {
	*x = NVMeSubsystemDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemDeleteRequest) ProtoMessage() {}

func (x *NVMeSubsystemDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{4}
}

func (x *NVMeSubsystemDeleteRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeSubsystemUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemUpdateRequest) Reset() {
	*x = NVMeSubsystemUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemUpdateRequest) ProtoMessage() {}

func (x *NVMeSubsystemUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{5}
}

func (x *NVMeSubsystemUpdateRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeSubsystemListRequest) Reset() {
	*x = NVMeSubsystemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListRequest) ProtoMessage() {}

func (x *NVMeSubsystemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{6}
}

type NVMeSubsystemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem []*NVMeSubsystem `protobuf:"bytes,1,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemListResponse) Reset() {
	*x = NVMeSubsystemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListResponse) ProtoMessage() {}

func (x *NVMeSubsystemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{7}
}

func (x *NVMeSubsystemListResponse) GetSubsystem() []*NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeSubsystemGetRequest) Reset() {
	*x = NVMeSubsystemGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemGetRequest) ProtoMessage() {}

func (x *NVMeSubsystemGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{8}
}

func (x *NVMeSubsystemGetRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeSubsystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeSubsystemStatsRequest) Reset() {
	*x = NVMeSubsystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsRequest) ProtoMessage() {}

func (x *NVMeSubsystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{9}
}

func (x *NVMeSubsystemStatsRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeSubsystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats string `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeSubsystemStatsResponse) Reset() {
	*x = NVMeSubsystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsResponse) ProtoMessage() {}

func (x *NVMeSubsystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{10}
}

func (x *NVMeSubsystemStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type NVMeControllerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerCreateRequest) Reset() {
	*x = NVMeControllerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerCreateRequest) ProtoMessage() {}

func (x *NVMeControllerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{11}
}

func (x *NVMeControllerCreateRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId *_go.ObjectKey `protobuf:"bytes,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeControllerDeleteRequest) Reset() {
	*x = NVMeControllerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerDeleteRequest) ProtoMessage() {}

func (x *NVMeControllerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{12}
}

func (x *NVMeControllerDeleteRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

type NVMeControllerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerUpdateRequest) Reset() {
	*x = NVMeControllerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerUpdateRequest) ProtoMessage() {}

func (x *NVMeControllerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{13}
}

func (x *NVMeControllerUpdateRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeControllerListRequest) Reset() {
	*x = NVMeControllerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListRequest) ProtoMessage() {}

func (x *NVMeControllerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{14}
}

func (x *NVMeControllerListRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

type NVMeControllerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller []*NVMeController `protobuf:"bytes,1,rep,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerListResponse) Reset() {
	*x = NVMeControllerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListResponse) ProtoMessage() {}

func (x *NVMeControllerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{15}
}

func (x *NVMeControllerListResponse) GetController() []*NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId *_go.ObjectKey `protobuf:"bytes,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeControllerGetRequest) Reset() {
	*x = NVMeControllerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerGetRequest) ProtoMessage() {}

func (x *NVMeControllerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{16}
}

func (x *NVMeControllerGetRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

type NVMeControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerStatsRequest) Reset() {
	*x = NVMeControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsRequest) ProtoMessage() {}

func (x *NVMeControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{17}
}

func (x *NVMeControllerStatsRequest) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type NVMeControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeControllerStatsResponse) Reset() {
	*x = NVMeControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsResponse) ProtoMessage() {}

func (x *NVMeControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{18}
}

func (x *NVMeControllerStatsResponse) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type NVMeNamespaceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceCreateRequest) Reset() {
	*x = NVMeNamespaceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceCreateRequest) ProtoMessage() {}

func (x *NVMeNamespaceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{19}
}

func (x *NVMeNamespaceCreateRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceDeleteRequest) Reset() {
	*x = NVMeNamespaceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceDeleteRequest) ProtoMessage() {}

func (x *NVMeNamespaceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{20}
}

func (x *NVMeNamespaceDeleteRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type NVMeNamespaceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceUpdateRequest) Reset() {
	*x = NVMeNamespaceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceUpdateRequest) ProtoMessage() {}

func (x *NVMeNamespaceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{21}
}

func (x *NVMeNamespaceUpdateRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  *_go.ObjectKey `protobuf:"bytes,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId *_go.ObjectKey `protobuf:"bytes,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeNamespaceListRequest) Reset() {
	*x = NVMeNamespaceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListRequest) ProtoMessage() {}

func (x *NVMeNamespaceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{22}
}

func (x *NVMeNamespaceListRequest) GetSubsystemId() *_go.ObjectKey {
	if x != nil {
		return x.SubsystemId
	}
	return nil
}

func (x *NVMeNamespaceListRequest) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

type NVMeNamespaceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace []*NVMeNamespace `protobuf:"bytes,1,rep,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceListResponse) Reset() {
	*x = NVMeNamespaceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListResponse) ProtoMessage() {}

func (x *NVMeNamespaceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{23}
}

func (x *NVMeNamespaceListResponse) GetNamespace() []*NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceGetRequest) Reset() {
	*x = NVMeNamespaceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceGetRequest) ProtoMessage() {}

func (x *NVMeNamespaceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{24}
}

func (x *NVMeNamespaceGetRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type NVMeNamespaceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceStatsRequest) Reset() {
	*x = NVMeNamespaceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsRequest) ProtoMessage() {}

func (x *NVMeNamespaceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{25}
}

func (x *NVMeNamespaceStatsRequest) GetNamespaceId() *_go.ObjectKey {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type NVMeNamespaceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeNamespaceStatsResponse) Reset() {
	*x = NVMeNamespaceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsResponse) ProtoMessage() {}

func (x *NVMeNamespaceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{26}
}

func (x *NVMeNamespaceStatsResponse) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NVMeNamespaceStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

var File_frontend_nvme_pcie_proto protoreflect.FileDescriptor

var file_frontend_nvme_pcie_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x70, 0x63, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x71, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x71, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x61, 0x78, 0x4e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x75, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x72, 0x75, 0x47, 0x75, 0x69, 0x64, 0x22, 0xe0,
	0x02, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x76, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x07, 0x70, 0x63, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x63, 0x69, 0x49, 0x64, 0x52, 0x06, 0x70, 0x63, 0x69, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x73, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x63, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e,
	0x63, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x71, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x71, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x71, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x71, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x4e,
	0x73, 0x22, 0x94, 0x04, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x73,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5c, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0x5a, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x61, 0x0a,
	0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0x60, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x61, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x9e, 0x01, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5c, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x5a, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xb0, 0x13, 0x0a, 0x13,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90,
	0x01, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x32,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x3a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a,
	0x12, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x11,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0x12, 0x78, 0x0a, 0x13, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_nvme_pcie_proto_rawDescOnce sync.Once
	file_frontend_nvme_pcie_proto_rawDescData = file_frontend_nvme_pcie_proto_rawDesc
)

func file_frontend_nvme_pcie_proto_rawDescGZIP() []byte {
	file_frontend_nvme_pcie_proto_rawDescOnce.Do(func() {
		file_frontend_nvme_pcie_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_nvme_pcie_proto_rawDescData)
	})
	return file_frontend_nvme_pcie_proto_rawDescData
}

var file_frontend_nvme_pcie_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_frontend_nvme_pcie_proto_goTypes = []interface{}{
	(*NVMeSubsystem)(nil),               // 0: opi_api.storage.v1.NVMeSubsystem
	(*NVMeController)(nil),              // 1: opi_api.storage.v1.NVMeController
	(*NVMeNamespace)(nil),               // 2: opi_api.storage.v1.NVMeNamespace
	(*NVMeSubsystemCreateRequest)(nil),  // 3: opi_api.storage.v1.NVMeSubsystemCreateRequest
	(*NVMeSubsystemDeleteRequest)(nil),  // 4: opi_api.storage.v1.NVMeSubsystemDeleteRequest
	(*NVMeSubsystemUpdateRequest)(nil),  // 5: opi_api.storage.v1.NVMeSubsystemUpdateRequest
	(*NVMeSubsystemListRequest)(nil),    // 6: opi_api.storage.v1.NVMeSubsystemListRequest
	(*NVMeSubsystemListResponse)(nil),   // 7: opi_api.storage.v1.NVMeSubsystemListResponse
	(*NVMeSubsystemGetRequest)(nil),     // 8: opi_api.storage.v1.NVMeSubsystemGetRequest
	(*NVMeSubsystemStatsRequest)(nil),   // 9: opi_api.storage.v1.NVMeSubsystemStatsRequest
	(*NVMeSubsystemStatsResponse)(nil),  // 10: opi_api.storage.v1.NVMeSubsystemStatsResponse
	(*NVMeControllerCreateRequest)(nil), // 11: opi_api.storage.v1.NVMeControllerCreateRequest
	(*NVMeControllerDeleteRequest)(nil), // 12: opi_api.storage.v1.NVMeControllerDeleteRequest
	(*NVMeControllerUpdateRequest)(nil), // 13: opi_api.storage.v1.NVMeControllerUpdateRequest
	(*NVMeControllerListRequest)(nil),   // 14: opi_api.storage.v1.NVMeControllerListRequest
	(*NVMeControllerListResponse)(nil),  // 15: opi_api.storage.v1.NVMeControllerListResponse
	(*NVMeControllerGetRequest)(nil),    // 16: opi_api.storage.v1.NVMeControllerGetRequest
	(*NVMeControllerStatsRequest)(nil),  // 17: opi_api.storage.v1.NVMeControllerStatsRequest
	(*NVMeControllerStatsResponse)(nil), // 18: opi_api.storage.v1.NVMeControllerStatsResponse
	(*NVMeNamespaceCreateRequest)(nil),  // 19: opi_api.storage.v1.NVMeNamespaceCreateRequest
	(*NVMeNamespaceDeleteRequest)(nil),  // 20: opi_api.storage.v1.NVMeNamespaceDeleteRequest
	(*NVMeNamespaceUpdateRequest)(nil),  // 21: opi_api.storage.v1.NVMeNamespaceUpdateRequest
	(*NVMeNamespaceListRequest)(nil),    // 22: opi_api.storage.v1.NVMeNamespaceListRequest
	(*NVMeNamespaceListResponse)(nil),   // 23: opi_api.storage.v1.NVMeNamespaceListResponse
	(*NVMeNamespaceGetRequest)(nil),     // 24: opi_api.storage.v1.NVMeNamespaceGetRequest
	(*NVMeNamespaceStatsRequest)(nil),   // 25: opi_api.storage.v1.NVMeNamespaceStatsRequest
	(*NVMeNamespaceStatsResponse)(nil),  // 26: opi_api.storage.v1.NVMeNamespaceStatsResponse
	(*_go.ObjectKey)(nil),               // 27: opi_api.common.v1.ObjectKey
	(*NvmeControllerPciId)(nil),         // 28: opi_api.storage.v1.NvmeControllerPciId
	(*_go.Uuid)(nil),                    // 29: opi_api.common.v1.Uuid
	(*emptypb.Empty)(nil),               // 30: google.protobuf.Empty
}
var file_frontend_nvme_pcie_proto_depIdxs = []int32{
	27, // 0: opi_api.storage.v1.NVMeSubsystem.id:type_name -> opi_api.common.v1.ObjectKey
	27, // 1: opi_api.storage.v1.NVMeController.id:type_name -> opi_api.common.v1.ObjectKey
	27, // 2: opi_api.storage.v1.NVMeController.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	28, // 3: opi_api.storage.v1.NVMeController.pcie_id:type_name -> opi_api.storage.v1.NvmeControllerPciId
	27, // 4: opi_api.storage.v1.NVMeNamespace.id:type_name -> opi_api.common.v1.ObjectKey
	27, // 5: opi_api.storage.v1.NVMeNamespace.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 6: opi_api.storage.v1.NVMeNamespace.controller_id:type_name -> opi_api.common.v1.ObjectKey
	29, // 7: opi_api.storage.v1.NVMeNamespace.uuid:type_name -> opi_api.common.v1.Uuid
	27, // 8: opi_api.storage.v1.NVMeNamespace.volume_id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 9: opi_api.storage.v1.NVMeSubsystemCreateRequest.subsystem:type_name -> opi_api.storage.v1.NVMeSubsystem
	27, // 10: opi_api.storage.v1.NVMeSubsystemDeleteRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 11: opi_api.storage.v1.NVMeSubsystemUpdateRequest.subsystem:type_name -> opi_api.storage.v1.NVMeSubsystem
	0,  // 12: opi_api.storage.v1.NVMeSubsystemListResponse.subsystem:type_name -> opi_api.storage.v1.NVMeSubsystem
	27, // 13: opi_api.storage.v1.NVMeSubsystemGetRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 14: opi_api.storage.v1.NVMeSubsystemStatsRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	1,  // 15: opi_api.storage.v1.NVMeControllerCreateRequest.controller:type_name -> opi_api.storage.v1.NVMeController
	27, // 16: opi_api.storage.v1.NVMeControllerDeleteRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	1,  // 17: opi_api.storage.v1.NVMeControllerUpdateRequest.controller:type_name -> opi_api.storage.v1.NVMeController
	27, // 18: opi_api.storage.v1.NVMeControllerListRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	1,  // 19: opi_api.storage.v1.NVMeControllerListResponse.controller:type_name -> opi_api.storage.v1.NVMeController
	27, // 20: opi_api.storage.v1.NVMeControllerGetRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 21: opi_api.storage.v1.NVMeControllerStatsRequest.id:type_name -> opi_api.common.v1.ObjectKey
	27, // 22: opi_api.storage.v1.NVMeControllerStatsResponse.id:type_name -> opi_api.common.v1.ObjectKey
	2,  // 23: opi_api.storage.v1.NVMeNamespaceCreateRequest.namespace:type_name -> opi_api.storage.v1.NVMeNamespace
	27, // 24: opi_api.storage.v1.NVMeNamespaceDeleteRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	2,  // 25: opi_api.storage.v1.NVMeNamespaceUpdateRequest.namespace:type_name -> opi_api.storage.v1.NVMeNamespace
	27, // 26: opi_api.storage.v1.NVMeNamespaceListRequest.subsystem_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 27: opi_api.storage.v1.NVMeNamespaceListRequest.controller_id:type_name -> opi_api.common.v1.ObjectKey
	2,  // 28: opi_api.storage.v1.NVMeNamespaceListResponse.namespace:type_name -> opi_api.storage.v1.NVMeNamespace
	27, // 29: opi_api.storage.v1.NVMeNamespaceGetRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 30: opi_api.storage.v1.NVMeNamespaceStatsRequest.namespace_id:type_name -> opi_api.common.v1.ObjectKey
	27, // 31: opi_api.storage.v1.NVMeNamespaceStatsResponse.id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 32: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemCreate:input_type -> opi_api.storage.v1.NVMeSubsystemCreateRequest
	4,  // 33: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemDelete:input_type -> opi_api.storage.v1.NVMeSubsystemDeleteRequest
	5,  // 34: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemUpdate:input_type -> opi_api.storage.v1.NVMeSubsystemUpdateRequest
	6,  // 35: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemList:input_type -> opi_api.storage.v1.NVMeSubsystemListRequest
	8,  // 36: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemGet:input_type -> opi_api.storage.v1.NVMeSubsystemGetRequest
	9,  // 37: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemStats:input_type -> opi_api.storage.v1.NVMeSubsystemStatsRequest
	11, // 38: opi_api.storage.v1.FrontendNvmeService.NVMeControllerCreate:input_type -> opi_api.storage.v1.NVMeControllerCreateRequest
	12, // 39: opi_api.storage.v1.FrontendNvmeService.NVMeControllerDelete:input_type -> opi_api.storage.v1.NVMeControllerDeleteRequest
	13, // 40: opi_api.storage.v1.FrontendNvmeService.NVMeControllerUpdate:input_type -> opi_api.storage.v1.NVMeControllerUpdateRequest
	14, // 41: opi_api.storage.v1.FrontendNvmeService.NVMeControllerList:input_type -> opi_api.storage.v1.NVMeControllerListRequest
	16, // 42: opi_api.storage.v1.FrontendNvmeService.NVMeControllerGet:input_type -> opi_api.storage.v1.NVMeControllerGetRequest
	17, // 43: opi_api.storage.v1.FrontendNvmeService.NVMeControllerStats:input_type -> opi_api.storage.v1.NVMeControllerStatsRequest
	19, // 44: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceCreate:input_type -> opi_api.storage.v1.NVMeNamespaceCreateRequest
	20, // 45: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceDelete:input_type -> opi_api.storage.v1.NVMeNamespaceDeleteRequest
	21, // 46: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceUpdate:input_type -> opi_api.storage.v1.NVMeNamespaceUpdateRequest
	22, // 47: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceList:input_type -> opi_api.storage.v1.NVMeNamespaceListRequest
	24, // 48: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceGet:input_type -> opi_api.storage.v1.NVMeNamespaceGetRequest
	25, // 49: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceStats:input_type -> opi_api.storage.v1.NVMeNamespaceStatsRequest
	0,  // 50: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemCreate:output_type -> opi_api.storage.v1.NVMeSubsystem
	30, // 51: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemDelete:output_type -> google.protobuf.Empty
	0,  // 52: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemUpdate:output_type -> opi_api.storage.v1.NVMeSubsystem
	7,  // 53: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemList:output_type -> opi_api.storage.v1.NVMeSubsystemListResponse
	0,  // 54: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemGet:output_type -> opi_api.storage.v1.NVMeSubsystem
	10, // 55: opi_api.storage.v1.FrontendNvmeService.NVMeSubsystemStats:output_type -> opi_api.storage.v1.NVMeSubsystemStatsResponse
	1,  // 56: opi_api.storage.v1.FrontendNvmeService.NVMeControllerCreate:output_type -> opi_api.storage.v1.NVMeController
	30, // 57: opi_api.storage.v1.FrontendNvmeService.NVMeControllerDelete:output_type -> google.protobuf.Empty
	1,  // 58: opi_api.storage.v1.FrontendNvmeService.NVMeControllerUpdate:output_type -> opi_api.storage.v1.NVMeController
	15, // 59: opi_api.storage.v1.FrontendNvmeService.NVMeControllerList:output_type -> opi_api.storage.v1.NVMeControllerListResponse
	1,  // 60: opi_api.storage.v1.FrontendNvmeService.NVMeControllerGet:output_type -> opi_api.storage.v1.NVMeController
	18, // 61: opi_api.storage.v1.FrontendNvmeService.NVMeControllerStats:output_type -> opi_api.storage.v1.NVMeControllerStatsResponse
	2,  // 62: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceCreate:output_type -> opi_api.storage.v1.NVMeNamespace
	30, // 63: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceDelete:output_type -> google.protobuf.Empty
	2,  // 64: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceUpdate:output_type -> opi_api.storage.v1.NVMeNamespace
	23, // 65: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceList:output_type -> opi_api.storage.v1.NVMeNamespaceListResponse
	2,  // 66: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceGet:output_type -> opi_api.storage.v1.NVMeNamespace
	26, // 67: opi_api.storage.v1.FrontendNvmeService.NVMeNamespaceStats:output_type -> opi_api.storage.v1.NVMeNamespaceStatsResponse
	50, // [50:68] is the sub-list for method output_type
	32, // [32:50] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_frontend_nvme_pcie_proto_init() }
func file_frontend_nvme_pcie_proto_init() {
	if File_frontend_nvme_pcie_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frontend_nvme_pcie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_nvme_pcie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frontend_nvme_pcie_proto_goTypes,
		DependencyIndexes: file_frontend_nvme_pcie_proto_depIdxs,
		MessageInfos:      file_frontend_nvme_pcie_proto_msgTypes,
	}.Build()
	File_frontend_nvme_pcie_proto = out.File
	file_frontend_nvme_pcie_proto_rawDesc = nil
	file_frontend_nvme_pcie_proto_goTypes = nil
	file_frontend_nvme_pcie_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontendNvmeServiceClient is the client API for FrontendNvmeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendNvmeServiceClient interface {
	NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error)
	NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error)
	NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeController, error)
	NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeController, error)
	NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error)
	NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeController, error)
	NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error)
	NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespace, error)
	NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error)
}

type frontendNvmeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendNvmeServiceClient(cc grpc.ClientConnInterface) FrontendNvmeServiceClient {
	return &frontendNvmeServiceClient{cc}
}

func (c *frontendNvmeServiceClient) NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error) {
	out := new(NVMeSubsystemListResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystem, error) {
	out := new(NVMeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error) {
	out := new(NVMeSubsystemStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error) {
	out := new(NVMeControllerListResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeController, error) {
	out := new(NVMeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error) {
	out := new(NVMeControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error) {
	out := new(NVMeNamespaceListResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespace, error) {
	out := new(NVMeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error) {
	out := new(NVMeNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendNvmeServiceServer is the server API for FrontendNvmeService service.
type FrontendNvmeServiceServer interface {
	NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystem, error)
	NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*emptypb.Empty, error)
	NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystem, error)
	NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystem, error)
	NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error)
	NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeController, error)
	NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*emptypb.Empty, error)
	NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeController, error)
	NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error)
	NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeController, error)
	NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error)
	NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespace, error)
	NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*emptypb.Empty, error)
	NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespace, error)
	NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespace, error)
	NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error)
}

// UnimplementedFrontendNvmeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendNvmeServiceServer struct {
}

func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemCreate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemDelete not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemUpdate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemList not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemGet not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerCreate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerDelete not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerUpdate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerList not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerGet not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceCreate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceDelete not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceUpdate not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceList not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceGet not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceStats not implemented")
}

func RegisterFrontendNvmeServiceServer(s *grpc.Server, srv FrontendNvmeServiceServer) {
	s.RegisterService(&_FrontendNvmeService_serviceDesc, srv)
}

func _FrontendNvmeService_NVMeSubsystemCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemCreate(ctx, req.(*NVMeSubsystemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemDelete(ctx, req.(*NVMeSubsystemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemUpdate(ctx, req.(*NVMeSubsystemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemList(ctx, req.(*NVMeSubsystemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemGet(ctx, req.(*NVMeSubsystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeSubsystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeSubsystemStats(ctx, req.(*NVMeSubsystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerCreate(ctx, req.(*NVMeControllerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerDelete(ctx, req.(*NVMeControllerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerUpdate(ctx, req.(*NVMeControllerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerList(ctx, req.(*NVMeControllerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerGet(ctx, req.(*NVMeControllerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeControllerStats(ctx, req.(*NVMeControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceCreate(ctx, req.(*NVMeNamespaceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceDelete(ctx, req.(*NVMeNamespaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceUpdate(ctx, req.(*NVMeNamespaceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceList(ctx, req.(*NVMeNamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceGet(ctx, req.(*NVMeNamespaceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NVMeNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NVMeNamespaceStats(ctx, req.(*NVMeNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendNvmeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.FrontendNvmeService",
	HandlerType: (*FrontendNvmeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeSubsystemCreate",
			Handler:    _FrontendNvmeService_NVMeSubsystemCreate_Handler,
		},
		{
			MethodName: "NVMeSubsystemDelete",
			Handler:    _FrontendNvmeService_NVMeSubsystemDelete_Handler,
		},
		{
			MethodName: "NVMeSubsystemUpdate",
			Handler:    _FrontendNvmeService_NVMeSubsystemUpdate_Handler,
		},
		{
			MethodName: "NVMeSubsystemList",
			Handler:    _FrontendNvmeService_NVMeSubsystemList_Handler,
		},
		{
			MethodName: "NVMeSubsystemGet",
			Handler:    _FrontendNvmeService_NVMeSubsystemGet_Handler,
		},
		{
			MethodName: "NVMeSubsystemStats",
			Handler:    _FrontendNvmeService_NVMeSubsystemStats_Handler,
		},
		{
			MethodName: "NVMeControllerCreate",
			Handler:    _FrontendNvmeService_NVMeControllerCreate_Handler,
		},
		{
			MethodName: "NVMeControllerDelete",
			Handler:    _FrontendNvmeService_NVMeControllerDelete_Handler,
		},
		{
			MethodName: "NVMeControllerUpdate",
			Handler:    _FrontendNvmeService_NVMeControllerUpdate_Handler,
		},
		{
			MethodName: "NVMeControllerList",
			Handler:    _FrontendNvmeService_NVMeControllerList_Handler,
		},
		{
			MethodName: "NVMeControllerGet",
			Handler:    _FrontendNvmeService_NVMeControllerGet_Handler,
		},
		{
			MethodName: "NVMeControllerStats",
			Handler:    _FrontendNvmeService_NVMeControllerStats_Handler,
		},
		{
			MethodName: "NVMeNamespaceCreate",
			Handler:    _FrontendNvmeService_NVMeNamespaceCreate_Handler,
		},
		{
			MethodName: "NVMeNamespaceDelete",
			Handler:    _FrontendNvmeService_NVMeNamespaceDelete_Handler,
		},
		{
			MethodName: "NVMeNamespaceUpdate",
			Handler:    _FrontendNvmeService_NVMeNamespaceUpdate_Handler,
		},
		{
			MethodName: "NVMeNamespaceList",
			Handler:    _FrontendNvmeService_NVMeNamespaceList_Handler,
		},
		{
			MethodName: "NVMeNamespaceGet",
			Handler:    _FrontendNvmeService_NVMeNamespaceGet_Handler,
		},
		{
			MethodName: "NVMeNamespaceStats",
			Handler:    _FrontendNvmeService_NVMeNamespaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend_nvme_pcie.proto",
}
