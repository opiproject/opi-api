// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
// Copyright (C) 2023 Intel Corporation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: frontend_nvme_pcie.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Namespace  Administrative States
type NvmeNamespacePciState int32

const (
	// unspecified
	NvmeNamespacePciState_NVME_NAMESPACE_PCI_STATE_UNSPECIFIED NvmeNamespacePciState = 0
	// namespace disabled state
	NvmeNamespacePciState_NVME_NAMESPACE_PCI_STATE_DISABLED NvmeNamespacePciState = 1
	// namespace enabled state
	NvmeNamespacePciState_NVME_NAMESPACE_PCI_STATE_ENABLED NvmeNamespacePciState = 2
	// namespace being deleted
	NvmeNamespacePciState_NVME_NAMESPACE_PCI_STATE_DELETING NvmeNamespacePciState = 3
)

// Enum value maps for NvmeNamespacePciState.
var (
	NvmeNamespacePciState_name = map[int32]string{
		0: "NVME_NAMESPACE_PCI_STATE_UNSPECIFIED",
		1: "NVME_NAMESPACE_PCI_STATE_DISABLED",
		2: "NVME_NAMESPACE_PCI_STATE_ENABLED",
		3: "NVME_NAMESPACE_PCI_STATE_DELETING",
	}
	NvmeNamespacePciState_value = map[string]int32{
		"NVME_NAMESPACE_PCI_STATE_UNSPECIFIED": 0,
		"NVME_NAMESPACE_PCI_STATE_DISABLED":    1,
		"NVME_NAMESPACE_PCI_STATE_ENABLED":     2,
		"NVME_NAMESPACE_PCI_STATE_DELETING":    3,
	}
)

func (x NvmeNamespacePciState) Enum() *NvmeNamespacePciState {
	p := new(NvmeNamespacePciState)
	*p = x
	return p
}

func (x NvmeNamespacePciState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeNamespacePciState) Descriptor() protoreflect.EnumDescriptor {
	return file_frontend_nvme_pcie_proto_enumTypes[0].Descriptor()
}

func (NvmeNamespacePciState) Type() protoreflect.EnumType {
	return &file_frontend_nvme_pcie_proto_enumTypes[0]
}

func (x NvmeNamespacePciState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeNamespacePciState.Descriptor instead.
func (NvmeNamespacePciState) EnumDescriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{0}
}

// Namespace PCIe operational states
type NvmeNamespacePciOperState int32

const (
	// unspecified
	NvmeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED NvmeNamespacePciOperState = 0
	// namespace is online and operational
	NvmeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_ONLINE NvmeNamespacePciOperState = 1
	// namespace is offline
	NvmeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE NvmeNamespacePciOperState = 2
)

// Enum value maps for NvmeNamespacePciOperState.
var (
	NvmeNamespacePciOperState_name = map[int32]string{
		0: "NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED",
		1: "NVME_NAMESPACE_PCI_OPER_STATE_ONLINE",
		2: "NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE",
	}
	NvmeNamespacePciOperState_value = map[string]int32{
		"NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED": 0,
		"NVME_NAMESPACE_PCI_OPER_STATE_ONLINE":      1,
		"NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE":     2,
	}
)

func (x NvmeNamespacePciOperState) Enum() *NvmeNamespacePciOperState {
	p := new(NvmeNamespacePciOperState)
	*p = x
	return p
}

func (x NvmeNamespacePciOperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeNamespacePciOperState) Descriptor() protoreflect.EnumDescriptor {
	return file_frontend_nvme_pcie_proto_enumTypes[1].Descriptor()
}

func (NvmeNamespacePciOperState) Type() protoreflect.EnumType {
	return &file_frontend_nvme_pcie_proto_enumTypes[1]
}

func (x NvmeNamespacePciOperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeNamespacePciOperState.Descriptor instead.
func (NvmeNamespacePciOperState) EnumDescriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{1}
}

type NvmeSubsystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// spec holds configurable values
	Spec *NvmeSubsystemSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// status holds server generated values
	Status *NvmeSubsystemStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NvmeSubsystem) Reset() {
	*x = NvmeSubsystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeSubsystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeSubsystem) ProtoMessage() {}

func (x *NvmeSubsystem) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeSubsystem.ProtoReflect.Descriptor instead.
func (*NvmeSubsystem) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{0}
}

func (x *NvmeSubsystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeSubsystem) GetSpec() *NvmeSubsystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NvmeSubsystem) GetStatus() *NvmeSubsystemStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NvmeSubsystemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nvme subsystem NQN to which the controller belongs
	// Refer to the NQN format in the Nvme base specifications, must not
	// exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
	Nqn string `protobuf:"bytes,1,opt,name=nqn,proto3" json:"nqn,omitempty"`
	// serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
	ModelNumber string `protobuf:"bytes,3,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// maximum namespaces within a subsystem
	MaxNamespaces int64 `protobuf:"varint,4,opt,name=max_namespaces,json=maxNamespaces,proto3" json:"max_namespaces,omitempty"`
}

func (x *NvmeSubsystemSpec) Reset() {
	*x = NvmeSubsystemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeSubsystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeSubsystemSpec) ProtoMessage() {}

func (x *NvmeSubsystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeSubsystemSpec.ProtoReflect.Descriptor instead.
func (*NvmeSubsystemSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{1}
}

func (x *NvmeSubsystemSpec) GetNqn() string {
	if x != nil {
		return x.Nqn
	}
	return ""
}

func (x *NvmeSubsystemSpec) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *NvmeSubsystemSpec) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *NvmeSubsystemSpec) GetMaxNamespaces() int64 {
	if x != nil {
		return x.MaxNamespaces
	}
	return 0
}

type NvmeSubsystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
	FirmwareRevision string `protobuf:"bytes,1,opt,name=firmware_revision,json=firmwareRevision,proto3" json:"firmware_revision,omitempty"`
	// FRU identfier, 16bytes opaque identity for the type of unit
	FruGuid []byte `protobuf:"bytes,2,opt,name=fru_guid,json=fruGuid,proto3" json:"fru_guid,omitempty"`
}

func (x *NvmeSubsystemStatus) Reset() {
	*x = NvmeSubsystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeSubsystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeSubsystemStatus) ProtoMessage() {}

func (x *NvmeSubsystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeSubsystemStatus.ProtoReflect.Descriptor instead.
func (*NvmeSubsystemStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{2}
}

func (x *NvmeSubsystemStatus) GetFirmwareRevision() string {
	if x != nil {
		return x.FirmwareRevision
	}
	return ""
}

func (x *NvmeSubsystemStatus) GetFruGuid() []byte {
	if x != nil {
		return x.FruGuid
	}
	return nil
}

type NvmeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// spec holds configurable values
	Spec *NvmeControllerSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// status holds server generated values
	Status *NvmeControllerStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NvmeController) Reset() {
	*x = NvmeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController) ProtoMessage() {}

func (x *NvmeController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController.ProtoReflect.Descriptor instead.
func (*NvmeController) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{3}
}

func (x *NvmeController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeController) GetSpec() *NvmeControllerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NvmeController) GetStatus() *NvmeControllerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NvmeControllerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subsystem controller id range: 0 to 65535.
	// must not be reused under the same subsystem
	NvmeControllerId int32 `protobuf:"varint,1,opt,name=nvme_controller_id,json=nvmeControllerId,proto3" json:"nvme_controller_id,omitempty"`
	// subsystem information
	SubsystemNameRef string `protobuf:"bytes,2,opt,name=subsystem_name_ref,json=subsystemNameRef,proto3" json:"subsystem_name_ref,omitempty"`
	// xPU's PCI ID for the controller
	PcieId *PciEndpoint `protobuf:"bytes,3,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	// maximum number of host submission queues allowed.
	// If not set, the xPU will provide a default.
	MaxNsq int32 `protobuf:"varint,4,opt,name=max_nsq,json=maxNsq,proto3" json:"max_nsq,omitempty"`
	// maximum number of host completion queues allowed.
	// If not set, the xPU will provide a default.
	MaxNcq int32 `protobuf:"varint,5,opt,name=max_ncq,json=maxNcq,proto3" json:"max_ncq,omitempty"`
	// maximum number of submission queue entries per submission queue, as a power of 2.
	// default value as per spec is 6
	Sqes int32 `protobuf:"varint,6,opt,name=sqes,proto3" json:"sqes,omitempty"`
	// maximum number of completion queue entries per completion queue, as a power of 2.
	// default value as per spec is 4
	Cqes int32 `protobuf:"varint,7,opt,name=cqes,proto3" json:"cqes,omitempty"`
	// maximum Number of namespaces that will be provisioned under
	// the controller.
	MaxNamespaces int32 `protobuf:"varint,8,opt,name=max_namespaces,json=maxNamespaces,proto3" json:"max_namespaces,omitempty"`
	// min QoS limits for the controller
	MinLimit *QosLimit `protobuf:"bytes,9,opt,name=min_limit,json=minLimit,proto3" json:"min_limit,omitempty"`
	// max QoS limits for the controller
	MaxLimit *QosLimit `protobuf:"bytes,10,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
}

func (x *NvmeControllerSpec) Reset() {
	*x = NvmeControllerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerSpec) ProtoMessage() {}

func (x *NvmeControllerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerSpec.ProtoReflect.Descriptor instead.
func (*NvmeControllerSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{4}
}

func (x *NvmeControllerSpec) GetNvmeControllerId() int32 {
	if x != nil {
		return x.NvmeControllerId
	}
	return 0
}

func (x *NvmeControllerSpec) GetSubsystemNameRef() string {
	if x != nil {
		return x.SubsystemNameRef
	}
	return ""
}

func (x *NvmeControllerSpec) GetPcieId() *PciEndpoint {
	if x != nil {
		return x.PcieId
	}
	return nil
}

func (x *NvmeControllerSpec) GetMaxNsq() int32 {
	if x != nil {
		return x.MaxNsq
	}
	return 0
}

func (x *NvmeControllerSpec) GetMaxNcq() int32 {
	if x != nil {
		return x.MaxNcq
	}
	return 0
}

func (x *NvmeControllerSpec) GetSqes() int32 {
	if x != nil {
		return x.Sqes
	}
	return 0
}

func (x *NvmeControllerSpec) GetCqes() int32 {
	if x != nil {
		return x.Cqes
	}
	return 0
}

func (x *NvmeControllerSpec) GetMaxNamespaces() int32 {
	if x != nil {
		return x.MaxNamespaces
	}
	return 0
}

func (x *NvmeControllerSpec) GetMinLimit() *QosLimit {
	if x != nil {
		return x.MinLimit
	}
	return nil
}

func (x *NvmeControllerSpec) GetMaxLimit() *QosLimit {
	if x != nil {
		return x.MaxLimit
	}
	return nil
}

type NvmeControllerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device is in use by host nvme driver
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *NvmeControllerStatus) Reset() {
	*x = NvmeControllerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerStatus) ProtoMessage() {}

func (x *NvmeControllerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerStatus.ProtoReflect.Descriptor instead.
func (*NvmeControllerStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{5}
}

func (x *NvmeControllerStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type NvmeNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// spec holds configurable values
	Spec *NvmeNamespaceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// status holds server generated values
	Status *NvmeNamespaceStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NvmeNamespace) Reset() {
	*x = NvmeNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeNamespace) ProtoMessage() {}

func (x *NvmeNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeNamespace.ProtoReflect.Descriptor instead.
func (*NvmeNamespace) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{6}
}

func (x *NvmeNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeNamespace) GetSpec() *NvmeNamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NvmeNamespace) GetStatus() *NvmeNamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NvmeNamespaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subsystem for this namespace
	SubsystemNameRef string `protobuf:"bytes,1,opt,name=subsystem_name_ref,json=subsystemNameRef,proto3" json:"subsystem_name_ref,omitempty"`
	// NSID present to the host by the Nvme PCIe controller.
	// If not provided, then the controller will assign an unused NSID
	// within the max namespace range - auto assigned nsid may not work
	// for live migration
	HostNsid int32 `protobuf:"varint,2,opt,name=host_nsid,json=hostNsid,proto3" json:"host_nsid,omitempty"`
	// Globally unique identifier for the namespace
	Nguid string `protobuf:"bytes,3,opt,name=nguid,proto3" json:"nguid,omitempty"`
	// 64bit Extended unique identifier for the namespace
	// mandatory if guid is not specified
	Eui64 int64 `protobuf:"varint,4,opt,name=eui64,proto3" json:"eui64,omitempty"`
	// Globally unique identifier for the namespace
	Uuid *_go.Uuid `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The back/middle-end volume to back this namespace.
	VolumeNameRef string `protobuf:"bytes,6,opt,name=volume_name_ref,json=volumeNameRef,proto3" json:"volume_name_ref,omitempty"`
}

func (x *NvmeNamespaceSpec) Reset() {
	*x = NvmeNamespaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeNamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeNamespaceSpec) ProtoMessage() {}

func (x *NvmeNamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeNamespaceSpec.ProtoReflect.Descriptor instead.
func (*NvmeNamespaceSpec) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{7}
}

func (x *NvmeNamespaceSpec) GetSubsystemNameRef() string {
	if x != nil {
		return x.SubsystemNameRef
	}
	return ""
}

func (x *NvmeNamespaceSpec) GetHostNsid() int32 {
	if x != nil {
		return x.HostNsid
	}
	return 0
}

func (x *NvmeNamespaceSpec) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NvmeNamespaceSpec) GetEui64() int64 {
	if x != nil {
		return x.Eui64
	}
	return 0
}

func (x *NvmeNamespaceSpec) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *NvmeNamespaceSpec) GetVolumeNameRef() string {
	if x != nil {
		return x.VolumeNameRef
	}
	return ""
}

type NvmeNamespaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config state of the namespace object, (enabled, disable, deleting)
	PciState NvmeNamespacePciState `protobuf:"varint,1,opt,name=pci_state,json=pciState,proto3,enum=opi_api.storage.v1.NvmeNamespacePciState" json:"pci_state,omitempty"`
	// Operational state of the namespace object, (connected, disconnected)
	PciOperState NvmeNamespacePciOperState `protobuf:"varint,2,opt,name=pci_oper_state,json=pciOperState,proto3,enum=opi_api.storage.v1.NvmeNamespacePciOperState" json:"pci_oper_state,omitempty"`
}

func (x *NvmeNamespaceStatus) Reset() {
	*x = NvmeNamespaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeNamespaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeNamespaceStatus) ProtoMessage() {}

func (x *NvmeNamespaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeNamespaceStatus.ProtoReflect.Descriptor instead.
func (*NvmeNamespaceStatus) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{8}
}

func (x *NvmeNamespaceStatus) GetPciState() NvmeNamespacePciState {
	if x != nil {
		return x.PciState
	}
	return NvmeNamespacePciState_NVME_NAMESPACE_PCI_STATE_UNSPECIFIED
}

func (x *NvmeNamespaceStatus) GetPciOperState() NvmeNamespacePciOperState {
	if x != nil {
		return x.PciOperState
	}
	return NvmeNamespacePciOperState_NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED
}

type CreateNvmeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeSubsystem   *NvmeSubsystem `protobuf:"bytes,1,opt,name=nvme_subsystem,json=nvmeSubsystem,proto3" json:"nvme_subsystem,omitempty"`
	NvmeSubsystemId string         `protobuf:"bytes,2,opt,name=nvme_subsystem_id,json=nvmeSubsystemId,proto3" json:"nvme_subsystem_id,omitempty"`
}

func (x *CreateNvmeSubsystemRequest) Reset() {
	*x = CreateNvmeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNvmeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNvmeSubsystemRequest) ProtoMessage() {}

func (x *CreateNvmeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNvmeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*CreateNvmeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNvmeSubsystemRequest) GetNvmeSubsystem() *NvmeSubsystem {
	if x != nil {
		return x.NvmeSubsystem
	}
	return nil
}

func (x *CreateNvmeSubsystemRequest) GetNvmeSubsystemId() string {
	if x != nil {
		return x.NvmeSubsystemId
	}
	return ""
}

type DeleteNvmeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNvmeSubsystemRequest) Reset() {
	*x = DeleteNvmeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNvmeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNvmeSubsystemRequest) ProtoMessage() {}

func (x *DeleteNvmeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNvmeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteNvmeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNvmeSubsystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNvmeSubsystemRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateNvmeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvmeSubsystem *NvmeSubsystem `protobuf:"bytes,1,opt,name=nvme_subsystem,json=nvmeSubsystem,proto3" json:"nvme_subsystem,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNvmeSubsystemRequest) Reset() {
	*x = UpdateNvmeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeSubsystemRequest) ProtoMessage() {}

func (x *UpdateNvmeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNvmeSubsystemRequest) GetNvmeSubsystem() *NvmeSubsystem {
	if x != nil {
		return x.NvmeSubsystem
	}
	return nil
}

func (x *UpdateNvmeSubsystemRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNvmeSubsystemRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListNvmeSubsystemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmeSubsystemsRequest) Reset() {
	*x = ListNvmeSubsystemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeSubsystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeSubsystemsRequest) ProtoMessage() {}

func (x *ListNvmeSubsystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeSubsystemsRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeSubsystemsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{12}
}

func (x *ListNvmeSubsystemsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmeSubsystemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmeSubsystemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNvmeSubsystemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeSubsystems []*NvmeSubsystem `protobuf:"bytes,1,rep,name=nvme_subsystems,json=nvmeSubsystems,proto3" json:"nvme_subsystems,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmeSubsystemsResponse) Reset() {
	*x = ListNvmeSubsystemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeSubsystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeSubsystemsResponse) ProtoMessage() {}

func (x *ListNvmeSubsystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeSubsystemsResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeSubsystemsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{13}
}

func (x *ListNvmeSubsystemsResponse) GetNvmeSubsystems() []*NvmeSubsystem {
	if x != nil {
		return x.NvmeSubsystems
	}
	return nil
}

func (x *ListNvmeSubsystemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNvmeSubsystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmeSubsystemRequest) Reset() {
	*x = GetNvmeSubsystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeSubsystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeSubsystemRequest) ProtoMessage() {}

func (x *GetNvmeSubsystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeSubsystemRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeSubsystemRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{14}
}

func (x *GetNvmeSubsystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeSubsystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NvmeSubsystemStatsRequest) Reset() {
	*x = NvmeSubsystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeSubsystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeSubsystemStatsRequest) ProtoMessage() {}

func (x *NvmeSubsystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeSubsystemStatsRequest.ProtoReflect.Descriptor instead.
func (*NvmeSubsystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{15}
}

func (x *NvmeSubsystemStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeSubsystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NvmeSubsystemStatsResponse) Reset() {
	*x = NvmeSubsystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeSubsystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeSubsystemStatsResponse) ProtoMessage() {}

func (x *NvmeSubsystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeSubsystemStatsResponse.ProtoReflect.Descriptor instead.
func (*NvmeSubsystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{16}
}

func (x *NvmeSubsystemStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CreateNvmeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeController   *NvmeController `protobuf:"bytes,1,opt,name=nvme_controller,json=nvmeController,proto3" json:"nvme_controller,omitempty"`
	NvmeControllerId string          `protobuf:"bytes,2,opt,name=nvme_controller_id,json=nvmeControllerId,proto3" json:"nvme_controller_id,omitempty"`
}

func (x *CreateNvmeControllerRequest) Reset() {
	*x = CreateNvmeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNvmeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNvmeControllerRequest) ProtoMessage() {}

func (x *CreateNvmeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNvmeControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateNvmeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{17}
}

func (x *CreateNvmeControllerRequest) GetNvmeController() *NvmeController {
	if x != nil {
		return x.NvmeController
	}
	return nil
}

func (x *CreateNvmeControllerRequest) GetNvmeControllerId() string {
	if x != nil {
		return x.NvmeControllerId
	}
	return ""
}

type DeleteNvmeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNvmeControllerRequest) Reset() {
	*x = DeleteNvmeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNvmeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNvmeControllerRequest) ProtoMessage() {}

func (x *DeleteNvmeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNvmeControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteNvmeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteNvmeControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNvmeControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateNvmeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvmeController *NvmeController `protobuf:"bytes,1,opt,name=nvme_controller,json=nvmeController,proto3" json:"nvme_controller,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNvmeControllerRequest) Reset() {
	*x = UpdateNvmeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeControllerRequest) ProtoMessage() {}

func (x *UpdateNvmeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateNvmeControllerRequest) GetNvmeController() *NvmeController {
	if x != nil {
		return x.NvmeController
	}
	return nil
}

func (x *UpdateNvmeControllerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNvmeControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListNvmeControllersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmeControllersRequest) Reset() {
	*x = ListNvmeControllersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeControllersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeControllersRequest) ProtoMessage() {}

func (x *ListNvmeControllersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeControllersRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeControllersRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{20}
}

func (x *ListNvmeControllersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmeControllersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmeControllersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNvmeControllersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeControllers []*NvmeController `protobuf:"bytes,1,rep,name=nvme_controllers,json=nvmeControllers,proto3" json:"nvme_controllers,omitempty"`
	NextPageToken   string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmeControllersResponse) Reset() {
	*x = ListNvmeControllersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeControllersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeControllersResponse) ProtoMessage() {}

func (x *ListNvmeControllersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeControllersResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeControllersResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{21}
}

func (x *ListNvmeControllersResponse) GetNvmeControllers() []*NvmeController {
	if x != nil {
		return x.NvmeControllers
	}
	return nil
}

func (x *ListNvmeControllersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNvmeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmeControllerRequest) Reset() {
	*x = GetNvmeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeControllerRequest) ProtoMessage() {}

func (x *GetNvmeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeControllerRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{22}
}

func (x *GetNvmeControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NvmeControllerStatsRequest) Reset() {
	*x = NvmeControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerStatsRequest) ProtoMessage() {}

func (x *NvmeControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NvmeControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{23}
}

func (x *NvmeControllerStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NvmeControllerStatsResponse) Reset() {
	*x = NvmeControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerStatsResponse) ProtoMessage() {}

func (x *NvmeControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NvmeControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{24}
}

func (x *NvmeControllerStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CreateNvmeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeNamespace   *NvmeNamespace `protobuf:"bytes,1,opt,name=nvme_namespace,json=nvmeNamespace,proto3" json:"nvme_namespace,omitempty"`
	NvmeNamespaceId string         `protobuf:"bytes,2,opt,name=nvme_namespace_id,json=nvmeNamespaceId,proto3" json:"nvme_namespace_id,omitempty"`
}

func (x *CreateNvmeNamespaceRequest) Reset() {
	*x = CreateNvmeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNvmeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNvmeNamespaceRequest) ProtoMessage() {}

func (x *CreateNvmeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNvmeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNvmeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{25}
}

func (x *CreateNvmeNamespaceRequest) GetNvmeNamespace() *NvmeNamespace {
	if x != nil {
		return x.NvmeNamespace
	}
	return nil
}

func (x *CreateNvmeNamespaceRequest) GetNvmeNamespaceId() string {
	if x != nil {
		return x.NvmeNamespaceId
	}
	return ""
}

type DeleteNvmeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNvmeNamespaceRequest) Reset() {
	*x = DeleteNvmeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNvmeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNvmeNamespaceRequest) ProtoMessage() {}

func (x *DeleteNvmeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNvmeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNvmeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteNvmeNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNvmeNamespaceRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateNvmeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvmeNamespace *NvmeNamespace `protobuf:"bytes,1,opt,name=nvme_namespace,json=nvmeNamespace,proto3" json:"nvme_namespace,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNvmeNamespaceRequest) Reset() {
	*x = UpdateNvmeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeNamespaceRequest) ProtoMessage() {}

func (x *UpdateNvmeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateNvmeNamespaceRequest) GetNvmeNamespace() *NvmeNamespace {
	if x != nil {
		return x.NvmeNamespace
	}
	return nil
}

func (x *UpdateNvmeNamespaceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNvmeNamespaceRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListNvmeNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmeNamespacesRequest) Reset() {
	*x = ListNvmeNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeNamespacesRequest) ProtoMessage() {}

func (x *ListNvmeNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{28}
}

func (x *ListNvmeNamespacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmeNamespacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmeNamespacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNvmeNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeNamespaces []*NvmeNamespace `protobuf:"bytes,1,rep,name=nvme_namespaces,json=nvmeNamespaces,proto3" json:"nvme_namespaces,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmeNamespacesResponse) Reset() {
	*x = ListNvmeNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeNamespacesResponse) ProtoMessage() {}

func (x *ListNvmeNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{29}
}

func (x *ListNvmeNamespacesResponse) GetNvmeNamespaces() []*NvmeNamespace {
	if x != nil {
		return x.NvmeNamespaces
	}
	return nil
}

func (x *ListNvmeNamespacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNvmeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmeNamespaceRequest) Reset() {
	*x = GetNvmeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeNamespaceRequest) ProtoMessage() {}

func (x *GetNvmeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{30}
}

func (x *GetNvmeNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeNamespaceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NvmeNamespaceStatsRequest) Reset() {
	*x = NvmeNamespaceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeNamespaceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeNamespaceStatsRequest) ProtoMessage() {}

func (x *NvmeNamespaceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeNamespaceStatsRequest.ProtoReflect.Descriptor instead.
func (*NvmeNamespaceStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{31}
}

func (x *NvmeNamespaceStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeNamespaceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NvmeNamespaceStatsResponse) Reset() {
	*x = NvmeNamespaceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_nvme_pcie_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeNamespaceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeNamespaceStatsResponse) ProtoMessage() {}

func (x *NvmeNamespaceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_nvme_pcie_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeNamespaceStatsResponse.ProtoReflect.Descriptor instead.
func (*NvmeNamespaceStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_nvme_pcie_proto_rawDescGZIP(), []int{32}
}

func (x *NvmeNamespaceStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_frontend_nvme_pcie_proto protoreflect.FileDescriptor

var file_frontend_nvme_pcie_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x70, 0x63, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0f,
	0x6f, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02,
	0x0a, 0x0d, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x03, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x3b, 0xea, 0x41, 0x38, 0x0a, 0x24,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x4e, 0x76, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x71, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x5d, 0x0a,
	0x13, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x75, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x72, 0x75, 0x47, 0x75, 0x69, 0x64, 0x22, 0x8b, 0x02, 0x0a,
	0x0e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0,
	0x41, 0x03, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x3c, 0xea, 0x41,
	0x39, 0x0a, 0x25, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x22, 0xcb, 0x03, 0x0a, 0x12, 0x4e,
	0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e,
	0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x56, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x63, 0x69, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63,
	0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x63, 0x69, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x73, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x63, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x4e, 0x63, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x71, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x71, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x71, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x71, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x4e, 0x76, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x0d, 0x4e, 0x76, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x22,
	0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x3b, 0xea, 0x41, 0x38, 0x0a, 0x24, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x7d, 0x22, 0x8e, 0x02, 0x0a, 0x11, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f,
	0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x73, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x66, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x63,
	0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x63, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x63, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x63, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x63, 0x69,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x63, 0x69, 0x4f, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x6e, 0x76,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6e, 0x76, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x19, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x53, 0x0a, 0x1a, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f,
	0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a,
	0x21, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a,
	0x21, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x1a, 0x4e, 0x76, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1b, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x76,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e, 0x76, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x0d, 0x6e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x19, 0x4e, 0x76, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x1a, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0xb5, 0x01, 0x0a, 0x15, 0x4e, 0x76,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x63, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x56,
	0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x19, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x63, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x29, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x43, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x56, 0x4d, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x32, 0xda, 0x16, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x4e, 0x76, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x0e, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xda, 0x41, 0x20, 0x6e, 0x76,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2c, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x8f,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0xc3, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x59, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x32, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xda, 0x41, 0x1a, 0x6e, 0x76, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x76,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a,
	0x12, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xb6, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41, 0x22, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x93, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x7d, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x32, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d,
	0x3a, 0x0f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0xda, 0x41, 0x1b, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0xa0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a,
	0x13, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xda, 0x41, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2c, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc3, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x32,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x0e, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xda, 0x41, 0x1a, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x4e, 0x76, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x64, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x4e, 0x76, 0x6d, 0x65, 0x50, 0x63, 0x69, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_nvme_pcie_proto_rawDescOnce sync.Once
	file_frontend_nvme_pcie_proto_rawDescData = file_frontend_nvme_pcie_proto_rawDesc
)

func file_frontend_nvme_pcie_proto_rawDescGZIP() []byte {
	file_frontend_nvme_pcie_proto_rawDescOnce.Do(func() {
		file_frontend_nvme_pcie_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_nvme_pcie_proto_rawDescData)
	})
	return file_frontend_nvme_pcie_proto_rawDescData
}

var file_frontend_nvme_pcie_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_frontend_nvme_pcie_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_frontend_nvme_pcie_proto_goTypes = []interface{}{
	(NvmeNamespacePciState)(0),          // 0: opi_api.storage.v1.NvmeNamespacePciState
	(NvmeNamespacePciOperState)(0),      // 1: opi_api.storage.v1.NvmeNamespacePciOperState
	(*NvmeSubsystem)(nil),               // 2: opi_api.storage.v1.NvmeSubsystem
	(*NvmeSubsystemSpec)(nil),           // 3: opi_api.storage.v1.NvmeSubsystemSpec
	(*NvmeSubsystemStatus)(nil),         // 4: opi_api.storage.v1.NvmeSubsystemStatus
	(*NvmeController)(nil),              // 5: opi_api.storage.v1.NvmeController
	(*NvmeControllerSpec)(nil),          // 6: opi_api.storage.v1.NvmeControllerSpec
	(*NvmeControllerStatus)(nil),        // 7: opi_api.storage.v1.NvmeControllerStatus
	(*NvmeNamespace)(nil),               // 8: opi_api.storage.v1.NvmeNamespace
	(*NvmeNamespaceSpec)(nil),           // 9: opi_api.storage.v1.NvmeNamespaceSpec
	(*NvmeNamespaceStatus)(nil),         // 10: opi_api.storage.v1.NvmeNamespaceStatus
	(*CreateNvmeSubsystemRequest)(nil),  // 11: opi_api.storage.v1.CreateNvmeSubsystemRequest
	(*DeleteNvmeSubsystemRequest)(nil),  // 12: opi_api.storage.v1.DeleteNvmeSubsystemRequest
	(*UpdateNvmeSubsystemRequest)(nil),  // 13: opi_api.storage.v1.UpdateNvmeSubsystemRequest
	(*ListNvmeSubsystemsRequest)(nil),   // 14: opi_api.storage.v1.ListNvmeSubsystemsRequest
	(*ListNvmeSubsystemsResponse)(nil),  // 15: opi_api.storage.v1.ListNvmeSubsystemsResponse
	(*GetNvmeSubsystemRequest)(nil),     // 16: opi_api.storage.v1.GetNvmeSubsystemRequest
	(*NvmeSubsystemStatsRequest)(nil),   // 17: opi_api.storage.v1.NvmeSubsystemStatsRequest
	(*NvmeSubsystemStatsResponse)(nil),  // 18: opi_api.storage.v1.NvmeSubsystemStatsResponse
	(*CreateNvmeControllerRequest)(nil), // 19: opi_api.storage.v1.CreateNvmeControllerRequest
	(*DeleteNvmeControllerRequest)(nil), // 20: opi_api.storage.v1.DeleteNvmeControllerRequest
	(*UpdateNvmeControllerRequest)(nil), // 21: opi_api.storage.v1.UpdateNvmeControllerRequest
	(*ListNvmeControllersRequest)(nil),  // 22: opi_api.storage.v1.ListNvmeControllersRequest
	(*ListNvmeControllersResponse)(nil), // 23: opi_api.storage.v1.ListNvmeControllersResponse
	(*GetNvmeControllerRequest)(nil),    // 24: opi_api.storage.v1.GetNvmeControllerRequest
	(*NvmeControllerStatsRequest)(nil),  // 25: opi_api.storage.v1.NvmeControllerStatsRequest
	(*NvmeControllerStatsResponse)(nil), // 26: opi_api.storage.v1.NvmeControllerStatsResponse
	(*CreateNvmeNamespaceRequest)(nil),  // 27: opi_api.storage.v1.CreateNvmeNamespaceRequest
	(*DeleteNvmeNamespaceRequest)(nil),  // 28: opi_api.storage.v1.DeleteNvmeNamespaceRequest
	(*UpdateNvmeNamespaceRequest)(nil),  // 29: opi_api.storage.v1.UpdateNvmeNamespaceRequest
	(*ListNvmeNamespacesRequest)(nil),   // 30: opi_api.storage.v1.ListNvmeNamespacesRequest
	(*ListNvmeNamespacesResponse)(nil),  // 31: opi_api.storage.v1.ListNvmeNamespacesResponse
	(*GetNvmeNamespaceRequest)(nil),     // 32: opi_api.storage.v1.GetNvmeNamespaceRequest
	(*NvmeNamespaceStatsRequest)(nil),   // 33: opi_api.storage.v1.NvmeNamespaceStatsRequest
	(*NvmeNamespaceStatsResponse)(nil),  // 34: opi_api.storage.v1.NvmeNamespaceStatsResponse
	(*PciEndpoint)(nil),                 // 35: opi_api.storage.v1.PciEndpoint
	(*QosLimit)(nil),                    // 36: opi_api.storage.v1.QosLimit
	(*_go.Uuid)(nil),                    // 37: opi_api.common.v1.Uuid
	(*fieldmaskpb.FieldMask)(nil),       // 38: google.protobuf.FieldMask
	(*VolumeStats)(nil),                 // 39: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),               // 40: google.protobuf.Empty
}
var file_frontend_nvme_pcie_proto_depIdxs = []int32{
	3,  // 0: opi_api.storage.v1.NvmeSubsystem.spec:type_name -> opi_api.storage.v1.NvmeSubsystemSpec
	4,  // 1: opi_api.storage.v1.NvmeSubsystem.status:type_name -> opi_api.storage.v1.NvmeSubsystemStatus
	6,  // 2: opi_api.storage.v1.NvmeController.spec:type_name -> opi_api.storage.v1.NvmeControllerSpec
	7,  // 3: opi_api.storage.v1.NvmeController.status:type_name -> opi_api.storage.v1.NvmeControllerStatus
	35, // 4: opi_api.storage.v1.NvmeControllerSpec.pcie_id:type_name -> opi_api.storage.v1.PciEndpoint
	36, // 5: opi_api.storage.v1.NvmeControllerSpec.min_limit:type_name -> opi_api.storage.v1.QosLimit
	36, // 6: opi_api.storage.v1.NvmeControllerSpec.max_limit:type_name -> opi_api.storage.v1.QosLimit
	9,  // 7: opi_api.storage.v1.NvmeNamespace.spec:type_name -> opi_api.storage.v1.NvmeNamespaceSpec
	10, // 8: opi_api.storage.v1.NvmeNamespace.status:type_name -> opi_api.storage.v1.NvmeNamespaceStatus
	37, // 9: opi_api.storage.v1.NvmeNamespaceSpec.uuid:type_name -> opi_api.common.v1.Uuid
	0,  // 10: opi_api.storage.v1.NvmeNamespaceStatus.pci_state:type_name -> opi_api.storage.v1.NvmeNamespacePciState
	1,  // 11: opi_api.storage.v1.NvmeNamespaceStatus.pci_oper_state:type_name -> opi_api.storage.v1.NvmeNamespacePciOperState
	2,  // 12: opi_api.storage.v1.CreateNvmeSubsystemRequest.nvme_subsystem:type_name -> opi_api.storage.v1.NvmeSubsystem
	2,  // 13: opi_api.storage.v1.UpdateNvmeSubsystemRequest.nvme_subsystem:type_name -> opi_api.storage.v1.NvmeSubsystem
	38, // 14: opi_api.storage.v1.UpdateNvmeSubsystemRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 15: opi_api.storage.v1.ListNvmeSubsystemsResponse.nvme_subsystems:type_name -> opi_api.storage.v1.NvmeSubsystem
	39, // 16: opi_api.storage.v1.NvmeSubsystemStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	5,  // 17: opi_api.storage.v1.CreateNvmeControllerRequest.nvme_controller:type_name -> opi_api.storage.v1.NvmeController
	5,  // 18: opi_api.storage.v1.UpdateNvmeControllerRequest.nvme_controller:type_name -> opi_api.storage.v1.NvmeController
	38, // 19: opi_api.storage.v1.UpdateNvmeControllerRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 20: opi_api.storage.v1.ListNvmeControllersResponse.nvme_controllers:type_name -> opi_api.storage.v1.NvmeController
	39, // 21: opi_api.storage.v1.NvmeControllerStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	8,  // 22: opi_api.storage.v1.CreateNvmeNamespaceRequest.nvme_namespace:type_name -> opi_api.storage.v1.NvmeNamespace
	8,  // 23: opi_api.storage.v1.UpdateNvmeNamespaceRequest.nvme_namespace:type_name -> opi_api.storage.v1.NvmeNamespace
	38, // 24: opi_api.storage.v1.UpdateNvmeNamespaceRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 25: opi_api.storage.v1.ListNvmeNamespacesResponse.nvme_namespaces:type_name -> opi_api.storage.v1.NvmeNamespace
	39, // 26: opi_api.storage.v1.NvmeNamespaceStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	11, // 27: opi_api.storage.v1.FrontendNvmeService.CreateNvmeSubsystem:input_type -> opi_api.storage.v1.CreateNvmeSubsystemRequest
	12, // 28: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeSubsystem:input_type -> opi_api.storage.v1.DeleteNvmeSubsystemRequest
	13, // 29: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeSubsystem:input_type -> opi_api.storage.v1.UpdateNvmeSubsystemRequest
	14, // 30: opi_api.storage.v1.FrontendNvmeService.ListNvmeSubsystems:input_type -> opi_api.storage.v1.ListNvmeSubsystemsRequest
	16, // 31: opi_api.storage.v1.FrontendNvmeService.GetNvmeSubsystem:input_type -> opi_api.storage.v1.GetNvmeSubsystemRequest
	17, // 32: opi_api.storage.v1.FrontendNvmeService.NvmeSubsystemStats:input_type -> opi_api.storage.v1.NvmeSubsystemStatsRequest
	19, // 33: opi_api.storage.v1.FrontendNvmeService.CreateNvmeController:input_type -> opi_api.storage.v1.CreateNvmeControllerRequest
	20, // 34: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeController:input_type -> opi_api.storage.v1.DeleteNvmeControllerRequest
	21, // 35: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeController:input_type -> opi_api.storage.v1.UpdateNvmeControllerRequest
	22, // 36: opi_api.storage.v1.FrontendNvmeService.ListNvmeControllers:input_type -> opi_api.storage.v1.ListNvmeControllersRequest
	24, // 37: opi_api.storage.v1.FrontendNvmeService.GetNvmeController:input_type -> opi_api.storage.v1.GetNvmeControllerRequest
	25, // 38: opi_api.storage.v1.FrontendNvmeService.NvmeControllerStats:input_type -> opi_api.storage.v1.NvmeControllerStatsRequest
	27, // 39: opi_api.storage.v1.FrontendNvmeService.CreateNvmeNamespace:input_type -> opi_api.storage.v1.CreateNvmeNamespaceRequest
	28, // 40: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeNamespace:input_type -> opi_api.storage.v1.DeleteNvmeNamespaceRequest
	29, // 41: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeNamespace:input_type -> opi_api.storage.v1.UpdateNvmeNamespaceRequest
	30, // 42: opi_api.storage.v1.FrontendNvmeService.ListNvmeNamespaces:input_type -> opi_api.storage.v1.ListNvmeNamespacesRequest
	32, // 43: opi_api.storage.v1.FrontendNvmeService.GetNvmeNamespace:input_type -> opi_api.storage.v1.GetNvmeNamespaceRequest
	33, // 44: opi_api.storage.v1.FrontendNvmeService.NvmeNamespaceStats:input_type -> opi_api.storage.v1.NvmeNamespaceStatsRequest
	2,  // 45: opi_api.storage.v1.FrontendNvmeService.CreateNvmeSubsystem:output_type -> opi_api.storage.v1.NvmeSubsystem
	40, // 46: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeSubsystem:output_type -> google.protobuf.Empty
	2,  // 47: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeSubsystem:output_type -> opi_api.storage.v1.NvmeSubsystem
	15, // 48: opi_api.storage.v1.FrontendNvmeService.ListNvmeSubsystems:output_type -> opi_api.storage.v1.ListNvmeSubsystemsResponse
	2,  // 49: opi_api.storage.v1.FrontendNvmeService.GetNvmeSubsystem:output_type -> opi_api.storage.v1.NvmeSubsystem
	18, // 50: opi_api.storage.v1.FrontendNvmeService.NvmeSubsystemStats:output_type -> opi_api.storage.v1.NvmeSubsystemStatsResponse
	5,  // 51: opi_api.storage.v1.FrontendNvmeService.CreateNvmeController:output_type -> opi_api.storage.v1.NvmeController
	40, // 52: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeController:output_type -> google.protobuf.Empty
	5,  // 53: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeController:output_type -> opi_api.storage.v1.NvmeController
	23, // 54: opi_api.storage.v1.FrontendNvmeService.ListNvmeControllers:output_type -> opi_api.storage.v1.ListNvmeControllersResponse
	5,  // 55: opi_api.storage.v1.FrontendNvmeService.GetNvmeController:output_type -> opi_api.storage.v1.NvmeController
	26, // 56: opi_api.storage.v1.FrontendNvmeService.NvmeControllerStats:output_type -> opi_api.storage.v1.NvmeControllerStatsResponse
	8,  // 57: opi_api.storage.v1.FrontendNvmeService.CreateNvmeNamespace:output_type -> opi_api.storage.v1.NvmeNamespace
	40, // 58: opi_api.storage.v1.FrontendNvmeService.DeleteNvmeNamespace:output_type -> google.protobuf.Empty
	8,  // 59: opi_api.storage.v1.FrontendNvmeService.UpdateNvmeNamespace:output_type -> opi_api.storage.v1.NvmeNamespace
	31, // 60: opi_api.storage.v1.FrontendNvmeService.ListNvmeNamespaces:output_type -> opi_api.storage.v1.ListNvmeNamespacesResponse
	8,  // 61: opi_api.storage.v1.FrontendNvmeService.GetNvmeNamespace:output_type -> opi_api.storage.v1.NvmeNamespace
	34, // 62: opi_api.storage.v1.FrontendNvmeService.NvmeNamespaceStats:output_type -> opi_api.storage.v1.NvmeNamespaceStatsResponse
	45, // [45:63] is the sub-list for method output_type
	27, // [27:45] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_frontend_nvme_pcie_proto_init() }
func file_frontend_nvme_pcie_proto_init() {
	if File_frontend_nvme_pcie_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frontend_nvme_pcie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeSubsystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeSubsystemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeSubsystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeNamespaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeNamespaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNvmeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNvmeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeSubsystemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeSubsystemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeSubsystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeSubsystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeSubsystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNvmeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNvmeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeControllersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeControllersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNvmeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNvmeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeNamespaceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_nvme_pcie_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeNamespaceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_nvme_pcie_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frontend_nvme_pcie_proto_goTypes,
		DependencyIndexes: file_frontend_nvme_pcie_proto_depIdxs,
		EnumInfos:         file_frontend_nvme_pcie_proto_enumTypes,
		MessageInfos:      file_frontend_nvme_pcie_proto_msgTypes,
	}.Build()
	File_frontend_nvme_pcie_proto = out.File
	file_frontend_nvme_pcie_proto_rawDesc = nil
	file_frontend_nvme_pcie_proto_goTypes = nil
	file_frontend_nvme_pcie_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontendNvmeServiceClient is the client API for FrontendNvmeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendNvmeServiceClient interface {
	CreateNvmeSubsystem(ctx context.Context, in *CreateNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error)
	// Fails if there are any associated objects
	DeleteNvmeSubsystem(ctx context.Context, in *DeleteNvmeSubsystemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNvmeSubsystem(ctx context.Context, in *UpdateNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error)
	ListNvmeSubsystems(ctx context.Context, in *ListNvmeSubsystemsRequest, opts ...grpc.CallOption) (*ListNvmeSubsystemsResponse, error)
	GetNvmeSubsystem(ctx context.Context, in *GetNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error)
	NvmeSubsystemStats(ctx context.Context, in *NvmeSubsystemStatsRequest, opts ...grpc.CallOption) (*NvmeSubsystemStatsResponse, error)
	CreateNvmeController(ctx context.Context, in *CreateNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error)
	// Fails if there are any associated objects
	DeleteNvmeController(ctx context.Context, in *DeleteNvmeControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNvmeController(ctx context.Context, in *UpdateNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error)
	ListNvmeControllers(ctx context.Context, in *ListNvmeControllersRequest, opts ...grpc.CallOption) (*ListNvmeControllersResponse, error)
	GetNvmeController(ctx context.Context, in *GetNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error)
	NvmeControllerStats(ctx context.Context, in *NvmeControllerStatsRequest, opts ...grpc.CallOption) (*NvmeControllerStatsResponse, error)
	CreateNvmeNamespace(ctx context.Context, in *CreateNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error)
	DeleteNvmeNamespace(ctx context.Context, in *DeleteNvmeNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNvmeNamespace(ctx context.Context, in *UpdateNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error)
	ListNvmeNamespaces(ctx context.Context, in *ListNvmeNamespacesRequest, opts ...grpc.CallOption) (*ListNvmeNamespacesResponse, error)
	GetNvmeNamespace(ctx context.Context, in *GetNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error)
	NvmeNamespaceStats(ctx context.Context, in *NvmeNamespaceStatsRequest, opts ...grpc.CallOption) (*NvmeNamespaceStatsResponse, error)
}

type frontendNvmeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendNvmeServiceClient(cc grpc.ClientConnInterface) FrontendNvmeServiceClient {
	return &frontendNvmeServiceClient{cc}
}

func (c *frontendNvmeServiceClient) CreateNvmeSubsystem(ctx context.Context, in *CreateNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error) {
	out := new(NvmeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNvmeSubsystem(ctx context.Context, in *DeleteNvmeSubsystemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNvmeSubsystem(ctx context.Context, in *UpdateNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error) {
	out := new(NvmeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNvmeSubsystems(ctx context.Context, in *ListNvmeSubsystemsRequest, opts ...grpc.CallOption) (*ListNvmeSubsystemsResponse, error) {
	out := new(ListNvmeSubsystemsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNvmeSubsystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNvmeSubsystem(ctx context.Context, in *GetNvmeSubsystemRequest, opts ...grpc.CallOption) (*NvmeSubsystem, error) {
	out := new(NvmeSubsystem)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNvmeSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NvmeSubsystemStats(ctx context.Context, in *NvmeSubsystemStatsRequest, opts ...grpc.CallOption) (*NvmeSubsystemStatsResponse, error) {
	out := new(NvmeSubsystemStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NvmeSubsystemStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) CreateNvmeController(ctx context.Context, in *CreateNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error) {
	out := new(NvmeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNvmeController(ctx context.Context, in *DeleteNvmeControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNvmeController(ctx context.Context, in *UpdateNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error) {
	out := new(NvmeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNvmeControllers(ctx context.Context, in *ListNvmeControllersRequest, opts ...grpc.CallOption) (*ListNvmeControllersResponse, error) {
	out := new(ListNvmeControllersResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNvmeControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNvmeController(ctx context.Context, in *GetNvmeControllerRequest, opts ...grpc.CallOption) (*NvmeController, error) {
	out := new(NvmeController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNvmeController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NvmeControllerStats(ctx context.Context, in *NvmeControllerStatsRequest, opts ...grpc.CallOption) (*NvmeControllerStatsResponse, error) {
	out := new(NvmeControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NvmeControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) CreateNvmeNamespace(ctx context.Context, in *CreateNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error) {
	out := new(NvmeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) DeleteNvmeNamespace(ctx context.Context, in *DeleteNvmeNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) UpdateNvmeNamespace(ctx context.Context, in *UpdateNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error) {
	out := new(NvmeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) ListNvmeNamespaces(ctx context.Context, in *ListNvmeNamespacesRequest, opts ...grpc.CallOption) (*ListNvmeNamespacesResponse, error) {
	out := new(ListNvmeNamespacesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/ListNvmeNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) GetNvmeNamespace(ctx context.Context, in *GetNvmeNamespaceRequest, opts ...grpc.CallOption) (*NvmeNamespace, error) {
	out := new(NvmeNamespace)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/GetNvmeNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendNvmeServiceClient) NvmeNamespaceStats(ctx context.Context, in *NvmeNamespaceStatsRequest, opts ...grpc.CallOption) (*NvmeNamespaceStatsResponse, error) {
	out := new(NvmeNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.FrontendNvmeService/NvmeNamespaceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendNvmeServiceServer is the server API for FrontendNvmeService service.
type FrontendNvmeServiceServer interface {
	CreateNvmeSubsystem(context.Context, *CreateNvmeSubsystemRequest) (*NvmeSubsystem, error)
	// Fails if there are any associated objects
	DeleteNvmeSubsystem(context.Context, *DeleteNvmeSubsystemRequest) (*emptypb.Empty, error)
	UpdateNvmeSubsystem(context.Context, *UpdateNvmeSubsystemRequest) (*NvmeSubsystem, error)
	ListNvmeSubsystems(context.Context, *ListNvmeSubsystemsRequest) (*ListNvmeSubsystemsResponse, error)
	GetNvmeSubsystem(context.Context, *GetNvmeSubsystemRequest) (*NvmeSubsystem, error)
	NvmeSubsystemStats(context.Context, *NvmeSubsystemStatsRequest) (*NvmeSubsystemStatsResponse, error)
	CreateNvmeController(context.Context, *CreateNvmeControllerRequest) (*NvmeController, error)
	// Fails if there are any associated objects
	DeleteNvmeController(context.Context, *DeleteNvmeControllerRequest) (*emptypb.Empty, error)
	UpdateNvmeController(context.Context, *UpdateNvmeControllerRequest) (*NvmeController, error)
	ListNvmeControllers(context.Context, *ListNvmeControllersRequest) (*ListNvmeControllersResponse, error)
	GetNvmeController(context.Context, *GetNvmeControllerRequest) (*NvmeController, error)
	NvmeControllerStats(context.Context, *NvmeControllerStatsRequest) (*NvmeControllerStatsResponse, error)
	CreateNvmeNamespace(context.Context, *CreateNvmeNamespaceRequest) (*NvmeNamespace, error)
	DeleteNvmeNamespace(context.Context, *DeleteNvmeNamespaceRequest) (*emptypb.Empty, error)
	UpdateNvmeNamespace(context.Context, *UpdateNvmeNamespaceRequest) (*NvmeNamespace, error)
	ListNvmeNamespaces(context.Context, *ListNvmeNamespacesRequest) (*ListNvmeNamespacesResponse, error)
	GetNvmeNamespace(context.Context, *GetNvmeNamespaceRequest) (*NvmeNamespace, error)
	NvmeNamespaceStats(context.Context, *NvmeNamespaceStatsRequest) (*NvmeNamespaceStatsResponse, error)
}

// UnimplementedFrontendNvmeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendNvmeServiceServer struct {
}

func (*UnimplementedFrontendNvmeServiceServer) CreateNvmeSubsystem(context.Context, *CreateNvmeSubsystemRequest) (*NvmeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNvmeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNvmeSubsystem(context.Context, *DeleteNvmeSubsystemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNvmeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNvmeSubsystem(context.Context, *UpdateNvmeSubsystemRequest) (*NvmeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNvmeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNvmeSubsystems(context.Context, *ListNvmeSubsystemsRequest) (*ListNvmeSubsystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeSubsystems not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNvmeSubsystem(context.Context, *GetNvmeSubsystemRequest) (*NvmeSubsystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeSubsystem not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NvmeSubsystemStats(context.Context, *NvmeSubsystemStatsRequest) (*NvmeSubsystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NvmeSubsystemStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) CreateNvmeController(context.Context, *CreateNvmeControllerRequest) (*NvmeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNvmeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNvmeController(context.Context, *DeleteNvmeControllerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNvmeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNvmeController(context.Context, *UpdateNvmeControllerRequest) (*NvmeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNvmeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNvmeControllers(context.Context, *ListNvmeControllersRequest) (*ListNvmeControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeControllers not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNvmeController(context.Context, *GetNvmeControllerRequest) (*NvmeController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeController not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NvmeControllerStats(context.Context, *NvmeControllerStatsRequest) (*NvmeControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NvmeControllerStats not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) CreateNvmeNamespace(context.Context, *CreateNvmeNamespaceRequest) (*NvmeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNvmeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) DeleteNvmeNamespace(context.Context, *DeleteNvmeNamespaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNvmeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) UpdateNvmeNamespace(context.Context, *UpdateNvmeNamespaceRequest) (*NvmeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNvmeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) ListNvmeNamespaces(context.Context, *ListNvmeNamespacesRequest) (*ListNvmeNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeNamespaces not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) GetNvmeNamespace(context.Context, *GetNvmeNamespaceRequest) (*NvmeNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeNamespace not implemented")
}
func (*UnimplementedFrontendNvmeServiceServer) NvmeNamespaceStats(context.Context, *NvmeNamespaceStatsRequest) (*NvmeNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NvmeNamespaceStats not implemented")
}

func RegisterFrontendNvmeServiceServer(s *grpc.Server, srv FrontendNvmeServiceServer) {
	s.RegisterService(&_FrontendNvmeService_serviceDesc, srv)
}

func _FrontendNvmeService_CreateNvmeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNvmeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNvmeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNvmeSubsystem(ctx, req.(*CreateNvmeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNvmeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNvmeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeSubsystem(ctx, req.(*DeleteNvmeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNvmeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNvmeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeSubsystem(ctx, req.(*UpdateNvmeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNvmeSubsystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeSubsystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNvmeSubsystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNvmeSubsystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNvmeSubsystems(ctx, req.(*ListNvmeSubsystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNvmeSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNvmeSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNvmeSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNvmeSubsystem(ctx, req.(*GetNvmeSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NvmeSubsystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NvmeSubsystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NvmeSubsystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NvmeSubsystemStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NvmeSubsystemStats(ctx, req.(*NvmeSubsystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_CreateNvmeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNvmeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNvmeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNvmeController(ctx, req.(*CreateNvmeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNvmeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNvmeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeController(ctx, req.(*DeleteNvmeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNvmeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNvmeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeController(ctx, req.(*UpdateNvmeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNvmeControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNvmeControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNvmeControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNvmeControllers(ctx, req.(*ListNvmeControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNvmeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNvmeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNvmeController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNvmeController(ctx, req.(*GetNvmeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NvmeControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NvmeControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NvmeControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NvmeControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NvmeControllerStats(ctx, req.(*NvmeControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_CreateNvmeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNvmeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).CreateNvmeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/CreateNvmeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).CreateNvmeNamespace(ctx, req.(*CreateNvmeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_DeleteNvmeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNvmeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/DeleteNvmeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).DeleteNvmeNamespace(ctx, req.(*DeleteNvmeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_UpdateNvmeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNvmeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/UpdateNvmeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).UpdateNvmeNamespace(ctx, req.(*UpdateNvmeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_ListNvmeNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).ListNvmeNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/ListNvmeNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).ListNvmeNamespaces(ctx, req.(*ListNvmeNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_GetNvmeNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).GetNvmeNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/GetNvmeNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).GetNvmeNamespace(ctx, req.(*GetNvmeNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendNvmeService_NvmeNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NvmeNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendNvmeServiceServer).NvmeNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.FrontendNvmeService/NvmeNamespaceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendNvmeServiceServer).NvmeNamespaceStats(ctx, req.(*NvmeNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendNvmeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.FrontendNvmeService",
	HandlerType: (*FrontendNvmeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNvmeSubsystem",
			Handler:    _FrontendNvmeService_CreateNvmeSubsystem_Handler,
		},
		{
			MethodName: "DeleteNvmeSubsystem",
			Handler:    _FrontendNvmeService_DeleteNvmeSubsystem_Handler,
		},
		{
			MethodName: "UpdateNvmeSubsystem",
			Handler:    _FrontendNvmeService_UpdateNvmeSubsystem_Handler,
		},
		{
			MethodName: "ListNvmeSubsystems",
			Handler:    _FrontendNvmeService_ListNvmeSubsystems_Handler,
		},
		{
			MethodName: "GetNvmeSubsystem",
			Handler:    _FrontendNvmeService_GetNvmeSubsystem_Handler,
		},
		{
			MethodName: "NvmeSubsystemStats",
			Handler:    _FrontendNvmeService_NvmeSubsystemStats_Handler,
		},
		{
			MethodName: "CreateNvmeController",
			Handler:    _FrontendNvmeService_CreateNvmeController_Handler,
		},
		{
			MethodName: "DeleteNvmeController",
			Handler:    _FrontendNvmeService_DeleteNvmeController_Handler,
		},
		{
			MethodName: "UpdateNvmeController",
			Handler:    _FrontendNvmeService_UpdateNvmeController_Handler,
		},
		{
			MethodName: "ListNvmeControllers",
			Handler:    _FrontendNvmeService_ListNvmeControllers_Handler,
		},
		{
			MethodName: "GetNvmeController",
			Handler:    _FrontendNvmeService_GetNvmeController_Handler,
		},
		{
			MethodName: "NvmeControllerStats",
			Handler:    _FrontendNvmeService_NvmeControllerStats_Handler,
		},
		{
			MethodName: "CreateNvmeNamespace",
			Handler:    _FrontendNvmeService_CreateNvmeNamespace_Handler,
		},
		{
			MethodName: "DeleteNvmeNamespace",
			Handler:    _FrontendNvmeService_DeleteNvmeNamespace_Handler,
		},
		{
			MethodName: "UpdateNvmeNamespace",
			Handler:    _FrontendNvmeService_UpdateNvmeNamespace_Handler,
		},
		{
			MethodName: "ListNvmeNamespaces",
			Handler:    _FrontendNvmeService_ListNvmeNamespaces_Handler,
		},
		{
			MethodName: "GetNvmeNamespace",
			Handler:    _FrontendNvmeService_GetNvmeNamespace_Handler,
		},
		{
			MethodName: "NvmeNamespaceStats",
			Handler:    _FrontendNvmeService_NvmeNamespaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend_nvme_pcie.proto",
}
