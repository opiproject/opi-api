// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: backend_aio.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AioController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// handle is an opaque object handle that is not user settable.
	// handle will be returned with created object
	Handle      *_go.ObjectKey `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	BlockSize   int64          `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlocksCount int64          `protobuf:"varint,3,opt,name=blocks_count,json=blocksCount,proto3" json:"blocks_count,omitempty"`
	Uuid        *_go.Uuid      `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Filename    string         `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *AioController) Reset() {
	*x = AioController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioController) ProtoMessage() {}

func (x *AioController) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioController.ProtoReflect.Descriptor instead.
func (*AioController) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{0}
}

func (x *AioController) GetHandle() *_go.ObjectKey {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *AioController) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *AioController) GetBlocksCount() int64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *AioController) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *AioController) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CreateAioControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *AioController `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateAioControllerRequest) Reset() {
	*x = CreateAioControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAioControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAioControllerRequest) ProtoMessage() {}

func (x *CreateAioControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAioControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateAioControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAioControllerRequest) GetDevice() *AioController {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeleteAioControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *_go.ObjectKey `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *DeleteAioControllerRequest) Reset() {
	*x = DeleteAioControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAioControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAioControllerRequest) ProtoMessage() {}

func (x *DeleteAioControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAioControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteAioControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteAioControllerRequest) GetHandle() *_go.ObjectKey {
	if x != nil {
		return x.Handle
	}
	return nil
}

type UpdateAioControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *AioController `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateAioControllerRequest) Reset() {
	*x = UpdateAioControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAioControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAioControllerRequest) ProtoMessage() {}

func (x *UpdateAioControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAioControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateAioControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAioControllerRequest) GetDevice() *AioController {
	if x != nil {
		return x.Device
	}
	return nil
}

type ListAioControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAioControllerRequest) Reset() {
	*x = ListAioControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAioControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAioControllerRequest) ProtoMessage() {}

func (x *ListAioControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAioControllerRequest.ProtoReflect.Descriptor instead.
func (*ListAioControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{4}
}

func (x *ListAioControllerRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAioControllerRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAioControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices       []*AioController `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	NextPageToken string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAioControllerResponse) Reset() {
	*x = ListAioControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAioControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAioControllerResponse) ProtoMessage() {}

func (x *ListAioControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAioControllerResponse.ProtoReflect.Descriptor instead.
func (*ListAioControllerResponse) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{5}
}

func (x *ListAioControllerResponse) GetDevices() []*AioController {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListAioControllerResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetAioControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *_go.ObjectKey `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *GetAioControllerRequest) Reset() {
	*x = GetAioControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAioControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAioControllerRequest) ProtoMessage() {}

func (x *GetAioControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAioControllerRequest.ProtoReflect.Descriptor instead.
func (*GetAioControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{6}
}

func (x *GetAioControllerRequest) GetHandle() *_go.ObjectKey {
	if x != nil {
		return x.Handle
	}
	return nil
}

type AioControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *_go.ObjectKey `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *AioControllerStatsRequest) Reset() {
	*x = AioControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioControllerStatsRequest) ProtoMessage() {}

func (x *AioControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*AioControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{7}
}

func (x *AioControllerStatsRequest) GetHandle() *_go.ObjectKey {
	if x != nil {
		return x.Handle
	}
	return nil
}

type AioControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *_go.ObjectKey `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Stats  string         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *AioControllerStatsResponse) Reset() {
	*x = AioControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioControllerStatsResponse) ProtoMessage() {}

func (x *AioControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*AioControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{8}
}

func (x *AioControllerStatsResponse) GetHandle() *_go.ObjectKey {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *AioControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

var File_backend_aio_proto protoreflect.FileDescriptor

var file_backend_aio_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x22, 0x57, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x41, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x32, 0xc1, 0x06, 0x0a, 0x14, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12, 0x8b, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x32, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x3a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x88, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0x12,
	0x75, 0x0a, 0x12, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_aio_proto_rawDescOnce sync.Once
	file_backend_aio_proto_rawDescData = file_backend_aio_proto_rawDesc
)

func file_backend_aio_proto_rawDescGZIP() []byte {
	file_backend_aio_proto_rawDescOnce.Do(func() {
		file_backend_aio_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_aio_proto_rawDescData)
	})
	return file_backend_aio_proto_rawDescData
}

var file_backend_aio_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_backend_aio_proto_goTypes = []interface{}{
	(*AioController)(nil),              // 0: opi_api.storage.v1.AioController
	(*CreateAioControllerRequest)(nil), // 1: opi_api.storage.v1.CreateAioControllerRequest
	(*DeleteAioControllerRequest)(nil), // 2: opi_api.storage.v1.DeleteAioControllerRequest
	(*UpdateAioControllerRequest)(nil), // 3: opi_api.storage.v1.UpdateAioControllerRequest
	(*ListAioControllerRequest)(nil),   // 4: opi_api.storage.v1.ListAioControllerRequest
	(*ListAioControllerResponse)(nil),  // 5: opi_api.storage.v1.ListAioControllerResponse
	(*GetAioControllerRequest)(nil),    // 6: opi_api.storage.v1.GetAioControllerRequest
	(*AioControllerStatsRequest)(nil),  // 7: opi_api.storage.v1.AioControllerStatsRequest
	(*AioControllerStatsResponse)(nil), // 8: opi_api.storage.v1.AioControllerStatsResponse
	(*_go.ObjectKey)(nil),              // 9: opi_api.common.v1.ObjectKey
	(*_go.Uuid)(nil),                   // 10: opi_api.common.v1.Uuid
	(*emptypb.Empty)(nil),              // 11: google.protobuf.Empty
}
var file_backend_aio_proto_depIdxs = []int32{
	9,  // 0: opi_api.storage.v1.AioController.handle:type_name -> opi_api.common.v1.ObjectKey
	10, // 1: opi_api.storage.v1.AioController.uuid:type_name -> opi_api.common.v1.Uuid
	0,  // 2: opi_api.storage.v1.CreateAioControllerRequest.device:type_name -> opi_api.storage.v1.AioController
	9,  // 3: opi_api.storage.v1.DeleteAioControllerRequest.handle:type_name -> opi_api.common.v1.ObjectKey
	0,  // 4: opi_api.storage.v1.UpdateAioControllerRequest.device:type_name -> opi_api.storage.v1.AioController
	0,  // 5: opi_api.storage.v1.ListAioControllerResponse.devices:type_name -> opi_api.storage.v1.AioController
	9,  // 6: opi_api.storage.v1.GetAioControllerRequest.handle:type_name -> opi_api.common.v1.ObjectKey
	9,  // 7: opi_api.storage.v1.AioControllerStatsRequest.handle:type_name -> opi_api.common.v1.ObjectKey
	9,  // 8: opi_api.storage.v1.AioControllerStatsResponse.handle:type_name -> opi_api.common.v1.ObjectKey
	1,  // 9: opi_api.storage.v1.AioControllerService.CreateAioController:input_type -> opi_api.storage.v1.CreateAioControllerRequest
	2,  // 10: opi_api.storage.v1.AioControllerService.DeleteAioController:input_type -> opi_api.storage.v1.DeleteAioControllerRequest
	3,  // 11: opi_api.storage.v1.AioControllerService.UpdateAioController:input_type -> opi_api.storage.v1.UpdateAioControllerRequest
	4,  // 12: opi_api.storage.v1.AioControllerService.ListAioController:input_type -> opi_api.storage.v1.ListAioControllerRequest
	6,  // 13: opi_api.storage.v1.AioControllerService.GetAioController:input_type -> opi_api.storage.v1.GetAioControllerRequest
	7,  // 14: opi_api.storage.v1.AioControllerService.AioControllerStats:input_type -> opi_api.storage.v1.AioControllerStatsRequest
	0,  // 15: opi_api.storage.v1.AioControllerService.CreateAioController:output_type -> opi_api.storage.v1.AioController
	11, // 16: opi_api.storage.v1.AioControllerService.DeleteAioController:output_type -> google.protobuf.Empty
	0,  // 17: opi_api.storage.v1.AioControllerService.UpdateAioController:output_type -> opi_api.storage.v1.AioController
	5,  // 18: opi_api.storage.v1.AioControllerService.ListAioController:output_type -> opi_api.storage.v1.ListAioControllerResponse
	0,  // 19: opi_api.storage.v1.AioControllerService.GetAioController:output_type -> opi_api.storage.v1.AioController
	8,  // 20: opi_api.storage.v1.AioControllerService.AioControllerStats:output_type -> opi_api.storage.v1.AioControllerStatsResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_backend_aio_proto_init() }
func file_backend_aio_proto_init() {
	if File_backend_aio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_aio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAioControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAioControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAioControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAioControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAioControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAioControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_aio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_aio_proto_goTypes,
		DependencyIndexes: file_backend_aio_proto_depIdxs,
		MessageInfos:      file_backend_aio_proto_msgTypes,
	}.Build()
	File_backend_aio_proto = out.File
	file_backend_aio_proto_rawDesc = nil
	file_backend_aio_proto_goTypes = nil
	file_backend_aio_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AioControllerServiceClient is the client API for AioControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AioControllerServiceClient interface {
	CreateAioController(ctx context.Context, in *CreateAioControllerRequest, opts ...grpc.CallOption) (*AioController, error)
	DeleteAioController(ctx context.Context, in *DeleteAioControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAioController(ctx context.Context, in *UpdateAioControllerRequest, opts ...grpc.CallOption) (*AioController, error)
	ListAioController(ctx context.Context, in *ListAioControllerRequest, opts ...grpc.CallOption) (*ListAioControllerResponse, error)
	GetAioController(ctx context.Context, in *GetAioControllerRequest, opts ...grpc.CallOption) (*AioController, error)
	AioControllerStats(ctx context.Context, in *AioControllerStatsRequest, opts ...grpc.CallOption) (*AioControllerStatsResponse, error)
}

type aioControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAioControllerServiceClient(cc grpc.ClientConnInterface) AioControllerServiceClient {
	return &aioControllerServiceClient{cc}
}

func (c *aioControllerServiceClient) CreateAioController(ctx context.Context, in *CreateAioControllerRequest, opts ...grpc.CallOption) (*AioController, error) {
	out := new(AioController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/CreateAioController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioControllerServiceClient) DeleteAioController(ctx context.Context, in *DeleteAioControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/DeleteAioController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioControllerServiceClient) UpdateAioController(ctx context.Context, in *UpdateAioControllerRequest, opts ...grpc.CallOption) (*AioController, error) {
	out := new(AioController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/UpdateAioController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioControllerServiceClient) ListAioController(ctx context.Context, in *ListAioControllerRequest, opts ...grpc.CallOption) (*ListAioControllerResponse, error) {
	out := new(ListAioControllerResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/ListAioController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioControllerServiceClient) GetAioController(ctx context.Context, in *GetAioControllerRequest, opts ...grpc.CallOption) (*AioController, error) {
	out := new(AioController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/GetAioController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioControllerServiceClient) AioControllerStats(ctx context.Context, in *AioControllerStatsRequest, opts ...grpc.CallOption) (*AioControllerStatsResponse, error) {
	out := new(AioControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioControllerService/AioControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AioControllerServiceServer is the server API for AioControllerService service.
type AioControllerServiceServer interface {
	CreateAioController(context.Context, *CreateAioControllerRequest) (*AioController, error)
	DeleteAioController(context.Context, *DeleteAioControllerRequest) (*emptypb.Empty, error)
	UpdateAioController(context.Context, *UpdateAioControllerRequest) (*AioController, error)
	ListAioController(context.Context, *ListAioControllerRequest) (*ListAioControllerResponse, error)
	GetAioController(context.Context, *GetAioControllerRequest) (*AioController, error)
	AioControllerStats(context.Context, *AioControllerStatsRequest) (*AioControllerStatsResponse, error)
}

// UnimplementedAioControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAioControllerServiceServer struct {
}

func (*UnimplementedAioControllerServiceServer) CreateAioController(context.Context, *CreateAioControllerRequest) (*AioController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAioController not implemented")
}
func (*UnimplementedAioControllerServiceServer) DeleteAioController(context.Context, *DeleteAioControllerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAioController not implemented")
}
func (*UnimplementedAioControllerServiceServer) UpdateAioController(context.Context, *UpdateAioControllerRequest) (*AioController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAioController not implemented")
}
func (*UnimplementedAioControllerServiceServer) ListAioController(context.Context, *ListAioControllerRequest) (*ListAioControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAioController not implemented")
}
func (*UnimplementedAioControllerServiceServer) GetAioController(context.Context, *GetAioControllerRequest) (*AioController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAioController not implemented")
}
func (*UnimplementedAioControllerServiceServer) AioControllerStats(context.Context, *AioControllerStatsRequest) (*AioControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AioControllerStats not implemented")
}

func RegisterAioControllerServiceServer(s *grpc.Server, srv AioControllerServiceServer) {
	s.RegisterService(&_AioControllerService_serviceDesc, srv)
}

func _AioControllerService_CreateAioController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAioControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).CreateAioController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/CreateAioController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).CreateAioController(ctx, req.(*CreateAioControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioControllerService_DeleteAioController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAioControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).DeleteAioController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/DeleteAioController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).DeleteAioController(ctx, req.(*DeleteAioControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioControllerService_UpdateAioController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAioControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).UpdateAioController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/UpdateAioController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).UpdateAioController(ctx, req.(*UpdateAioControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioControllerService_ListAioController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAioControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).ListAioController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/ListAioController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).ListAioController(ctx, req.(*ListAioControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioControllerService_GetAioController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAioControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).GetAioController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/GetAioController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).GetAioController(ctx, req.(*GetAioControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioControllerService_AioControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AioControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioControllerServiceServer).AioControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioControllerService/AioControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioControllerServiceServer).AioControllerStats(ctx, req.(*AioControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AioControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.AioControllerService",
	HandlerType: (*AioControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAioController",
			Handler:    _AioControllerService_CreateAioController_Handler,
		},
		{
			MethodName: "DeleteAioController",
			Handler:    _AioControllerService_DeleteAioController_Handler,
		},
		{
			MethodName: "UpdateAioController",
			Handler:    _AioControllerService_UpdateAioController_Handler,
		},
		{
			MethodName: "ListAioController",
			Handler:    _AioControllerService_ListAioController_Handler,
		},
		{
			MethodName: "GetAioController",
			Handler:    _AioControllerService_GetAioController_Handler,
		},
		{
			MethodName: "AioControllerStats",
			Handler:    _AioControllerService_AioControllerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_aio.proto",
}
