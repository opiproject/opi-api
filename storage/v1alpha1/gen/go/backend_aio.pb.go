// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: backend_aio.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AioVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name        string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BlockSize   int64     `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlocksCount int64     `protobuf:"varint,3,opt,name=blocks_count,json=blocksCount,proto3" json:"blocks_count,omitempty"`
	Uuid        *_go.Uuid `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Filename    string    `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *AioVolume) Reset() {
	*x = AioVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioVolume) ProtoMessage() {}

func (x *AioVolume) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioVolume.ProtoReflect.Descriptor instead.
func (*AioVolume) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{0}
}

func (x *AioVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AioVolume) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *AioVolume) GetBlocksCount() int64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *AioVolume) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *AioVolume) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CreateAioVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AioVolume   *AioVolume `protobuf:"bytes,1,opt,name=aio_volume,json=aioVolume,proto3" json:"aio_volume,omitempty"`
	AioVolumeId string     `protobuf:"bytes,2,opt,name=aio_volume_id,json=aioVolumeId,proto3" json:"aio_volume_id,omitempty"`
}

func (x *CreateAioVolumeRequest) Reset() {
	*x = CreateAioVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAioVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAioVolumeRequest) ProtoMessage() {}

func (x *CreateAioVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAioVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateAioVolumeRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAioVolumeRequest) GetAioVolume() *AioVolume {
	if x != nil {
		return x.AioVolume
	}
	return nil
}

func (x *CreateAioVolumeRequest) GetAioVolumeId() string {
	if x != nil {
		return x.AioVolumeId
	}
	return ""
}

type DeleteAioVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteAioVolumeRequest) Reset() {
	*x = DeleteAioVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAioVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAioVolumeRequest) ProtoMessage() {}

func (x *DeleteAioVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAioVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAioVolumeRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteAioVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteAioVolumeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateAioVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	AioVolume *AioVolume `protobuf:"bytes,1,opt,name=aio_volume,json=aioVolume,proto3" json:"aio_volume,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateAioVolumeRequest) Reset() {
	*x = UpdateAioVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAioVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAioVolumeRequest) ProtoMessage() {}

func (x *UpdateAioVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAioVolumeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAioVolumeRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAioVolumeRequest) GetAioVolume() *AioVolume {
	if x != nil {
		return x.AioVolume
	}
	return nil
}

func (x *UpdateAioVolumeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateAioVolumeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListAioVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAioVolumesRequest) Reset() {
	*x = ListAioVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAioVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAioVolumesRequest) ProtoMessage() {}

func (x *ListAioVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAioVolumesRequest.ProtoReflect.Descriptor instead.
func (*ListAioVolumesRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{4}
}

func (x *ListAioVolumesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAioVolumesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAioVolumesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAioVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AioVolumes    []*AioVolume `protobuf:"bytes,1,rep,name=aio_volumes,json=aioVolumes,proto3" json:"aio_volumes,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAioVolumesResponse) Reset() {
	*x = ListAioVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAioVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAioVolumesResponse) ProtoMessage() {}

func (x *ListAioVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAioVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListAioVolumesResponse) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{5}
}

func (x *ListAioVolumesResponse) GetAioVolumes() []*AioVolume {
	if x != nil {
		return x.AioVolumes
	}
	return nil
}

func (x *ListAioVolumesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetAioVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAioVolumeRequest) Reset() {
	*x = GetAioVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAioVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAioVolumeRequest) ProtoMessage() {}

func (x *GetAioVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAioVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetAioVolumeRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{6}
}

func (x *GetAioVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AioVolumeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AioVolumeStatsRequest) Reset() {
	*x = AioVolumeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioVolumeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioVolumeStatsRequest) ProtoMessage() {}

func (x *AioVolumeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioVolumeStatsRequest.ProtoReflect.Descriptor instead.
func (*AioVolumeStatsRequest) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{7}
}

func (x *AioVolumeStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AioVolumeStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *AioVolumeStatsResponse) Reset() {
	*x = AioVolumeStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_aio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AioVolumeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AioVolumeStatsResponse) ProtoMessage() {}

func (x *AioVolumeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_aio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AioVolumeStatsResponse.ProtoReflect.Descriptor instead.
func (*AioVolumeStatsResponse) Descriptor() ([]byte, []int) {
	return file_backend_aio_proto_rawDescGZIP(), []int{8}
}

func (x *AioVolumeStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_backend_aio_proto protoreflect.FileDescriptor

var file_backend_aio_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x70, 0x69, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x41, 0x69, 0x6f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x41,
	0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x37, 0xea, 0x41, 0x34, 0x0a, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x7d, 0x22, 0x7f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x6f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb8, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x69, 0x6f, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09, 0x61, 0x69, 0x6f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x41, 0x69,
	0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x61, 0x69, 0x6f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f,
	0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x51, 0x0a, 0x15, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2f, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x32, 0xef, 0x06, 0x0a, 0x10, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69,
	0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x0a, 0x61, 0x69,
	0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0xda, 0x41, 0x18, 0x61, 0x69, 0x6f, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2c, 0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69,
	0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x6f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x32, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x61, 0x69, 0x6f, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x0a, 0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0xda, 0x41, 0x16, 0x61, 0x69, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x91, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x41, 0x69,
	0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x6f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x41, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_aio_proto_rawDescOnce sync.Once
	file_backend_aio_proto_rawDescData = file_backend_aio_proto_rawDesc
)

func file_backend_aio_proto_rawDescGZIP() []byte {
	file_backend_aio_proto_rawDescOnce.Do(func() {
		file_backend_aio_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_aio_proto_rawDescData)
	})
	return file_backend_aio_proto_rawDescData
}

var file_backend_aio_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_backend_aio_proto_goTypes = []interface{}{
	(*AioVolume)(nil),              // 0: opi_api.storage.v1.AioVolume
	(*CreateAioVolumeRequest)(nil), // 1: opi_api.storage.v1.CreateAioVolumeRequest
	(*DeleteAioVolumeRequest)(nil), // 2: opi_api.storage.v1.DeleteAioVolumeRequest
	(*UpdateAioVolumeRequest)(nil), // 3: opi_api.storage.v1.UpdateAioVolumeRequest
	(*ListAioVolumesRequest)(nil),  // 4: opi_api.storage.v1.ListAioVolumesRequest
	(*ListAioVolumesResponse)(nil), // 5: opi_api.storage.v1.ListAioVolumesResponse
	(*GetAioVolumeRequest)(nil),    // 6: opi_api.storage.v1.GetAioVolumeRequest
	(*AioVolumeStatsRequest)(nil),  // 7: opi_api.storage.v1.AioVolumeStatsRequest
	(*AioVolumeStatsResponse)(nil), // 8: opi_api.storage.v1.AioVolumeStatsResponse
	(*_go.Uuid)(nil),               // 9: opi_api.common.v1.Uuid
	(*fieldmaskpb.FieldMask)(nil),  // 10: google.protobuf.FieldMask
	(*VolumeStats)(nil),            // 11: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),          // 12: google.protobuf.Empty
}
var file_backend_aio_proto_depIdxs = []int32{
	9,  // 0: opi_api.storage.v1.AioVolume.uuid:type_name -> opi_api.common.v1.Uuid
	0,  // 1: opi_api.storage.v1.CreateAioVolumeRequest.aio_volume:type_name -> opi_api.storage.v1.AioVolume
	0,  // 2: opi_api.storage.v1.UpdateAioVolumeRequest.aio_volume:type_name -> opi_api.storage.v1.AioVolume
	10, // 3: opi_api.storage.v1.UpdateAioVolumeRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 4: opi_api.storage.v1.ListAioVolumesResponse.aio_volumes:type_name -> opi_api.storage.v1.AioVolume
	11, // 5: opi_api.storage.v1.AioVolumeStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	1,  // 6: opi_api.storage.v1.AioVolumeService.CreateAioVolume:input_type -> opi_api.storage.v1.CreateAioVolumeRequest
	2,  // 7: opi_api.storage.v1.AioVolumeService.DeleteAioVolume:input_type -> opi_api.storage.v1.DeleteAioVolumeRequest
	3,  // 8: opi_api.storage.v1.AioVolumeService.UpdateAioVolume:input_type -> opi_api.storage.v1.UpdateAioVolumeRequest
	4,  // 9: opi_api.storage.v1.AioVolumeService.ListAioVolumes:input_type -> opi_api.storage.v1.ListAioVolumesRequest
	6,  // 10: opi_api.storage.v1.AioVolumeService.GetAioVolume:input_type -> opi_api.storage.v1.GetAioVolumeRequest
	7,  // 11: opi_api.storage.v1.AioVolumeService.AioVolumeStats:input_type -> opi_api.storage.v1.AioVolumeStatsRequest
	0,  // 12: opi_api.storage.v1.AioVolumeService.CreateAioVolume:output_type -> opi_api.storage.v1.AioVolume
	12, // 13: opi_api.storage.v1.AioVolumeService.DeleteAioVolume:output_type -> google.protobuf.Empty
	0,  // 14: opi_api.storage.v1.AioVolumeService.UpdateAioVolume:output_type -> opi_api.storage.v1.AioVolume
	5,  // 15: opi_api.storage.v1.AioVolumeService.ListAioVolumes:output_type -> opi_api.storage.v1.ListAioVolumesResponse
	0,  // 16: opi_api.storage.v1.AioVolumeService.GetAioVolume:output_type -> opi_api.storage.v1.AioVolume
	8,  // 17: opi_api.storage.v1.AioVolumeService.AioVolumeStats:output_type -> opi_api.storage.v1.AioVolumeStatsResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_backend_aio_proto_init() }
func file_backend_aio_proto_init() {
	if File_backend_aio_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_aio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAioVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAioVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAioVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAioVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAioVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAioVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioVolumeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_aio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AioVolumeStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_aio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_aio_proto_goTypes,
		DependencyIndexes: file_backend_aio_proto_depIdxs,
		MessageInfos:      file_backend_aio_proto_msgTypes,
	}.Build()
	File_backend_aio_proto = out.File
	file_backend_aio_proto_rawDesc = nil
	file_backend_aio_proto_goTypes = nil
	file_backend_aio_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AioVolumeServiceClient is the client API for AioVolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AioVolumeServiceClient interface {
	CreateAioVolume(ctx context.Context, in *CreateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	DeleteAioVolume(ctx context.Context, in *DeleteAioVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAioVolume(ctx context.Context, in *UpdateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	ListAioVolumes(ctx context.Context, in *ListAioVolumesRequest, opts ...grpc.CallOption) (*ListAioVolumesResponse, error)
	GetAioVolume(ctx context.Context, in *GetAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	AioVolumeStats(ctx context.Context, in *AioVolumeStatsRequest, opts ...grpc.CallOption) (*AioVolumeStatsResponse, error)
}

type aioVolumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAioVolumeServiceClient(cc grpc.ClientConnInterface) AioVolumeServiceClient {
	return &aioVolumeServiceClient{cc}
}

func (c *aioVolumeServiceClient) CreateAioVolume(ctx context.Context, in *CreateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/CreateAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) DeleteAioVolume(ctx context.Context, in *DeleteAioVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/DeleteAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) UpdateAioVolume(ctx context.Context, in *UpdateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/UpdateAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) ListAioVolumes(ctx context.Context, in *ListAioVolumesRequest, opts ...grpc.CallOption) (*ListAioVolumesResponse, error) {
	out := new(ListAioVolumesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/ListAioVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) GetAioVolume(ctx context.Context, in *GetAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/GetAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) AioVolumeStats(ctx context.Context, in *AioVolumeStatsRequest, opts ...grpc.CallOption) (*AioVolumeStatsResponse, error) {
	out := new(AioVolumeStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/AioVolumeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AioVolumeServiceServer is the server API for AioVolumeService service.
type AioVolumeServiceServer interface {
	CreateAioVolume(context.Context, *CreateAioVolumeRequest) (*AioVolume, error)
	DeleteAioVolume(context.Context, *DeleteAioVolumeRequest) (*emptypb.Empty, error)
	UpdateAioVolume(context.Context, *UpdateAioVolumeRequest) (*AioVolume, error)
	ListAioVolumes(context.Context, *ListAioVolumesRequest) (*ListAioVolumesResponse, error)
	GetAioVolume(context.Context, *GetAioVolumeRequest) (*AioVolume, error)
	AioVolumeStats(context.Context, *AioVolumeStatsRequest) (*AioVolumeStatsResponse, error)
}

// UnimplementedAioVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAioVolumeServiceServer struct {
}

func (*UnimplementedAioVolumeServiceServer) CreateAioVolume(context.Context, *CreateAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAioVolume not implemented")
}
func (*UnimplementedAioVolumeServiceServer) DeleteAioVolume(context.Context, *DeleteAioVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAioVolume not implemented")
}
func (*UnimplementedAioVolumeServiceServer) UpdateAioVolume(context.Context, *UpdateAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAioVolume not implemented")
}
func (*UnimplementedAioVolumeServiceServer) ListAioVolumes(context.Context, *ListAioVolumesRequest) (*ListAioVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAioVolumes not implemented")
}
func (*UnimplementedAioVolumeServiceServer) GetAioVolume(context.Context, *GetAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAioVolume not implemented")
}
func (*UnimplementedAioVolumeServiceServer) AioVolumeStats(context.Context, *AioVolumeStatsRequest) (*AioVolumeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AioVolumeStats not implemented")
}

func RegisterAioVolumeServiceServer(s *grpc.Server, srv AioVolumeServiceServer) {
	s.RegisterService(&_AioVolumeService_serviceDesc, srv)
}

func _AioVolumeService_CreateAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).CreateAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/CreateAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).CreateAioVolume(ctx, req.(*CreateAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_DeleteAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).DeleteAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/DeleteAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).DeleteAioVolume(ctx, req.(*DeleteAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_UpdateAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).UpdateAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/UpdateAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).UpdateAioVolume(ctx, req.(*UpdateAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_ListAioVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAioVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).ListAioVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/ListAioVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).ListAioVolumes(ctx, req.(*ListAioVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_GetAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).GetAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/GetAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).GetAioVolume(ctx, req.(*GetAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_AioVolumeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AioVolumeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).AioVolumeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/AioVolumeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).AioVolumeStats(ctx, req.(*AioVolumeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AioVolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.AioVolumeService",
	HandlerType: (*AioVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAioVolume",
			Handler:    _AioVolumeService_CreateAioVolume_Handler,
		},
		{
			MethodName: "DeleteAioVolume",
			Handler:    _AioVolumeService_DeleteAioVolume_Handler,
		},
		{
			MethodName: "UpdateAioVolume",
			Handler:    _AioVolumeService_UpdateAioVolume_Handler,
		},
		{
			MethodName: "ListAioVolumes",
			Handler:    _AioVolumeService_ListAioVolumes_Handler,
		},
		{
			MethodName: "GetAioVolume",
			Handler:    _AioVolumeService_GetAioVolume_Handler,
		},
		{
			MethodName: "AioVolumeStats",
			Handler:    _AioVolumeService_AioVolumeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_aio.proto",
}
