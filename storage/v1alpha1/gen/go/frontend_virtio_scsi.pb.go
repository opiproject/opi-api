// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// Copyright (C) 2023 Intel Corporation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: frontend_virtio_scsi.proto

package _go

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VirtioScsiTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// maximum LUNs within a target
	MaxLuns int32 `protobuf:"varint,2,opt,name=max_luns,json=maxLuns,proto3" json:"max_luns,omitempty"`
}

func (x *VirtioScsiTarget) Reset() {
	*x = VirtioScsiTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiTarget) ProtoMessage() {}

func (x *VirtioScsiTarget) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiTarget.ProtoReflect.Descriptor instead.
func (*VirtioScsiTarget) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{0}
}

func (x *VirtioScsiTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtioScsiTarget) GetMaxLuns() int32 {
	if x != nil {
		return x.MaxLuns
	}
	return 0
}

type VirtioScsiController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// xPU's PCI ID for the controller
	PcieId *PciEndpoint `protobuf:"bytes,2,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	// min QoS limits for the controller
	MinLimit *QosLimit `protobuf:"bytes,3,opt,name=min_limit,json=minLimit,proto3" json:"min_limit,omitempty"`
	// max QoS limits for the controller
	MaxLimit *QosLimit `protobuf:"bytes,4,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
}

func (x *VirtioScsiController) Reset() {
	*x = VirtioScsiController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiController) ProtoMessage() {}

func (x *VirtioScsiController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiController.ProtoReflect.Descriptor instead.
func (*VirtioScsiController) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{1}
}

func (x *VirtioScsiController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtioScsiController) GetPcieId() *PciEndpoint {
	if x != nil {
		return x.PcieId
	}
	return nil
}

func (x *VirtioScsiController) GetMinLimit() *QosLimit {
	if x != nil {
		return x.MinLimit
	}
	return nil
}

func (x *VirtioScsiController) GetMaxLimit() *QosLimit {
	if x != nil {
		return x.MaxLimit
	}
	return nil
}

type VirtioScsiLun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The target that this LUN is in
	TargetNameRef string `protobuf:"bytes,2,opt,name=target_name_ref,json=targetNameRef,proto3" json:"target_name_ref,omitempty"`
	// The middle/back-end volume for this LLUN
	VolumeNameRef string `protobuf:"bytes,3,opt,name=volume_name_ref,json=volumeNameRef,proto3" json:"volume_name_ref,omitempty"`
}

func (x *VirtioScsiLun) Reset() {
	*x = VirtioScsiLun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLun) ProtoMessage() {}

func (x *VirtioScsiLun) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLun.ProtoReflect.Descriptor instead.
func (*VirtioScsiLun) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{2}
}

func (x *VirtioScsiLun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtioScsiLun) GetTargetNameRef() string {
	if x != nil {
		return x.TargetNameRef
	}
	return ""
}

func (x *VirtioScsiLun) GetVolumeNameRef() string {
	if x != nil {
		return x.VolumeNameRef
	}
	return ""
}

// Represents a request to create an Virtio Scsi Target.
type CreateVirtioScsiTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Virtio Scsi Target to be created.
	VirtioScsiTarget *VirtioScsiTarget `protobuf:"bytes,1,opt,name=virtio_scsi_target,json=virtioScsiTarget,proto3" json:"virtio_scsi_target,omitempty"`
	// An optional ID to assign to the Virtio Scsi Target.
	// If this is not provided the system will auto-generate it.
	VirtioScsiTargetId string `protobuf:"bytes,2,opt,name=virtio_scsi_target_id,json=virtioScsiTargetId,proto3" json:"virtio_scsi_target_id,omitempty"`
}

func (x *CreateVirtioScsiTargetRequest) Reset() {
	*x = CreateVirtioScsiTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtioScsiTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtioScsiTargetRequest) ProtoMessage() {}

func (x *CreateVirtioScsiTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtioScsiTargetRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtioScsiTargetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVirtioScsiTargetRequest) GetVirtioScsiTarget() *VirtioScsiTarget {
	if x != nil {
		return x.VirtioScsiTarget
	}
	return nil
}

func (x *CreateVirtioScsiTargetRequest) GetVirtioScsiTargetId() string {
	if x != nil {
		return x.VirtioScsiTargetId
	}
	return ""
}

// Represents a request to delete an Virtio Scsi Target.
type DeleteVirtioScsiTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteVirtioScsiTargetRequest) Reset() {
	*x = DeleteVirtioScsiTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtioScsiTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtioScsiTargetRequest) ProtoMessage() {}

func (x *DeleteVirtioScsiTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtioScsiTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtioScsiTargetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteVirtioScsiTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVirtioScsiTargetRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to update an Virtio Scsi Target.
type UpdateVirtioScsiTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	VirtioScsiTarget *VirtioScsiTarget `protobuf:"bytes,1,opt,name=virtio_scsi_target,json=virtioScsiTarget,proto3" json:"virtio_scsi_target,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateVirtioScsiTargetRequest) Reset() {
	*x = UpdateVirtioScsiTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtioScsiTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtioScsiTargetRequest) ProtoMessage() {}

func (x *UpdateVirtioScsiTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtioScsiTargetRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtioScsiTargetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateVirtioScsiTargetRequest) GetVirtioScsiTarget() *VirtioScsiTarget {
	if x != nil {
		return x.VirtioScsiTarget
	}
	return nil
}

func (x *UpdateVirtioScsiTargetRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateVirtioScsiTargetRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to list all Virtio Scsi Targets.
type ListVirtioScsiTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVirtioScsiTargetsRequest) Reset() {
	*x = ListVirtioScsiTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiTargetsRequest) ProtoMessage() {}

func (x *ListVirtioScsiTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiTargetsRequest.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiTargetsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{6}
}

func (x *ListVirtioScsiTargetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVirtioScsiTargetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVirtioScsiTargetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Virtio Scsi Targets.
type ListVirtioScsiTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtioScsiTargets []*VirtioScsiTarget `protobuf:"bytes,1,rep,name=virtio_scsi_targets,json=virtioScsiTargets,proto3" json:"virtio_scsi_targets,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVirtioScsiTargetsResponse) Reset() {
	*x = ListVirtioScsiTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiTargetsResponse) ProtoMessage() {}

func (x *ListVirtioScsiTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiTargetsResponse.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiTargetsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{7}
}

func (x *ListVirtioScsiTargetsResponse) GetVirtioScsiTargets() []*VirtioScsiTarget {
	if x != nil {
		return x.VirtioScsiTargets
	}
	return nil
}

func (x *ListVirtioScsiTargetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Virtio Scsi Target.
type GetVirtioScsiTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVirtioScsiTargetRequest) Reset() {
	*x = GetVirtioScsiTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtioScsiTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtioScsiTargetRequest) ProtoMessage() {}

func (x *GetVirtioScsiTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtioScsiTargetRequest.ProtoReflect.Descriptor instead.
func (*GetVirtioScsiTargetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{8}
}

func (x *GetVirtioScsiTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to get an Virtio Scsi Target statistics.
type StatsVirtioScsiTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatsVirtioScsiTargetRequest) Reset() {
	*x = StatsVirtioScsiTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiTargetRequest) ProtoMessage() {}

func (x *StatsVirtioScsiTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiTargetRequest.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiTargetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{9}
}

func (x *StatsVirtioScsiTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a response to get an Virtio Scsi Target statistics.
type StatsVirtioScsiTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StatsVirtioScsiTargetResponse) Reset() {
	*x = StatsVirtioScsiTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiTargetResponse) ProtoMessage() {}

func (x *StatsVirtioScsiTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiTargetResponse.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiTargetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{10}
}

func (x *StatsVirtioScsiTargetResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Represents a request to create an Virtio Scsi Controller.
type CreateVirtioScsiControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Virtio Scsi Controller to be created.
	VirtioScsiController *VirtioScsiController `protobuf:"bytes,1,opt,name=virtio_scsi_controller,json=virtioScsiController,proto3" json:"virtio_scsi_controller,omitempty"`
	// An optional ID to assign to the Virtio Scsi Controller.
	// If this is not provided the system will auto-generate it.
	VirtioScsiControllerId string `protobuf:"bytes,2,opt,name=virtio_scsi_controller_id,json=virtioScsiControllerId,proto3" json:"virtio_scsi_controller_id,omitempty"`
}

func (x *CreateVirtioScsiControllerRequest) Reset() {
	*x = CreateVirtioScsiControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtioScsiControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtioScsiControllerRequest) ProtoMessage() {}

func (x *CreateVirtioScsiControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtioScsiControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtioScsiControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVirtioScsiControllerRequest) GetVirtioScsiController() *VirtioScsiController {
	if x != nil {
		return x.VirtioScsiController
	}
	return nil
}

func (x *CreateVirtioScsiControllerRequest) GetVirtioScsiControllerId() string {
	if x != nil {
		return x.VirtioScsiControllerId
	}
	return ""
}

// Represents a request to delete an Virtio Scsi Controller.
type DeleteVirtioScsiControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteVirtioScsiControllerRequest) Reset() {
	*x = DeleteVirtioScsiControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtioScsiControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtioScsiControllerRequest) ProtoMessage() {}

func (x *DeleteVirtioScsiControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtioScsiControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtioScsiControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVirtioScsiControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVirtioScsiControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to update an Virtio Scsi Controller.
type UpdateVirtioScsiControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	VirtioScsiController *VirtioScsiController `protobuf:"bytes,1,opt,name=virtio_scsi_controller,json=virtioScsiController,proto3" json:"virtio_scsi_controller,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateVirtioScsiControllerRequest) Reset() {
	*x = UpdateVirtioScsiControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtioScsiControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtioScsiControllerRequest) ProtoMessage() {}

func (x *UpdateVirtioScsiControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtioScsiControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtioScsiControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateVirtioScsiControllerRequest) GetVirtioScsiController() *VirtioScsiController {
	if x != nil {
		return x.VirtioScsiController
	}
	return nil
}

func (x *UpdateVirtioScsiControllerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateVirtioScsiControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to list all Virtio Scsi Controllers.
type ListVirtioScsiControllersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVirtioScsiControllersRequest) Reset() {
	*x = ListVirtioScsiControllersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiControllersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiControllersRequest) ProtoMessage() {}

func (x *ListVirtioScsiControllersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiControllersRequest.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiControllersRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{14}
}

func (x *ListVirtioScsiControllersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVirtioScsiControllersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVirtioScsiControllersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Virtio Scsi Controllers.
type ListVirtioScsiControllersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtioScsiControllers []*VirtioScsiController `protobuf:"bytes,1,rep,name=virtio_scsi_controllers,json=virtioScsiControllers,proto3" json:"virtio_scsi_controllers,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVirtioScsiControllersResponse) Reset() {
	*x = ListVirtioScsiControllersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiControllersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiControllersResponse) ProtoMessage() {}

func (x *ListVirtioScsiControllersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiControllersResponse.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiControllersResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{15}
}

func (x *ListVirtioScsiControllersResponse) GetVirtioScsiControllers() []*VirtioScsiController {
	if x != nil {
		return x.VirtioScsiControllers
	}
	return nil
}

func (x *ListVirtioScsiControllersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Virtio Scsi Controller.
type GetVirtioScsiControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVirtioScsiControllerRequest) Reset() {
	*x = GetVirtioScsiControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtioScsiControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtioScsiControllerRequest) ProtoMessage() {}

func (x *GetVirtioScsiControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtioScsiControllerRequest.ProtoReflect.Descriptor instead.
func (*GetVirtioScsiControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{16}
}

func (x *GetVirtioScsiControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to get an Virtio Scsi Controller statistics.
type StatsVirtioScsiControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatsVirtioScsiControllerRequest) Reset() {
	*x = StatsVirtioScsiControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiControllerRequest) ProtoMessage() {}

func (x *StatsVirtioScsiControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiControllerRequest.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiControllerRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{17}
}

func (x *StatsVirtioScsiControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a response to get an Virtio Scsi Controller statistics.
type StatsVirtioScsiControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StatsVirtioScsiControllerResponse) Reset() {
	*x = StatsVirtioScsiControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiControllerResponse) ProtoMessage() {}

func (x *StatsVirtioScsiControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiControllerResponse.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiControllerResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{18}
}

func (x *StatsVirtioScsiControllerResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Represents a request to create an Virtio Scsi Lun.
type CreateVirtioScsiLunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Virtio Scsi Lun to be created.
	VirtioScsiLun *VirtioScsiLun `protobuf:"bytes,1,opt,name=virtio_scsi_lun,json=virtioScsiLun,proto3" json:"virtio_scsi_lun,omitempty"`
	// An optional ID to assign to the Virtio Scsi Lun.
	// If this is not provided the system will auto-generate it.
	VirtioScsiLunId string `protobuf:"bytes,2,opt,name=virtio_scsi_lun_id,json=virtioScsiLunId,proto3" json:"virtio_scsi_lun_id,omitempty"`
}

func (x *CreateVirtioScsiLunRequest) Reset() {
	*x = CreateVirtioScsiLunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtioScsiLunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtioScsiLunRequest) ProtoMessage() {}

func (x *CreateVirtioScsiLunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtioScsiLunRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtioScsiLunRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{19}
}

func (x *CreateVirtioScsiLunRequest) GetVirtioScsiLun() *VirtioScsiLun {
	if x != nil {
		return x.VirtioScsiLun
	}
	return nil
}

func (x *CreateVirtioScsiLunRequest) GetVirtioScsiLunId() string {
	if x != nil {
		return x.VirtioScsiLunId
	}
	return ""
}

// Represents a request to delete an Virtio Scsi Lun.
type DeleteVirtioScsiLunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteVirtioScsiLunRequest) Reset() {
	*x = DeleteVirtioScsiLunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtioScsiLunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtioScsiLunRequest) ProtoMessage() {}

func (x *DeleteVirtioScsiLunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtioScsiLunRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtioScsiLunRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteVirtioScsiLunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVirtioScsiLunRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to update an Virtio Scsi Lun.
type UpdateVirtioScsiLunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	VirtioScsiLun *VirtioScsiLun `protobuf:"bytes,1,opt,name=virtio_scsi_lun,json=virtioScsiLun,proto3" json:"virtio_scsi_lun,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateVirtioScsiLunRequest) Reset() {
	*x = UpdateVirtioScsiLunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtioScsiLunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtioScsiLunRequest) ProtoMessage() {}

func (x *UpdateVirtioScsiLunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtioScsiLunRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtioScsiLunRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateVirtioScsiLunRequest) GetVirtioScsiLun() *VirtioScsiLun {
	if x != nil {
		return x.VirtioScsiLun
	}
	return nil
}

func (x *UpdateVirtioScsiLunRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateVirtioScsiLunRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to list all Virtio Scsi Luns.
type ListVirtioScsiLunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVirtioScsiLunsRequest) Reset() {
	*x = ListVirtioScsiLunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiLunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiLunsRequest) ProtoMessage() {}

func (x *ListVirtioScsiLunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiLunsRequest.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiLunsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{22}
}

func (x *ListVirtioScsiLunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVirtioScsiLunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVirtioScsiLunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Virtio Scsi Luns.
type ListVirtioScsiLunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtioScsiLuns []*VirtioScsiLun `protobuf:"bytes,1,rep,name=virtio_scsi_luns,json=virtioScsiLuns,proto3" json:"virtio_scsi_luns,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVirtioScsiLunsResponse) Reset() {
	*x = ListVirtioScsiLunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtioScsiLunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtioScsiLunsResponse) ProtoMessage() {}

func (x *ListVirtioScsiLunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtioScsiLunsResponse.ProtoReflect.Descriptor instead.
func (*ListVirtioScsiLunsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{23}
}

func (x *ListVirtioScsiLunsResponse) GetVirtioScsiLuns() []*VirtioScsiLun {
	if x != nil {
		return x.VirtioScsiLuns
	}
	return nil
}

func (x *ListVirtioScsiLunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Virtio Scsi Lun.
type GetVirtioScsiLunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVirtioScsiLunRequest) Reset() {
	*x = GetVirtioScsiLunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtioScsiLunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtioScsiLunRequest) ProtoMessage() {}

func (x *GetVirtioScsiLunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtioScsiLunRequest.ProtoReflect.Descriptor instead.
func (*GetVirtioScsiLunRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{24}
}

func (x *GetVirtioScsiLunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to get an Virtio Scsi Lun statistics.
type StatsVirtioScsiLunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ControllerNameRef string `protobuf:"bytes,2,opt,name=controller_name_ref,json=controllerNameRef,proto3" json:"controller_name_ref,omitempty"`
}

func (x *StatsVirtioScsiLunRequest) Reset() {
	*x = StatsVirtioScsiLunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiLunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiLunRequest) ProtoMessage() {}

func (x *StatsVirtioScsiLunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiLunRequest.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiLunRequest) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{25}
}

func (x *StatsVirtioScsiLunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatsVirtioScsiLunRequest) GetControllerNameRef() string {
	if x != nil {
		return x.ControllerNameRef
	}
	return ""
}

// Represents a response to get an Virtio Scsi Lun statistics.
type StatsVirtioScsiLunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StatsVirtioScsiLunResponse) Reset() {
	*x = StatsVirtioScsiLunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_virtio_scsi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsVirtioScsiLunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsVirtioScsiLunResponse) ProtoMessage() {}

func (x *StatsVirtioScsiLunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_virtio_scsi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsVirtioScsiLunResponse.ProtoReflect.Descriptor instead.
func (*StatsVirtioScsiLunResponse) Descriptor() ([]byte, []int) {
	return file_frontend_virtio_scsi_proto_rawDescGZIP(), []int{26}
}

func (x *StatsVirtioScsiLunResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_frontend_virtio_scsi_proto protoreflect.FileDescriptor

var file_frontend_virtio_scsi_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x0f, 0x6f, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0xfa, 0x41,
	0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x75, 0x6e, 0x73, 0x3a, 0x63, 0xea, 0x41,
	0x60, 0x0a, 0x27, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x2a, 0x11, 0x76, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x32,
	0x10, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x8e, 0x03, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05,
	0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x63, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x63, 0x69, 0x65, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x3a, 0x6f, 0xea, 0x41, 0x6c, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x2a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x32, 0x14, 0x76, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x0d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x2b, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x3a,
	0x5a, 0xea, 0x41, 0x57, 0x0a, 0x24, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x2a, 0x0e, 0x76, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x32, 0x0d, 0x76, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8a,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xe4, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d,
	0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a,
	0x1c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56,
	0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x16,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x76, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x19, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x16,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x76, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb1, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5a, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x76,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x76,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73,
	0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0xa3, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f,
	0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c,
	0x75, 0x6e, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x66, 0x22, 0x53, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xcb, 0x19, 0x0a, 0x19, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x52, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x3a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0xda, 0x41, 0x28, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63,
	0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2c, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x92, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x32, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63,
	0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x12, 0x76, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0xda, 0x41,
	0x1e, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0xa6, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x61,
	0x74, 0x73, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x16,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41, 0x30, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f,
	0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x32, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f,
	0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d,
	0x3a, 0x16, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41, 0x22, 0x76, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xb2, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0xc1, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x73, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x22, 0x49,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x3a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69,
	0x5f, 0x6c, 0x75, 0x6e, 0xda, 0x41, 0x22, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63,
	0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x2c, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63,
	0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75,
	0x6e, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x2e, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e,
	0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x32, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c, 0x75, 0x6e,
	0xda, 0x41, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x6c,
	0x75, 0x6e, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x9d,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8e,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x4c, 0x75, 0x6e, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x4c, 0x75, 0x6e, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x73,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x66, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_virtio_scsi_proto_rawDescOnce sync.Once
	file_frontend_virtio_scsi_proto_rawDescData = file_frontend_virtio_scsi_proto_rawDesc
)

func file_frontend_virtio_scsi_proto_rawDescGZIP() []byte {
	file_frontend_virtio_scsi_proto_rawDescOnce.Do(func() {
		file_frontend_virtio_scsi_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_virtio_scsi_proto_rawDescData)
	})
	return file_frontend_virtio_scsi_proto_rawDescData
}

var file_frontend_virtio_scsi_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_frontend_virtio_scsi_proto_goTypes = []interface{}{
	(*VirtioScsiTarget)(nil),                  // 0: opi_api.storage.v1.VirtioScsiTarget
	(*VirtioScsiController)(nil),              // 1: opi_api.storage.v1.VirtioScsiController
	(*VirtioScsiLun)(nil),                     // 2: opi_api.storage.v1.VirtioScsiLun
	(*CreateVirtioScsiTargetRequest)(nil),     // 3: opi_api.storage.v1.CreateVirtioScsiTargetRequest
	(*DeleteVirtioScsiTargetRequest)(nil),     // 4: opi_api.storage.v1.DeleteVirtioScsiTargetRequest
	(*UpdateVirtioScsiTargetRequest)(nil),     // 5: opi_api.storage.v1.UpdateVirtioScsiTargetRequest
	(*ListVirtioScsiTargetsRequest)(nil),      // 6: opi_api.storage.v1.ListVirtioScsiTargetsRequest
	(*ListVirtioScsiTargetsResponse)(nil),     // 7: opi_api.storage.v1.ListVirtioScsiTargetsResponse
	(*GetVirtioScsiTargetRequest)(nil),        // 8: opi_api.storage.v1.GetVirtioScsiTargetRequest
	(*StatsVirtioScsiTargetRequest)(nil),      // 9: opi_api.storage.v1.StatsVirtioScsiTargetRequest
	(*StatsVirtioScsiTargetResponse)(nil),     // 10: opi_api.storage.v1.StatsVirtioScsiTargetResponse
	(*CreateVirtioScsiControllerRequest)(nil), // 11: opi_api.storage.v1.CreateVirtioScsiControllerRequest
	(*DeleteVirtioScsiControllerRequest)(nil), // 12: opi_api.storage.v1.DeleteVirtioScsiControllerRequest
	(*UpdateVirtioScsiControllerRequest)(nil), // 13: opi_api.storage.v1.UpdateVirtioScsiControllerRequest
	(*ListVirtioScsiControllersRequest)(nil),  // 14: opi_api.storage.v1.ListVirtioScsiControllersRequest
	(*ListVirtioScsiControllersResponse)(nil), // 15: opi_api.storage.v1.ListVirtioScsiControllersResponse
	(*GetVirtioScsiControllerRequest)(nil),    // 16: opi_api.storage.v1.GetVirtioScsiControllerRequest
	(*StatsVirtioScsiControllerRequest)(nil),  // 17: opi_api.storage.v1.StatsVirtioScsiControllerRequest
	(*StatsVirtioScsiControllerResponse)(nil), // 18: opi_api.storage.v1.StatsVirtioScsiControllerResponse
	(*CreateVirtioScsiLunRequest)(nil),        // 19: opi_api.storage.v1.CreateVirtioScsiLunRequest
	(*DeleteVirtioScsiLunRequest)(nil),        // 20: opi_api.storage.v1.DeleteVirtioScsiLunRequest
	(*UpdateVirtioScsiLunRequest)(nil),        // 21: opi_api.storage.v1.UpdateVirtioScsiLunRequest
	(*ListVirtioScsiLunsRequest)(nil),         // 22: opi_api.storage.v1.ListVirtioScsiLunsRequest
	(*ListVirtioScsiLunsResponse)(nil),        // 23: opi_api.storage.v1.ListVirtioScsiLunsResponse
	(*GetVirtioScsiLunRequest)(nil),           // 24: opi_api.storage.v1.GetVirtioScsiLunRequest
	(*StatsVirtioScsiLunRequest)(nil),         // 25: opi_api.storage.v1.StatsVirtioScsiLunRequest
	(*StatsVirtioScsiLunResponse)(nil),        // 26: opi_api.storage.v1.StatsVirtioScsiLunResponse
	(*PciEndpoint)(nil),                       // 27: opi_api.storage.v1.PciEndpoint
	(*QosLimit)(nil),                          // 28: opi_api.storage.v1.QosLimit
	(*fieldmaskpb.FieldMask)(nil),             // 29: google.protobuf.FieldMask
	(*VolumeStats)(nil),                       // 30: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),                     // 31: google.protobuf.Empty
}
var file_frontend_virtio_scsi_proto_depIdxs = []int32{
	27, // 0: opi_api.storage.v1.VirtioScsiController.pcie_id:type_name -> opi_api.storage.v1.PciEndpoint
	28, // 1: opi_api.storage.v1.VirtioScsiController.min_limit:type_name -> opi_api.storage.v1.QosLimit
	28, // 2: opi_api.storage.v1.VirtioScsiController.max_limit:type_name -> opi_api.storage.v1.QosLimit
	0,  // 3: opi_api.storage.v1.CreateVirtioScsiTargetRequest.virtio_scsi_target:type_name -> opi_api.storage.v1.VirtioScsiTarget
	0,  // 4: opi_api.storage.v1.UpdateVirtioScsiTargetRequest.virtio_scsi_target:type_name -> opi_api.storage.v1.VirtioScsiTarget
	29, // 5: opi_api.storage.v1.UpdateVirtioScsiTargetRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 6: opi_api.storage.v1.ListVirtioScsiTargetsResponse.virtio_scsi_targets:type_name -> opi_api.storage.v1.VirtioScsiTarget
	30, // 7: opi_api.storage.v1.StatsVirtioScsiTargetResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	1,  // 8: opi_api.storage.v1.CreateVirtioScsiControllerRequest.virtio_scsi_controller:type_name -> opi_api.storage.v1.VirtioScsiController
	1,  // 9: opi_api.storage.v1.UpdateVirtioScsiControllerRequest.virtio_scsi_controller:type_name -> opi_api.storage.v1.VirtioScsiController
	29, // 10: opi_api.storage.v1.UpdateVirtioScsiControllerRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 11: opi_api.storage.v1.ListVirtioScsiControllersResponse.virtio_scsi_controllers:type_name -> opi_api.storage.v1.VirtioScsiController
	30, // 12: opi_api.storage.v1.StatsVirtioScsiControllerResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	2,  // 13: opi_api.storage.v1.CreateVirtioScsiLunRequest.virtio_scsi_lun:type_name -> opi_api.storage.v1.VirtioScsiLun
	2,  // 14: opi_api.storage.v1.UpdateVirtioScsiLunRequest.virtio_scsi_lun:type_name -> opi_api.storage.v1.VirtioScsiLun
	29, // 15: opi_api.storage.v1.UpdateVirtioScsiLunRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 16: opi_api.storage.v1.ListVirtioScsiLunsResponse.virtio_scsi_luns:type_name -> opi_api.storage.v1.VirtioScsiLun
	30, // 17: opi_api.storage.v1.StatsVirtioScsiLunResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	3,  // 18: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiTarget:input_type -> opi_api.storage.v1.CreateVirtioScsiTargetRequest
	4,  // 19: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiTarget:input_type -> opi_api.storage.v1.DeleteVirtioScsiTargetRequest
	5,  // 20: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiTarget:input_type -> opi_api.storage.v1.UpdateVirtioScsiTargetRequest
	6,  // 21: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiTargets:input_type -> opi_api.storage.v1.ListVirtioScsiTargetsRequest
	8,  // 22: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiTarget:input_type -> opi_api.storage.v1.GetVirtioScsiTargetRequest
	9,  // 23: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiTarget:input_type -> opi_api.storage.v1.StatsVirtioScsiTargetRequest
	11, // 24: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiController:input_type -> opi_api.storage.v1.CreateVirtioScsiControllerRequest
	12, // 25: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiController:input_type -> opi_api.storage.v1.DeleteVirtioScsiControllerRequest
	13, // 26: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiController:input_type -> opi_api.storage.v1.UpdateVirtioScsiControllerRequest
	14, // 27: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiControllers:input_type -> opi_api.storage.v1.ListVirtioScsiControllersRequest
	16, // 28: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiController:input_type -> opi_api.storage.v1.GetVirtioScsiControllerRequest
	17, // 29: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiController:input_type -> opi_api.storage.v1.StatsVirtioScsiControllerRequest
	19, // 30: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiLun:input_type -> opi_api.storage.v1.CreateVirtioScsiLunRequest
	20, // 31: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiLun:input_type -> opi_api.storage.v1.DeleteVirtioScsiLunRequest
	21, // 32: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiLun:input_type -> opi_api.storage.v1.UpdateVirtioScsiLunRequest
	22, // 33: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiLuns:input_type -> opi_api.storage.v1.ListVirtioScsiLunsRequest
	24, // 34: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiLun:input_type -> opi_api.storage.v1.GetVirtioScsiLunRequest
	25, // 35: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiLun:input_type -> opi_api.storage.v1.StatsVirtioScsiLunRequest
	0,  // 36: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiTarget:output_type -> opi_api.storage.v1.VirtioScsiTarget
	31, // 37: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiTarget:output_type -> google.protobuf.Empty
	0,  // 38: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiTarget:output_type -> opi_api.storage.v1.VirtioScsiTarget
	7,  // 39: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiTargets:output_type -> opi_api.storage.v1.ListVirtioScsiTargetsResponse
	0,  // 40: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiTarget:output_type -> opi_api.storage.v1.VirtioScsiTarget
	10, // 41: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiTarget:output_type -> opi_api.storage.v1.StatsVirtioScsiTargetResponse
	1,  // 42: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiController:output_type -> opi_api.storage.v1.VirtioScsiController
	31, // 43: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiController:output_type -> google.protobuf.Empty
	1,  // 44: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiController:output_type -> opi_api.storage.v1.VirtioScsiController
	15, // 45: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiControllers:output_type -> opi_api.storage.v1.ListVirtioScsiControllersResponse
	1,  // 46: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiController:output_type -> opi_api.storage.v1.VirtioScsiController
	18, // 47: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiController:output_type -> opi_api.storage.v1.StatsVirtioScsiControllerResponse
	2,  // 48: opi_api.storage.v1.FrontendVirtioScsiService.CreateVirtioScsiLun:output_type -> opi_api.storage.v1.VirtioScsiLun
	31, // 49: opi_api.storage.v1.FrontendVirtioScsiService.DeleteVirtioScsiLun:output_type -> google.protobuf.Empty
	2,  // 50: opi_api.storage.v1.FrontendVirtioScsiService.UpdateVirtioScsiLun:output_type -> opi_api.storage.v1.VirtioScsiLun
	23, // 51: opi_api.storage.v1.FrontendVirtioScsiService.ListVirtioScsiLuns:output_type -> opi_api.storage.v1.ListVirtioScsiLunsResponse
	2,  // 52: opi_api.storage.v1.FrontendVirtioScsiService.GetVirtioScsiLun:output_type -> opi_api.storage.v1.VirtioScsiLun
	26, // 53: opi_api.storage.v1.FrontendVirtioScsiService.StatsVirtioScsiLun:output_type -> opi_api.storage.v1.StatsVirtioScsiLunResponse
	36, // [36:54] is the sub-list for method output_type
	18, // [18:36] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_frontend_virtio_scsi_proto_init() }
func file_frontend_virtio_scsi_proto_init() {
	if File_frontend_virtio_scsi_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frontend_virtio_scsi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtioScsiTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtioScsiTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtioScsiTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtioScsiTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtioScsiControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtioScsiControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtioScsiControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiControllersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiControllersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtioScsiControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtioScsiLunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtioScsiLunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtioScsiLunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiLunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtioScsiLunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtioScsiLunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiLunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_virtio_scsi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsVirtioScsiLunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_virtio_scsi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frontend_virtio_scsi_proto_goTypes,
		DependencyIndexes: file_frontend_virtio_scsi_proto_depIdxs,
		MessageInfos:      file_frontend_virtio_scsi_proto_msgTypes,
	}.Build()
	File_frontend_virtio_scsi_proto = out.File
	file_frontend_virtio_scsi_proto_rawDesc = nil
	file_frontend_virtio_scsi_proto_goTypes = nil
	file_frontend_virtio_scsi_proto_depIdxs = nil
}
