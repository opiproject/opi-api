// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
// Copyright (C) 2023 Intel Corporation

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: middleend_encryption.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiddleendEncryptionService_CreateEncryptedVolume_FullMethodName = "/opi_api.storage.v1.MiddleendEncryptionService/CreateEncryptedVolume"
	MiddleendEncryptionService_DeleteEncryptedVolume_FullMethodName = "/opi_api.storage.v1.MiddleendEncryptionService/DeleteEncryptedVolume"
	MiddleendEncryptionService_UpdateEncryptedVolume_FullMethodName = "/opi_api.storage.v1.MiddleendEncryptionService/UpdateEncryptedVolume"
	MiddleendEncryptionService_ListEncryptedVolumes_FullMethodName  = "/opi_api.storage.v1.MiddleendEncryptionService/ListEncryptedVolumes"
	MiddleendEncryptionService_GetEncryptedVolume_FullMethodName    = "/opi_api.storage.v1.MiddleendEncryptionService/GetEncryptedVolume"
	MiddleendEncryptionService_StatsEncryptedVolume_FullMethodName  = "/opi_api.storage.v1.MiddleendEncryptionService/StatsEncryptedVolume"
)

// MiddleendEncryptionServiceClient is the client API for MiddleendEncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddleendEncryptionServiceClient interface {
	// Create an Encrypted Volume
	CreateEncryptedVolume(ctx context.Context, in *CreateEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error)
	// Delete an Encrypted Volume
	DeleteEncryptedVolume(ctx context.Context, in *DeleteEncryptedVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an Encrypted Volume
	UpdateEncryptedVolume(ctx context.Context, in *UpdateEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error)
	// List Encrypted Volumes
	ListEncryptedVolumes(ctx context.Context, in *ListEncryptedVolumesRequest, opts ...grpc.CallOption) (*ListEncryptedVolumesResponse, error)
	// Get an Encrypted Volume
	GetEncryptedVolume(ctx context.Context, in *GetEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error)
	// Get an Encrypted Volume statistics
	StatsEncryptedVolume(ctx context.Context, in *StatsEncryptedVolumeRequest, opts ...grpc.CallOption) (*StatsEncryptedVolumeResponse, error)
}

type middleendEncryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleendEncryptionServiceClient(cc grpc.ClientConnInterface) MiddleendEncryptionServiceClient {
	return &middleendEncryptionServiceClient{cc}
}

func (c *middleendEncryptionServiceClient) CreateEncryptedVolume(ctx context.Context, in *CreateEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error) {
	out := new(EncryptedVolume)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_CreateEncryptedVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendEncryptionServiceClient) DeleteEncryptedVolume(ctx context.Context, in *DeleteEncryptedVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_DeleteEncryptedVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendEncryptionServiceClient) UpdateEncryptedVolume(ctx context.Context, in *UpdateEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error) {
	out := new(EncryptedVolume)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_UpdateEncryptedVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendEncryptionServiceClient) ListEncryptedVolumes(ctx context.Context, in *ListEncryptedVolumesRequest, opts ...grpc.CallOption) (*ListEncryptedVolumesResponse, error) {
	out := new(ListEncryptedVolumesResponse)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_ListEncryptedVolumes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendEncryptionServiceClient) GetEncryptedVolume(ctx context.Context, in *GetEncryptedVolumeRequest, opts ...grpc.CallOption) (*EncryptedVolume, error) {
	out := new(EncryptedVolume)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_GetEncryptedVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendEncryptionServiceClient) StatsEncryptedVolume(ctx context.Context, in *StatsEncryptedVolumeRequest, opts ...grpc.CallOption) (*StatsEncryptedVolumeResponse, error) {
	out := new(StatsEncryptedVolumeResponse)
	err := c.cc.Invoke(ctx, MiddleendEncryptionService_StatsEncryptedVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleendEncryptionServiceServer is the server API for MiddleendEncryptionService service.
// All implementations must embed UnimplementedMiddleendEncryptionServiceServer
// for forward compatibility
type MiddleendEncryptionServiceServer interface {
	// Create an Encrypted Volume
	CreateEncryptedVolume(context.Context, *CreateEncryptedVolumeRequest) (*EncryptedVolume, error)
	// Delete an Encrypted Volume
	DeleteEncryptedVolume(context.Context, *DeleteEncryptedVolumeRequest) (*emptypb.Empty, error)
	// Update an Encrypted Volume
	UpdateEncryptedVolume(context.Context, *UpdateEncryptedVolumeRequest) (*EncryptedVolume, error)
	// List Encrypted Volumes
	ListEncryptedVolumes(context.Context, *ListEncryptedVolumesRequest) (*ListEncryptedVolumesResponse, error)
	// Get an Encrypted Volume
	GetEncryptedVolume(context.Context, *GetEncryptedVolumeRequest) (*EncryptedVolume, error)
	// Get an Encrypted Volume statistics
	StatsEncryptedVolume(context.Context, *StatsEncryptedVolumeRequest) (*StatsEncryptedVolumeResponse, error)
	mustEmbedUnimplementedMiddleendEncryptionServiceServer()
}

// UnimplementedMiddleendEncryptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiddleendEncryptionServiceServer struct {
}

func (UnimplementedMiddleendEncryptionServiceServer) CreateEncryptedVolume(context.Context, *CreateEncryptedVolumeRequest) (*EncryptedVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncryptedVolume not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) DeleteEncryptedVolume(context.Context, *DeleteEncryptedVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEncryptedVolume not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) UpdateEncryptedVolume(context.Context, *UpdateEncryptedVolumeRequest) (*EncryptedVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEncryptedVolume not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) ListEncryptedVolumes(context.Context, *ListEncryptedVolumesRequest) (*ListEncryptedVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEncryptedVolumes not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) GetEncryptedVolume(context.Context, *GetEncryptedVolumeRequest) (*EncryptedVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncryptedVolume not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) StatsEncryptedVolume(context.Context, *StatsEncryptedVolumeRequest) (*StatsEncryptedVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsEncryptedVolume not implemented")
}
func (UnimplementedMiddleendEncryptionServiceServer) mustEmbedUnimplementedMiddleendEncryptionServiceServer() {
}

// UnsafeMiddleendEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddleendEncryptionServiceServer will
// result in compilation errors.
type UnsafeMiddleendEncryptionServiceServer interface {
	mustEmbedUnimplementedMiddleendEncryptionServiceServer()
}

func RegisterMiddleendEncryptionServiceServer(s grpc.ServiceRegistrar, srv MiddleendEncryptionServiceServer) {
	s.RegisterService(&MiddleendEncryptionService_ServiceDesc, srv)
}

func _MiddleendEncryptionService_CreateEncryptedVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncryptedVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).CreateEncryptedVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_CreateEncryptedVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).CreateEncryptedVolume(ctx, req.(*CreateEncryptedVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendEncryptionService_DeleteEncryptedVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEncryptedVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).DeleteEncryptedVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_DeleteEncryptedVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).DeleteEncryptedVolume(ctx, req.(*DeleteEncryptedVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendEncryptionService_UpdateEncryptedVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEncryptedVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).UpdateEncryptedVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_UpdateEncryptedVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).UpdateEncryptedVolume(ctx, req.(*UpdateEncryptedVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendEncryptionService_ListEncryptedVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEncryptedVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).ListEncryptedVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_ListEncryptedVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).ListEncryptedVolumes(ctx, req.(*ListEncryptedVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendEncryptionService_GetEncryptedVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncryptedVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).GetEncryptedVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_GetEncryptedVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).GetEncryptedVolume(ctx, req.(*GetEncryptedVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendEncryptionService_StatsEncryptedVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsEncryptedVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendEncryptionServiceServer).StatsEncryptedVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiddleendEncryptionService_StatsEncryptedVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendEncryptionServiceServer).StatsEncryptedVolume(ctx, req.(*StatsEncryptedVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiddleendEncryptionService_ServiceDesc is the grpc.ServiceDesc for MiddleendEncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiddleendEncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.MiddleendEncryptionService",
	HandlerType: (*MiddleendEncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEncryptedVolume",
			Handler:    _MiddleendEncryptionService_CreateEncryptedVolume_Handler,
		},
		{
			MethodName: "DeleteEncryptedVolume",
			Handler:    _MiddleendEncryptionService_DeleteEncryptedVolume_Handler,
		},
		{
			MethodName: "UpdateEncryptedVolume",
			Handler:    _MiddleendEncryptionService_UpdateEncryptedVolume_Handler,
		},
		{
			MethodName: "ListEncryptedVolumes",
			Handler:    _MiddleendEncryptionService_ListEncryptedVolumes_Handler,
		},
		{
			MethodName: "GetEncryptedVolume",
			Handler:    _MiddleendEncryptionService_GetEncryptedVolume_Handler,
		},
		{
			MethodName: "StatsEncryptedVolume",
			Handler:    _MiddleendEncryptionService_StatsEncryptedVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleend_encryption.proto",
}
