// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: backend_nvme_tcp.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvmeTransportType int32

const (
	NvmeTransportType_NVME_TRANSPORT_TYPE_UNSPECIFIED NvmeTransportType = 0
	NvmeTransportType_NVME_TRANSPORT_FC               NvmeTransportType = 1
	NvmeTransportType_NVME_TRANSPORT_PCIE             NvmeTransportType = 2
	NvmeTransportType_NVME_TRANSPORT_RDMA             NvmeTransportType = 3
	NvmeTransportType_NVME_TRANSPORT_TCP              NvmeTransportType = 4
	NvmeTransportType_NVME_TRANSPORT_CUSTOM           NvmeTransportType = 5
)

// Enum value maps for NvmeTransportType.
var (
	NvmeTransportType_name = map[int32]string{
		0: "NVME_TRANSPORT_TYPE_UNSPECIFIED",
		1: "NVME_TRANSPORT_FC",
		2: "NVME_TRANSPORT_PCIE",
		3: "NVME_TRANSPORT_RDMA",
		4: "NVME_TRANSPORT_TCP",
		5: "NVME_TRANSPORT_CUSTOM",
	}
	NvmeTransportType_value = map[string]int32{
		"NVME_TRANSPORT_TYPE_UNSPECIFIED": 0,
		"NVME_TRANSPORT_FC":               1,
		"NVME_TRANSPORT_PCIE":             2,
		"NVME_TRANSPORT_RDMA":             3,
		"NVME_TRANSPORT_TCP":              4,
		"NVME_TRANSPORT_CUSTOM":           5,
	}
)

func (x NvmeTransportType) Enum() *NvmeTransportType {
	p := new(NvmeTransportType)
	*p = x
	return p
}

func (x NvmeTransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeTransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[0].Descriptor()
}

func (NvmeTransportType) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[0]
}

func (x NvmeTransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeTransportType.Descriptor instead.
func (NvmeTransportType) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

type NvmeAddressFamily int32

const (
	NvmeAddressFamily_NVME_ADDRESS_FAMILY_UNSPECIFIED NvmeAddressFamily = 0
	NvmeAddressFamily_NVMF_ADRFAM_IPV4                NvmeAddressFamily = 1
	NvmeAddressFamily_NVMF_ADRFAM_IPV6                NvmeAddressFamily = 2
	NvmeAddressFamily_NVMF_ADRFAM_IB                  NvmeAddressFamily = 3
	NvmeAddressFamily_NVMF_ADRFAM_FC                  NvmeAddressFamily = 4
	NvmeAddressFamily_NVMF_ADRFAM_INTRA_HOST          NvmeAddressFamily = 5
)

// Enum value maps for NvmeAddressFamily.
var (
	NvmeAddressFamily_name = map[int32]string{
		0: "NVME_ADDRESS_FAMILY_UNSPECIFIED",
		1: "NVMF_ADRFAM_IPV4",
		2: "NVMF_ADRFAM_IPV6",
		3: "NVMF_ADRFAM_IB",
		4: "NVMF_ADRFAM_FC",
		5: "NVMF_ADRFAM_INTRA_HOST",
	}
	NvmeAddressFamily_value = map[string]int32{
		"NVME_ADDRESS_FAMILY_UNSPECIFIED": 0,
		"NVMF_ADRFAM_IPV4":                1,
		"NVMF_ADRFAM_IPV6":                2,
		"NVMF_ADRFAM_IB":                  3,
		"NVMF_ADRFAM_FC":                  4,
		"NVMF_ADRFAM_INTRA_HOST":          5,
	}
)

func (x NvmeAddressFamily) Enum() *NvmeAddressFamily {
	p := new(NvmeAddressFamily)
	*p = x
	return p
}

func (x NvmeAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[1].Descriptor()
}

func (NvmeAddressFamily) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[1]
}

func (x NvmeAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeAddressFamily.Descriptor instead.
func (NvmeAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

type NvmeMultipath int32

const (
	NvmeMultipath_NVME_MULTIPATH_UNSPECIFIED NvmeMultipath = 0
	NvmeMultipath_NVME_MULTIPATH_DISABLE     NvmeMultipath = 1
	NvmeMultipath_NVME_MULTIPATH_FAILOVER    NvmeMultipath = 2
	NvmeMultipath_NVME_MULTIPATH_MULTIPATH   NvmeMultipath = 3
)

// Enum value maps for NvmeMultipath.
var (
	NvmeMultipath_name = map[int32]string{
		0: "NVME_MULTIPATH_UNSPECIFIED",
		1: "NVME_MULTIPATH_DISABLE",
		2: "NVME_MULTIPATH_FAILOVER",
		3: "NVME_MULTIPATH_MULTIPATH",
	}
	NvmeMultipath_value = map[string]int32{
		"NVME_MULTIPATH_UNSPECIFIED": 0,
		"NVME_MULTIPATH_DISABLE":     1,
		"NVME_MULTIPATH_FAILOVER":    2,
		"NVME_MULTIPATH_MULTIPATH":   3,
	}
)

func (x NvmeMultipath) Enum() *NvmeMultipath {
	p := new(NvmeMultipath)
	*p = x
	return p
}

func (x NvmeMultipath) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeMultipath) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[2].Descriptor()
}

func (NvmeMultipath) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[2]
}

func (x NvmeMultipath) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeMultipath.Descriptor instead.
func (NvmeMultipath) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

type NVMfRemoteController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hdgst         bool          `protobuf:"varint,2,opt,name=hdgst,proto3" json:"hdgst,omitempty"`
	Ddgst         bool          `protobuf:"varint,3,opt,name=ddgst,proto3" json:"ddgst,omitempty"`
	Multipath     NvmeMultipath `protobuf:"varint,4,opt,name=multipath,proto3,enum=opi_api.storage.v1.NvmeMultipath" json:"multipath,omitempty"`
	IoQueuesCount int64         `protobuf:"varint,5,opt,name=io_queues_count,json=ioQueuesCount,proto3" json:"io_queues_count,omitempty"`
	QueueSize     int64         `protobuf:"varint,6,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
}

func (x *NVMfRemoteController) Reset() {
	*x = NVMfRemoteController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteController) ProtoMessage() {}

func (x *NVMfRemoteController) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteController.ProtoReflect.Descriptor instead.
func (*NVMfRemoteController) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

func (x *NVMfRemoteController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMfRemoteController) GetHdgst() bool {
	if x != nil {
		return x.Hdgst
	}
	return false
}

func (x *NVMfRemoteController) GetDdgst() bool {
	if x != nil {
		return x.Ddgst
	}
	return false
}

func (x *NVMfRemoteController) GetMultipath() NvmeMultipath {
	if x != nil {
		return x.Multipath
	}
	return NvmeMultipath_NVME_MULTIPATH_UNSPECIFIED
}

func (x *NVMfRemoteController) GetIoQueuesCount() int64 {
	if x != nil {
		return x.IoQueuesCount
	}
	return 0
}

func (x *NVMfRemoteController) GetQueueSize() int64 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

type NVMfPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user can only set {resource}_id on the Create request object
	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ControllerId *_go.ObjectKey    `protobuf:"bytes,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Trtype       NvmeTransportType `protobuf:"varint,3,opt,name=trtype,proto3,enum=opi_api.storage.v1.NvmeTransportType" json:"trtype,omitempty"`
	Adrfam       NvmeAddressFamily `protobuf:"varint,4,opt,name=adrfam,proto3,enum=opi_api.storage.v1.NvmeAddressFamily" json:"adrfam,omitempty"`
	// Destination address (e.g. IP address)
	Traddr string `protobuf:"bytes,5,opt,name=traddr,proto3" json:"traddr,omitempty"`
	// Destination service id (e.g. Port)
	Trsvcid int64 `protobuf:"varint,6,opt,name=trsvcid,proto3" json:"trsvcid,omitempty"`
	// Subsystem NQN
	Subnqn string `protobuf:"bytes,7,opt,name=subnqn,proto3" json:"subnqn,omitempty"`
	// Source address (e.g. IP of local NIC)
	SourceTraddr string `protobuf:"bytes,8,opt,name=source_traddr,json=sourceTraddr,proto3" json:"source_traddr,omitempty"`
	// Source port (e.g. Port of local NIC)
	SourceTrsvcid int64 `protobuf:"varint,9,opt,name=source_trsvcid,json=sourceTrsvcid,proto3" json:"source_trsvcid,omitempty"`
	// Host NQN
	Hostnqn string `protobuf:"bytes,10,opt,name=hostnqn,proto3" json:"hostnqn,omitempty"`
}

func (x *NVMfPath) Reset() {
	*x = NVMfPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfPath) ProtoMessage() {}

func (x *NVMfPath) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfPath.ProtoReflect.Descriptor instead.
func (*NVMfPath) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *NVMfPath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMfPath) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

func (x *NVMfPath) GetTrtype() NvmeTransportType {
	if x != nil {
		return x.Trtype
	}
	return NvmeTransportType_NVME_TRANSPORT_TYPE_UNSPECIFIED
}

func (x *NVMfPath) GetAdrfam() NvmeAddressFamily {
	if x != nil {
		return x.Adrfam
	}
	return NvmeAddressFamily_NVME_ADDRESS_FAMILY_UNSPECIFIED
}

func (x *NVMfPath) GetTraddr() string {
	if x != nil {
		return x.Traddr
	}
	return ""
}

func (x *NVMfPath) GetTrsvcid() int64 {
	if x != nil {
		return x.Trsvcid
	}
	return 0
}

func (x *NVMfPath) GetSubnqn() string {
	if x != nil {
		return x.Subnqn
	}
	return ""
}

func (x *NVMfPath) GetSourceTraddr() string {
	if x != nil {
		return x.SourceTraddr
	}
	return ""
}

func (x *NVMfPath) GetSourceTrsvcid() int64 {
	if x != nil {
		return x.SourceTrsvcid
	}
	return 0
}

func (x *NVMfPath) GetHostnqn() string {
	if x != nil {
		return x.Hostnqn
	}
	return ""
}

type NVMfRemoteNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller through which the namespace is visible
	ControllerId *_go.ObjectKey `protobuf:"bytes,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	// NSID
	Nsid int32 `protobuf:"varint,3,opt,name=nsid,proto3" json:"nsid,omitempty"`
	// Globally unique identifier for the namespace
	Nguid string `protobuf:"bytes,4,opt,name=nguid,proto3" json:"nguid,omitempty"`
	// 64bit Extended unique identifier for the namespace
	// mandatory if guid is not specified
	Eui64 int64 `protobuf:"varint,5,opt,name=eui64,proto3" json:"eui64,omitempty"`
	// Globally unique identifier for the namespace
	Uuid *_go.Uuid `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *NVMfRemoteNamespace) Reset() {
	*x = NVMfRemoteNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteNamespace) ProtoMessage() {}

func (x *NVMfRemoteNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteNamespace.ProtoReflect.Descriptor instead.
func (*NVMfRemoteNamespace) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

func (x *NVMfRemoteNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMfRemoteNamespace) GetControllerId() *_go.ObjectKey {
	if x != nil {
		return x.ControllerId
	}
	return nil
}

func (x *NVMfRemoteNamespace) GetNsid() int32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *NVMfRemoteNamespace) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NVMfRemoteNamespace) GetEui64() int64 {
	if x != nil {
		return x.Eui64
	}
	return 0
}

func (x *NVMfRemoteNamespace) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type CreateNVMfRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvMfRemoteController   *NVMfRemoteController `protobuf:"bytes,2,opt,name=nv_mf_remote_controller,json=nvMfRemoteController,proto3" json:"nv_mf_remote_controller,omitempty"`
	NvMfRemoteControllerId string                `protobuf:"bytes,3,opt,name=nv_mf_remote_controller_id,json=nvMfRemoteControllerId,proto3" json:"nv_mf_remote_controller_id,omitempty"`
}

func (x *CreateNVMfRemoteControllerRequest) Reset() {
	*x = CreateNVMfRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNVMfRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNVMfRemoteControllerRequest) ProtoMessage() {}

func (x *CreateNVMfRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNVMfRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateNVMfRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNVMfRemoteControllerRequest) GetNvMfRemoteController() *NVMfRemoteController {
	if x != nil {
		return x.NvMfRemoteController
	}
	return nil
}

func (x *CreateNVMfRemoteControllerRequest) GetNvMfRemoteControllerId() string {
	if x != nil {
		return x.NvMfRemoteControllerId
	}
	return ""
}

type DeleteNVMfRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNVMfRemoteControllerRequest) Reset() {
	*x = DeleteNVMfRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNVMfRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNVMfRemoteControllerRequest) ProtoMessage() {}

func (x *DeleteNVMfRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNVMfRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteNVMfRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteNVMfRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNVMfRemoteControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateNVMfRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvMfRemoteController *NVMfRemoteController `protobuf:"bytes,1,opt,name=nv_mf_remote_controller,json=nvMfRemoteController,proto3" json:"nv_mf_remote_controller,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNVMfRemoteControllerRequest) Reset() {
	*x = UpdateNVMfRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNVMfRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNVMfRemoteControllerRequest) ProtoMessage() {}

func (x *UpdateNVMfRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNVMfRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateNVMfRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNVMfRemoteControllerRequest) GetNvMfRemoteController() *NVMfRemoteController {
	if x != nil {
		return x.NvMfRemoteController
	}
	return nil
}

func (x *UpdateNVMfRemoteControllerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNVMfRemoteControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListNVMfRemoteControllersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMfRemoteControllersRequest) Reset() {
	*x = ListNVMfRemoteControllersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfRemoteControllersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfRemoteControllersRequest) ProtoMessage() {}

func (x *ListNVMfRemoteControllersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfRemoteControllersRequest.ProtoReflect.Descriptor instead.
func (*ListNVMfRemoteControllersRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{6}
}

func (x *ListNVMfRemoteControllersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNVMfRemoteControllersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMfRemoteControllersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMfRemoteControllersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvMfRemoteControllers []*NVMfRemoteController `protobuf:"bytes,1,rep,name=nv_mf_remote_controllers,json=nvMfRemoteControllers,proto3" json:"nv_mf_remote_controllers,omitempty"`
	NextPageToken         string                  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMfRemoteControllersResponse) Reset() {
	*x = ListNVMfRemoteControllersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfRemoteControllersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfRemoteControllersResponse) ProtoMessage() {}

func (x *ListNVMfRemoteControllersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfRemoteControllersResponse.ProtoReflect.Descriptor instead.
func (*ListNVMfRemoteControllersResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *ListNVMfRemoteControllersResponse) GetNvMfRemoteControllers() []*NVMfRemoteController {
	if x != nil {
		return x.NvMfRemoteControllers
	}
	return nil
}

func (x *ListNVMfRemoteControllersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNVMfRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNVMfRemoteControllerRequest) Reset() {
	*x = GetNVMfRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNVMfRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNVMfRemoteControllerRequest) ProtoMessage() {}

func (x *GetNVMfRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNVMfRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*GetNVMfRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *GetNVMfRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NVMfRemoteControllerResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerResetRequest) Reset() {
	*x = NVMfRemoteControllerResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerResetRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerResetRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerResetRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *NVMfRemoteControllerResetRequest) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type NVMfRemoteControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerStatsRequest) Reset() {
	*x = NVMfRemoteControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerStatsRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{10}
}

func (x *NVMfRemoteControllerStatsRequest) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type NVMfRemoteControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMfRemoteControllerStatsResponse) Reset() {
	*x = NVMfRemoteControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerStatsResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{11}
}

func (x *NVMfRemoteControllerStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type ListNVMfRemoteNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The controller's unique object identifier. This lists
	// namespaces for a particular controller.
	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMfRemoteNamespacesRequest) Reset() {
	*x = ListNVMfRemoteNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfRemoteNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfRemoteNamespacesRequest) ProtoMessage() {}

func (x *ListNVMfRemoteNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfRemoteNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNVMfRemoteNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{12}
}

func (x *ListNVMfRemoteNamespacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNVMfRemoteNamespacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMfRemoteNamespacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMfRemoteNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvMfRemoteNamespaces []*NVMfRemoteNamespace `protobuf:"bytes,1,rep,name=nv_mf_remote_namespaces,json=nvMfRemoteNamespaces,proto3" json:"nv_mf_remote_namespaces,omitempty"`
	NextPageToken        string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMfRemoteNamespacesResponse) Reset() {
	*x = ListNVMfRemoteNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfRemoteNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfRemoteNamespacesResponse) ProtoMessage() {}

func (x *ListNVMfRemoteNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfRemoteNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNVMfRemoteNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{13}
}

func (x *ListNVMfRemoteNamespacesResponse) GetNvMfRemoteNamespaces() []*NVMfRemoteNamespace {
	if x != nil {
		return x.NvMfRemoteNamespaces
	}
	return nil
}

func (x *ListNVMfRemoteNamespacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateNVMfPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvMfPath   *NVMfPath `protobuf:"bytes,1,opt,name=nv_mf_path,json=nvMfPath,proto3" json:"nv_mf_path,omitempty"`
	NvMfPathId string    `protobuf:"bytes,2,opt,name=nv_mf_path_id,json=nvMfPathId,proto3" json:"nv_mf_path_id,omitempty"`
}

func (x *CreateNVMfPathRequest) Reset() {
	*x = CreateNVMfPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNVMfPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNVMfPathRequest) ProtoMessage() {}

func (x *CreateNVMfPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNVMfPathRequest.ProtoReflect.Descriptor instead.
func (*CreateNVMfPathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{14}
}

func (x *CreateNVMfPathRequest) GetNvMfPath() *NVMfPath {
	if x != nil {
		return x.NvMfPath
	}
	return nil
}

func (x *CreateNVMfPathRequest) GetNvMfPathId() string {
	if x != nil {
		return x.NvMfPathId
	}
	return ""
}

type DeleteNVMfPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNVMfPathRequest) Reset() {
	*x = DeleteNVMfPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNVMfPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNVMfPathRequest) ProtoMessage() {}

func (x *DeleteNVMfPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNVMfPathRequest.ProtoReflect.Descriptor instead.
func (*DeleteNVMfPathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteNVMfPathRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNVMfPathRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateNVMfPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvMfPath *NVMfPath `protobuf:"bytes,1,opt,name=nv_mf_path,json=nvMfPath,proto3" json:"nv_mf_path,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNVMfPathRequest) Reset() {
	*x = UpdateNVMfPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNVMfPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNVMfPathRequest) ProtoMessage() {}

func (x *UpdateNVMfPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNVMfPathRequest.ProtoReflect.Descriptor instead.
func (*UpdateNVMfPathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateNVMfPathRequest) GetNvMfPath() *NVMfPath {
	if x != nil {
		return x.NvMfPath
	}
	return nil
}

func (x *UpdateNVMfPathRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNVMfPathRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListNVMfPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNVMfPathsRequest) Reset() {
	*x = ListNVMfPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfPathsRequest) ProtoMessage() {}

func (x *ListNVMfPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfPathsRequest.ProtoReflect.Descriptor instead.
func (*ListNVMfPathsRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{17}
}

func (x *ListNVMfPathsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNVMfPathsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNVMfPathsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNVMfPathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvMfPaths     []*NVMfPath `protobuf:"bytes,1,rep,name=nv_mf_paths,json=nvMfPaths,proto3" json:"nv_mf_paths,omitempty"`
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNVMfPathsResponse) Reset() {
	*x = ListNVMfPathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNVMfPathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNVMfPathsResponse) ProtoMessage() {}

func (x *ListNVMfPathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNVMfPathsResponse.ProtoReflect.Descriptor instead.
func (*ListNVMfPathsResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{18}
}

func (x *ListNVMfPathsResponse) GetNvMfPaths() []*NVMfPath {
	if x != nil {
		return x.NvMfPaths
	}
	return nil
}

func (x *ListNVMfPathsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNVMfPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNVMfPathRequest) Reset() {
	*x = GetNVMfPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNVMfPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNVMfPathRequest) ProtoMessage() {}

func (x *GetNVMfPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNVMfPathRequest.ProtoReflect.Descriptor instead.
func (*GetNVMfPathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{19}
}

func (x *GetNVMfPathRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NVMfPathStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfPathStatsRequest) Reset() {
	*x = NVMfPathStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfPathStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfPathStatsRequest) ProtoMessage() {}

func (x *NVMfPathStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfPathStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMfPathStatsRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{20}
}

func (x *NVMfPathStatsRequest) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type NVMfPathStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMfPathStatsResponse) Reset() {
	*x = NVMfPathStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfPathStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfPathStatsResponse) ProtoMessage() {}

func (x *NVMfPathStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfPathStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMfPathStatsResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{21}
}

func (x *NVMfPathStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_backend_nvme_tcp_proto protoreflect.FileDescriptor

var file_backend_nvme_tcp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x74,
	0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x6f, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02,
	0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x64,
	0x67, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x64, 0x67, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x52, 0x09, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6f, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x42,
	0xea, 0x41, 0x3f, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x56, 0x4d, 0x66,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x7d, 0x22, 0xc7, 0x03, 0x0a, 0x08, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x64, 0x72, 0x66, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x61, 0x64,
	0x72, 0x66, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72,
	0x73, 0x76, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x71, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x71, 0x6e, 0x3a, 0x36, 0xea, 0x41, 0x33, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x22, 0x9c, 0x02, 0x0a,
	0x13, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x3a, 0x41, 0xea, 0x41, 0x3e, 0x0a, 0x2a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x22, 0xc5, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x17, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x14, 0x6e, 0x76, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x76, 0x5f, 0x6d, 0x66,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x76, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0xe6, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x17, 0x6e, 0x76, 0x5f,
	0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x14, 0x6e, 0x76, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xa7, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x18,
	0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x15, 0x6e, 0x76, 0x4d, 0x66, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50,
	0x0a, 0x20, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x50, 0x0a, 0x20, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5a, 0x0a, 0x21, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa5,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x6e,
	0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14, 0x6e, 0x76, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6e, 0x76, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0d, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x76, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d, 0x0a,
	0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x08, 0x6e, 0x76, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0x8f, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d,
	0x0a, 0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6e, 0x76,
	0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x6e,
	0x76, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d, 0x0a, 0x1b, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2f, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x44, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0xb4, 0x01, 0x0a, 0x11, 0x4e, 0x76, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e,
	0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x43, 0x49, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x52, 0x44, 0x4d, 0x41, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a,
	0x11, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x46, 0x5f,
	0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46,
	0x41, 0x4d, 0x5f, 0x49, 0x42, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x46, 0x5f,
	0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x46, 0x43, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x86, 0x01, 0x0a, 0x0d, 0x4e, 0x76, 0x6d, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03,
	0x32, 0xef, 0x11, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xe0, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x17, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41,
	0x32, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x32, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x17, 0x6e, 0x76, 0x5f, 0x6d,
	0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0xda, 0x41, 0x23, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xa9,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x19, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x66,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x0a, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0xda, 0x41, 0x18, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x2c, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x56, 0x4d,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x7d, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x32, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x76, 0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x0a, 0x6e, 0x76,
	0x5f, 0x6d, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0xda, 0x41, 0x16, 0x6e, 0x76, 0x5f, 0x6d, 0x66,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x56, 0x4d, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x4e, 0x56,
	0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x62, 0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x4e, 0x76, 0x6d, 0x65, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_nvme_tcp_proto_rawDescOnce sync.Once
	file_backend_nvme_tcp_proto_rawDescData = file_backend_nvme_tcp_proto_rawDesc
)

func file_backend_nvme_tcp_proto_rawDescGZIP() []byte {
	file_backend_nvme_tcp_proto_rawDescOnce.Do(func() {
		file_backend_nvme_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_nvme_tcp_proto_rawDescData)
	})
	return file_backend_nvme_tcp_proto_rawDescData
}

var file_backend_nvme_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_backend_nvme_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_backend_nvme_tcp_proto_goTypes = []interface{}{
	(NvmeTransportType)(0),                    // 0: opi_api.storage.v1.NvmeTransportType
	(NvmeAddressFamily)(0),                    // 1: opi_api.storage.v1.NvmeAddressFamily
	(NvmeMultipath)(0),                        // 2: opi_api.storage.v1.NvmeMultipath
	(*NVMfRemoteController)(nil),              // 3: opi_api.storage.v1.NVMfRemoteController
	(*NVMfPath)(nil),                          // 4: opi_api.storage.v1.NVMfPath
	(*NVMfRemoteNamespace)(nil),               // 5: opi_api.storage.v1.NVMfRemoteNamespace
	(*CreateNVMfRemoteControllerRequest)(nil), // 6: opi_api.storage.v1.CreateNVMfRemoteControllerRequest
	(*DeleteNVMfRemoteControllerRequest)(nil), // 7: opi_api.storage.v1.DeleteNVMfRemoteControllerRequest
	(*UpdateNVMfRemoteControllerRequest)(nil), // 8: opi_api.storage.v1.UpdateNVMfRemoteControllerRequest
	(*ListNVMfRemoteControllersRequest)(nil),  // 9: opi_api.storage.v1.ListNVMfRemoteControllersRequest
	(*ListNVMfRemoteControllersResponse)(nil), // 10: opi_api.storage.v1.ListNVMfRemoteControllersResponse
	(*GetNVMfRemoteControllerRequest)(nil),    // 11: opi_api.storage.v1.GetNVMfRemoteControllerRequest
	(*NVMfRemoteControllerResetRequest)(nil),  // 12: opi_api.storage.v1.NVMfRemoteControllerResetRequest
	(*NVMfRemoteControllerStatsRequest)(nil),  // 13: opi_api.storage.v1.NVMfRemoteControllerStatsRequest
	(*NVMfRemoteControllerStatsResponse)(nil), // 14: opi_api.storage.v1.NVMfRemoteControllerStatsResponse
	(*ListNVMfRemoteNamespacesRequest)(nil),   // 15: opi_api.storage.v1.ListNVMfRemoteNamespacesRequest
	(*ListNVMfRemoteNamespacesResponse)(nil),  // 16: opi_api.storage.v1.ListNVMfRemoteNamespacesResponse
	(*CreateNVMfPathRequest)(nil),             // 17: opi_api.storage.v1.CreateNVMfPathRequest
	(*DeleteNVMfPathRequest)(nil),             // 18: opi_api.storage.v1.DeleteNVMfPathRequest
	(*UpdateNVMfPathRequest)(nil),             // 19: opi_api.storage.v1.UpdateNVMfPathRequest
	(*ListNVMfPathsRequest)(nil),              // 20: opi_api.storage.v1.ListNVMfPathsRequest
	(*ListNVMfPathsResponse)(nil),             // 21: opi_api.storage.v1.ListNVMfPathsResponse
	(*GetNVMfPathRequest)(nil),                // 22: opi_api.storage.v1.GetNVMfPathRequest
	(*NVMfPathStatsRequest)(nil),              // 23: opi_api.storage.v1.NVMfPathStatsRequest
	(*NVMfPathStatsResponse)(nil),             // 24: opi_api.storage.v1.NVMfPathStatsResponse
	(*_go.ObjectKey)(nil),                     // 25: opi_api.common.v1.ObjectKey
	(*_go.Uuid)(nil),                          // 26: opi_api.common.v1.Uuid
	(*fieldmaskpb.FieldMask)(nil),             // 27: google.protobuf.FieldMask
	(*VolumeStats)(nil),                       // 28: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),                     // 29: google.protobuf.Empty
}
var file_backend_nvme_tcp_proto_depIdxs = []int32{
	2,  // 0: opi_api.storage.v1.NVMfRemoteController.multipath:type_name -> opi_api.storage.v1.NvmeMultipath
	25, // 1: opi_api.storage.v1.NVMfPath.controller_id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 2: opi_api.storage.v1.NVMfPath.trtype:type_name -> opi_api.storage.v1.NvmeTransportType
	1,  // 3: opi_api.storage.v1.NVMfPath.adrfam:type_name -> opi_api.storage.v1.NvmeAddressFamily
	25, // 4: opi_api.storage.v1.NVMfRemoteNamespace.controller_id:type_name -> opi_api.common.v1.ObjectKey
	26, // 5: opi_api.storage.v1.NVMfRemoteNamespace.uuid:type_name -> opi_api.common.v1.Uuid
	3,  // 6: opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller:type_name -> opi_api.storage.v1.NVMfRemoteController
	3,  // 7: opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller:type_name -> opi_api.storage.v1.NVMfRemoteController
	27, // 8: opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 9: opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers:type_name -> opi_api.storage.v1.NVMfRemoteController
	25, // 10: opi_api.storage.v1.NVMfRemoteControllerResetRequest.id:type_name -> opi_api.common.v1.ObjectKey
	25, // 11: opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id:type_name -> opi_api.common.v1.ObjectKey
	28, // 12: opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	5,  // 13: opi_api.storage.v1.ListNVMfRemoteNamespacesResponse.nv_mf_remote_namespaces:type_name -> opi_api.storage.v1.NVMfRemoteNamespace
	4,  // 14: opi_api.storage.v1.CreateNVMfPathRequest.nv_mf_path:type_name -> opi_api.storage.v1.NVMfPath
	4,  // 15: opi_api.storage.v1.UpdateNVMfPathRequest.nv_mf_path:type_name -> opi_api.storage.v1.NVMfPath
	27, // 16: opi_api.storage.v1.UpdateNVMfPathRequest.update_mask:type_name -> google.protobuf.FieldMask
	4,  // 17: opi_api.storage.v1.ListNVMfPathsResponse.nv_mf_paths:type_name -> opi_api.storage.v1.NVMfPath
	25, // 18: opi_api.storage.v1.NVMfPathStatsRequest.id:type_name -> opi_api.common.v1.ObjectKey
	28, // 19: opi_api.storage.v1.NVMfPathStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	6,  // 20: opi_api.storage.v1.NVMfRemoteControllerService.CreateNVMfRemoteController:input_type -> opi_api.storage.v1.CreateNVMfRemoteControllerRequest
	7,  // 21: opi_api.storage.v1.NVMfRemoteControllerService.DeleteNVMfRemoteController:input_type -> opi_api.storage.v1.DeleteNVMfRemoteControllerRequest
	8,  // 22: opi_api.storage.v1.NVMfRemoteControllerService.UpdateNVMfRemoteController:input_type -> opi_api.storage.v1.UpdateNVMfRemoteControllerRequest
	9,  // 23: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfRemoteControllers:input_type -> opi_api.storage.v1.ListNVMfRemoteControllersRequest
	11, // 24: opi_api.storage.v1.NVMfRemoteControllerService.GetNVMfRemoteController:input_type -> opi_api.storage.v1.GetNVMfRemoteControllerRequest
	12, // 25: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerReset:input_type -> opi_api.storage.v1.NVMfRemoteControllerResetRequest
	13, // 26: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerStats:input_type -> opi_api.storage.v1.NVMfRemoteControllerStatsRequest
	15, // 27: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfRemoteNamespaces:input_type -> opi_api.storage.v1.ListNVMfRemoteNamespacesRequest
	17, // 28: opi_api.storage.v1.NVMfRemoteControllerService.CreateNVMfPath:input_type -> opi_api.storage.v1.CreateNVMfPathRequest
	18, // 29: opi_api.storage.v1.NVMfRemoteControllerService.DeleteNVMfPath:input_type -> opi_api.storage.v1.DeleteNVMfPathRequest
	19, // 30: opi_api.storage.v1.NVMfRemoteControllerService.UpdateNVMfPath:input_type -> opi_api.storage.v1.UpdateNVMfPathRequest
	20, // 31: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfPaths:input_type -> opi_api.storage.v1.ListNVMfPathsRequest
	22, // 32: opi_api.storage.v1.NVMfRemoteControllerService.GetNVMfPath:input_type -> opi_api.storage.v1.GetNVMfPathRequest
	23, // 33: opi_api.storage.v1.NVMfRemoteControllerService.NVMfPathStats:input_type -> opi_api.storage.v1.NVMfPathStatsRequest
	3,  // 34: opi_api.storage.v1.NVMfRemoteControllerService.CreateNVMfRemoteController:output_type -> opi_api.storage.v1.NVMfRemoteController
	29, // 35: opi_api.storage.v1.NVMfRemoteControllerService.DeleteNVMfRemoteController:output_type -> google.protobuf.Empty
	3,  // 36: opi_api.storage.v1.NVMfRemoteControllerService.UpdateNVMfRemoteController:output_type -> opi_api.storage.v1.NVMfRemoteController
	10, // 37: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfRemoteControllers:output_type -> opi_api.storage.v1.ListNVMfRemoteControllersResponse
	3,  // 38: opi_api.storage.v1.NVMfRemoteControllerService.GetNVMfRemoteController:output_type -> opi_api.storage.v1.NVMfRemoteController
	29, // 39: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerReset:output_type -> google.protobuf.Empty
	14, // 40: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerStats:output_type -> opi_api.storage.v1.NVMfRemoteControllerStatsResponse
	16, // 41: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfRemoteNamespaces:output_type -> opi_api.storage.v1.ListNVMfRemoteNamespacesResponse
	4,  // 42: opi_api.storage.v1.NVMfRemoteControllerService.CreateNVMfPath:output_type -> opi_api.storage.v1.NVMfPath
	29, // 43: opi_api.storage.v1.NVMfRemoteControllerService.DeleteNVMfPath:output_type -> google.protobuf.Empty
	4,  // 44: opi_api.storage.v1.NVMfRemoteControllerService.UpdateNVMfPath:output_type -> opi_api.storage.v1.NVMfPath
	21, // 45: opi_api.storage.v1.NVMfRemoteControllerService.ListNVMfPaths:output_type -> opi_api.storage.v1.ListNVMfPathsResponse
	4,  // 46: opi_api.storage.v1.NVMfRemoteControllerService.GetNVMfPath:output_type -> opi_api.storage.v1.NVMfPath
	24, // 47: opi_api.storage.v1.NVMfRemoteControllerService.NVMfPathStats:output_type -> opi_api.storage.v1.NVMfPathStatsResponse
	34, // [34:48] is the sub-list for method output_type
	20, // [20:34] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_backend_nvme_tcp_proto_init() }
func file_backend_nvme_tcp_proto_init() {
	if File_backend_nvme_tcp_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_nvme_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNVMfRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNVMfRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNVMfRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfRemoteControllersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfRemoteControllersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNVMfRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfRemoteNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfRemoteNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNVMfPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNVMfPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNVMfPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNVMfPathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNVMfPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfPathStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfPathStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_nvme_tcp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_nvme_tcp_proto_goTypes,
		DependencyIndexes: file_backend_nvme_tcp_proto_depIdxs,
		EnumInfos:         file_backend_nvme_tcp_proto_enumTypes,
		MessageInfos:      file_backend_nvme_tcp_proto_msgTypes,
	}.Build()
	File_backend_nvme_tcp_proto = out.File
	file_backend_nvme_tcp_proto_rawDesc = nil
	file_backend_nvme_tcp_proto_goTypes = nil
	file_backend_nvme_tcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NVMfRemoteControllerServiceClient is the client API for NVMfRemoteControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMfRemoteControllerServiceClient interface {
	CreateNVMfRemoteController(ctx context.Context, in *CreateNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error)
	DeleteNVMfRemoteController(ctx context.Context, in *DeleteNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNVMfRemoteController(ctx context.Context, in *UpdateNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error)
	ListNVMfRemoteControllers(ctx context.Context, in *ListNVMfRemoteControllersRequest, opts ...grpc.CallOption) (*ListNVMfRemoteControllersResponse, error)
	GetNVMfRemoteController(ctx context.Context, in *GetNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error)
	NVMfRemoteControllerReset(ctx context.Context, in *NVMfRemoteControllerResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NVMfRemoteControllerStats(ctx context.Context, in *NVMfRemoteControllerStatsRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerStatsResponse, error)
	ListNVMfRemoteNamespaces(ctx context.Context, in *ListNVMfRemoteNamespacesRequest, opts ...grpc.CallOption) (*ListNVMfRemoteNamespacesResponse, error)
	CreateNVMfPath(ctx context.Context, in *CreateNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error)
	DeleteNVMfPath(ctx context.Context, in *DeleteNVMfPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNVMfPath(ctx context.Context, in *UpdateNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error)
	ListNVMfPaths(ctx context.Context, in *ListNVMfPathsRequest, opts ...grpc.CallOption) (*ListNVMfPathsResponse, error)
	GetNVMfPath(ctx context.Context, in *GetNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error)
	NVMfPathStats(ctx context.Context, in *NVMfPathStatsRequest, opts ...grpc.CallOption) (*NVMfPathStatsResponse, error)
}

type nVMfRemoteControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMfRemoteControllerServiceClient(cc grpc.ClientConnInterface) NVMfRemoteControllerServiceClient {
	return &nVMfRemoteControllerServiceClient{cc}
}

func (c *nVMfRemoteControllerServiceClient) CreateNVMfRemoteController(ctx context.Context, in *CreateNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error) {
	out := new(NVMfRemoteController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfRemoteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) DeleteNVMfRemoteController(ctx context.Context, in *DeleteNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfRemoteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) UpdateNVMfRemoteController(ctx context.Context, in *UpdateNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error) {
	out := new(NVMfRemoteController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfRemoteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) ListNVMfRemoteControllers(ctx context.Context, in *ListNVMfRemoteControllersRequest, opts ...grpc.CallOption) (*ListNVMfRemoteControllersResponse, error) {
	out := new(ListNVMfRemoteControllersResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) GetNVMfRemoteController(ctx context.Context, in *GetNVMfRemoteControllerRequest, opts ...grpc.CallOption) (*NVMfRemoteController, error) {
	out := new(NVMfRemoteController)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfRemoteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerReset(ctx context.Context, in *NVMfRemoteControllerResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerStats(ctx context.Context, in *NVMfRemoteControllerStatsRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerStatsResponse, error) {
	out := new(NVMfRemoteControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) ListNVMfRemoteNamespaces(ctx context.Context, in *ListNVMfRemoteNamespacesRequest, opts ...grpc.CallOption) (*ListNVMfRemoteNamespacesResponse, error) {
	out := new(ListNVMfRemoteNamespacesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) CreateNVMfPath(ctx context.Context, in *CreateNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error) {
	out := new(NVMfPath)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) DeleteNVMfPath(ctx context.Context, in *DeleteNVMfPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) UpdateNVMfPath(ctx context.Context, in *UpdateNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error) {
	out := new(NVMfPath)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) ListNVMfPaths(ctx context.Context, in *ListNVMfPathsRequest, opts ...grpc.CallOption) (*ListNVMfPathsResponse, error) {
	out := new(ListNVMfPathsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) GetNVMfPath(ctx context.Context, in *GetNVMfPathRequest, opts ...grpc.CallOption) (*NVMfPath, error) {
	out := new(NVMfPath)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfPathStats(ctx context.Context, in *NVMfPathStatsRequest, opts ...grpc.CallOption) (*NVMfPathStatsResponse, error) {
	out := new(NVMfPathStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfPathStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMfRemoteControllerServiceServer is the server API for NVMfRemoteControllerService service.
type NVMfRemoteControllerServiceServer interface {
	CreateNVMfRemoteController(context.Context, *CreateNVMfRemoteControllerRequest) (*NVMfRemoteController, error)
	DeleteNVMfRemoteController(context.Context, *DeleteNVMfRemoteControllerRequest) (*emptypb.Empty, error)
	UpdateNVMfRemoteController(context.Context, *UpdateNVMfRemoteControllerRequest) (*NVMfRemoteController, error)
	ListNVMfRemoteControllers(context.Context, *ListNVMfRemoteControllersRequest) (*ListNVMfRemoteControllersResponse, error)
	GetNVMfRemoteController(context.Context, *GetNVMfRemoteControllerRequest) (*NVMfRemoteController, error)
	NVMfRemoteControllerReset(context.Context, *NVMfRemoteControllerResetRequest) (*emptypb.Empty, error)
	NVMfRemoteControllerStats(context.Context, *NVMfRemoteControllerStatsRequest) (*NVMfRemoteControllerStatsResponse, error)
	ListNVMfRemoteNamespaces(context.Context, *ListNVMfRemoteNamespacesRequest) (*ListNVMfRemoteNamespacesResponse, error)
	CreateNVMfPath(context.Context, *CreateNVMfPathRequest) (*NVMfPath, error)
	DeleteNVMfPath(context.Context, *DeleteNVMfPathRequest) (*emptypb.Empty, error)
	UpdateNVMfPath(context.Context, *UpdateNVMfPathRequest) (*NVMfPath, error)
	ListNVMfPaths(context.Context, *ListNVMfPathsRequest) (*ListNVMfPathsResponse, error)
	GetNVMfPath(context.Context, *GetNVMfPathRequest) (*NVMfPath, error)
	NVMfPathStats(context.Context, *NVMfPathStatsRequest) (*NVMfPathStatsResponse, error)
}

// UnimplementedNVMfRemoteControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMfRemoteControllerServiceServer struct {
}

func (*UnimplementedNVMfRemoteControllerServiceServer) CreateNVMfRemoteController(context.Context, *CreateNVMfRemoteControllerRequest) (*NVMfRemoteController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNVMfRemoteController not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) DeleteNVMfRemoteController(context.Context, *DeleteNVMfRemoteControllerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNVMfRemoteController not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) UpdateNVMfRemoteController(context.Context, *UpdateNVMfRemoteControllerRequest) (*NVMfRemoteController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNVMfRemoteController not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) ListNVMfRemoteControllers(context.Context, *ListNVMfRemoteControllersRequest) (*ListNVMfRemoteControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMfRemoteControllers not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) GetNVMfRemoteController(context.Context, *GetNVMfRemoteControllerRequest) (*NVMfRemoteController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNVMfRemoteController not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerReset(context.Context, *NVMfRemoteControllerResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerReset not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerStats(context.Context, *NVMfRemoteControllerStatsRequest) (*NVMfRemoteControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerStats not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) ListNVMfRemoteNamespaces(context.Context, *ListNVMfRemoteNamespacesRequest) (*ListNVMfRemoteNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMfRemoteNamespaces not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) CreateNVMfPath(context.Context, *CreateNVMfPathRequest) (*NVMfPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNVMfPath not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) DeleteNVMfPath(context.Context, *DeleteNVMfPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNVMfPath not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) UpdateNVMfPath(context.Context, *UpdateNVMfPathRequest) (*NVMfPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNVMfPath not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) ListNVMfPaths(context.Context, *ListNVMfPathsRequest) (*ListNVMfPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNVMfPaths not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) GetNVMfPath(context.Context, *GetNVMfPathRequest) (*NVMfPath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNVMfPath not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfPathStats(context.Context, *NVMfPathStatsRequest) (*NVMfPathStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfPathStats not implemented")
}

func RegisterNVMfRemoteControllerServiceServer(s *grpc.Server, srv NVMfRemoteControllerServiceServer) {
	s.RegisterService(&_NVMfRemoteControllerService_serviceDesc, srv)
}

func _NVMfRemoteControllerService_CreateNVMfRemoteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNVMfRemoteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).CreateNVMfRemoteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfRemoteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).CreateNVMfRemoteController(ctx, req.(*CreateNVMfRemoteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_DeleteNVMfRemoteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNVMfRemoteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).DeleteNVMfRemoteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfRemoteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).DeleteNVMfRemoteController(ctx, req.(*DeleteNVMfRemoteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_UpdateNVMfRemoteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNVMfRemoteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).UpdateNVMfRemoteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfRemoteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).UpdateNVMfRemoteController(ctx, req.(*UpdateNVMfRemoteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_ListNVMfRemoteControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMfRemoteControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfRemoteControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfRemoteControllers(ctx, req.(*ListNVMfRemoteControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_GetNVMfRemoteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNVMfRemoteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).GetNVMfRemoteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfRemoteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).GetNVMfRemoteController(ctx, req.(*GetNVMfRemoteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerReset(ctx, req.(*NVMfRemoteControllerResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerStats(ctx, req.(*NVMfRemoteControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_ListNVMfRemoteNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMfRemoteNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfRemoteNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfRemoteNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfRemoteNamespaces(ctx, req.(*ListNVMfRemoteNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_CreateNVMfPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNVMfPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).CreateNVMfPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/CreateNVMfPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).CreateNVMfPath(ctx, req.(*CreateNVMfPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_DeleteNVMfPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNVMfPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).DeleteNVMfPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/DeleteNVMfPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).DeleteNVMfPath(ctx, req.(*DeleteNVMfPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_UpdateNVMfPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNVMfPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).UpdateNVMfPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/UpdateNVMfPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).UpdateNVMfPath(ctx, req.(*UpdateNVMfPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_ListNVMfPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNVMfPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/ListNVMfPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).ListNVMfPaths(ctx, req.(*ListNVMfPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_GetNVMfPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNVMfPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).GetNVMfPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/GetNVMfPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).GetNVMfPath(ctx, req.(*GetNVMfPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfPathStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfPathStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfPathStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfPathStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfPathStats(ctx, req.(*NVMfPathStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMfRemoteControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.NVMfRemoteControllerService",
	HandlerType: (*NVMfRemoteControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNVMfRemoteController",
			Handler:    _NVMfRemoteControllerService_CreateNVMfRemoteController_Handler,
		},
		{
			MethodName: "DeleteNVMfRemoteController",
			Handler:    _NVMfRemoteControllerService_DeleteNVMfRemoteController_Handler,
		},
		{
			MethodName: "UpdateNVMfRemoteController",
			Handler:    _NVMfRemoteControllerService_UpdateNVMfRemoteController_Handler,
		},
		{
			MethodName: "ListNVMfRemoteControllers",
			Handler:    _NVMfRemoteControllerService_ListNVMfRemoteControllers_Handler,
		},
		{
			MethodName: "GetNVMfRemoteController",
			Handler:    _NVMfRemoteControllerService_GetNVMfRemoteController_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerReset",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerReset_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerStats",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerStats_Handler,
		},
		{
			MethodName: "ListNVMfRemoteNamespaces",
			Handler:    _NVMfRemoteControllerService_ListNVMfRemoteNamespaces_Handler,
		},
		{
			MethodName: "CreateNVMfPath",
			Handler:    _NVMfRemoteControllerService_CreateNVMfPath_Handler,
		},
		{
			MethodName: "DeleteNVMfPath",
			Handler:    _NVMfRemoteControllerService_DeleteNVMfPath_Handler,
		},
		{
			MethodName: "UpdateNVMfPath",
			Handler:    _NVMfRemoteControllerService_UpdateNVMfPath_Handler,
		},
		{
			MethodName: "ListNVMfPaths",
			Handler:    _NVMfRemoteControllerService_ListNVMfPaths_Handler,
		},
		{
			MethodName: "GetNVMfPath",
			Handler:    _NVMfRemoteControllerService_GetNVMfPath_Handler,
		},
		{
			MethodName: "NVMfPathStats",
			Handler:    _NVMfRemoteControllerService_NVMfPathStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_nvme_tcp.proto",
}
