// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: backend_nvme_tcp.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvmeTransportType int32

const (
	NvmeTransportType_NVME_TRANSPORT_TYPE_UNSPECIFIED NvmeTransportType = 0
	NvmeTransportType_NVME_TRANSPORT_FC               NvmeTransportType = 1
	NvmeTransportType_NVME_TRANSPORT_PCIE             NvmeTransportType = 2
	NvmeTransportType_NVME_TRANSPORT_RDMA             NvmeTransportType = 3
	NvmeTransportType_NVME_TRANSPORT_TCP              NvmeTransportType = 4
	NvmeTransportType_NVME_TRANSPORT_CUSTOM           NvmeTransportType = 5
)

// Enum value maps for NvmeTransportType.
var (
	NvmeTransportType_name = map[int32]string{
		0: "NVME_TRANSPORT_TYPE_UNSPECIFIED",
		1: "NVME_TRANSPORT_FC",
		2: "NVME_TRANSPORT_PCIE",
		3: "NVME_TRANSPORT_RDMA",
		4: "NVME_TRANSPORT_TCP",
		5: "NVME_TRANSPORT_CUSTOM",
	}
	NvmeTransportType_value = map[string]int32{
		"NVME_TRANSPORT_TYPE_UNSPECIFIED": 0,
		"NVME_TRANSPORT_FC":               1,
		"NVME_TRANSPORT_PCIE":             2,
		"NVME_TRANSPORT_RDMA":             3,
		"NVME_TRANSPORT_TCP":              4,
		"NVME_TRANSPORT_CUSTOM":           5,
	}
)

func (x NvmeTransportType) Enum() *NvmeTransportType {
	p := new(NvmeTransportType)
	*p = x
	return p
}

func (x NvmeTransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeTransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[0].Descriptor()
}

func (NvmeTransportType) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[0]
}

func (x NvmeTransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeTransportType.Descriptor instead.
func (NvmeTransportType) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

type NvmeAddressFamily int32

const (
	NvmeAddressFamily_NVME_ADDRESS_FAMILY_UNSPECIFIED NvmeAddressFamily = 0
	NvmeAddressFamily_NVME_ADRFAM_IPV4                NvmeAddressFamily = 1
	NvmeAddressFamily_NVME_ADRFAM_IPV6                NvmeAddressFamily = 2
	NvmeAddressFamily_NVME_ADRFAM_IB                  NvmeAddressFamily = 3
	NvmeAddressFamily_NVME_ADRFAM_FC                  NvmeAddressFamily = 4
	NvmeAddressFamily_NVME_ADRFAM_INTRA_HOST          NvmeAddressFamily = 5
)

// Enum value maps for NvmeAddressFamily.
var (
	NvmeAddressFamily_name = map[int32]string{
		0: "NVME_ADDRESS_FAMILY_UNSPECIFIED",
		1: "NVME_ADRFAM_IPV4",
		2: "NVME_ADRFAM_IPV6",
		3: "NVME_ADRFAM_IB",
		4: "NVME_ADRFAM_FC",
		5: "NVME_ADRFAM_INTRA_HOST",
	}
	NvmeAddressFamily_value = map[string]int32{
		"NVME_ADDRESS_FAMILY_UNSPECIFIED": 0,
		"NVME_ADRFAM_IPV4":                1,
		"NVME_ADRFAM_IPV6":                2,
		"NVME_ADRFAM_IB":                  3,
		"NVME_ADRFAM_FC":                  4,
		"NVME_ADRFAM_INTRA_HOST":          5,
	}
)

func (x NvmeAddressFamily) Enum() *NvmeAddressFamily {
	p := new(NvmeAddressFamily)
	*p = x
	return p
}

func (x NvmeAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[1].Descriptor()
}

func (NvmeAddressFamily) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[1]
}

func (x NvmeAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeAddressFamily.Descriptor instead.
func (NvmeAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

type NvmeMultipath int32

const (
	NvmeMultipath_NVME_MULTIPATH_UNSPECIFIED NvmeMultipath = 0
	NvmeMultipath_NVME_MULTIPATH_DISABLE     NvmeMultipath = 1
	NvmeMultipath_NVME_MULTIPATH_FAILOVER    NvmeMultipath = 2
	NvmeMultipath_NVME_MULTIPATH_MULTIPATH   NvmeMultipath = 3
)

// Enum value maps for NvmeMultipath.
var (
	NvmeMultipath_name = map[int32]string{
		0: "NVME_MULTIPATH_UNSPECIFIED",
		1: "NVME_MULTIPATH_DISABLE",
		2: "NVME_MULTIPATH_FAILOVER",
		3: "NVME_MULTIPATH_MULTIPATH",
	}
	NvmeMultipath_value = map[string]int32{
		"NVME_MULTIPATH_UNSPECIFIED": 0,
		"NVME_MULTIPATH_DISABLE":     1,
		"NVME_MULTIPATH_FAILOVER":    2,
		"NVME_MULTIPATH_MULTIPATH":   3,
	}
)

func (x NvmeMultipath) Enum() *NvmeMultipath {
	p := new(NvmeMultipath)
	*p = x
	return p
}

func (x NvmeMultipath) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeMultipath) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[2].Descriptor()
}

func (NvmeMultipath) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[2]
}

func (x NvmeMultipath) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeMultipath.Descriptor instead.
func (NvmeMultipath) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

type NvmeRemoteController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Multipath     NvmeMultipath `protobuf:"varint,2,opt,name=multipath,proto3,enum=opi_api.storage.v1.NvmeMultipath" json:"multipath,omitempty"`
	IoQueuesCount int64         `protobuf:"varint,3,opt,name=io_queues_count,json=ioQueuesCount,proto3" json:"io_queues_count,omitempty"`
	QueueSize     int64         `protobuf:"varint,4,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
	Hdgst         bool          `protobuf:"varint,5,opt,name=hdgst,proto3" json:"hdgst,omitempty"`
	Ddgst         bool          `protobuf:"varint,6,opt,name=ddgst,proto3" json:"ddgst,omitempty"`
	// Nvme/TCP published secure channel specification (TP 8011) based on TLS 1.3 and PSK.
	// Use PSK interchange format with base64 encoding as input.
	// Also use information about hash function in interchange
	// format for retained PSK generation. If no hash is selected,
	// use configured PSK as retained PSK.
	// Check the size of interchange PSK to determine cipher suite.
	// Calculate CRC-32 bytes to ensure validity of PSK.
	// Example: "NVMeTLSkey-1:01:VRLbtnN9AQb2WXW3c9+wEf/DRLz0QuLdbYvEhwtdWwNf9LrZ:"
	// if PSK field is empty, then unsecure connection Nvme/TCP without TLS will be made
	Psk []byte `protobuf:"bytes,7,opt,name=psk,proto3" json:"psk,omitempty"`
}

func (x *NvmeRemoteController) Reset() {
	*x = NvmeRemoteController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeRemoteController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeRemoteController) ProtoMessage() {}

func (x *NvmeRemoteController) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeRemoteController.ProtoReflect.Descriptor instead.
func (*NvmeRemoteController) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

func (x *NvmeRemoteController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeRemoteController) GetMultipath() NvmeMultipath {
	if x != nil {
		return x.Multipath
	}
	return NvmeMultipath_NVME_MULTIPATH_UNSPECIFIED
}

func (x *NvmeRemoteController) GetIoQueuesCount() int64 {
	if x != nil {
		return x.IoQueuesCount
	}
	return 0
}

func (x *NvmeRemoteController) GetQueueSize() int64 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

func (x *NvmeRemoteController) GetHdgst() bool {
	if x != nil {
		return x.Hdgst
	}
	return false
}

func (x *NvmeRemoteController) GetDdgst() bool {
	if x != nil {
		return x.Ddgst
	}
	return false
}

func (x *NvmeRemoteController) GetPsk() []byte {
	if x != nil {
		return x.Psk
	}
	return nil
}

type NvmePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ControllerNameRef string            `protobuf:"bytes,2,opt,name=controller_name_ref,json=controllerNameRef,proto3" json:"controller_name_ref,omitempty"`
	Trtype            NvmeTransportType `protobuf:"varint,3,opt,name=trtype,proto3,enum=opi_api.storage.v1.NvmeTransportType" json:"trtype,omitempty"`
	Adrfam            NvmeAddressFamily `protobuf:"varint,4,opt,name=adrfam,proto3,enum=opi_api.storage.v1.NvmeAddressFamily" json:"adrfam,omitempty"`
	// Destination address (e.g. IP address, BDF for local PCIe)
	Traddr string `protobuf:"bytes,5,opt,name=traddr,proto3" json:"traddr,omitempty"`
	// Destination service id (e.g. Port)
	Trsvcid int64 `protobuf:"varint,6,opt,name=trsvcid,proto3" json:"trsvcid,omitempty"`
	// Subsystem NQN
	Subnqn string `protobuf:"bytes,7,opt,name=subnqn,proto3" json:"subnqn,omitempty"`
	// Source address (e.g. IP of local NIC)
	SourceTraddr string `protobuf:"bytes,8,opt,name=source_traddr,json=sourceTraddr,proto3" json:"source_traddr,omitempty"`
	// Source port (e.g. Port of local NIC)
	SourceTrsvcid int64 `protobuf:"varint,9,opt,name=source_trsvcid,json=sourceTrsvcid,proto3" json:"source_trsvcid,omitempty"`
	// Host NQN
	Hostnqn string `protobuf:"bytes,10,opt,name=hostnqn,proto3" json:"hostnqn,omitempty"`
}

func (x *NvmePath) Reset() {
	*x = NvmePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmePath) ProtoMessage() {}

func (x *NvmePath) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmePath.ProtoReflect.Descriptor instead.
func (*NvmePath) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *NvmePath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmePath) GetControllerNameRef() string {
	if x != nil {
		return x.ControllerNameRef
	}
	return ""
}

func (x *NvmePath) GetTrtype() NvmeTransportType {
	if x != nil {
		return x.Trtype
	}
	return NvmeTransportType_NVME_TRANSPORT_TYPE_UNSPECIFIED
}

func (x *NvmePath) GetAdrfam() NvmeAddressFamily {
	if x != nil {
		return x.Adrfam
	}
	return NvmeAddressFamily_NVME_ADDRESS_FAMILY_UNSPECIFIED
}

func (x *NvmePath) GetTraddr() string {
	if x != nil {
		return x.Traddr
	}
	return ""
}

func (x *NvmePath) GetTrsvcid() int64 {
	if x != nil {
		return x.Trsvcid
	}
	return 0
}

func (x *NvmePath) GetSubnqn() string {
	if x != nil {
		return x.Subnqn
	}
	return ""
}

func (x *NvmePath) GetSourceTraddr() string {
	if x != nil {
		return x.SourceTraddr
	}
	return ""
}

func (x *NvmePath) GetSourceTrsvcid() int64 {
	if x != nil {
		return x.SourceTrsvcid
	}
	return 0
}

func (x *NvmePath) GetHostnqn() string {
	if x != nil {
		return x.Hostnqn
	}
	return ""
}

type NvmeRemoteNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controller through which the namespace is visible
	ControllerNameRef string `protobuf:"bytes,2,opt,name=controller_name_ref,json=controllerNameRef,proto3" json:"controller_name_ref,omitempty"`
	// NSID
	Nsid int32 `protobuf:"varint,3,opt,name=nsid,proto3" json:"nsid,omitempty"`
	// Globally unique identifier for the namespace
	Nguid string `protobuf:"bytes,4,opt,name=nguid,proto3" json:"nguid,omitempty"`
	// 64bit Extended unique identifier for the namespace
	// mandatory if guid is not specified
	Eui64 int64 `protobuf:"varint,5,opt,name=eui64,proto3" json:"eui64,omitempty"`
	// Globally unique identifier for the namespace
	Uuid *_go.Uuid `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *NvmeRemoteNamespace) Reset() {
	*x = NvmeRemoteNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeRemoteNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeRemoteNamespace) ProtoMessage() {}

func (x *NvmeRemoteNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeRemoteNamespace.ProtoReflect.Descriptor instead.
func (*NvmeRemoteNamespace) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

func (x *NvmeRemoteNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeRemoteNamespace) GetControllerNameRef() string {
	if x != nil {
		return x.ControllerNameRef
	}
	return ""
}

func (x *NvmeRemoteNamespace) GetNsid() int32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *NvmeRemoteNamespace) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NvmeRemoteNamespace) GetEui64() int64 {
	if x != nil {
		return x.Eui64
	}
	return 0
}

func (x *NvmeRemoteNamespace) GetUuid() *_go.Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// Represents a request to create an Nvme Remote Controller.
type CreateNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Nvme Remote Controller to be created.
	NvmeRemoteController *NvmeRemoteController `protobuf:"bytes,1,opt,name=nvme_remote_controller,json=nvmeRemoteController,proto3" json:"nvme_remote_controller,omitempty"`
	// An optional ID to assign to the Nvme Remote Controller.
	// If this is not provided the system will auto-generate it.
	NvmeRemoteControllerId string `protobuf:"bytes,2,opt,name=nvme_remote_controller_id,json=nvmeRemoteControllerId,proto3" json:"nvme_remote_controller_id,omitempty"`
}

func (x *CreateNvmeRemoteControllerRequest) Reset() {
	*x = CreateNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *CreateNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*CreateNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNvmeRemoteControllerRequest) GetNvmeRemoteController() *NvmeRemoteController {
	if x != nil {
		return x.NvmeRemoteController
	}
	return nil
}

func (x *CreateNvmeRemoteControllerRequest) GetNvmeRemoteControllerId() string {
	if x != nil {
		return x.NvmeRemoteControllerId
	}
	return ""
}

// Represents a request to delete an Nvme Remote Controller.
type DeleteNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNvmeRemoteControllerRequest) Reset() {
	*x = DeleteNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *DeleteNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*DeleteNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteNvmeRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNvmeRemoteControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to update an Nvme Remote Controller.
type UpdateNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvmeRemoteController *NvmeRemoteController `protobuf:"bytes,1,opt,name=nvme_remote_controller,json=nvmeRemoteController,proto3" json:"nvme_remote_controller,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNvmeRemoteControllerRequest) Reset() {
	*x = UpdateNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *UpdateNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNvmeRemoteControllerRequest) GetNvmeRemoteController() *NvmeRemoteController {
	if x != nil {
		return x.NvmeRemoteController
	}
	return nil
}

func (x *UpdateNvmeRemoteControllerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNvmeRemoteControllerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to list all Nvme Remote Controllers.
type ListNvmeRemoteControllersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmeRemoteControllersRequest) Reset() {
	*x = ListNvmeRemoteControllersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeRemoteControllersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeRemoteControllersRequest) ProtoMessage() {}

func (x *ListNvmeRemoteControllersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeRemoteControllersRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeRemoteControllersRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{6}
}

func (x *ListNvmeRemoteControllersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmeRemoteControllersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmeRemoteControllersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Nvme Remote Controllers.
type ListNvmeRemoteControllersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeRemoteControllers []*NvmeRemoteController `protobuf:"bytes,1,rep,name=nvme_remote_controllers,json=nvmeRemoteControllers,proto3" json:"nvme_remote_controllers,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmeRemoteControllersResponse) Reset() {
	*x = ListNvmeRemoteControllersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeRemoteControllersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeRemoteControllersResponse) ProtoMessage() {}

func (x *ListNvmeRemoteControllersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeRemoteControllersResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeRemoteControllersResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *ListNvmeRemoteControllersResponse) GetNvmeRemoteControllers() []*NvmeRemoteController {
	if x != nil {
		return x.NvmeRemoteControllers
	}
	return nil
}

func (x *ListNvmeRemoteControllersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Nvme Remote Controller.
type GetNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmeRemoteControllerRequest) Reset() {
	*x = GetNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *GetNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *GetNvmeRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to reset an Nvme Remote Controller.
type ResetNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResetNvmeRemoteControllerRequest) Reset() {
	*x = ResetNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *ResetNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*ResetNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *ResetNvmeRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to get an Nvme Remote Controller statistics.
type StatsNvmeRemoteControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatsNvmeRemoteControllerRequest) Reset() {
	*x = StatsNvmeRemoteControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsNvmeRemoteControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsNvmeRemoteControllerRequest) ProtoMessage() {}

func (x *StatsNvmeRemoteControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsNvmeRemoteControllerRequest.ProtoReflect.Descriptor instead.
func (*StatsNvmeRemoteControllerRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{10}
}

func (x *StatsNvmeRemoteControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a response to get an Nvme Remote Controller statistics.
type StatsNvmeRemoteControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StatsNvmeRemoteControllerResponse) Reset() {
	*x = StatsNvmeRemoteControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsNvmeRemoteControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsNvmeRemoteControllerResponse) ProtoMessage() {}

func (x *StatsNvmeRemoteControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsNvmeRemoteControllerResponse.ProtoReflect.Descriptor instead.
func (*StatsNvmeRemoteControllerResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{11}
}

func (x *StatsNvmeRemoteControllerResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Represents a request to list all Nvme Remote Namespaces.
type ListNvmeRemoteNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The controller's unique object identifier. This lists
	// namespaces for a particular controller.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmeRemoteNamespacesRequest) Reset() {
	*x = ListNvmeRemoteNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeRemoteNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeRemoteNamespacesRequest) ProtoMessage() {}

func (x *ListNvmeRemoteNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeRemoteNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeRemoteNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{12}
}

func (x *ListNvmeRemoteNamespacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmeRemoteNamespacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmeRemoteNamespacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Nvme Remote Namespaces.
type ListNvmeRemoteNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeRemoteNamespaces []*NvmeRemoteNamespace `protobuf:"bytes,1,rep,name=nvme_remote_namespaces,json=nvmeRemoteNamespaces,proto3" json:"nvme_remote_namespaces,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmeRemoteNamespacesResponse) Reset() {
	*x = ListNvmeRemoteNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeRemoteNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeRemoteNamespacesResponse) ProtoMessage() {}

func (x *ListNvmeRemoteNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeRemoteNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeRemoteNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{13}
}

func (x *ListNvmeRemoteNamespacesResponse) GetNvmeRemoteNamespaces() []*NvmeRemoteNamespace {
	if x != nil {
		return x.NvmeRemoteNamespaces
	}
	return nil
}

func (x *ListNvmeRemoteNamespacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Nvme Remote Namespace.
type GetNvmeRemoteNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmeRemoteNamespaceRequest) Reset() {
	*x = GetNvmeRemoteNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeRemoteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeRemoteNamespaceRequest) ProtoMessage() {}

func (x *GetNvmeRemoteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeRemoteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeRemoteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{14}
}

func (x *GetNvmeRemoteNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to create an Nvme Path.
type CreateNvmePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Nvme Path to be created.
	NvmePath *NvmePath `protobuf:"bytes,1,opt,name=nvme_path,json=nvmePath,proto3" json:"nvme_path,omitempty"`
	// An optional ID to assign to the Nvme Path.
	// If this is not provided the system will auto-generate it.
	NvmePathId string `protobuf:"bytes,2,opt,name=nvme_path_id,json=nvmePathId,proto3" json:"nvme_path_id,omitempty"`
}

func (x *CreateNvmePathRequest) Reset() {
	*x = CreateNvmePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNvmePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNvmePathRequest) ProtoMessage() {}

func (x *CreateNvmePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNvmePathRequest.ProtoReflect.Descriptor instead.
func (*CreateNvmePathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{15}
}

func (x *CreateNvmePathRequest) GetNvmePath() *NvmePath {
	if x != nil {
		return x.NvmePath
	}
	return nil
}

func (x *CreateNvmePathRequest) GetNvmePathId() string {
	if x != nil {
		return x.NvmePathId
	}
	return ""
}

// Represents a request to delete an Nvme Path.
type DeleteNvmePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object's unique identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteNvmePathRequest) Reset() {
	*x = DeleteNvmePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNvmePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNvmePathRequest) ProtoMessage() {}

func (x *DeleteNvmePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNvmePathRequest.ProtoReflect.Descriptor instead.
func (*DeleteNvmePathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteNvmePathRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNvmePathRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to update an Nvme Path.
type UpdateNvmePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	NvmePath *NvmePath `protobuf:"bytes,1,opt,name=nvme_path,json=nvmePath,proto3" json:"nvme_path,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNvmePathRequest) Reset() {
	*x = UpdateNvmePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmePathRequest) ProtoMessage() {}

func (x *UpdateNvmePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmePathRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmePathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateNvmePathRequest) GetNvmePath() *NvmePath {
	if x != nil {
		return x.NvmePath
	}
	return nil
}

func (x *UpdateNvmePathRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNvmePathRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Represents a request to list all Nvme Paths.
type ListNvmePathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size of list request
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNvmePathsRequest) Reset() {
	*x = ListNvmePathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmePathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmePathsRequest) ProtoMessage() {}

func (x *ListNvmePathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmePathsRequest.ProtoReflect.Descriptor instead.
func (*ListNvmePathsRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{18}
}

func (x *ListNvmePathsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNvmePathsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNvmePathsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Represents a response to list all Nvme Paths.
type ListNvmePathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmePaths []*NvmePath `protobuf:"bytes,1,rep,name=nvme_paths,json=nvmePaths,proto3" json:"nvme_paths,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNvmePathsResponse) Reset() {
	*x = ListNvmePathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmePathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmePathsResponse) ProtoMessage() {}

func (x *ListNvmePathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmePathsResponse.ProtoReflect.Descriptor instead.
func (*ListNvmePathsResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{19}
}

func (x *ListNvmePathsResponse) GetNvmePaths() []*NvmePath {
	if x != nil {
		return x.NvmePaths
	}
	return nil
}

func (x *ListNvmePathsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents a request to get an Nvme Path.
type GetNvmePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNvmePathRequest) Reset() {
	*x = GetNvmePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmePathRequest) ProtoMessage() {}

func (x *GetNvmePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmePathRequest.ProtoReflect.Descriptor instead.
func (*GetNvmePathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{20}
}

func (x *GetNvmePathRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a request to get an Nvme Path statistics.
type StatsNvmePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatsNvmePathRequest) Reset() {
	*x = StatsNvmePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsNvmePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsNvmePathRequest) ProtoMessage() {}

func (x *StatsNvmePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsNvmePathRequest.ProtoReflect.Descriptor instead.
func (*StatsNvmePathRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{21}
}

func (x *StatsNvmePathRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a response to get an Nvme Path statistics.
type StatsNvmePathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *VolumeStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StatsNvmePathResponse) Reset() {
	*x = StatsNvmePathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsNvmePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsNvmePathResponse) ProtoMessage() {}

func (x *StatsNvmePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsNvmePathResponse.ProtoReflect.Descriptor instead.
func (*StatsNvmePathResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{22}
}

func (x *StatsNvmePathResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_backend_nvme_tcp_proto protoreflect.FileDescriptor

var file_backend_nvme_tcp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x74,
	0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x6f, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x14,
	0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x64, 0x67, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x68, 0x64, 0x67, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x73, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x70, 0x73, 0x6b,
	0x3a, 0x6f, 0xea, 0x41, 0x6c, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x76,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x7d, 0x2a, 0x15, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x32, 0x14, 0x6e, 0x76, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x22, 0xca, 0x04, 0x0a, 0x08, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41,
	0x03, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x1d, 0x0a, 0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x06, 0x74,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x61, 0x64, 0x72, 0x66, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x61, 0x64, 0x72,
	0x66, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x73, 0x76, 0x63,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x71, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x71,
	0x6e, 0x3a, 0x4b, 0xea, 0x41, 0x48, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e,
	0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0x2a, 0x09, 0x6e, 0x76, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x32, 0x08, 0x6e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xac,
	0x03, 0x0a, 0x13, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x28, 0x0a,
	0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x03, 0xfa,
	0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x6e, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x3a,
	0x6c, 0xea, 0x41, 0x69, 0x0a, 0x2a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x4e, 0x76, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x7d, 0x2a, 0x14, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x32, 0x13, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xc8, 0x01,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x14, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x19, 0x6e, 0x76, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x16, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf4, 0x01,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x14, 0x6e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x17, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x15, 0x6e, 0x76, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29,
	0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x67, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5a, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xa9, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14, 0x6e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x63, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x6e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0c, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d, 0x0a,
	0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc3, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6e, 0x76,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1d, 0x0a, 0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x6e, 0x76, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d, 0x0a, 0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76, 0x6d,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1d, 0x0a, 0x1b, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x4e, 0x76,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0xb4, 0x01, 0x0a,
	0x11, 0x4e, 0x76, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x43, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x50, 0x43, 0x49, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x44, 0x4d, 0x41, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a, 0x11, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x52,
	0x46, 0x41, 0x4d, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x56,
	0x4d, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x42, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x46, 0x43,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x86,
	0x01, 0x0a, 0x0d, 0x4e, 0x76, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x56, 0x4d,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x32, 0x94, 0x14, 0x0a, 0x1b, 0x4e, 0x76, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22,
	0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x16, 0x6e, 0x76,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41, 0x30, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x6e, 0x76,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46,
	0x32, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x16,
	0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xda, 0x41, 0x22, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xb2, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0xaa, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa5, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x76,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x61,
	0x74, 0x73, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x09, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0xda, 0x41, 0x16, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x6e, 0x76, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x12, 0x7a, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x32, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x09, 0x6e, 0x76, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0xda, 0x41, 0x15, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x8e, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7a,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x4e, 0x76, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x73, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x62,
	0x0a, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4e, 0x76, 0x6d,
	0x65, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_nvme_tcp_proto_rawDescOnce sync.Once
	file_backend_nvme_tcp_proto_rawDescData = file_backend_nvme_tcp_proto_rawDesc
)

func file_backend_nvme_tcp_proto_rawDescGZIP() []byte {
	file_backend_nvme_tcp_proto_rawDescOnce.Do(func() {
		file_backend_nvme_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_nvme_tcp_proto_rawDescData)
	})
	return file_backend_nvme_tcp_proto_rawDescData
}

var file_backend_nvme_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_backend_nvme_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_backend_nvme_tcp_proto_goTypes = []interface{}{
	(NvmeTransportType)(0),                    // 0: opi_api.storage.v1.NvmeTransportType
	(NvmeAddressFamily)(0),                    // 1: opi_api.storage.v1.NvmeAddressFamily
	(NvmeMultipath)(0),                        // 2: opi_api.storage.v1.NvmeMultipath
	(*NvmeRemoteController)(nil),              // 3: opi_api.storage.v1.NvmeRemoteController
	(*NvmePath)(nil),                          // 4: opi_api.storage.v1.NvmePath
	(*NvmeRemoteNamespace)(nil),               // 5: opi_api.storage.v1.NvmeRemoteNamespace
	(*CreateNvmeRemoteControllerRequest)(nil), // 6: opi_api.storage.v1.CreateNvmeRemoteControllerRequest
	(*DeleteNvmeRemoteControllerRequest)(nil), // 7: opi_api.storage.v1.DeleteNvmeRemoteControllerRequest
	(*UpdateNvmeRemoteControllerRequest)(nil), // 8: opi_api.storage.v1.UpdateNvmeRemoteControllerRequest
	(*ListNvmeRemoteControllersRequest)(nil),  // 9: opi_api.storage.v1.ListNvmeRemoteControllersRequest
	(*ListNvmeRemoteControllersResponse)(nil), // 10: opi_api.storage.v1.ListNvmeRemoteControllersResponse
	(*GetNvmeRemoteControllerRequest)(nil),    // 11: opi_api.storage.v1.GetNvmeRemoteControllerRequest
	(*ResetNvmeRemoteControllerRequest)(nil),  // 12: opi_api.storage.v1.ResetNvmeRemoteControllerRequest
	(*StatsNvmeRemoteControllerRequest)(nil),  // 13: opi_api.storage.v1.StatsNvmeRemoteControllerRequest
	(*StatsNvmeRemoteControllerResponse)(nil), // 14: opi_api.storage.v1.StatsNvmeRemoteControllerResponse
	(*ListNvmeRemoteNamespacesRequest)(nil),   // 15: opi_api.storage.v1.ListNvmeRemoteNamespacesRequest
	(*ListNvmeRemoteNamespacesResponse)(nil),  // 16: opi_api.storage.v1.ListNvmeRemoteNamespacesResponse
	(*GetNvmeRemoteNamespaceRequest)(nil),     // 17: opi_api.storage.v1.GetNvmeRemoteNamespaceRequest
	(*CreateNvmePathRequest)(nil),             // 18: opi_api.storage.v1.CreateNvmePathRequest
	(*DeleteNvmePathRequest)(nil),             // 19: opi_api.storage.v1.DeleteNvmePathRequest
	(*UpdateNvmePathRequest)(nil),             // 20: opi_api.storage.v1.UpdateNvmePathRequest
	(*ListNvmePathsRequest)(nil),              // 21: opi_api.storage.v1.ListNvmePathsRequest
	(*ListNvmePathsResponse)(nil),             // 22: opi_api.storage.v1.ListNvmePathsResponse
	(*GetNvmePathRequest)(nil),                // 23: opi_api.storage.v1.GetNvmePathRequest
	(*StatsNvmePathRequest)(nil),              // 24: opi_api.storage.v1.StatsNvmePathRequest
	(*StatsNvmePathResponse)(nil),             // 25: opi_api.storage.v1.StatsNvmePathResponse
	(*_go.Uuid)(nil),                          // 26: opi_api.common.v1.Uuid
	(*fieldmaskpb.FieldMask)(nil),             // 27: google.protobuf.FieldMask
	(*VolumeStats)(nil),                       // 28: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),                     // 29: google.protobuf.Empty
}
var file_backend_nvme_tcp_proto_depIdxs = []int32{
	2,  // 0: opi_api.storage.v1.NvmeRemoteController.multipath:type_name -> opi_api.storage.v1.NvmeMultipath
	0,  // 1: opi_api.storage.v1.NvmePath.trtype:type_name -> opi_api.storage.v1.NvmeTransportType
	1,  // 2: opi_api.storage.v1.NvmePath.adrfam:type_name -> opi_api.storage.v1.NvmeAddressFamily
	26, // 3: opi_api.storage.v1.NvmeRemoteNamespace.uuid:type_name -> opi_api.common.v1.Uuid
	3,  // 4: opi_api.storage.v1.CreateNvmeRemoteControllerRequest.nvme_remote_controller:type_name -> opi_api.storage.v1.NvmeRemoteController
	3,  // 5: opi_api.storage.v1.UpdateNvmeRemoteControllerRequest.nvme_remote_controller:type_name -> opi_api.storage.v1.NvmeRemoteController
	27, // 6: opi_api.storage.v1.UpdateNvmeRemoteControllerRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 7: opi_api.storage.v1.ListNvmeRemoteControllersResponse.nvme_remote_controllers:type_name -> opi_api.storage.v1.NvmeRemoteController
	28, // 8: opi_api.storage.v1.StatsNvmeRemoteControllerResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	5,  // 9: opi_api.storage.v1.ListNvmeRemoteNamespacesResponse.nvme_remote_namespaces:type_name -> opi_api.storage.v1.NvmeRemoteNamespace
	4,  // 10: opi_api.storage.v1.CreateNvmePathRequest.nvme_path:type_name -> opi_api.storage.v1.NvmePath
	4,  // 11: opi_api.storage.v1.UpdateNvmePathRequest.nvme_path:type_name -> opi_api.storage.v1.NvmePath
	27, // 12: opi_api.storage.v1.UpdateNvmePathRequest.update_mask:type_name -> google.protobuf.FieldMask
	4,  // 13: opi_api.storage.v1.ListNvmePathsResponse.nvme_paths:type_name -> opi_api.storage.v1.NvmePath
	28, // 14: opi_api.storage.v1.StatsNvmePathResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	6,  // 15: opi_api.storage.v1.NvmeRemoteControllerService.CreateNvmeRemoteController:input_type -> opi_api.storage.v1.CreateNvmeRemoteControllerRequest
	7,  // 16: opi_api.storage.v1.NvmeRemoteControllerService.DeleteNvmeRemoteController:input_type -> opi_api.storage.v1.DeleteNvmeRemoteControllerRequest
	8,  // 17: opi_api.storage.v1.NvmeRemoteControllerService.UpdateNvmeRemoteController:input_type -> opi_api.storage.v1.UpdateNvmeRemoteControllerRequest
	9,  // 18: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmeRemoteControllers:input_type -> opi_api.storage.v1.ListNvmeRemoteControllersRequest
	11, // 19: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmeRemoteController:input_type -> opi_api.storage.v1.GetNvmeRemoteControllerRequest
	12, // 20: opi_api.storage.v1.NvmeRemoteControllerService.ResetNvmeRemoteController:input_type -> opi_api.storage.v1.ResetNvmeRemoteControllerRequest
	13, // 21: opi_api.storage.v1.NvmeRemoteControllerService.StatsNvmeRemoteController:input_type -> opi_api.storage.v1.StatsNvmeRemoteControllerRequest
	15, // 22: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmeRemoteNamespaces:input_type -> opi_api.storage.v1.ListNvmeRemoteNamespacesRequest
	17, // 23: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmeRemoteNamespace:input_type -> opi_api.storage.v1.GetNvmeRemoteNamespaceRequest
	18, // 24: opi_api.storage.v1.NvmeRemoteControllerService.CreateNvmePath:input_type -> opi_api.storage.v1.CreateNvmePathRequest
	19, // 25: opi_api.storage.v1.NvmeRemoteControllerService.DeleteNvmePath:input_type -> opi_api.storage.v1.DeleteNvmePathRequest
	20, // 26: opi_api.storage.v1.NvmeRemoteControllerService.UpdateNvmePath:input_type -> opi_api.storage.v1.UpdateNvmePathRequest
	21, // 27: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmePaths:input_type -> opi_api.storage.v1.ListNvmePathsRequest
	23, // 28: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmePath:input_type -> opi_api.storage.v1.GetNvmePathRequest
	24, // 29: opi_api.storage.v1.NvmeRemoteControllerService.StatsNvmePath:input_type -> opi_api.storage.v1.StatsNvmePathRequest
	3,  // 30: opi_api.storage.v1.NvmeRemoteControllerService.CreateNvmeRemoteController:output_type -> opi_api.storage.v1.NvmeRemoteController
	29, // 31: opi_api.storage.v1.NvmeRemoteControllerService.DeleteNvmeRemoteController:output_type -> google.protobuf.Empty
	3,  // 32: opi_api.storage.v1.NvmeRemoteControllerService.UpdateNvmeRemoteController:output_type -> opi_api.storage.v1.NvmeRemoteController
	10, // 33: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmeRemoteControllers:output_type -> opi_api.storage.v1.ListNvmeRemoteControllersResponse
	3,  // 34: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmeRemoteController:output_type -> opi_api.storage.v1.NvmeRemoteController
	29, // 35: opi_api.storage.v1.NvmeRemoteControllerService.ResetNvmeRemoteController:output_type -> google.protobuf.Empty
	14, // 36: opi_api.storage.v1.NvmeRemoteControllerService.StatsNvmeRemoteController:output_type -> opi_api.storage.v1.StatsNvmeRemoteControllerResponse
	16, // 37: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmeRemoteNamespaces:output_type -> opi_api.storage.v1.ListNvmeRemoteNamespacesResponse
	5,  // 38: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmeRemoteNamespace:output_type -> opi_api.storage.v1.NvmeRemoteNamespace
	4,  // 39: opi_api.storage.v1.NvmeRemoteControllerService.CreateNvmePath:output_type -> opi_api.storage.v1.NvmePath
	29, // 40: opi_api.storage.v1.NvmeRemoteControllerService.DeleteNvmePath:output_type -> google.protobuf.Empty
	4,  // 41: opi_api.storage.v1.NvmeRemoteControllerService.UpdateNvmePath:output_type -> opi_api.storage.v1.NvmePath
	22, // 42: opi_api.storage.v1.NvmeRemoteControllerService.ListNvmePaths:output_type -> opi_api.storage.v1.ListNvmePathsResponse
	4,  // 43: opi_api.storage.v1.NvmeRemoteControllerService.GetNvmePath:output_type -> opi_api.storage.v1.NvmePath
	25, // 44: opi_api.storage.v1.NvmeRemoteControllerService.StatsNvmePath:output_type -> opi_api.storage.v1.StatsNvmePathResponse
	30, // [30:45] is the sub-list for method output_type
	15, // [15:30] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_backend_nvme_tcp_proto_init() }
func file_backend_nvme_tcp_proto_init() {
	if File_backend_nvme_tcp_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_nvme_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeRemoteController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeRemoteNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeRemoteControllersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeRemoteControllersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsNvmeRemoteControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsNvmeRemoteControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeRemoteNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeRemoteNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeRemoteNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNvmePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNvmePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmePathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmePathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsNvmePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsNvmePathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_nvme_tcp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_nvme_tcp_proto_goTypes,
		DependencyIndexes: file_backend_nvme_tcp_proto_depIdxs,
		EnumInfos:         file_backend_nvme_tcp_proto_enumTypes,
		MessageInfos:      file_backend_nvme_tcp_proto_msgTypes,
	}.Build()
	File_backend_nvme_tcp_proto = out.File
	file_backend_nvme_tcp_proto_rawDesc = nil
	file_backend_nvme_tcp_proto_goTypes = nil
	file_backend_nvme_tcp_proto_depIdxs = nil
}
