// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: backend_nvme_tcp.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvmeTransportType int32

const (
	NvmeTransportType_NVME_TRANSPORT_FC     NvmeTransportType = 0
	NvmeTransportType_NVME_TRANSPORT_PCIE   NvmeTransportType = 1
	NvmeTransportType_NVME_TRANSPORT_RDMA   NvmeTransportType = 2
	NvmeTransportType_NVME_TRANSPORT_TCP    NvmeTransportType = 3
	NvmeTransportType_NVME_TRANSPORT_CUSTOM NvmeTransportType = 4
)

// Enum value maps for NvmeTransportType.
var (
	NvmeTransportType_name = map[int32]string{
		0: "NVME_TRANSPORT_FC",
		1: "NVME_TRANSPORT_PCIE",
		2: "NVME_TRANSPORT_RDMA",
		3: "NVME_TRANSPORT_TCP",
		4: "NVME_TRANSPORT_CUSTOM",
	}
	NvmeTransportType_value = map[string]int32{
		"NVME_TRANSPORT_FC":     0,
		"NVME_TRANSPORT_PCIE":   1,
		"NVME_TRANSPORT_RDMA":   2,
		"NVME_TRANSPORT_TCP":    3,
		"NVME_TRANSPORT_CUSTOM": 4,
	}
)

func (x NvmeTransportType) Enum() *NvmeTransportType {
	p := new(NvmeTransportType)
	*p = x
	return p
}

func (x NvmeTransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeTransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[0].Descriptor()
}

func (NvmeTransportType) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[0]
}

func (x NvmeTransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeTransportType.Descriptor instead.
func (NvmeTransportType) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

type NvmeAddressFamily int32

const (
	NvmeAddressFamily_NVMF_ADRFAM_IPV4       NvmeAddressFamily = 0
	NvmeAddressFamily_NVMF_ADRFAM_IPV6       NvmeAddressFamily = 1
	NvmeAddressFamily_NVMF_ADRFAM_IB         NvmeAddressFamily = 2
	NvmeAddressFamily_NVMF_ADRFAM_FC         NvmeAddressFamily = 3
	NvmeAddressFamily_NVMF_ADRFAM_INTRA_HOST NvmeAddressFamily = 4
)

// Enum value maps for NvmeAddressFamily.
var (
	NvmeAddressFamily_name = map[int32]string{
		0: "NVMF_ADRFAM_IPV4",
		1: "NVMF_ADRFAM_IPV6",
		2: "NVMF_ADRFAM_IB",
		3: "NVMF_ADRFAM_FC",
		4: "NVMF_ADRFAM_INTRA_HOST",
	}
	NvmeAddressFamily_value = map[string]int32{
		"NVMF_ADRFAM_IPV4":       0,
		"NVMF_ADRFAM_IPV6":       1,
		"NVMF_ADRFAM_IB":         2,
		"NVMF_ADRFAM_FC":         3,
		"NVMF_ADRFAM_INTRA_HOST": 4,
	}
)

func (x NvmeAddressFamily) Enum() *NvmeAddressFamily {
	p := new(NvmeAddressFamily)
	*p = x
	return p
}

func (x NvmeAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[1].Descriptor()
}

func (NvmeAddressFamily) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[1]
}

func (x NvmeAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeAddressFamily.Descriptor instead.
func (NvmeAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

type NvmeMultipath int32

const (
	NvmeMultipath_NVME_MPIO_DISABLE   NvmeMultipath = 0
	NvmeMultipath_NVME_MPIO_FAILOVER  NvmeMultipath = 1
	NvmeMultipath_NVME_MPIO_MULTIPATH NvmeMultipath = 2
)

// Enum value maps for NvmeMultipath.
var (
	NvmeMultipath_name = map[int32]string{
		0: "NVME_MPIO_DISABLE",
		1: "NVME_MPIO_FAILOVER",
		2: "NVME_MPIO_MULTIPATH",
	}
	NvmeMultipath_value = map[string]int32{
		"NVME_MPIO_DISABLE":   0,
		"NVME_MPIO_FAILOVER":  1,
		"NVME_MPIO_MULTIPATH": 2,
	}
)

func (x NvmeMultipath) Enum() *NvmeMultipath {
	p := new(NvmeMultipath)
	*p = x
	return p
}

func (x NvmeMultipath) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeMultipath) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_nvme_tcp_proto_enumTypes[2].Descriptor()
}

func (NvmeMultipath) Type() protoreflect.EnumType {
	return &file_backend_nvme_tcp_proto_enumTypes[2]
}

func (x NvmeMultipath) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeMultipath.Descriptor instead.
func (NvmeMultipath) EnumDescriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

type NVMfRemoteController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Trtype      NvmeTransportType `protobuf:"varint,2,opt,name=trtype,proto3,enum=opi_api.storage.v1.NvmeTransportType" json:"trtype,omitempty"`
	Adrfam      NvmeAddressFamily `protobuf:"varint,3,opt,name=adrfam,proto3,enum=opi_api.storage.v1.NvmeAddressFamily" json:"adrfam,omitempty"`
	Traddr      string            `protobuf:"bytes,4,opt,name=traddr,proto3" json:"traddr,omitempty"`
	Trsvcid     int64             `protobuf:"varint,5,opt,name=trsvcid,proto3" json:"trsvcid,omitempty"`
	Subnqn      string            `protobuf:"bytes,6,opt,name=subnqn,proto3" json:"subnqn,omitempty"`
	Hdgst       bool              `protobuf:"varint,7,opt,name=hdgst,proto3" json:"hdgst,omitempty"`
	Ddgst       bool              `protobuf:"varint,8,opt,name=ddgst,proto3" json:"ddgst,omitempty"`
	Multipath   NvmeMultipath     `protobuf:"varint,9,opt,name=multipath,proto3,enum=opi_api.storage.v1.NvmeMultipath" json:"multipath,omitempty"`
	NumIoQueues int64             `protobuf:"varint,10,opt,name=num_io_queues,json=numIoQueues,proto3" json:"num_io_queues,omitempty"`
	QueueSize   int64             `protobuf:"varint,11,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
}

func (x *NVMfRemoteController) Reset() {
	*x = NVMfRemoteController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteController) ProtoMessage() {}

func (x *NVMfRemoteController) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteController.ProtoReflect.Descriptor instead.
func (*NVMfRemoteController) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{0}
}

func (x *NVMfRemoteController) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMfRemoteController) GetTrtype() NvmeTransportType {
	if x != nil {
		return x.Trtype
	}
	return NvmeTransportType_NVME_TRANSPORT_FC
}

func (x *NVMfRemoteController) GetAdrfam() NvmeAddressFamily {
	if x != nil {
		return x.Adrfam
	}
	return NvmeAddressFamily_NVMF_ADRFAM_IPV4
}

func (x *NVMfRemoteController) GetTraddr() string {
	if x != nil {
		return x.Traddr
	}
	return ""
}

func (x *NVMfRemoteController) GetTrsvcid() int64 {
	if x != nil {
		return x.Trsvcid
	}
	return 0
}

func (x *NVMfRemoteController) GetSubnqn() string {
	if x != nil {
		return x.Subnqn
	}
	return ""
}

func (x *NVMfRemoteController) GetHdgst() bool {
	if x != nil {
		return x.Hdgst
	}
	return false
}

func (x *NVMfRemoteController) GetDdgst() bool {
	if x != nil {
		return x.Ddgst
	}
	return false
}

func (x *NVMfRemoteController) GetMultipath() NvmeMultipath {
	if x != nil {
		return x.Multipath
	}
	return NvmeMultipath_NVME_MPIO_DISABLE
}

func (x *NVMfRemoteController) GetNumIoQueues() int64 {
	if x != nil {
		return x.NumIoQueues
	}
	return 0
}

func (x *NVMfRemoteController) GetQueueSize() int64 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

type NVMfRemoteControllerConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctrl *NVMfRemoteController `protobuf:"bytes,1,opt,name=ctrl,proto3" json:"ctrl,omitempty"`
}

func (x *NVMfRemoteControllerConnectRequest) Reset() {
	*x = NVMfRemoteControllerConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerConnectRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerConnectRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerConnectRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *NVMfRemoteControllerConnectRequest) GetCtrl() *NVMfRemoteController {
	if x != nil {
		return x.Ctrl
	}
	return nil
}

type NVMfRemoteControllerConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMfRemoteControllerConnectResponse) Reset() {
	*x = NVMfRemoteControllerConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerConnectResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerConnectResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerConnectResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{2}
}

type NVMfRemoteControllerDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerDisconnectRequest) Reset() {
	*x = NVMfRemoteControllerDisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerDisconnectRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerDisconnectRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *NVMfRemoteControllerDisconnectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMfRemoteControllerDisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMfRemoteControllerDisconnectResponse) Reset() {
	*x = NVMfRemoteControllerDisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerDisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerDisconnectResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerDisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerDisconnectResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerDisconnectResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{4}
}

type NVMfRemoteControllerResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerResetRequest) Reset() {
	*x = NVMfRemoteControllerResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerResetRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerResetRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerResetRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *NVMfRemoteControllerResetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMfRemoteControllerResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMfRemoteControllerResetResponse) Reset() {
	*x = NVMfRemoteControllerResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerResetResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerResetResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerResetResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{6}
}

type NVMfRemoteControllerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerListRequest) Reset() {
	*x = NVMfRemoteControllerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerListRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerListRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerListRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *NVMfRemoteControllerListRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMfRemoteControllerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctrl []*NVMfRemoteController `protobuf:"bytes,1,rep,name=ctrl,proto3" json:"ctrl,omitempty"`
}

func (x *NVMfRemoteControllerListResponse) Reset() {
	*x = NVMfRemoteControllerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerListResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerListResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerListResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *NVMfRemoteControllerListResponse) GetCtrl() []*NVMfRemoteController {
	if x != nil {
		return x.Ctrl
	}
	return nil
}

type NVMfRemoteControllerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerGetRequest) Reset() {
	*x = NVMfRemoteControllerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerGetRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerGetRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerGetRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *NVMfRemoteControllerGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMfRemoteControllerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctrl *NVMfRemoteController `protobuf:"bytes,1,opt,name=ctrl,proto3" json:"ctrl,omitempty"`
}

func (x *NVMfRemoteControllerGetResponse) Reset() {
	*x = NVMfRemoteControllerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerGetResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerGetResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerGetResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{10}
}

func (x *NVMfRemoteControllerGetResponse) GetCtrl() *NVMfRemoteController {
	if x != nil {
		return x.Ctrl
	}
	return nil
}

type NVMfRemoteControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMfRemoteControllerStatsRequest) Reset() {
	*x = NVMfRemoteControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerStatsRequest) ProtoMessage() {}

func (x *NVMfRemoteControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{11}
}

func (x *NVMfRemoteControllerStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMfRemoteControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMfRemoteControllerStatsResponse) Reset() {
	*x = NVMfRemoteControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_nvme_tcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMfRemoteControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMfRemoteControllerStatsResponse) ProtoMessage() {}

func (x *NVMfRemoteControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_nvme_tcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMfRemoteControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMfRemoteControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_backend_nvme_tcp_proto_rawDescGZIP(), []int{12}
}

func (x *NVMfRemoteControllerStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMfRemoteControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

var File_backend_nvme_tcp_proto protoreflect.FileDescriptor

var file_backend_nvme_tcp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x74,
	0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x9e, 0x03, 0x0a,
	0x14, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x64, 0x72, 0x66, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x61, 0x64, 0x72,
	0x66, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x73, 0x76, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72,
	0x73, 0x76, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x71, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x64, 0x67, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x64,
	0x67, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x64, 0x67, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x49, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x62, 0x0a,
	0x22, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x63, 0x74, 0x72,
	0x6c, 0x22, 0x25, 0x0a, 0x23, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x25, 0x4e, 0x56, 0x4d, 0x66,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x20, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x23, 0x0a, 0x21, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x1f, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x20, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x63,
	0x74, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x22, 0x30, 0x0a, 0x1e, 0x4e, 0x56, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x1f, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x22, 0x32, 0x0a, 0x20,
	0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x49, 0x0a, 0x21, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0x8f, 0x01, 0x0a, 0x11,
	0x4e, 0x76, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x43, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x43, 0x49, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x52, 0x44, 0x4d, 0x41, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x56,
	0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x83, 0x01,
	0x0a, 0x11, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46,
	0x41, 0x4d, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x4d,
	0x46, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49,
	0x42, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x46, 0x5f, 0x41, 0x44, 0x52, 0x46,
	0x41, 0x4d, 0x5f, 0x46, 0x43, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x56, 0x4d, 0x46, 0x5f,
	0x41, 0x44, 0x52, 0x46, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0d, 0x4e, 0x76, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x50, 0x49,
	0x4f, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x50, 0x49, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x4d, 0x50, 0x49, 0x4f,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x32, 0xf7, 0x06, 0x0a,
	0x1b, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x1b, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x99, 0x01, 0x0a, 0x1e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19,
	0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x4e, 0x56, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x4e, 0x56,
	0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_backend_nvme_tcp_proto_rawDescOnce sync.Once
	file_backend_nvme_tcp_proto_rawDescData = file_backend_nvme_tcp_proto_rawDesc
)

func file_backend_nvme_tcp_proto_rawDescGZIP() []byte {
	file_backend_nvme_tcp_proto_rawDescOnce.Do(func() {
		file_backend_nvme_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_nvme_tcp_proto_rawDescData)
	})
	return file_backend_nvme_tcp_proto_rawDescData
}

var file_backend_nvme_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_backend_nvme_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_backend_nvme_tcp_proto_goTypes = []interface{}{
	(NvmeTransportType)(0),                         // 0: opi_api.storage.v1.NvmeTransportType
	(NvmeAddressFamily)(0),                         // 1: opi_api.storage.v1.NvmeAddressFamily
	(NvmeMultipath)(0),                             // 2: opi_api.storage.v1.NvmeMultipath
	(*NVMfRemoteController)(nil),                   // 3: opi_api.storage.v1.NVMfRemoteController
	(*NVMfRemoteControllerConnectRequest)(nil),     // 4: opi_api.storage.v1.NVMfRemoteControllerConnectRequest
	(*NVMfRemoteControllerConnectResponse)(nil),    // 5: opi_api.storage.v1.NVMfRemoteControllerConnectResponse
	(*NVMfRemoteControllerDisconnectRequest)(nil),  // 6: opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest
	(*NVMfRemoteControllerDisconnectResponse)(nil), // 7: opi_api.storage.v1.NVMfRemoteControllerDisconnectResponse
	(*NVMfRemoteControllerResetRequest)(nil),       // 8: opi_api.storage.v1.NVMfRemoteControllerResetRequest
	(*NVMfRemoteControllerResetResponse)(nil),      // 9: opi_api.storage.v1.NVMfRemoteControllerResetResponse
	(*NVMfRemoteControllerListRequest)(nil),        // 10: opi_api.storage.v1.NVMfRemoteControllerListRequest
	(*NVMfRemoteControllerListResponse)(nil),       // 11: opi_api.storage.v1.NVMfRemoteControllerListResponse
	(*NVMfRemoteControllerGetRequest)(nil),         // 12: opi_api.storage.v1.NVMfRemoteControllerGetRequest
	(*NVMfRemoteControllerGetResponse)(nil),        // 13: opi_api.storage.v1.NVMfRemoteControllerGetResponse
	(*NVMfRemoteControllerStatsRequest)(nil),       // 14: opi_api.storage.v1.NVMfRemoteControllerStatsRequest
	(*NVMfRemoteControllerStatsResponse)(nil),      // 15: opi_api.storage.v1.NVMfRemoteControllerStatsResponse
}
var file_backend_nvme_tcp_proto_depIdxs = []int32{
	0,  // 0: opi_api.storage.v1.NVMfRemoteController.trtype:type_name -> opi_api.storage.v1.NvmeTransportType
	1,  // 1: opi_api.storage.v1.NVMfRemoteController.adrfam:type_name -> opi_api.storage.v1.NvmeAddressFamily
	2,  // 2: opi_api.storage.v1.NVMfRemoteController.multipath:type_name -> opi_api.storage.v1.NvmeMultipath
	3,  // 3: opi_api.storage.v1.NVMfRemoteControllerConnectRequest.ctrl:type_name -> opi_api.storage.v1.NVMfRemoteController
	3,  // 4: opi_api.storage.v1.NVMfRemoteControllerListResponse.ctrl:type_name -> opi_api.storage.v1.NVMfRemoteController
	3,  // 5: opi_api.storage.v1.NVMfRemoteControllerGetResponse.ctrl:type_name -> opi_api.storage.v1.NVMfRemoteController
	4,  // 6: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerConnect:input_type -> opi_api.storage.v1.NVMfRemoteControllerConnectRequest
	6,  // 7: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerDisconnect:input_type -> opi_api.storage.v1.NVMfRemoteControllerDisconnectRequest
	8,  // 8: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerReset:input_type -> opi_api.storage.v1.NVMfRemoteControllerResetRequest
	10, // 9: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerList:input_type -> opi_api.storage.v1.NVMfRemoteControllerListRequest
	12, // 10: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerGet:input_type -> opi_api.storage.v1.NVMfRemoteControllerGetRequest
	14, // 11: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerStats:input_type -> opi_api.storage.v1.NVMfRemoteControllerStatsRequest
	5,  // 12: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerConnect:output_type -> opi_api.storage.v1.NVMfRemoteControllerConnectResponse
	7,  // 13: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerDisconnect:output_type -> opi_api.storage.v1.NVMfRemoteControllerDisconnectResponse
	9,  // 14: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerReset:output_type -> opi_api.storage.v1.NVMfRemoteControllerResetResponse
	11, // 15: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerList:output_type -> opi_api.storage.v1.NVMfRemoteControllerListResponse
	13, // 16: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerGet:output_type -> opi_api.storage.v1.NVMfRemoteControllerGetResponse
	15, // 17: opi_api.storage.v1.NVMfRemoteControllerService.NVMfRemoteControllerStats:output_type -> opi_api.storage.v1.NVMfRemoteControllerStatsResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_backend_nvme_tcp_proto_init() }
func file_backend_nvme_tcp_proto_init() {
	if File_backend_nvme_tcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_nvme_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerDisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerDisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_nvme_tcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMfRemoteControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_nvme_tcp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_nvme_tcp_proto_goTypes,
		DependencyIndexes: file_backend_nvme_tcp_proto_depIdxs,
		EnumInfos:         file_backend_nvme_tcp_proto_enumTypes,
		MessageInfos:      file_backend_nvme_tcp_proto_msgTypes,
	}.Build()
	File_backend_nvme_tcp_proto = out.File
	file_backend_nvme_tcp_proto_rawDesc = nil
	file_backend_nvme_tcp_proto_goTypes = nil
	file_backend_nvme_tcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NVMfRemoteControllerServiceClient is the client API for NVMfRemoteControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMfRemoteControllerServiceClient interface {
	NVMfRemoteControllerConnect(ctx context.Context, in *NVMfRemoteControllerConnectRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerConnectResponse, error)
	NVMfRemoteControllerDisconnect(ctx context.Context, in *NVMfRemoteControllerDisconnectRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerDisconnectResponse, error)
	NVMfRemoteControllerReset(ctx context.Context, in *NVMfRemoteControllerResetRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerResetResponse, error)
	NVMfRemoteControllerList(ctx context.Context, in *NVMfRemoteControllerListRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerListResponse, error)
	NVMfRemoteControllerGet(ctx context.Context, in *NVMfRemoteControllerGetRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerGetResponse, error)
	NVMfRemoteControllerStats(ctx context.Context, in *NVMfRemoteControllerStatsRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerStatsResponse, error)
}

type nVMfRemoteControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMfRemoteControllerServiceClient(cc grpc.ClientConnInterface) NVMfRemoteControllerServiceClient {
	return &nVMfRemoteControllerServiceClient{cc}
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerConnect(ctx context.Context, in *NVMfRemoteControllerConnectRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerConnectResponse, error) {
	out := new(NVMfRemoteControllerConnectResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerDisconnect(ctx context.Context, in *NVMfRemoteControllerDisconnectRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerDisconnectResponse, error) {
	out := new(NVMfRemoteControllerDisconnectResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerReset(ctx context.Context, in *NVMfRemoteControllerResetRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerResetResponse, error) {
	out := new(NVMfRemoteControllerResetResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerList(ctx context.Context, in *NVMfRemoteControllerListRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerListResponse, error) {
	out := new(NVMfRemoteControllerListResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerGet(ctx context.Context, in *NVMfRemoteControllerGetRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerGetResponse, error) {
	out := new(NVMfRemoteControllerGetResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMfRemoteControllerServiceClient) NVMfRemoteControllerStats(ctx context.Context, in *NVMfRemoteControllerStatsRequest, opts ...grpc.CallOption) (*NVMfRemoteControllerStatsResponse, error) {
	out := new(NVMfRemoteControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMfRemoteControllerServiceServer is the server API for NVMfRemoteControllerService service.
type NVMfRemoteControllerServiceServer interface {
	NVMfRemoteControllerConnect(context.Context, *NVMfRemoteControllerConnectRequest) (*NVMfRemoteControllerConnectResponse, error)
	NVMfRemoteControllerDisconnect(context.Context, *NVMfRemoteControllerDisconnectRequest) (*NVMfRemoteControllerDisconnectResponse, error)
	NVMfRemoteControllerReset(context.Context, *NVMfRemoteControllerResetRequest) (*NVMfRemoteControllerResetResponse, error)
	NVMfRemoteControllerList(context.Context, *NVMfRemoteControllerListRequest) (*NVMfRemoteControllerListResponse, error)
	NVMfRemoteControllerGet(context.Context, *NVMfRemoteControllerGetRequest) (*NVMfRemoteControllerGetResponse, error)
	NVMfRemoteControllerStats(context.Context, *NVMfRemoteControllerStatsRequest) (*NVMfRemoteControllerStatsResponse, error)
}

// UnimplementedNVMfRemoteControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMfRemoteControllerServiceServer struct {
}

func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerConnect(context.Context, *NVMfRemoteControllerConnectRequest) (*NVMfRemoteControllerConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerConnect not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerDisconnect(context.Context, *NVMfRemoteControllerDisconnectRequest) (*NVMfRemoteControllerDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerDisconnect not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerReset(context.Context, *NVMfRemoteControllerResetRequest) (*NVMfRemoteControllerResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerReset not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerList(context.Context, *NVMfRemoteControllerListRequest) (*NVMfRemoteControllerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerList not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerGet(context.Context, *NVMfRemoteControllerGetRequest) (*NVMfRemoteControllerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerGet not implemented")
}
func (*UnimplementedNVMfRemoteControllerServiceServer) NVMfRemoteControllerStats(context.Context, *NVMfRemoteControllerStatsRequest) (*NVMfRemoteControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMfRemoteControllerStats not implemented")
}

func RegisterNVMfRemoteControllerServiceServer(s *grpc.Server, srv NVMfRemoteControllerServiceServer) {
	s.RegisterService(&_NVMfRemoteControllerService_serviceDesc, srv)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerConnect(ctx, req.(*NVMfRemoteControllerConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerDisconnect(ctx, req.(*NVMfRemoteControllerDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerReset(ctx, req.(*NVMfRemoteControllerResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerList(ctx, req.(*NVMfRemoteControllerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerGet(ctx, req.(*NVMfRemoteControllerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMfRemoteControllerService_NVMfRemoteControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMfRemoteControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.NVMfRemoteControllerService/NVMfRemoteControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMfRemoteControllerServiceServer).NVMfRemoteControllerStats(ctx, req.(*NVMfRemoteControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMfRemoteControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.NVMfRemoteControllerService",
	HandlerType: (*NVMfRemoteControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMfRemoteControllerConnect",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerConnect_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerDisconnect",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerDisconnect_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerReset",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerReset_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerList",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerList_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerGet",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerGet_Handler,
		},
		{
			MethodName: "NVMfRemoteControllerStats",
			Handler:    _NVMfRemoteControllerService_NVMfRemoteControllerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_nvme_tcp.proto",
}
