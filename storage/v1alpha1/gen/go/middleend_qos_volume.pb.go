// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Intel Corporation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: middleend_qos_volume.proto

package _go

import (
	context "context"
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QosVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Middleend/backend volume to apply QoS on
	VolumeId *_go.ObjectKey `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	MinLimit *QosLimit      `protobuf:"bytes,3,opt,name=min_limit,json=minLimit,proto3" json:"min_limit,omitempty"`
	MaxLimit *QosLimit      `protobuf:"bytes,4,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
}

func (x *QosVolume) Reset() {
	*x = QosVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosVolume) ProtoMessage() {}

func (x *QosVolume) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosVolume.ProtoReflect.Descriptor instead.
func (*QosVolume) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{0}
}

func (x *QosVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QosVolume) GetVolumeId() *_go.ObjectKey {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (x *QosVolume) GetMinLimit() *QosLimit {
	if x != nil {
		return x.MinLimit
	}
	return nil
}

func (x *QosVolume) GetMaxLimit() *QosLimit {
	if x != nil {
		return x.MaxLimit
	}
	return nil
}

type CreateQosVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosVolume   *QosVolume `protobuf:"bytes,2,opt,name=qos_volume,json=qosVolume,proto3" json:"qos_volume,omitempty"`
	QosVolumeId string     `protobuf:"bytes,3,opt,name=qos_volume_id,json=qosVolumeId,proto3" json:"qos_volume_id,omitempty"`
}

func (x *CreateQosVolumeRequest) Reset() {
	*x = CreateQosVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQosVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQosVolumeRequest) ProtoMessage() {}

func (x *CreateQosVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQosVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateQosVolumeRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{1}
}

func (x *CreateQosVolumeRequest) GetQosVolume() *QosVolume {
	if x != nil {
		return x.QosVolume
	}
	return nil
}

func (x *CreateQosVolumeRequest) GetQosVolumeId() string {
	if x != nil {
		return x.QosVolumeId
	}
	return ""
}

type DeleteQosVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteQosVolumeRequest) Reset() {
	*x = DeleteQosVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQosVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQosVolumeRequest) ProtoMessage() {}

func (x *DeleteQosVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQosVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteQosVolumeRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteQosVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteQosVolumeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateQosVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	QosVolume *QosVolume `protobuf:"bytes,1,opt,name=qos_volume,json=qosVolume,proto3" json:"qos_volume,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateQosVolumeRequest) Reset() {
	*x = UpdateQosVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQosVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQosVolumeRequest) ProtoMessage() {}

func (x *UpdateQosVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQosVolumeRequest.ProtoReflect.Descriptor instead.
func (*UpdateQosVolumeRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateQosVolumeRequest) GetQosVolume() *QosVolume {
	if x != nil {
		return x.QosVolume
	}
	return nil
}

func (x *UpdateQosVolumeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateQosVolumeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type ListQosVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListQosVolumesRequest) Reset() {
	*x = ListQosVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQosVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQosVolumesRequest) ProtoMessage() {}

func (x *ListQosVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQosVolumesRequest.ProtoReflect.Descriptor instead.
func (*ListQosVolumesRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{4}
}

func (x *ListQosVolumesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListQosVolumesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQosVolumesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListQosVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosVolumes    []*QosVolume `protobuf:"bytes,1,rep,name=qos_volumes,json=qosVolumes,proto3" json:"qos_volumes,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListQosVolumesResponse) Reset() {
	*x = ListQosVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQosVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQosVolumesResponse) ProtoMessage() {}

func (x *ListQosVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQosVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListQosVolumesResponse) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{5}
}

func (x *ListQosVolumesResponse) GetQosVolumes() []*QosVolume {
	if x != nil {
		return x.QosVolumes
	}
	return nil
}

func (x *ListQosVolumesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetQosVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetQosVolumeRequest) Reset() {
	*x = GetQosVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosVolumeRequest) ProtoMessage() {}

func (x *GetQosVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetQosVolumeRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{6}
}

func (x *GetQosVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QosVolumeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId *_go.ObjectKey `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *QosVolumeStatsRequest) Reset() {
	*x = QosVolumeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosVolumeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosVolumeStatsRequest) ProtoMessage() {}

func (x *QosVolumeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosVolumeStatsRequest.ProtoReflect.Descriptor instead.
func (*QosVolumeStatsRequest) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{7}
}

func (x *QosVolumeStatsRequest) GetVolumeId() *_go.ObjectKey {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

type QosVolumeStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats *VolumeStats   `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *QosVolumeStatsResponse) Reset() {
	*x = QosVolumeStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleend_qos_volume_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosVolumeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosVolumeStatsResponse) ProtoMessage() {}

func (x *QosVolumeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_middleend_qos_volume_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosVolumeStatsResponse.ProtoReflect.Descriptor instead.
func (*QosVolumeStatsResponse) Descriptor() ([]byte, []int) {
	return file_middleend_qos_volume_proto_rawDescGZIP(), []int{8}
}

func (x *QosVolumeStatsResponse) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QosVolumeStatsResponse) GetStats() *VolumeStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_middleend_qos_volume_proto protoreflect.FileDescriptor

var file_middleend_qos_volume_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x65, 0x6e, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x0f, 0x6f, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x37, 0xea, 0x41, 0x34, 0x0a, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x7d, 0x22, 0x7f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x71,
	0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x71, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x77, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb8, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09, 0x71, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x51, 0x6f, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52,
	0x0a, 0x15, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x32, 0xf6, 0x06, 0x0a, 0x19, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x65, 0x6e, 0x64, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x3a, 0x0a, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0xda,
	0x41, 0x18, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2c, 0x71, 0x6f, 0x73,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x71, 0x6f, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x7d, 0x2f, 0x7b, 0x71, 0x6f, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x32, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x3a, 0x0a, 0x71,
	0x6f, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0xda, 0x41, 0x16, 0x71, 0x6f, 0x73, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x7d, 0x2f, 0x7b, 0x71, 0x6f, 0x73,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x69, 0x0a, 0x0e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66, 0x0a, 0x12, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x65, 0x6e, 0x64, 0x51, 0x6f, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_middleend_qos_volume_proto_rawDescOnce sync.Once
	file_middleend_qos_volume_proto_rawDescData = file_middleend_qos_volume_proto_rawDesc
)

func file_middleend_qos_volume_proto_rawDescGZIP() []byte {
	file_middleend_qos_volume_proto_rawDescOnce.Do(func() {
		file_middleend_qos_volume_proto_rawDescData = protoimpl.X.CompressGZIP(file_middleend_qos_volume_proto_rawDescData)
	})
	return file_middleend_qos_volume_proto_rawDescData
}

var file_middleend_qos_volume_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_middleend_qos_volume_proto_goTypes = []interface{}{
	(*QosVolume)(nil),              // 0: opi_api.storage.v1.QosVolume
	(*CreateQosVolumeRequest)(nil), // 1: opi_api.storage.v1.CreateQosVolumeRequest
	(*DeleteQosVolumeRequest)(nil), // 2: opi_api.storage.v1.DeleteQosVolumeRequest
	(*UpdateQosVolumeRequest)(nil), // 3: opi_api.storage.v1.UpdateQosVolumeRequest
	(*ListQosVolumesRequest)(nil),  // 4: opi_api.storage.v1.ListQosVolumesRequest
	(*ListQosVolumesResponse)(nil), // 5: opi_api.storage.v1.ListQosVolumesResponse
	(*GetQosVolumeRequest)(nil),    // 6: opi_api.storage.v1.GetQosVolumeRequest
	(*QosVolumeStatsRequest)(nil),  // 7: opi_api.storage.v1.QosVolumeStatsRequest
	(*QosVolumeStatsResponse)(nil), // 8: opi_api.storage.v1.QosVolumeStatsResponse
	(*_go.ObjectKey)(nil),          // 9: opi_api.common.v1.ObjectKey
	(*QosLimit)(nil),               // 10: opi_api.storage.v1.QosLimit
	(*fieldmaskpb.FieldMask)(nil),  // 11: google.protobuf.FieldMask
	(*VolumeStats)(nil),            // 12: opi_api.storage.v1.VolumeStats
	(*emptypb.Empty)(nil),          // 13: google.protobuf.Empty
}
var file_middleend_qos_volume_proto_depIdxs = []int32{
	9,  // 0: opi_api.storage.v1.QosVolume.volume_id:type_name -> opi_api.common.v1.ObjectKey
	10, // 1: opi_api.storage.v1.QosVolume.min_limit:type_name -> opi_api.storage.v1.QosLimit
	10, // 2: opi_api.storage.v1.QosVolume.max_limit:type_name -> opi_api.storage.v1.QosLimit
	0,  // 3: opi_api.storage.v1.CreateQosVolumeRequest.qos_volume:type_name -> opi_api.storage.v1.QosVolume
	0,  // 4: opi_api.storage.v1.UpdateQosVolumeRequest.qos_volume:type_name -> opi_api.storage.v1.QosVolume
	11, // 5: opi_api.storage.v1.UpdateQosVolumeRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 6: opi_api.storage.v1.ListQosVolumesResponse.qos_volumes:type_name -> opi_api.storage.v1.QosVolume
	9,  // 7: opi_api.storage.v1.QosVolumeStatsRequest.volume_id:type_name -> opi_api.common.v1.ObjectKey
	9,  // 8: opi_api.storage.v1.QosVolumeStatsResponse.id:type_name -> opi_api.common.v1.ObjectKey
	12, // 9: opi_api.storage.v1.QosVolumeStatsResponse.stats:type_name -> opi_api.storage.v1.VolumeStats
	1,  // 10: opi_api.storage.v1.MiddleendQosVolumeService.CreateQosVolume:input_type -> opi_api.storage.v1.CreateQosVolumeRequest
	2,  // 11: opi_api.storage.v1.MiddleendQosVolumeService.DeleteQosVolume:input_type -> opi_api.storage.v1.DeleteQosVolumeRequest
	3,  // 12: opi_api.storage.v1.MiddleendQosVolumeService.UpdateQosVolume:input_type -> opi_api.storage.v1.UpdateQosVolumeRequest
	4,  // 13: opi_api.storage.v1.MiddleendQosVolumeService.ListQosVolumes:input_type -> opi_api.storage.v1.ListQosVolumesRequest
	6,  // 14: opi_api.storage.v1.MiddleendQosVolumeService.GetQosVolume:input_type -> opi_api.storage.v1.GetQosVolumeRequest
	7,  // 15: opi_api.storage.v1.MiddleendQosVolumeService.QosVolumeStats:input_type -> opi_api.storage.v1.QosVolumeStatsRequest
	0,  // 16: opi_api.storage.v1.MiddleendQosVolumeService.CreateQosVolume:output_type -> opi_api.storage.v1.QosVolume
	13, // 17: opi_api.storage.v1.MiddleendQosVolumeService.DeleteQosVolume:output_type -> google.protobuf.Empty
	0,  // 18: opi_api.storage.v1.MiddleendQosVolumeService.UpdateQosVolume:output_type -> opi_api.storage.v1.QosVolume
	5,  // 19: opi_api.storage.v1.MiddleendQosVolumeService.ListQosVolumes:output_type -> opi_api.storage.v1.ListQosVolumesResponse
	0,  // 20: opi_api.storage.v1.MiddleendQosVolumeService.GetQosVolume:output_type -> opi_api.storage.v1.QosVolume
	8,  // 21: opi_api.storage.v1.MiddleendQosVolumeService.QosVolumeStats:output_type -> opi_api.storage.v1.QosVolumeStatsResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_middleend_qos_volume_proto_init() }
func file_middleend_qos_volume_proto_init() {
	if File_middleend_qos_volume_proto != nil {
		return
	}
	file_opicommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_middleend_qos_volume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQosVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQosVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQosVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQosVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQosVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosVolumeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleend_qos_volume_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosVolumeStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_middleend_qos_volume_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_middleend_qos_volume_proto_goTypes,
		DependencyIndexes: file_middleend_qos_volume_proto_depIdxs,
		MessageInfos:      file_middleend_qos_volume_proto_msgTypes,
	}.Build()
	File_middleend_qos_volume_proto = out.File
	file_middleend_qos_volume_proto_rawDesc = nil
	file_middleend_qos_volume_proto_goTypes = nil
	file_middleend_qos_volume_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MiddleendQosVolumeServiceClient is the client API for MiddleendQosVolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MiddleendQosVolumeServiceClient interface {
	CreateQosVolume(ctx context.Context, in *CreateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	DeleteQosVolume(ctx context.Context, in *DeleteQosVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateQosVolume(ctx context.Context, in *UpdateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	ListQosVolumes(ctx context.Context, in *ListQosVolumesRequest, opts ...grpc.CallOption) (*ListQosVolumesResponse, error)
	GetQosVolume(ctx context.Context, in *GetQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	QosVolumeStats(ctx context.Context, in *QosVolumeStatsRequest, opts ...grpc.CallOption) (*QosVolumeStatsResponse, error)
}

type middleendQosVolumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleendQosVolumeServiceClient(cc grpc.ClientConnInterface) MiddleendQosVolumeServiceClient {
	return &middleendQosVolumeServiceClient{cc}
}

func (c *middleendQosVolumeServiceClient) CreateQosVolume(ctx context.Context, in *CreateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/CreateQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) DeleteQosVolume(ctx context.Context, in *DeleteQosVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/DeleteQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) UpdateQosVolume(ctx context.Context, in *UpdateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/UpdateQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) ListQosVolumes(ctx context.Context, in *ListQosVolumesRequest, opts ...grpc.CallOption) (*ListQosVolumesResponse, error) {
	out := new(ListQosVolumesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/ListQosVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) GetQosVolume(ctx context.Context, in *GetQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/GetQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) QosVolumeStats(ctx context.Context, in *QosVolumeStatsRequest, opts ...grpc.CallOption) (*QosVolumeStatsResponse, error) {
	out := new(QosVolumeStatsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/QosVolumeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleendQosVolumeServiceServer is the server API for MiddleendQosVolumeService service.
type MiddleendQosVolumeServiceServer interface {
	CreateQosVolume(context.Context, *CreateQosVolumeRequest) (*QosVolume, error)
	DeleteQosVolume(context.Context, *DeleteQosVolumeRequest) (*emptypb.Empty, error)
	UpdateQosVolume(context.Context, *UpdateQosVolumeRequest) (*QosVolume, error)
	ListQosVolumes(context.Context, *ListQosVolumesRequest) (*ListQosVolumesResponse, error)
	GetQosVolume(context.Context, *GetQosVolumeRequest) (*QosVolume, error)
	QosVolumeStats(context.Context, *QosVolumeStatsRequest) (*QosVolumeStatsResponse, error)
}

// UnimplementedMiddleendQosVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMiddleendQosVolumeServiceServer struct {
}

func (*UnimplementedMiddleendQosVolumeServiceServer) CreateQosVolume(context.Context, *CreateQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQosVolume not implemented")
}
func (*UnimplementedMiddleendQosVolumeServiceServer) DeleteQosVolume(context.Context, *DeleteQosVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQosVolume not implemented")
}
func (*UnimplementedMiddleendQosVolumeServiceServer) UpdateQosVolume(context.Context, *UpdateQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQosVolume not implemented")
}
func (*UnimplementedMiddleendQosVolumeServiceServer) ListQosVolumes(context.Context, *ListQosVolumesRequest) (*ListQosVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQosVolumes not implemented")
}
func (*UnimplementedMiddleendQosVolumeServiceServer) GetQosVolume(context.Context, *GetQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQosVolume not implemented")
}
func (*UnimplementedMiddleendQosVolumeServiceServer) QosVolumeStats(context.Context, *QosVolumeStatsRequest) (*QosVolumeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QosVolumeStats not implemented")
}

func RegisterMiddleendQosVolumeServiceServer(s *grpc.Server, srv MiddleendQosVolumeServiceServer) {
	s.RegisterService(&_MiddleendQosVolumeService_serviceDesc, srv)
}

func _MiddleendQosVolumeService_CreateQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).CreateQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/CreateQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).CreateQosVolume(ctx, req.(*CreateQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_DeleteQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).DeleteQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/DeleteQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).DeleteQosVolume(ctx, req.(*DeleteQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_UpdateQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).UpdateQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/UpdateQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).UpdateQosVolume(ctx, req.(*UpdateQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_ListQosVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQosVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).ListQosVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/ListQosVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).ListQosVolumes(ctx, req.(*ListQosVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_GetQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).GetQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/GetQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).GetQosVolume(ctx, req.(*GetQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_QosVolumeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QosVolumeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).QosVolumeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/QosVolumeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).QosVolumeStats(ctx, req.(*QosVolumeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MiddleendQosVolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.MiddleendQosVolumeService",
	HandlerType: (*MiddleendQosVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQosVolume",
			Handler:    _MiddleendQosVolumeService_CreateQosVolume_Handler,
		},
		{
			MethodName: "DeleteQosVolume",
			Handler:    _MiddleendQosVolumeService_DeleteQosVolume_Handler,
		},
		{
			MethodName: "UpdateQosVolume",
			Handler:    _MiddleendQosVolumeService_UpdateQosVolume_Handler,
		},
		{
			MethodName: "ListQosVolumes",
			Handler:    _MiddleendQosVolumeService_ListQosVolumes_Handler,
		},
		{
			MethodName: "GetQosVolume",
			Handler:    _MiddleendQosVolumeService_GetQosVolume_Handler,
		},
		{
			MethodName: "QosVolumeStats",
			Handler:    _MiddleendQosVolumeService_QosVolumeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleend_qos_volume.proto",
}
