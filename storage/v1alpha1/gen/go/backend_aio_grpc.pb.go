// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: backend_aio.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AioVolumeServiceClient is the client API for AioVolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AioVolumeServiceClient interface {
	// Create an Aio Volume
	CreateAioVolume(ctx context.Context, in *CreateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	// Delete an Aio Volume
	DeleteAioVolume(ctx context.Context, in *DeleteAioVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an Aio Volume
	UpdateAioVolume(ctx context.Context, in *UpdateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	// List Aio Volumes
	ListAioVolumes(ctx context.Context, in *ListAioVolumesRequest, opts ...grpc.CallOption) (*ListAioVolumesResponse, error)
	// Get an Aio Volume
	GetAioVolume(ctx context.Context, in *GetAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error)
	// Get an Aio Volume statistics
	StatsAioVolume(ctx context.Context, in *StatsAioVolumeRequest, opts ...grpc.CallOption) (*StatsAioVolumeResponse, error)
}

type aioVolumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAioVolumeServiceClient(cc grpc.ClientConnInterface) AioVolumeServiceClient {
	return &aioVolumeServiceClient{cc}
}

func (c *aioVolumeServiceClient) CreateAioVolume(ctx context.Context, in *CreateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/CreateAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) DeleteAioVolume(ctx context.Context, in *DeleteAioVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/DeleteAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) UpdateAioVolume(ctx context.Context, in *UpdateAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/UpdateAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) ListAioVolumes(ctx context.Context, in *ListAioVolumesRequest, opts ...grpc.CallOption) (*ListAioVolumesResponse, error) {
	out := new(ListAioVolumesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/ListAioVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) GetAioVolume(ctx context.Context, in *GetAioVolumeRequest, opts ...grpc.CallOption) (*AioVolume, error) {
	out := new(AioVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/GetAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aioVolumeServiceClient) StatsAioVolume(ctx context.Context, in *StatsAioVolumeRequest, opts ...grpc.CallOption) (*StatsAioVolumeResponse, error) {
	out := new(StatsAioVolumeResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.AioVolumeService/StatsAioVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AioVolumeServiceServer is the server API for AioVolumeService service.
// All implementations should embed UnimplementedAioVolumeServiceServer
// for forward compatibility
type AioVolumeServiceServer interface {
	// Create an Aio Volume
	CreateAioVolume(context.Context, *CreateAioVolumeRequest) (*AioVolume, error)
	// Delete an Aio Volume
	DeleteAioVolume(context.Context, *DeleteAioVolumeRequest) (*emptypb.Empty, error)
	// Update an Aio Volume
	UpdateAioVolume(context.Context, *UpdateAioVolumeRequest) (*AioVolume, error)
	// List Aio Volumes
	ListAioVolumes(context.Context, *ListAioVolumesRequest) (*ListAioVolumesResponse, error)
	// Get an Aio Volume
	GetAioVolume(context.Context, *GetAioVolumeRequest) (*AioVolume, error)
	// Get an Aio Volume statistics
	StatsAioVolume(context.Context, *StatsAioVolumeRequest) (*StatsAioVolumeResponse, error)
}

// UnimplementedAioVolumeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAioVolumeServiceServer struct {
}

func (UnimplementedAioVolumeServiceServer) CreateAioVolume(context.Context, *CreateAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAioVolume not implemented")
}
func (UnimplementedAioVolumeServiceServer) DeleteAioVolume(context.Context, *DeleteAioVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAioVolume not implemented")
}
func (UnimplementedAioVolumeServiceServer) UpdateAioVolume(context.Context, *UpdateAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAioVolume not implemented")
}
func (UnimplementedAioVolumeServiceServer) ListAioVolumes(context.Context, *ListAioVolumesRequest) (*ListAioVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAioVolumes not implemented")
}
func (UnimplementedAioVolumeServiceServer) GetAioVolume(context.Context, *GetAioVolumeRequest) (*AioVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAioVolume not implemented")
}
func (UnimplementedAioVolumeServiceServer) StatsAioVolume(context.Context, *StatsAioVolumeRequest) (*StatsAioVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsAioVolume not implemented")
}

// UnsafeAioVolumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AioVolumeServiceServer will
// result in compilation errors.
type UnsafeAioVolumeServiceServer interface {
	mustEmbedUnimplementedAioVolumeServiceServer()
}

func RegisterAioVolumeServiceServer(s grpc.ServiceRegistrar, srv AioVolumeServiceServer) {
	s.RegisterService(&AioVolumeService_ServiceDesc, srv)
}

func _AioVolumeService_CreateAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).CreateAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/CreateAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).CreateAioVolume(ctx, req.(*CreateAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_DeleteAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).DeleteAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/DeleteAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).DeleteAioVolume(ctx, req.(*DeleteAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_UpdateAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).UpdateAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/UpdateAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).UpdateAioVolume(ctx, req.(*UpdateAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_ListAioVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAioVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).ListAioVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/ListAioVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).ListAioVolumes(ctx, req.(*ListAioVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_GetAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).GetAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/GetAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).GetAioVolume(ctx, req.(*GetAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AioVolumeService_StatsAioVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsAioVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AioVolumeServiceServer).StatsAioVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.AioVolumeService/StatsAioVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AioVolumeServiceServer).StatsAioVolume(ctx, req.(*StatsAioVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AioVolumeService_ServiceDesc is the grpc.ServiceDesc for AioVolumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AioVolumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.AioVolumeService",
	HandlerType: (*AioVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAioVolume",
			Handler:    _AioVolumeService_CreateAioVolume_Handler,
		},
		{
			MethodName: "DeleteAioVolume",
			Handler:    _AioVolumeService_DeleteAioVolume_Handler,
		},
		{
			MethodName: "UpdateAioVolume",
			Handler:    _AioVolumeService_UpdateAioVolume_Handler,
		},
		{
			MethodName: "ListAioVolumes",
			Handler:    _AioVolumeService_ListAioVolumes_Handler,
		},
		{
			MethodName: "GetAioVolume",
			Handler:    _AioVolumeService_GetAioVolume_Handler,
		},
		{
			MethodName: "StatsAioVolume",
			Handler:    _AioVolumeService_StatsAioVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_aio.proto",
}
