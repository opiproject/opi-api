// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: middleend_qos_volume.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddleendQosVolumeServiceClient is the client API for MiddleendQosVolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddleendQosVolumeServiceClient interface {
	// Create an Qos Volume
	CreateQosVolume(ctx context.Context, in *CreateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	// Delete an Qos Volume
	DeleteQosVolume(ctx context.Context, in *DeleteQosVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an Qos Volume
	UpdateQosVolume(ctx context.Context, in *UpdateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	// List Qos Volumes
	ListQosVolumes(ctx context.Context, in *ListQosVolumesRequest, opts ...grpc.CallOption) (*ListQosVolumesResponse, error)
	// Get an Qos Volume
	GetQosVolume(ctx context.Context, in *GetQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error)
	// Get an Qos Volume statistics
	StatsQosVolume(ctx context.Context, in *StatsQosVolumeRequest, opts ...grpc.CallOption) (*StatsQosVolumeResponse, error)
}

type middleendQosVolumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleendQosVolumeServiceClient(cc grpc.ClientConnInterface) MiddleendQosVolumeServiceClient {
	return &middleendQosVolumeServiceClient{cc}
}

func (c *middleendQosVolumeServiceClient) CreateQosVolume(ctx context.Context, in *CreateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/CreateQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) DeleteQosVolume(ctx context.Context, in *DeleteQosVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/DeleteQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) UpdateQosVolume(ctx context.Context, in *UpdateQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/UpdateQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) ListQosVolumes(ctx context.Context, in *ListQosVolumesRequest, opts ...grpc.CallOption) (*ListQosVolumesResponse, error) {
	out := new(ListQosVolumesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/ListQosVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) GetQosVolume(ctx context.Context, in *GetQosVolumeRequest, opts ...grpc.CallOption) (*QosVolume, error) {
	out := new(QosVolume)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/GetQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleendQosVolumeServiceClient) StatsQosVolume(ctx context.Context, in *StatsQosVolumeRequest, opts ...grpc.CallOption) (*StatsQosVolumeResponse, error) {
	out := new(StatsQosVolumeResponse)
	err := c.cc.Invoke(ctx, "/opi_api.storage.v1.MiddleendQosVolumeService/StatsQosVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleendQosVolumeServiceServer is the server API for MiddleendQosVolumeService service.
// All implementations should embed UnimplementedMiddleendQosVolumeServiceServer
// for forward compatibility
type MiddleendQosVolumeServiceServer interface {
	// Create an Qos Volume
	CreateQosVolume(context.Context, *CreateQosVolumeRequest) (*QosVolume, error)
	// Delete an Qos Volume
	DeleteQosVolume(context.Context, *DeleteQosVolumeRequest) (*emptypb.Empty, error)
	// Update an Qos Volume
	UpdateQosVolume(context.Context, *UpdateQosVolumeRequest) (*QosVolume, error)
	// List Qos Volumes
	ListQosVolumes(context.Context, *ListQosVolumesRequest) (*ListQosVolumesResponse, error)
	// Get an Qos Volume
	GetQosVolume(context.Context, *GetQosVolumeRequest) (*QosVolume, error)
	// Get an Qos Volume statistics
	StatsQosVolume(context.Context, *StatsQosVolumeRequest) (*StatsQosVolumeResponse, error)
}

// UnimplementedMiddleendQosVolumeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMiddleendQosVolumeServiceServer struct {
}

func (UnimplementedMiddleendQosVolumeServiceServer) CreateQosVolume(context.Context, *CreateQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQosVolume not implemented")
}
func (UnimplementedMiddleendQosVolumeServiceServer) DeleteQosVolume(context.Context, *DeleteQosVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQosVolume not implemented")
}
func (UnimplementedMiddleendQosVolumeServiceServer) UpdateQosVolume(context.Context, *UpdateQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQosVolume not implemented")
}
func (UnimplementedMiddleendQosVolumeServiceServer) ListQosVolumes(context.Context, *ListQosVolumesRequest) (*ListQosVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQosVolumes not implemented")
}
func (UnimplementedMiddleendQosVolumeServiceServer) GetQosVolume(context.Context, *GetQosVolumeRequest) (*QosVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQosVolume not implemented")
}
func (UnimplementedMiddleendQosVolumeServiceServer) StatsQosVolume(context.Context, *StatsQosVolumeRequest) (*StatsQosVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsQosVolume not implemented")
}

// UnsafeMiddleendQosVolumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddleendQosVolumeServiceServer will
// result in compilation errors.
type UnsafeMiddleendQosVolumeServiceServer interface {
	mustEmbedUnimplementedMiddleendQosVolumeServiceServer()
}

func RegisterMiddleendQosVolumeServiceServer(s grpc.ServiceRegistrar, srv MiddleendQosVolumeServiceServer) {
	s.RegisterService(&MiddleendQosVolumeService_ServiceDesc, srv)
}

func _MiddleendQosVolumeService_CreateQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).CreateQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/CreateQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).CreateQosVolume(ctx, req.(*CreateQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_DeleteQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).DeleteQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/DeleteQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).DeleteQosVolume(ctx, req.(*DeleteQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_UpdateQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).UpdateQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/UpdateQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).UpdateQosVolume(ctx, req.(*UpdateQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_ListQosVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQosVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).ListQosVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/ListQosVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).ListQosVolumes(ctx, req.(*ListQosVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_GetQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).GetQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/GetQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).GetQosVolume(ctx, req.(*GetQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleendQosVolumeService_StatsQosVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsQosVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleendQosVolumeServiceServer).StatsQosVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.storage.v1.MiddleendQosVolumeService/StatsQosVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleendQosVolumeServiceServer).StatsQosVolume(ctx, req.(*StatsQosVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiddleendQosVolumeService_ServiceDesc is the grpc.ServiceDesc for MiddleendQosVolumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiddleendQosVolumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.storage.v1.MiddleendQosVolumeService",
	HandlerType: (*MiddleendQosVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQosVolume",
			Handler:    _MiddleendQosVolumeService_CreateQosVolume_Handler,
		},
		{
			MethodName: "DeleteQosVolume",
			Handler:    _MiddleendQosVolumeService_DeleteQosVolume_Handler,
		},
		{
			MethodName: "UpdateQosVolume",
			Handler:    _MiddleendQosVolumeService_UpdateQosVolume_Handler,
		},
		{
			MethodName: "ListQosVolumes",
			Handler:    _MiddleendQosVolumeService_ListQosVolumes_Handler,
		},
		{
			MethodName: "GetQosVolume",
			Handler:    _MiddleendQosVolumeService_GetQosVolume_Handler,
		},
		{
			MethodName: "StatsQosVolume",
			Handler:    _MiddleendQosVolumeService_StatsQosVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleend_qos_volume.proto",
}
