// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_nvme_pcie.proto

package opi_api.storage.v1;

public interface NvmeControllerSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.NvmeControllerSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * name is an opaque object handle that is not user settable.
   * name will be returned with created object
   * user can only set {resource}_id on the Create request object
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name is an opaque object handle that is not user settable.
   * name will be returned with created object
   * user can only set {resource}_id on the Create request object
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * subsystem controller id range: 0 to 65535.
   * must not be reused under the same subsystem
   * </pre>
   *
   * <code>int32 nvme_controller_id = 2;</code>
   * @return The nvmeControllerId.
   */
  int getNvmeControllerId();

  /**
   * <pre>
   * subsystem information
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 3;</code>
   * @return Whether the subsystemId field is set.
   */
  boolean hasSubsystemId();
  /**
   * <pre>
   * subsystem information
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 3;</code>
   * @return The subsystemId.
   */
  opi_api.common.v1.ObjectKey getSubsystemId();
  /**
   * <pre>
   * subsystem information
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 3;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getSubsystemIdOrBuilder();

  /**
   * <pre>
   * xPU's PCI ID for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 4;</code>
   * @return Whether the pcieId field is set.
   */
  boolean hasPcieId();
  /**
   * <pre>
   * xPU's PCI ID for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 4;</code>
   * @return The pcieId.
   */
  opi_api.storage.v1.PciEndpoint getPcieId();
  /**
   * <pre>
   * xPU's PCI ID for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 4;</code>
   */
  opi_api.storage.v1.PciEndpointOrBuilder getPcieIdOrBuilder();

  /**
   * <pre>
   * maximum number of host submission queues allowed.
   * If not set, the xPU will provide a default.
   * </pre>
   *
   * <code>int32 max_nsq = 5;</code>
   * @return The maxNsq.
   */
  int getMaxNsq();

  /**
   * <pre>
   * maximum number of host completion queues allowed.
   * If not set, the xPU will provide a default.
   * </pre>
   *
   * <code>int32 max_ncq = 6;</code>
   * @return The maxNcq.
   */
  int getMaxNcq();

  /**
   * <pre>
   * maximum number of submission queue entries per submission queue, as a power of 2.
   * default value as per spec is 6
   * </pre>
   *
   * <code>int32 sqes = 7;</code>
   * @return The sqes.
   */
  int getSqes();

  /**
   * <pre>
   * maximum number of completion queue entries per completion queue, as a power of 2.
   * default value as per spec is 4
   * </pre>
   *
   * <code>int32 cqes = 8;</code>
   * @return The cqes.
   */
  int getCqes();

  /**
   * <pre>
   * maximum Number of namespaces that will be provisioned under
   * the controller.
   * </pre>
   *
   * <code>int32 max_namespaces = 9;</code>
   * @return The maxNamespaces.
   */
  int getMaxNamespaces();

  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10;</code>
   * @return Whether the minLimit field is set.
   */
  boolean hasMinLimit();
  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10;</code>
   * @return The minLimit.
   */
  opi_api.storage.v1.QosLimit getMinLimit();
  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10;</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMinLimitOrBuilder();

  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11;</code>
   * @return Whether the maxLimit field is set.
   */
  boolean hasMaxLimit();
  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11;</code>
   * @return The maxLimit.
   */
  opi_api.storage.v1.QosLimit getMaxLimit();
  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11;</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMaxLimitOrBuilder();
}
