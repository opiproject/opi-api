// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_nvme_pcie.proto

package opi_api.storage.v1;

public interface NvmeSubsystemSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.NvmeSubsystemSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Nvme subsystem NQN to which the controller belongs
   * Refer to the NQN format in the Nvme base specifications, must not
   * exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
   * </pre>
   *
   * <code>string nqn = 1;</code>
   * @return The nqn.
   */
  java.lang.String getNqn();
  /**
   * <pre>
   * Nvme subsystem NQN to which the controller belongs
   * Refer to the NQN format in the Nvme base specifications, must not
   * exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
   * </pre>
   *
   * <code>string nqn = 1;</code>
   * @return The bytes for nqn.
   */
  com.google.protobuf.ByteString
      getNqnBytes();

  /**
   * <pre>
   * serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
   * </pre>
   *
   * <code>string serial_number = 2;</code>
   * @return The serialNumber.
   */
  java.lang.String getSerialNumber();
  /**
   * <pre>
   * serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
   * </pre>
   *
   * <code>string serial_number = 2;</code>
   * @return The bytes for serialNumber.
   */
  com.google.protobuf.ByteString
      getSerialNumberBytes();

  /**
   * <pre>
   * model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
   * </pre>
   *
   * <code>string model_number = 3;</code>
   * @return The modelNumber.
   */
  java.lang.String getModelNumber();
  /**
   * <pre>
   * model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
   * </pre>
   *
   * <code>string model_number = 3;</code>
   * @return The bytes for modelNumber.
   */
  com.google.protobuf.ByteString
      getModelNumberBytes();

  /**
   * <pre>
   * maximum namespaces within a subsystem
   * </pre>
   *
   * <code>int64 max_namespaces = 4;</code>
   * @return The maxNamespaces.
   */
  long getMaxNamespaces();
}
