// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_nvme_tcp.proto

package opi_api.storage.v1;

public interface NvmeRemoteControllerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.NvmeRemoteController)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * name is an opaque object handle that is not user settable.
   * name will be returned with created object
   * user can only set {resource}_id on the Create request object
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name is an opaque object handle that is not user settable.
   * name will be returned with created object
   * user can only set {resource}_id on the Create request object
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>bool hdgst = 2;</code>
   * @return The hdgst.
   */
  boolean getHdgst();

  /**
   * <code>bool ddgst = 3;</code>
   * @return The ddgst.
   */
  boolean getDdgst();

  /**
   * <code>.opi_api.storage.v1.NvmeMultipath multipath = 4;</code>
   * @return The enum numeric value on the wire for multipath.
   */
  int getMultipathValue();
  /**
   * <code>.opi_api.storage.v1.NvmeMultipath multipath = 4;</code>
   * @return The multipath.
   */
  opi_api.storage.v1.NvmeMultipath getMultipath();

  /**
   * <code>int64 io_queues_count = 5;</code>
   * @return The ioQueuesCount.
   */
  long getIoQueuesCount();

  /**
   * <code>int64 queue_size = 6;</code>
   * @return The queueSize.
   */
  long getQueueSize();

  /**
   * <pre>
   * Nvme/TCP published secure channel specification (TP 8011) based on TLS 1.3 and PSK.
   * Use PSK interchange format with base64 encoding as input.
   * Also use information about hash function in interchange
   * format for retained PSK generation. If no hash is selected,
   * use configured PSK as retained PSK.
   * Check the size of interchange PSK to determine cipher suite.
   * Calculate CRC-32 bytes to ensure validity of PSK.
   * Example: "NVMeTLSkey-1:01:VRLbtnN9AQb2WXW3c9+wEf/DRLz0QuLdbYvEhwtdWwNf9LrZ:"
   * if PSK field is empty, then unsecure connection Nvme/TCP without TLS will be made
   * </pre>
   *
   * <code>bytes psk = 7;</code>
   * @return The psk.
   */
  com.google.protobuf.ByteString getPsk();
}
