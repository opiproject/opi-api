// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_nvme_pcie.proto

package opi_api.storage.v1;

public interface NVMeControllerNamespaceSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.NVMeControllerNamespaceSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * namespace's unique key
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * namespace's unique key
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <pre>
   * namespace's unique key
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * subsystem for this namespace
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 2;</code>
   * @return Whether the subsystemId field is set.
   */
  boolean hasSubsystemId();
  /**
   * <pre>
   * subsystem for this namespace
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 2;</code>
   * @return The subsystemId.
   */
  opi_api.common.v1.ObjectKey getSubsystemId();
  /**
   * <pre>
   * subsystem for this namespace
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subsystem_id = 2;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getSubsystemIdOrBuilder();

  /**
   * <pre>
   * subsystem controller id range: 0 to 65535.
   * must not be reused under the same subsystem
   * </pre>
   *
   * <code>int32 nvme_controller_id = 3;</code>
   * @return The nvmeControllerId.
   */
  int getNvmeControllerId();

  /**
   * <pre>
   * NSID present to the host by the NVMe PCIe controller.
   * If not provided, then the controller will assign an unused NSID
   * within the max namespace range - auto assigned nsid may not work
   * for live migration
   * </pre>
   *
   * <code>int32 host_nsid = 4;</code>
   * @return The hostNsid.
   */
  int getHostNsid();
}
