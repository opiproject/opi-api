// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opicommon.proto

package opi_api.storage.v1;

/**
 * <pre>
 * Many front-ends expose PCI devices to the host. This represents that endpoint.
 * This device will ultimately be surfaced by the operating system at some
 * Bus:Device:Function, but note that the values set here are not necessarily
 * the same values that the operating system will choose. Instead, these are
 * xPU-internal values.
 * While the term "device" is often used for the entity attached to a PCI slot,
 * we'll use the term "port" which also commonly used with PCI switches and avoids
 * confusion with storage "devices".
 * </pre>
 *
 * Protobuf type {@code opi_api.storage.v1.PciEndpoint}
 */
public final class PciEndpoint extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opi_api.storage.v1.PciEndpoint)
    PciEndpointOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PciEndpoint.newBuilder() to construct.
  private PciEndpoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PciEndpoint() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PciEndpoint();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PciEndpoint(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (portId_ != null) {
              subBuilder = portId_.toBuilder();
            }
            portId_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(portId_);
              portId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (physicalFunction_ != null) {
              subBuilder = physicalFunction_.toBuilder();
            }
            physicalFunction_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(physicalFunction_);
              physicalFunction_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (virtualFunction_ != null) {
              subBuilder = virtualFunction_.toBuilder();
            }
            virtualFunction_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(virtualFunction_);
              virtualFunction_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (domainId_ != null) {
              subBuilder = domainId_.toBuilder();
            }
            domainId_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(domainId_);
              domainId_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return opi_api.storage.v1.OpiCommonProto.internal_static_opi_api_storage_v1_PciEndpoint_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return opi_api.storage.v1.OpiCommonProto.internal_static_opi_api_storage_v1_PciEndpoint_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            opi_api.storage.v1.PciEndpoint.class, opi_api.storage.v1.PciEndpoint.Builder.class);
  }

  public static final int PORT_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.Int32Value portId_;
  /**
   * <pre>
   * for frontend:
   * The "port" or "device". In other words, the connector/cable that's
   * plugged into a particular host. This number may end up matching
   * the host-assigned "device" value in the bus:device:function identifier,
   * but it does not strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "bus" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the portId field is set.
   */
  @java.lang.Override
  public boolean hasPortId() {
    return portId_ != null;
  }
  /**
   * <pre>
   * for frontend:
   * The "port" or "device". In other words, the connector/cable that's
   * plugged into a particular host. This number may end up matching
   * the host-assigned "device" value in the bus:device:function identifier,
   * but it does not strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "bus" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The portId.
   */
  @java.lang.Override
  public com.google.protobuf.Int32Value getPortId() {
    return portId_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : portId_;
  }
  /**
   * <pre>
   * for frontend:
   * The "port" or "device". In other words, the connector/cable that's
   * plugged into a particular host. This number may end up matching
   * the host-assigned "device" value in the bus:device:function identifier,
   * but it does not strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "bus" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.protobuf.Int32ValueOrBuilder getPortIdOrBuilder() {
    return getPortId();
  }

  public static final int PHYSICAL_FUNCTION_FIELD_NUMBER = 2;
  private com.google.protobuf.Int32Value physicalFunction_;
  /**
   * <pre>
   * for frontend:
   * Physical function index. This may end up matching the host-assigned
   * "function" value in the bus:device:function identifier, but it does not
   * strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "device" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the physicalFunction field is set.
   */
  @java.lang.Override
  public boolean hasPhysicalFunction() {
    return physicalFunction_ != null;
  }
  /**
   * <pre>
   * for frontend:
   * Physical function index. This may end up matching the host-assigned
   * "function" value in the bus:device:function identifier, but it does not
   * strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "device" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The physicalFunction.
   */
  @java.lang.Override
  public com.google.protobuf.Int32Value getPhysicalFunction() {
    return physicalFunction_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : physicalFunction_;
  }
  /**
   * <pre>
   * for frontend:
   * Physical function index. This may end up matching the host-assigned
   * "function" value in the bus:device:function identifier, but it does not
   * strictly have to and that should not be relied upon.
   * for backend:
   * Corresponds to "device" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.protobuf.Int32ValueOrBuilder getPhysicalFunctionOrBuilder() {
    return getPhysicalFunction();
  }

  public static final int VIRTUAL_FUNCTION_FIELD_NUMBER = 3;
  private com.google.protobuf.Int32Value virtualFunction_;
  /**
   * <pre>
   * for frontend:
   * Virtual function index. 1-based index.
   * The value 0 is reserved to represent the PCI physical "device".
   * This may end up matching the host-assigned "function" value in the
   * bus:device:function identifier, but it does not strictly have to and
   * that should not be relied upon.
   * for backend:
   * Corresponds to "function" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the virtualFunction field is set.
   */
  @java.lang.Override
  public boolean hasVirtualFunction() {
    return virtualFunction_ != null;
  }
  /**
   * <pre>
   * for frontend:
   * Virtual function index. 1-based index.
   * The value 0 is reserved to represent the PCI physical "device".
   * This may end up matching the host-assigned "function" value in the
   * bus:device:function identifier, but it does not strictly have to and
   * that should not be relied upon.
   * for backend:
   * Corresponds to "function" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The virtualFunction.
   */
  @java.lang.Override
  public com.google.protobuf.Int32Value getVirtualFunction() {
    return virtualFunction_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : virtualFunction_;
  }
  /**
   * <pre>
   * for frontend:
   * Virtual function index. 1-based index.
   * The value 0 is reserved to represent the PCI physical "device".
   * This may end up matching the host-assigned "function" value in the
   * bus:device:function identifier, but it does not strictly have to and
   * that should not be relied upon.
   * for backend:
   * Corresponds to "function" part of BDF
   * </pre>
   *
   * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.protobuf.Int32ValueOrBuilder getVirtualFunctionOrBuilder() {
    return getVirtualFunction();
  }

  public static final int DOMAIN_ID_FIELD_NUMBER = 4;
  private com.google.protobuf.Int32Value domainId_;
  /**
   * <pre>
   * for frontend:
   * Not used
   * for backend:
   * Corresponds to pci domain value
   * </pre>
   *
   * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the domainId field is set.
   */
  @java.lang.Override
  public boolean hasDomainId() {
    return domainId_ != null;
  }
  /**
   * <pre>
   * for frontend:
   * Not used
   * for backend:
   * Corresponds to pci domain value
   * </pre>
   *
   * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The domainId.
   */
  @java.lang.Override
  public com.google.protobuf.Int32Value getDomainId() {
    return domainId_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : domainId_;
  }
  /**
   * <pre>
   * for frontend:
   * Not used
   * for backend:
   * Corresponds to pci domain value
   * </pre>
   *
   * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  @java.lang.Override
  public com.google.protobuf.Int32ValueOrBuilder getDomainIdOrBuilder() {
    return getDomainId();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (portId_ != null) {
      output.writeMessage(1, getPortId());
    }
    if (physicalFunction_ != null) {
      output.writeMessage(2, getPhysicalFunction());
    }
    if (virtualFunction_ != null) {
      output.writeMessage(3, getVirtualFunction());
    }
    if (domainId_ != null) {
      output.writeMessage(4, getDomainId());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (portId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPortId());
    }
    if (physicalFunction_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPhysicalFunction());
    }
    if (virtualFunction_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getVirtualFunction());
    }
    if (domainId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getDomainId());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof opi_api.storage.v1.PciEndpoint)) {
      return super.equals(obj);
    }
    opi_api.storage.v1.PciEndpoint other = (opi_api.storage.v1.PciEndpoint) obj;

    if (hasPortId() != other.hasPortId()) return false;
    if (hasPortId()) {
      if (!getPortId()
          .equals(other.getPortId())) return false;
    }
    if (hasPhysicalFunction() != other.hasPhysicalFunction()) return false;
    if (hasPhysicalFunction()) {
      if (!getPhysicalFunction()
          .equals(other.getPhysicalFunction())) return false;
    }
    if (hasVirtualFunction() != other.hasVirtualFunction()) return false;
    if (hasVirtualFunction()) {
      if (!getVirtualFunction()
          .equals(other.getVirtualFunction())) return false;
    }
    if (hasDomainId() != other.hasDomainId()) return false;
    if (hasDomainId()) {
      if (!getDomainId()
          .equals(other.getDomainId())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPortId()) {
      hash = (37 * hash) + PORT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPortId().hashCode();
    }
    if (hasPhysicalFunction()) {
      hash = (37 * hash) + PHYSICAL_FUNCTION_FIELD_NUMBER;
      hash = (53 * hash) + getPhysicalFunction().hashCode();
    }
    if (hasVirtualFunction()) {
      hash = (37 * hash) + VIRTUAL_FUNCTION_FIELD_NUMBER;
      hash = (53 * hash) + getVirtualFunction().hashCode();
    }
    if (hasDomainId()) {
      hash = (37 * hash) + DOMAIN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDomainId().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static opi_api.storage.v1.PciEndpoint parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.storage.v1.PciEndpoint parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static opi_api.storage.v1.PciEndpoint parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.storage.v1.PciEndpoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(opi_api.storage.v1.PciEndpoint prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Many front-ends expose PCI devices to the host. This represents that endpoint.
   * This device will ultimately be surfaced by the operating system at some
   * Bus:Device:Function, but note that the values set here are not necessarily
   * the same values that the operating system will choose. Instead, these are
   * xPU-internal values.
   * While the term "device" is often used for the entity attached to a PCI slot,
   * we'll use the term "port" which also commonly used with PCI switches and avoids
   * confusion with storage "devices".
   * </pre>
   *
   * Protobuf type {@code opi_api.storage.v1.PciEndpoint}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opi_api.storage.v1.PciEndpoint)
      opi_api.storage.v1.PciEndpointOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return opi_api.storage.v1.OpiCommonProto.internal_static_opi_api_storage_v1_PciEndpoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return opi_api.storage.v1.OpiCommonProto.internal_static_opi_api_storage_v1_PciEndpoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              opi_api.storage.v1.PciEndpoint.class, opi_api.storage.v1.PciEndpoint.Builder.class);
    }

    // Construct using opi_api.storage.v1.PciEndpoint.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (portIdBuilder_ == null) {
        portId_ = null;
      } else {
        portId_ = null;
        portIdBuilder_ = null;
      }
      if (physicalFunctionBuilder_ == null) {
        physicalFunction_ = null;
      } else {
        physicalFunction_ = null;
        physicalFunctionBuilder_ = null;
      }
      if (virtualFunctionBuilder_ == null) {
        virtualFunction_ = null;
      } else {
        virtualFunction_ = null;
        virtualFunctionBuilder_ = null;
      }
      if (domainIdBuilder_ == null) {
        domainId_ = null;
      } else {
        domainId_ = null;
        domainIdBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return opi_api.storage.v1.OpiCommonProto.internal_static_opi_api_storage_v1_PciEndpoint_descriptor;
    }

    @java.lang.Override
    public opi_api.storage.v1.PciEndpoint getDefaultInstanceForType() {
      return opi_api.storage.v1.PciEndpoint.getDefaultInstance();
    }

    @java.lang.Override
    public opi_api.storage.v1.PciEndpoint build() {
      opi_api.storage.v1.PciEndpoint result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public opi_api.storage.v1.PciEndpoint buildPartial() {
      opi_api.storage.v1.PciEndpoint result = new opi_api.storage.v1.PciEndpoint(this);
      if (portIdBuilder_ == null) {
        result.portId_ = portId_;
      } else {
        result.portId_ = portIdBuilder_.build();
      }
      if (physicalFunctionBuilder_ == null) {
        result.physicalFunction_ = physicalFunction_;
      } else {
        result.physicalFunction_ = physicalFunctionBuilder_.build();
      }
      if (virtualFunctionBuilder_ == null) {
        result.virtualFunction_ = virtualFunction_;
      } else {
        result.virtualFunction_ = virtualFunctionBuilder_.build();
      }
      if (domainIdBuilder_ == null) {
        result.domainId_ = domainId_;
      } else {
        result.domainId_ = domainIdBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof opi_api.storage.v1.PciEndpoint) {
        return mergeFrom((opi_api.storage.v1.PciEndpoint)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(opi_api.storage.v1.PciEndpoint other) {
      if (other == opi_api.storage.v1.PciEndpoint.getDefaultInstance()) return this;
      if (other.hasPortId()) {
        mergePortId(other.getPortId());
      }
      if (other.hasPhysicalFunction()) {
        mergePhysicalFunction(other.getPhysicalFunction());
      }
      if (other.hasVirtualFunction()) {
        mergeVirtualFunction(other.getVirtualFunction());
      }
      if (other.hasDomainId()) {
        mergeDomainId(other.getDomainId());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      opi_api.storage.v1.PciEndpoint parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (opi_api.storage.v1.PciEndpoint) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.Int32Value portId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> portIdBuilder_;
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the portId field is set.
     */
    public boolean hasPortId() {
      return portIdBuilder_ != null || portId_ != null;
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The portId.
     */
    public com.google.protobuf.Int32Value getPortId() {
      if (portIdBuilder_ == null) {
        return portId_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : portId_;
      } else {
        return portIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPortId(com.google.protobuf.Int32Value value) {
      if (portIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        portId_ = value;
        onChanged();
      } else {
        portIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPortId(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (portIdBuilder_ == null) {
        portId_ = builderForValue.build();
        onChanged();
      } else {
        portIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergePortId(com.google.protobuf.Int32Value value) {
      if (portIdBuilder_ == null) {
        if (portId_ != null) {
          portId_ =
            com.google.protobuf.Int32Value.newBuilder(portId_).mergeFrom(value).buildPartial();
        } else {
          portId_ = value;
        }
        onChanged();
      } else {
        portIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearPortId() {
      if (portIdBuilder_ == null) {
        portId_ = null;
        onChanged();
      } else {
        portId_ = null;
        portIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32Value.Builder getPortIdBuilder() {
      
      onChanged();
      return getPortIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getPortIdOrBuilder() {
      if (portIdBuilder_ != null) {
        return portIdBuilder_.getMessageOrBuilder();
      } else {
        return portId_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : portId_;
      }
    }
    /**
     * <pre>
     * for frontend:
     * The "port" or "device". In other words, the connector/cable that's
     * plugged into a particular host. This number may end up matching
     * the host-assigned "device" value in the bus:device:function identifier,
     * but it does not strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "bus" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value port_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getPortIdFieldBuilder() {
      if (portIdBuilder_ == null) {
        portIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getPortId(),
                getParentForChildren(),
                isClean());
        portId_ = null;
      }
      return portIdBuilder_;
    }

    private com.google.protobuf.Int32Value physicalFunction_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> physicalFunctionBuilder_;
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the physicalFunction field is set.
     */
    public boolean hasPhysicalFunction() {
      return physicalFunctionBuilder_ != null || physicalFunction_ != null;
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The physicalFunction.
     */
    public com.google.protobuf.Int32Value getPhysicalFunction() {
      if (physicalFunctionBuilder_ == null) {
        return physicalFunction_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : physicalFunction_;
      } else {
        return physicalFunctionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPhysicalFunction(com.google.protobuf.Int32Value value) {
      if (physicalFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalFunction_ = value;
        onChanged();
      } else {
        physicalFunctionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPhysicalFunction(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (physicalFunctionBuilder_ == null) {
        physicalFunction_ = builderForValue.build();
        onChanged();
      } else {
        physicalFunctionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergePhysicalFunction(com.google.protobuf.Int32Value value) {
      if (physicalFunctionBuilder_ == null) {
        if (physicalFunction_ != null) {
          physicalFunction_ =
            com.google.protobuf.Int32Value.newBuilder(physicalFunction_).mergeFrom(value).buildPartial();
        } else {
          physicalFunction_ = value;
        }
        onChanged();
      } else {
        physicalFunctionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearPhysicalFunction() {
      if (physicalFunctionBuilder_ == null) {
        physicalFunction_ = null;
        onChanged();
      } else {
        physicalFunction_ = null;
        physicalFunctionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32Value.Builder getPhysicalFunctionBuilder() {
      
      onChanged();
      return getPhysicalFunctionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getPhysicalFunctionOrBuilder() {
      if (physicalFunctionBuilder_ != null) {
        return physicalFunctionBuilder_.getMessageOrBuilder();
      } else {
        return physicalFunction_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : physicalFunction_;
      }
    }
    /**
     * <pre>
     * for frontend:
     * Physical function index. This may end up matching the host-assigned
     * "function" value in the bus:device:function identifier, but it does not
     * strictly have to and that should not be relied upon.
     * for backend:
     * Corresponds to "device" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value physical_function = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getPhysicalFunctionFieldBuilder() {
      if (physicalFunctionBuilder_ == null) {
        physicalFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getPhysicalFunction(),
                getParentForChildren(),
                isClean());
        physicalFunction_ = null;
      }
      return physicalFunctionBuilder_;
    }

    private com.google.protobuf.Int32Value virtualFunction_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> virtualFunctionBuilder_;
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the virtualFunction field is set.
     */
    public boolean hasVirtualFunction() {
      return virtualFunctionBuilder_ != null || virtualFunction_ != null;
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The virtualFunction.
     */
    public com.google.protobuf.Int32Value getVirtualFunction() {
      if (virtualFunctionBuilder_ == null) {
        return virtualFunction_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : virtualFunction_;
      } else {
        return virtualFunctionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setVirtualFunction(com.google.protobuf.Int32Value value) {
      if (virtualFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        virtualFunction_ = value;
        onChanged();
      } else {
        virtualFunctionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setVirtualFunction(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (virtualFunctionBuilder_ == null) {
        virtualFunction_ = builderForValue.build();
        onChanged();
      } else {
        virtualFunctionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeVirtualFunction(com.google.protobuf.Int32Value value) {
      if (virtualFunctionBuilder_ == null) {
        if (virtualFunction_ != null) {
          virtualFunction_ =
            com.google.protobuf.Int32Value.newBuilder(virtualFunction_).mergeFrom(value).buildPartial();
        } else {
          virtualFunction_ = value;
        }
        onChanged();
      } else {
        virtualFunctionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearVirtualFunction() {
      if (virtualFunctionBuilder_ == null) {
        virtualFunction_ = null;
        onChanged();
      } else {
        virtualFunction_ = null;
        virtualFunctionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32Value.Builder getVirtualFunctionBuilder() {
      
      onChanged();
      return getVirtualFunctionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getVirtualFunctionOrBuilder() {
      if (virtualFunctionBuilder_ != null) {
        return virtualFunctionBuilder_.getMessageOrBuilder();
      } else {
        return virtualFunction_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : virtualFunction_;
      }
    }
    /**
     * <pre>
     * for frontend:
     * Virtual function index. 1-based index.
     * The value 0 is reserved to represent the PCI physical "device".
     * This may end up matching the host-assigned "function" value in the
     * bus:device:function identifier, but it does not strictly have to and
     * that should not be relied upon.
     * for backend:
     * Corresponds to "function" part of BDF
     * </pre>
     *
     * <code>.google.protobuf.Int32Value virtual_function = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getVirtualFunctionFieldBuilder() {
      if (virtualFunctionBuilder_ == null) {
        virtualFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getVirtualFunction(),
                getParentForChildren(),
                isClean());
        virtualFunction_ = null;
      }
      return virtualFunctionBuilder_;
    }

    private com.google.protobuf.Int32Value domainId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> domainIdBuilder_;
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return Whether the domainId field is set.
     */
    public boolean hasDomainId() {
      return domainIdBuilder_ != null || domainId_ != null;
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The domainId.
     */
    public com.google.protobuf.Int32Value getDomainId() {
      if (domainIdBuilder_ == null) {
        return domainId_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : domainId_;
      } else {
        return domainIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder setDomainId(com.google.protobuf.Int32Value value) {
      if (domainIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        domainId_ = value;
        onChanged();
      } else {
        domainIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder setDomainId(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (domainIdBuilder_ == null) {
        domainId_ = builderForValue.build();
        onChanged();
      } else {
        domainIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder mergeDomainId(com.google.protobuf.Int32Value value) {
      if (domainIdBuilder_ == null) {
        if (domainId_ != null) {
          domainId_ =
            com.google.protobuf.Int32Value.newBuilder(domainId_).mergeFrom(value).buildPartial();
        } else {
          domainId_ = value;
        }
        onChanged();
      } else {
        domainIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder clearDomainId() {
      if (domainIdBuilder_ == null) {
        domainId_ = null;
        onChanged();
      } else {
        domainId_ = null;
        domainIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public com.google.protobuf.Int32Value.Builder getDomainIdBuilder() {
      
      onChanged();
      return getDomainIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getDomainIdOrBuilder() {
      if (domainIdBuilder_ != null) {
        return domainIdBuilder_.getMessageOrBuilder();
      } else {
        return domainId_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : domainId_;
      }
    }
    /**
     * <pre>
     * for frontend:
     * Not used
     * for backend:
     * Corresponds to pci domain value
     * </pre>
     *
     * <code>.google.protobuf.Int32Value domain_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getDomainIdFieldBuilder() {
      if (domainIdBuilder_ == null) {
        domainIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getDomainId(),
                getParentForChildren(),
                isClean());
        domainId_ = null;
      }
      return domainIdBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opi_api.storage.v1.PciEndpoint)
  }

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.PciEndpoint)
  private static final opi_api.storage.v1.PciEndpoint DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new opi_api.storage.v1.PciEndpoint();
  }

  public static opi_api.storage.v1.PciEndpoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PciEndpoint>
      PARSER = new com.google.protobuf.AbstractParser<PciEndpoint>() {
    @java.lang.Override
    public PciEndpoint parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PciEndpoint(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PciEndpoint> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PciEndpoint> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public opi_api.storage.v1.PciEndpoint getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

