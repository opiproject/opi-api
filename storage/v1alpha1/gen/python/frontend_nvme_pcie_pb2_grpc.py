# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import frontend_nvme_pcie_pb2 as frontend__nvme__pcie__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class FrontendNvmeServiceStub(object):
    """Front End (host-facing) APIs.

    NVMe/PCIe emulation

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NVMeSubsystemCreate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemCreate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemCreateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
                )
        self.NVMeSubsystemDelete = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemDelete',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.NVMeSubsystemUpdate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemUpdate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemUpdateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
                )
        self.NVMeSubsystemList = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemList',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemListRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemListResponse.FromString,
                )
        self.NVMeSubsystemGet = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemGet',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemGetRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
                )
        self.NVMeSubsystemStats = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats',
                request_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemStatsRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemStatsResponse.FromString,
                )
        self.NVMeControllerCreate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerCreate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerCreateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeController.FromString,
                )
        self.NVMeControllerDelete = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerDelete',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.NVMeControllerUpdate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerUpdate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerUpdateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeController.FromString,
                )
        self.NVMeControllerList = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerList',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerListRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeControllerListResponse.FromString,
                )
        self.NVMeControllerGet = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerGet',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerGetRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeController.FromString,
                )
        self.NVMeControllerStats = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats',
                request_serializer=frontend__nvme__pcie__pb2.NVMeControllerStatsRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeControllerStatsResponse.FromString,
                )
        self.NVMeNamespaceCreate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceCreate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceCreateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
                )
        self.NVMeNamespaceDelete = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceDelete',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.NVMeNamespaceUpdate = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceUpdate',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceUpdateRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
                )
        self.NVMeNamespaceList = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceList',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceListRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceListResponse.FromString,
                )
        self.NVMeNamespaceGet = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceGet',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceGetRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
                )
        self.NVMeNamespaceStats = channel.unary_unary(
                '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats',
                request_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceStatsRequest.SerializeToString,
                response_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceStatsResponse.FromString,
                )


class FrontendNvmeServiceServicer(object):
    """Front End (host-facing) APIs.

    NVMe/PCIe emulation

    """

    def NVMeSubsystemCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeSubsystemDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeSubsystemUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeSubsystemList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeSubsystemGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeSubsystemStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeControllerStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NVMeNamespaceStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontendNvmeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NVMeSubsystemCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemCreate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemCreateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeSubsystem.SerializeToString,
            ),
            'NVMeSubsystemDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemDelete,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'NVMeSubsystemUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemUpdate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemUpdateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeSubsystem.SerializeToString,
            ),
            'NVMeSubsystemList': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemList,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemListRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemListResponse.SerializeToString,
            ),
            'NVMeSubsystemGet': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemGet,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemGetRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeSubsystem.SerializeToString,
            ),
            'NVMeSubsystemStats': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeSubsystemStats,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeSubsystemStatsRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeSubsystemStatsResponse.SerializeToString,
            ),
            'NVMeControllerCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerCreate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerCreateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeController.SerializeToString,
            ),
            'NVMeControllerDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerDelete,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'NVMeControllerUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerUpdate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerUpdateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeController.SerializeToString,
            ),
            'NVMeControllerList': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerList,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerListRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeControllerListResponse.SerializeToString,
            ),
            'NVMeControllerGet': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerGet,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerGetRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeController.SerializeToString,
            ),
            'NVMeControllerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeControllerStats,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeControllerStatsRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeControllerStatsResponse.SerializeToString,
            ),
            'NVMeNamespaceCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceCreate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceCreateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeNamespace.SerializeToString,
            ),
            'NVMeNamespaceDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceDelete,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'NVMeNamespaceUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceUpdate,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceUpdateRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeNamespace.SerializeToString,
            ),
            'NVMeNamespaceList': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceList,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceListRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceListResponse.SerializeToString,
            ),
            'NVMeNamespaceGet': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceGet,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceGetRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeNamespace.SerializeToString,
            ),
            'NVMeNamespaceStats': grpc.unary_unary_rpc_method_handler(
                    servicer.NVMeNamespaceStats,
                    request_deserializer=frontend__nvme__pcie__pb2.NVMeNamespaceStatsRequest.FromString,
                    response_serializer=frontend__nvme__pcie__pb2.NVMeNamespaceStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.storage.v1.FrontendNvmeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FrontendNvmeService(object):
    """Front End (host-facing) APIs.

    NVMe/PCIe emulation

    """

    @staticmethod
    def NVMeSubsystemCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemCreate',
            frontend__nvme__pcie__pb2.NVMeSubsystemCreateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeSubsystemDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemDelete',
            frontend__nvme__pcie__pb2.NVMeSubsystemDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeSubsystemUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemUpdate',
            frontend__nvme__pcie__pb2.NVMeSubsystemUpdateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeSubsystemList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemList',
            frontend__nvme__pcie__pb2.NVMeSubsystemListRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeSubsystemListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeSubsystemGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemGet',
            frontend__nvme__pcie__pb2.NVMeSubsystemGetRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeSubsystem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeSubsystemStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeSubsystemStats',
            frontend__nvme__pcie__pb2.NVMeSubsystemStatsRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeSubsystemStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerCreate',
            frontend__nvme__pcie__pb2.NVMeControllerCreateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerDelete',
            frontend__nvme__pcie__pb2.NVMeControllerDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerUpdate',
            frontend__nvme__pcie__pb2.NVMeControllerUpdateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerList',
            frontend__nvme__pcie__pb2.NVMeControllerListRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeControllerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerGet',
            frontend__nvme__pcie__pb2.NVMeControllerGetRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeControllerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeControllerStats',
            frontend__nvme__pcie__pb2.NVMeControllerStatsRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeControllerStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceCreate',
            frontend__nvme__pcie__pb2.NVMeNamespaceCreateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceDelete',
            frontend__nvme__pcie__pb2.NVMeNamespaceDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceUpdate',
            frontend__nvme__pcie__pb2.NVMeNamespaceUpdateRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceList',
            frontend__nvme__pcie__pb2.NVMeNamespaceListRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeNamespaceListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceGet',
            frontend__nvme__pcie__pb2.NVMeNamespaceGetRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeNamespace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NVMeNamespaceStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.FrontendNvmeService/NVMeNamespaceStats',
            frontend__nvme__pcie__pb2.NVMeNamespaceStatsRequest.SerializeToString,
            frontend__nvme__pcie__pb2.NVMeNamespaceStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
