# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backend_aio_pb2 as backend__aio__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AioControllerServiceStub(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AioControllerCreate = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerCreate',
                request_serializer=backend__aio__pb2.AioControllerCreateRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )
        self.AioControllerDelete = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerDelete',
                request_serializer=backend__aio__pb2.AioControllerDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.AioControllerGet = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerGet',
                request_serializer=backend__aio__pb2.AioControllerGetRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )
        self.AioControllerGetList = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerGetList',
                request_serializer=backend__aio__pb2.AioControllerGetListRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioControllerList.FromString,
                )
        self.AioControllerGetStats = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerGetStats',
                request_serializer=backend__aio__pb2.AioControllerGetStatsRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioControllerStats.FromString,
                )
        self.AioControllerUpdate = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerUpdate',
                request_serializer=backend__aio__pb2.AioControllerUpdateRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )


class AioControllerServiceServicer(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    def AioControllerCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerGetList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerGetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AioControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AioControllerCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerCreate,
                    request_deserializer=backend__aio__pb2.AioControllerCreateRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
            'AioControllerDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerDelete,
                    request_deserializer=backend__aio__pb2.AioControllerDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AioControllerGet': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerGet,
                    request_deserializer=backend__aio__pb2.AioControllerGetRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
            'AioControllerGetList': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerGetList,
                    request_deserializer=backend__aio__pb2.AioControllerGetListRequest.FromString,
                    response_serializer=backend__aio__pb2.AioControllerList.SerializeToString,
            ),
            'AioControllerGetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerGetStats,
                    request_deserializer=backend__aio__pb2.AioControllerGetStatsRequest.FromString,
                    response_serializer=backend__aio__pb2.AioControllerStats.SerializeToString,
            ),
            'AioControllerUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerUpdate,
                    request_deserializer=backend__aio__pb2.AioControllerUpdateRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.storage.v1.AioControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AioControllerService(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    @staticmethod
    def AioControllerCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerCreate',
            backend__aio__pb2.AioControllerCreateRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerDelete',
            backend__aio__pb2.AioControllerDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerGet',
            backend__aio__pb2.AioControllerGetRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerGetList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerGetList',
            backend__aio__pb2.AioControllerGetListRequest.SerializeToString,
            backend__aio__pb2.AioControllerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerGetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerGetStats',
            backend__aio__pb2.AioControllerGetStatsRequest.SerializeToString,
            backend__aio__pb2.AioControllerStats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerUpdate',
            backend__aio__pb2.AioControllerUpdateRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
