// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "FrontendVirtioScsiProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";
import "opicommon.proto";
import "object_key.proto";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

// Front End (host-facing) APIs. Mostly used for Virtio-scsi emulation and host presentation as alternative to Virtio-blk.
service FrontendVirtioScsiService {
    rpc CreateVirtioScsiTarget (CreateVirtioScsiTargetRequest) returns (VirtioScsiTarget) {
        option (google.api.http) = {
            post: "/v1/virtioscsitargets"
            body: "virtioscsitarget"
        };
    }
    rpc DeleteVirtioScsiTarget (DeleteVirtioScsiTargetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=subsystems}/{virtioscsitarget}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateVirtioScsiTarget (UpdateVirtioScsiTargetRequest) returns (VirtioScsiTarget) {
        option (google.api.http) = {
            patch: "/v1/virtioscsitargets"
            body: "virtioscsitarget"
        };
    }
    rpc ListVirtioScsiTarget   (ListVirtioScsiTargetRequest)   returns (ListVirtioScsiTargetResponse)   {
        option (google.api.http) = {
            get: "/v1/virtioscsitargets"
        };
    }
    rpc GetVirtioScsiTarget    (GetVirtioScsiTargetRequest)    returns (VirtioScsiTarget)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{virtioscsitarget}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc VirtioScsiTargetStats  (VirtioScsiTargetStatsRequest)  returns (VirtioScsiTargetStatsResponse)  {}

    rpc CreateVirtioScsiController (CreateVirtioScsiControllerRequest) returns (VirtioScsiController) {
        option (google.api.http) = {
            post: "/v1/virtioscsictrls"
            body: "virtioscsictrl"
        };
    }
    rpc DeleteVirtioScsiController (DeleteVirtioScsiControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=virtioscsictrls}/{virtioscsictrl}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateVirtioScsiController (UpdateVirtioScsiControllerRequest) returns (VirtioScsiController) {
        option (google.api.http) = {
            patch: "/v1/virtioscsictrls"
            body: "virtioscsictrl"
        };
    }
    rpc ListVirtioScsiController   (ListVirtioScsiControllerRequest)   returns (ListVirtioScsiControllerResponse)   {
        option (google.api.http) = {
            get: "/v1/virtioscsictrls"
        };
    }
    rpc GetVirtioScsiController    (GetVirtioScsiControllerRequest)    returns (VirtioScsiController)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{virtioscsictrl}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc VirtioScsiControllerStats  (VirtioScsiControllerStatsRequest)  returns (VirtioScsiControllerStatsResponse)  {}

    rpc CreateVirtioScsiLun (CreateVirtioScsiLunRequest) returns (VirtioScsiLun) {
        option (google.api.http) = {
            post: "/v1/virtioscsiluns"
            body: "virtioscsilun"
        };
    }
    rpc DeleteVirtioScsiLun (DeleteVirtioScsiLunRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=virtioscsiluns}/{virtioscsilun}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateVirtioScsiLun (UpdateVirtioScsiLunRequest) returns (VirtioScsiLun) {
        option (google.api.http) = {
            patch: "/v1/virtioscsiluns"
            body: "virtioscsilun"
        };
    }
    rpc ListVirtioScsiLun   (ListVirtioScsiLunRequest)   returns (ListVirtioScsiLunResponse)   {
        option (google.api.http) = {
            get: "/v1/virtioscsiluns"
        };
    }
    rpc GetVirtioScsiLun    (GetVirtioScsiLunRequest)    returns (VirtioScsiLun)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{virtioscsilun}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc VirtioScsiLunStats  (VirtioScsiLunStatsRequest)  returns (VirtioScsiLunStatsResponse)  {}
}

message VirtioScsiTarget {
    common.v1.ObjectKey id = 1;

    // maximum LUNs within a target
    int32 max_luns = 2;
}

message VirtioScsiController {
    common.v1.ObjectKey id = 1;

    // xPU's PCI ID for the controller
    PciEndpoint pcie_id = 2;
}

message VirtioScsiLun {
    common.v1.ObjectKey id = 1;

    // The target that this LUN is in
    common.v1.ObjectKey target_id = 2;

    // The middle/back-end volume for this LLUN
    common.v1.ObjectKey volume_id = 3;
}

message CreateVirtioScsiTargetRequest {
    VirtioScsiTarget target = 1;
}

message DeleteVirtioScsiTargetRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message UpdateVirtioScsiTargetRequest {
    VirtioScsiTarget target = 1;
}

message ListVirtioScsiTargetRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListVirtioScsiTargetResponse {
    repeated VirtioScsiTarget targets = 1;
    string next_page_token = 2;
}

message GetVirtioScsiTargetRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message VirtioScsiTargetStatsRequest {
    common.v1.ObjectKey target_id = 1;
}

message VirtioScsiTargetStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

message CreateVirtioScsiControllerRequest {
    VirtioScsiController controller = 1;
}

message DeleteVirtioScsiControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message UpdateVirtioScsiControllerRequest {
    VirtioScsiController controller = 1;
}

message ListVirtioScsiControllerRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListVirtioScsiControllerResponse {
    repeated VirtioScsiController controllers = 1;
    string next_page_token = 2;
}

message GetVirtioScsiControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message VirtioScsiControllerStatsRequest {
    common.v1.ObjectKey controller_id = 1;
}

message VirtioScsiControllerStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

message CreateVirtioScsiLunRequest {
    VirtioScsiLun lun = 1;
}

message DeleteVirtioScsiLunRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message UpdateVirtioScsiLunRequest {
    VirtioScsiLun lun = 1;
}

message ListVirtioScsiLunRequest {
    common.v1.ObjectKey controller_id = 1;
    int32 page_size = 2;
    string page_token = 3;
}

message ListVirtioScsiLunResponse {
    repeated VirtioScsiLun luns = 1;
    string next_page_token = 2;
}

message GetVirtioScsiLunRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi.storage.v1/NVMeSubsystem"
    ];
}

message VirtioScsiLunStatsRequest {
    common.v1.ObjectKey controller_id = 1;
    common.v1.ObjectKey lun_id = 2;
}

message VirtioScsiLunStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}
