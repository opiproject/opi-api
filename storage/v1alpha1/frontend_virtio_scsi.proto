// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// Copyright (C) 2023 Intel Corporation

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "FrontendVirtioScsiProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";
import "opicommon.proto";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

// Front End (host-facing) APIs. Mostly used for Virtio-scsi emulation and host presentation as alternative to Virtio-blk.
service FrontendVirtioScsiService {
    // Create an Virtio Scsi Target
    rpc CreateVirtioScsiTarget (CreateVirtioScsiTargetRequest) returns (VirtioScsiTarget) {
        option (google.api.http) = {
            post: "/v1/volumes"
            body: "virtio_scsi_target"
        };
        option (google.api.method_signature) = "virtio_scsi_target,virtio_scsi_target_id";
    }
    // Delete an Virtio Scsi Target
    rpc DeleteVirtioScsiTarget (DeleteVirtioScsiTargetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=VirtioScsiTargets/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Update an Virtio Scsi Target
    rpc UpdateVirtioScsiTarget (UpdateVirtioScsiTargetRequest) returns (VirtioScsiTarget) {
        option (google.api.http) = {
            patch: "/v1/{virtio_scsi_target.name=subsystems}"
            body: "virtio_scsi_target"
        };
        option (google.api.method_signature) = "virtio_scsi_target,update_mask";
    }
    // List Virtio Scsi Targets
    rpc ListVirtioScsiTargets   (ListVirtioScsiTargetsRequest)   returns (ListVirtioScsiTargetsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    // Get an Virtio Scsi Target
    rpc GetVirtioScsiTarget    (GetVirtioScsiTargetRequest)    returns (VirtioScsiTarget)    {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiTargets/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Get an Virtio Scsi Target statistics
    rpc StatsVirtioScsiTarget  (StatsVirtioScsiTargetRequest)  returns (StatsVirtioScsiTargetResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiTargets/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
    // Create an Virtio Scsi Controller
    rpc CreateVirtioScsiController (CreateVirtioScsiControllerRequest) returns (VirtioScsiController) {
        option (google.api.http) = {
            post: "/v1/volumes"
            body: "virtio_scsi_controller"
        };
        option (google.api.method_signature) = "virtio_scsi_controller,virtio_scsi_controller_id";
    }
    // Delete an Virtio Scsi Controller
    rpc DeleteVirtioScsiController (DeleteVirtioScsiControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=VirtioScsiControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Update an Virtio Scsi Controller
    rpc UpdateVirtioScsiController (UpdateVirtioScsiControllerRequest) returns (VirtioScsiController) {
        option (google.api.http) = {
            patch: "/v1/{virtio_scsi_controller.name=subsystems}"
            body: "virtio_scsi_controller"
        };
        option (google.api.method_signature) = "virtio_scsi_controller,update_mask";
    }
    // List Virtio Scsi Controllers
    rpc ListVirtioScsiControllers   (ListVirtioScsiControllersRequest)   returns (ListVirtioScsiControllersResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    // Get an Virtio Scsi Controller
    rpc GetVirtioScsiController    (GetVirtioScsiControllerRequest)    returns (VirtioScsiController)    {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Get an Virtio Scsi Controller statistics
    rpc StatsVirtioScsiController  (StatsVirtioScsiControllerRequest)  returns (StatsVirtioScsiControllerResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiControllers/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
    // Create an Virtio Scsi Lun
    rpc CreateVirtioScsiLun (CreateVirtioScsiLunRequest) returns (VirtioScsiLun) {
        option (google.api.http) = {
            post: "/v1/volumes"
            body: "virtio_scsi_lun"
        };
        option (google.api.method_signature) = "virtio_scsi_lun,virtio_scsi_lun_id";
    }
    // Delete an Virtio Scsi Lun
    rpc DeleteVirtioScsiLun (DeleteVirtioScsiLunRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=VirtioScsiLuns/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Update an Virtio Scsi Lun
    rpc UpdateVirtioScsiLun (UpdateVirtioScsiLunRequest) returns (VirtioScsiLun) {
        option (google.api.http) = {
            patch: "/v1/{virtio_scsi_lun.name=subsystems}"
            body: "virtio_scsi_lun"
        };
        option (google.api.method_signature) = "virtio_scsi_lun,update_mask";
    }
    // List Virtio Scsi Luns
    rpc ListVirtioScsiLuns   (ListVirtioScsiLunsRequest)   returns (ListVirtioScsiLunsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    // Get an Virtio Scsi Lun
    rpc GetVirtioScsiLun    (GetVirtioScsiLunRequest)    returns (VirtioScsiLun)    {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiLuns/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Get an Virtio Scsi Lun statistics
    rpc StatsVirtioScsiLun  (StatsVirtioScsiLunRequest)  returns (StatsVirtioScsiLunResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=VirtioScsiLuns/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
}

message VirtioScsiTarget {
    option (google.api.resource) = {
        type: "storage.opiproject.org/VirtioScsiTarget"
        pattern: "volumes/{volume}"
        singular: "virtioScsiTarget"
        plural: "virtioScsiTargets"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiTarget"
    ];

    // maximum LUNs within a target
    int32 max_luns = 2 [(google.api.field_behavior) = OPTIONAL];
}

message VirtioScsiController {
    option (google.api.resource) = {
        type: "storage.opiproject.org/VirtioScsiController"
        pattern: "volumes/{volume}"
        singular: "virtioScsiController"
        plural: "virtioScsiControllers"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiController"
    ];

    // xPU's PCI ID for the controller
    PciEndpoint pcie_id = 2 [(google.api.field_behavior) = REQUIRED];

    // min QoS limits for the controller
    QosLimit min_limit = 3 [(google.api.field_behavior) = OPTIONAL];

    // max QoS limits for the controller
    QosLimit max_limit = 4 [(google.api.field_behavior) = OPTIONAL];
}

message VirtioScsiLun {
    option (google.api.resource) = {
        type: "storage.opiproject.org/VirtioScsiLun"
        pattern: "volumes/{volume}"
        singular: "virtioScsiLun"
        plural: "virtioScsiLuns"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiLun"
    ];

    // The target that this LUN is in
    string target_name_ref = 2 [(google.api.field_behavior) = REQUIRED];

    // The middle/back-end volume for this LLUN
    string volume_name_ref = 3 [(google.api.field_behavior) = REQUIRED];
}

// Represents a request to create an Virtio Scsi Target.
message CreateVirtioScsiTargetRequest {
    // The Virtio Scsi Target to be created.
    VirtioScsiTarget virtio_scsi_target = 1 [(google.api.field_behavior) = REQUIRED];
    // An optional ID to assign to the Virtio Scsi Target.
    // If this is not provided the system will auto-generate it.
    string virtio_scsi_target_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to delete an Virtio Scsi Target.
message DeleteVirtioScsiTargetRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiTarget"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to update an Virtio Scsi Target.
message UpdateVirtioScsiTargetRequest {
    // The object's `name` field is used to identify the object to be updated.
    VirtioScsiTarget virtio_scsi_target = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to list all Virtio Scsi Targets.
message ListVirtioScsiTargetsRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiTarget"
    ];
    // page size of list request
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Virtio Scsi Targets.
message ListVirtioScsiTargetsResponse {
    repeated VirtioScsiTarget virtio_scsi_targets = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Virtio Scsi Target.
message GetVirtioScsiTargetRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiTarget"
    ];
}

// Represents a request to get an Virtio Scsi Target statistics.
message StatsVirtioScsiTargetRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiTarget"
    ];
}

// Represents a response to get an Virtio Scsi Target statistics.
message StatsVirtioScsiTargetResponse {
    VolumeStats stats = 1;
}

// Represents a request to create an Virtio Scsi Controller.
message CreateVirtioScsiControllerRequest {
    // The Virtio Scsi Controller to be created.
    VirtioScsiController virtio_scsi_controller = 1 [(google.api.field_behavior) = REQUIRED];
    // An optional ID to assign to the Virtio Scsi Controller.
    // If this is not provided the system will auto-generate it.
    string virtio_scsi_controller_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to delete an Virtio Scsi Controller.
message DeleteVirtioScsiControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiController"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to update an Virtio Scsi Controller.
message UpdateVirtioScsiControllerRequest {
    // The object's `name` field is used to identify the object to be updated.
    VirtioScsiController virtio_scsi_controller = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to list all Virtio Scsi Controllers.
message ListVirtioScsiControllersRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiController"
    ];
    // page size of list request
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Virtio Scsi Controllers.
message ListVirtioScsiControllersResponse {
    repeated VirtioScsiController virtio_scsi_controllers = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Virtio Scsi Controller.
message GetVirtioScsiControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiController"
    ];
}

// Represents a request to get an Virtio Scsi Controller statistics.
message StatsVirtioScsiControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiController"
    ];
}

// Represents a response to get an Virtio Scsi Controller statistics.
message StatsVirtioScsiControllerResponse {
    VolumeStats stats = 1;
}

// Represents a request to create an Virtio Scsi Lun.
message CreateVirtioScsiLunRequest {
    // The Virtio Scsi Lun to be created.
    VirtioScsiLun virtio_scsi_lun = 1 [(google.api.field_behavior) = REQUIRED];
    // An optional ID to assign to the Virtio Scsi Lun.
    // If this is not provided the system will auto-generate it.
    string virtio_scsi_lun_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to delete an Virtio Scsi Lun.
message DeleteVirtioScsiLunRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiLun"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to update an Virtio Scsi Lun.
message UpdateVirtioScsiLunRequest {
    // The object's `name` field is used to identify the object to be updated.
    VirtioScsiLun virtio_scsi_lun = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to list all Virtio Scsi Luns.
message ListVirtioScsiLunsRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiLun"
    ];
    // page size of list request
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Virtio Scsi Luns.
message ListVirtioScsiLunsResponse {
    repeated VirtioScsiLun virtio_scsi_luns = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Virtio Scsi Lun.
message GetVirtioScsiLunRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiLun"
    ];
}

// Represents a request to get an Virtio Scsi Lun statistics.
message StatsVirtioScsiLunRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/VirtioScsiLun"
    ];
    string controller_name_ref = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to get an Virtio Scsi Lun statistics.
message StatsVirtioScsiLunResponse {
    VolumeStats stats = 1;
}
