// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "BackendNvmeTcpProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

import "opicommon.proto";
import "uuid.proto";

// Back End (network-facing) APIs. NVMe/TCP and NVMe/RoCEv2 protocols are covered by this service.
service NvmeRemoteControllerService {
    rpc CreateNvmeRemoteController (CreateNvmeRemoteControllerRequest) returns (NvmeRemoteController) {
        option (google.api.http) = {
            post: "/v1/volumes"
            body: "nvme_remote_controller"
        };
        option (google.api.method_signature) = "nvme_remote_controller,nvme_remote_controller_id";
    }
    rpc DeleteNvmeRemoteController (DeleteNvmeRemoteControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=NvmeRemoteControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNvmeRemoteController (UpdateNvmeRemoteControllerRequest) returns (NvmeRemoteController) {
        option (google.api.http) = {
            patch: "/v1/{nvme_remote_controller.name=subsystems}"
            body: "nvme_remote_controller"
        };
        option (google.api.method_signature) = "nvme_remote_controller,update_mask";
    }
    rpc ListNvmeRemoteControllers   (ListNvmeRemoteControllersRequest)   returns (ListNvmeRemoteControllersResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNvmeRemoteController    (GetNvmeRemoteControllerRequest)    returns (NvmeRemoteController)    {
        option (google.api.http) = {
            get: "/v1/{name=NvmeRemoteControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc ResetNvmeRemoteController (ResetNvmeRemoteControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{name=NvmeRemoteControllers/*}:reset"
            body: "*"
        };
        option (google.api.method_signature) = "name";
    }
    rpc StatsNvmeRemoteController  (StatsNvmeRemoteControllerRequest)  returns (StatsNvmeRemoteControllerResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=NvmeRemoteControllers/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }

    rpc ListNvmeRemoteNamespaces   (ListNvmeRemoteNamespacesRequest)   returns (ListNvmeRemoteNamespacesResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }

    rpc CreateNvmePath (CreateNvmePathRequest) returns (NvmePath) {
        option (google.api.http) = {
            post: "/v1/volumes"
            body: "nvme_path"
        };
        option (google.api.method_signature) = "nvme_path,nvme_path_id";
    }
    rpc DeleteNvmePath (DeleteNvmePathRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=NvmePaths/*}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNvmePath (UpdateNvmePathRequest) returns (NvmePath) {
        option (google.api.http) = {
            patch: "/v1/{nvme_path.name=subsystems}"
            body: "nvme_path"
        };
        option (google.api.method_signature) = "nvme_path,update_mask";
    }
    rpc ListNvmePaths   (ListNvmePathsRequest)   returns (ListNvmePathsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNvmePath    (GetNvmePathRequest)    returns (NvmePath)    {
        option (google.api.http) = {
            get: "/v1/{name=NvmePaths/*}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc StatsNvmePath  (StatsNvmePathRequest)  returns (StatsNvmePathResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=NvmePaths/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
}

message NvmeRemoteController {
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmeRemoteController"
        pattern: "volumes/{volume}"
        singular: "nvmeRemoteController"
        plural: "nvmeRemoteControllers"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];

    NvmeMultipath multipath = 2 [(google.api.field_behavior) = REQUIRED];
    int64 io_queues_count = 3 [(google.api.field_behavior) = OPTIONAL];
    int64 queue_size = 4 [(google.api.field_behavior) = OPTIONAL];

    bool hdgst = 5 [(google.api.field_behavior) = OPTIONAL];
    bool ddgst = 6 [(google.api.field_behavior) = OPTIONAL];

    // Nvme/TCP published secure channel specification (TP 8011) based on TLS 1.3 and PSK.
    // Use PSK interchange format with base64 encoding as input.
    // Also use information about hash function in interchange
    // format for retained PSK generation. If no hash is selected,
    // use configured PSK as retained PSK.
    // Check the size of interchange PSK to determine cipher suite.
    // Calculate CRC-32 bytes to ensure validity of PSK.
    // Example: "NVMeTLSkey-1:01:VRLbtnN9AQb2WXW3c9+wEf/DRLz0QuLdbYvEhwtdWwNf9LrZ:"
    // if PSK field is empty, then unsecure connection Nvme/TCP without TLS will be made
    bytes psk = 7 [(google.api.field_behavior) = OPTIONAL];
}

message NvmePath {
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmePath"
        pattern: "volumes/{volume}"
        singular: "nvmePath"
        plural: "nvmePaths"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];

    string controller_name_ref = 2 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];

    NvmeTransportType trtype = 3 [(google.api.field_behavior) = REQUIRED];
    NvmeAddressFamily adrfam = 4 [(google.api.field_behavior) = OPTIONAL];

    // Destination address (e.g. IP address, BDF for local PCIe)
    string traddr = 5 [(google.api.field_behavior) = REQUIRED];

    // Destination service id (e.g. Port)
    int64 trsvcid = 6 [(google.api.field_behavior) = OPTIONAL];

    // Subsystem NQN
    string subnqn = 7 [(google.api.field_behavior) = OPTIONAL];

    // Source address (e.g. IP of local NIC)
    string source_traddr = 8 [(google.api.field_behavior) = OPTIONAL];

    // Source port (e.g. Port of local NIC)
    int64 source_trsvcid = 9 [(google.api.field_behavior) = OPTIONAL];

    // Host NQN
    string hostnqn = 10 [(google.api.field_behavior) = OPTIONAL];
}

message NvmeRemoteNamespace {
    // namespace's unique key. Assign to middle/front-end objects.
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmeRemoteNamespace"
        pattern: "volumes/{volume}"
        singular: "nvmeRemoteNamespace"
        plural: "nvmeRemoteNamespaces"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.field_behavior) = IMMUTABLE,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteNamespace"
    ];

    // controller through which the namespace is visible
    string controller_name_ref = 2 [
        (google.api.field_behavior) = OUTPUT_ONLY,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];

    // NSID
    int32 nsid = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // Globally unique identifier for the namespace
    string nguid = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified
    int64 eui64 = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

    // ANA state and such?
}

message CreateNvmeRemoteControllerRequest {
    NvmeRemoteController nvme_remote_controller = 1 [(google.api.field_behavior) = REQUIRED];
    string nvme_remote_controller_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

message DeleteNvmeRemoteControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

message UpdateNvmeRemoteControllerRequest {
    // The object's `name` field is used to identify the object to be updated.
    NvmeRemoteController nvme_remote_controller = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListNvmeRemoteControllersRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListNvmeRemoteControllersResponse {
    repeated NvmeRemoteController nvme_remote_controllers = 1;
    string next_page_token = 2;
}

message GetNvmeRemoteControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

message ResetNvmeRemoteControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

message StatsNvmeRemoteControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

message StatsNvmeRemoteControllerResponse {
    VolumeStats stats = 1;
}

message ListNvmeRemoteNamespacesRequest {
    // The controller's unique object identifier. This lists
    // namespaces for a particular controller.
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteNamespace"
    ];
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListNvmeRemoteNamespacesResponse {
    repeated NvmeRemoteNamespace nvme_remote_namespaces = 1;
    string next_page_token = 2;
}

message CreateNvmePathRequest {
    NvmePath nvme_path = 1 [(google.api.field_behavior) = REQUIRED];
    string nvme_path_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

message DeleteNvmePathRequest {
    // object's unique identifier
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

message UpdateNvmePathRequest {
    // The object's `name` field is used to identify the object to be updated.
    NvmePath nvme_path = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListNvmePathsRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListNvmePathsResponse {
    repeated NvmePath nvme_paths = 1;
    string next_page_token = 2;
}

message GetNvmePathRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
}

message StatsNvmePathRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
}

message StatsNvmePathResponse {
    VolumeStats stats = 1;
}

enum NvmeTransportType {
    NVME_TRANSPORT_TYPE_UNSPECIFIED = 0;
    NVME_TRANSPORT_FC               = 1;
    NVME_TRANSPORT_PCIE             = 2;
    NVME_TRANSPORT_RDMA             = 3;
    NVME_TRANSPORT_TCP              = 4;
    NVME_TRANSPORT_CUSTOM           = 5;
}

enum NvmeAddressFamily {
    NVME_ADDRESS_FAMILY_UNSPECIFIED = 0;
    NVME_ADRFAM_IPV4                = 1;
    NVME_ADRFAM_IPV6                = 2;
    NVME_ADRFAM_IB                  = 3;
    NVME_ADRFAM_FC                  = 4;
    NVME_ADRFAM_INTRA_HOST          = 5;
}

enum NvmeMultipath {
    NVME_MULTIPATH_UNSPECIFIED = 0;
    NVME_MULTIPATH_DISABLE     = 1;
    NVME_MULTIPATH_FAILOVER    = 2;
    NVME_MULTIPATH_MULTIPATH   = 3;
}
