// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
// Copyright (C) 2023 Intel Corporation

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "FrontendNvmePcieProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";
import "opicommon.proto";
import "object_key.proto";
import "uuid.proto";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

// Front End (host-facing) APIs. Mostly used for Nvme/PCIe emulation and host presentation.
service FrontendNvmeService {
    rpc CreateNvmeSubsystem (CreateNvmeSubsystemRequest) returns (NvmeSubsystem) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nvme_subsystem"
        };
        option (google.api.method_signature) = "parent,nvme_subsystem,nvme_subsystem_id";
    }
    // Fails if there are any associated objects
    rpc DeleteNvmeSubsystem (DeleteNvmeSubsystemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=subsystems}/{subsystem}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNvmeSubsystem (UpdateNvmeSubsystemRequest) returns (NvmeSubsystem) {
        option (google.api.http) = {
            patch: "/v1/{nvme_subsystem.name=subsystems}"
            body: "nvme_subsystem"
        };
        option (google.api.method_signature) = "nvme_subsystem,update_mask";
    }
    rpc ListNvmeSubsystems   (ListNvmeSubsystemsRequest)   returns (ListNvmeSubsystemsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNvmeSubsystem    (GetNvmeSubsystemRequest)    returns (NvmeSubsystem)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{subsystem}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NvmeSubsystemStats  (NvmeSubsystemStatsRequest)  returns (NvmeSubsystemStatsResponse)  {}

    rpc CreateNvmeController (CreateNvmeControllerRequest) returns (NvmeController) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nvme_controller"
        };
        option (google.api.method_signature) = "parent,nvme_controller,nvme_controller_id";
    }
    // Fails if there are any associated objects
    rpc DeleteNvmeController (DeleteNvmeControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=controllers}/{controller}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNvmeController (UpdateNvmeControllerRequest) returns (NvmeController) {
        option (google.api.http) = {
            patch: "/v1/{nvme_controller.name=subsystems}"
            body: "nvme_controller"
        };
        option (google.api.method_signature) = "nvme_controller,update_mask";
    }
    rpc ListNvmeControllers   (ListNvmeControllersRequest)   returns (ListNvmeControllersResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNvmeController    (GetNvmeControllerRequest)    returns (NvmeController)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{controller}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NvmeControllerStats  (NvmeControllerStatsRequest)  returns (NvmeControllerStatsResponse)  {}

    rpc CreateNvmeNamespace (CreateNvmeNamespaceRequest) returns (NvmeNamespace) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nvme_namespace"
        };
        option (google.api.method_signature) = "parent,nvme_namespace,nvme_namespace_id";
    }
    rpc DeleteNvmeNamespace (DeleteNvmeNamespaceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=namespaces}/{namespace}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNvmeNamespace (UpdateNvmeNamespaceRequest) returns (NvmeNamespace) {
        option (google.api.http) = {
            patch: "/v1/{nvme_namespace.name=subsystems}"
            body: "nvme_namespace"
        };
        option (google.api.method_signature) = "nvme_namespace,update_mask";
    }
    rpc ListNvmeNamespaces   (ListNvmeNamespacesRequest)   returns (ListNvmeNamespacesResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNvmeNamespace    (GetNvmeNamespaceRequest)    returns (NvmeNamespace)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{namespace}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NvmeNamespaceStats  (NvmeNamespaceStatsRequest)  returns (NvmeNamespaceStatsResponse)  {}
}

message NvmeSubsystem {
  NvmeSubsystemSpec   spec   = 1;
  NvmeSubsystemStatus status = 2;
}

message NvmeSubsystemSpec {
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmeSubsystemSpec"
        pattern: "volumes/{volume}"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1;

    // Nvme subsystem NQN to which the controller belongs
    // Refer to the NQN format in the Nvme base specifications, must not
    // exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
    string nqn = 2;

    // serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
    string serial_number = 3;

    // model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
    string model_number = 4;

    // maximum namespaces within a subsystem
    int64 max_namespaces = 5;
}

message NvmeSubsystemStatus {
    // firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
    string firmware_revision  = 1;

    // FRU identfier, 16bytes opaque identity for the type of unit
    bytes fru_guid = 2;
}

message NvmeController {
  NvmeControllerSpec   spec   = 1;
  NvmeControllerStatus status = 2;
}

message NvmeControllerSpec {
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmeControllerSpec"
        pattern: "volumes/{volume}"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1;

    // subsystem controller id range: 0 to 65535.
    // must not be reused under the same subsystem
    int32 nvme_controller_id  = 2;

    // subsystem information
    common.v1.ObjectKey subsystem_id = 3;

    // xPU's PCI ID for the controller
    PciEndpoint pcie_id = 4;

    // maximum number of host submission queues allowed.
    // If not set, the xPU will provide a default.
    int32 max_nsq = 5;

    // maximum number of host completion queues allowed.
    // If not set, the xPU will provide a default.
    int32 max_ncq = 6;
  
    // maximum number of submission queue entries per submission queue, as a power of 2.
    // default value as per spec is 6
    int32 sqes = 7;

    // maximum number of completion queue entries per completion queue, as a power of 2.
    // default value as per spec is 4
    int32 cqes = 8;

    // maximum Number of namespaces that will be provisioned under
    // the controller.
    int32 max_namespaces = 9;

    // min QoS limits for the controller
    QosLimit min_limit = 10;

    // max QoS limits for the controller
    QosLimit max_limit = 11;
}

message NvmeControllerStatus {
    // Device is in use by host nvme driver
    bool   active = 1;
}

message NvmeNamespace {
  NvmeNamespaceSpec   spec   = 1;
  NvmeNamespaceStatus status = 2;
}

message NvmeNamespaceSpec {
    option (google.api.resource) = {
        type: "storage.opiproject.org/NvmeNamespaceSpec"
        pattern: "volumes/{volume}"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1;

    // subsystem for this namespace
    common.v1.ObjectKey subsystem_id = 2;

    // NSID present to the host by the Nvme PCIe controller.
    // If not provided, then the controller will assign an unused NSID
    // within the max namespace range - auto assigned nsid may not work
    // for live migration
    int32 host_nsid = 4;

    // Globally unique identifier for the namespace
    string nguid = 7;

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified
    int64 eui64 = 8;

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 9;

    // The back/middle-end volume to back this namespace.
    common.v1.ObjectKey volume_id = 10;
}

message NvmeNamespaceStatus {
    // config state of the namespace object, (enabled, disable, deleting)
    NvmeNamespacePciState      pci_state       = 1;

    // Operational state of the namespace object, (connected, disconnected)
    NvmeNamespacePciOperState  pci_oper_state   = 2;
}

message CreateNvmeSubsystemRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeSubsystem"
    ];
    NvmeSubsystem nvme_subsystem = 2 [(google.api.field_behavior) = REQUIRED];
    string nvme_subsystem_id = 3;
}

message DeleteNvmeSubsystemRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeSubsystem"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNvmeSubsystemRequest {
    NvmeSubsystem nvme_subsystem = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNvmeSubsystemsRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeSubsystem"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNvmeSubsystemsResponse {
    repeated NvmeSubsystem nvme_subsystems = 1;
    string next_page_token = 2;
}

message GetNvmeSubsystemRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeSubsystem"
    ];
}

message NvmeSubsystemStatsRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NvmeSubsystemStatsResponse {
    VolumeStats stats = 1;
}

message CreateNvmeControllerRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeController"
    ];
    NvmeController nvme_controller = 2 [(google.api.field_behavior) = REQUIRED];
    string nvme_controller_id = 3;
}

message DeleteNvmeControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeController"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNvmeControllerRequest {
    NvmeController nvme_controller = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNvmeControllersRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeController"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNvmeControllersResponse {
    repeated NvmeController nvme_controllers = 1;
    string next_page_token = 2;
}

message GetNvmeControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeController"
    ];
}

message NvmeControllerStatsRequest {
    common.v1.ObjectKey id = 1;
}

message NvmeControllerStatsResponse {
    common.v1.ObjectKey id = 1;
    VolumeStats stats = 2;
}

message CreateNvmeNamespaceRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeNamespace"
    ];
    NvmeNamespace nvme_namespace = 2 [(google.api.field_behavior) = REQUIRED];
    string nvme_namespace_id = 3;
}

message DeleteNvmeNamespaceRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeNamespace"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNvmeNamespaceRequest {
    NvmeNamespace nvme_namespace = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNvmeNamespacesRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeNamespace"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNvmeNamespacesResponse {
    repeated NvmeNamespace nvme_namespaces = 1;
    string next_page_token = 2;
}

message GetNvmeNamespaceRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeNamespace"
    ];
}

message NvmeNamespaceStatsRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NvmeNamespaceStatsResponse {
    common.v1.ObjectKey id = 1;
    VolumeStats stats = 2;
}

// Namespace  Administrative States
enum NvmeNamespacePciState {
    // unspecified
    NVME_NAMESPACE_PCI_STATE_UNSPECIFIED = 0;
    // namespace disabled state
    NVME_NAMESPACE_PCI_STATE_DISABLED    = 1;
    // namespace enabled state
    NVME_NAMESPACE_PCI_STATE_ENABLED     = 2;
    // namespace being deleted
    NVME_NAMESPACE_PCI_STATE_DELETING    = 3;
}

// Namespace PCIe operational states
enum NvmeNamespacePciOperState {
    // unspecified
    NVME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED = 0;
    // namespace is online and operational
    NVME_NAMESPACE_PCI_OPER_STATE_ONLINE = 1;
    // namespace is offline
    NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE= 2;
}

