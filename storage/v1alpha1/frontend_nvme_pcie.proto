// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "FrontendNvmePcieProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";
import "common.proto";
import "object_key.proto";
import "uuid.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// Front End (host-facing) APIs.

// NVMe/PCIe emulation

service FrontendNvmeService {
    rpc NVMeSubsystemCreate (NVMeSubsystemCreateRequest) returns (NVMeSubsystem) {
        option (google.api.http) = {
            post: "/v1/subsystems"
            body: "subsystem"
        };
    }
    rpc NVMeSubsystemDelete (NVMeSubsystemDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/subsystems/{subsystem}"
        };
    }
    rpc NVMeSubsystemUpdate (NVMeSubsystemUpdateRequest) returns (NVMeSubsystem) {
        option (google.api.http) = {
            patch: "/v1/subsystems"
            body: "subsystem"
        };
    }
    rpc NVMeSubsystemList   (NVMeSubsystemListRequest)   returns (NVMeSubsystemListResponse)   {
        option (google.api.http) = {
            get: "/v1/subsystems"
        };
    }
    rpc NVMeSubsystemGet    (NVMeSubsystemGetRequest)    returns (NVMeSubsystem)    {
        option (google.api.http) = {
            get: "/v1/subsystems/{subsystem}"
        };
    }
    rpc NVMeSubsystemStats  (NVMeSubsystemStatsRequest)  returns (NVMeSubsystemStatsResponse)  {}

    rpc NVMeControllerCreate (NVMeControllerCreateRequest) returns (NVMeController) {
        option (google.api.http) = {
            post: "/v1/controllers"
            body: "controller"
        };
    }
    rpc NVMeControllerDelete (NVMeControllerDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/controllers/{controller}"
        };
    }
    rpc NVMeControllerUpdate (NVMeControllerUpdateRequest) returns (NVMeController) {
        option (google.api.http) = {
            patch: "/v1/controllers"
            body: "controller"
        };
    }
    rpc NVMeControllerList   (NVMeControllerListRequest)   returns (NVMeControllerListResponse)   {
        option (google.api.http) = {
            get: "/v1/controllers"
        };
    }
    rpc NVMeControllerGet    (NVMeControllerGetRequest)    returns (NVMeController)    {
        option (google.api.http) = {
            get: "/v1/controllers/{controller}"
        };
    }
    rpc NVMeControllerStats  (NVMeControllerStatsRequest)  returns (NVMeControllerStatsResponse)  {}

    rpc NVMeNamespaceCreate (NVMeNamespaceCreateRequest) returns (NVMeNamespace) {
        option (google.api.http) = {
            post: "/v1/namespaces"
            body: "namespace"
        };
    }
    rpc NVMeNamespaceDelete (NVMeNamespaceDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/namespaces/{namespace}"
        };
    }
    rpc NVMeNamespaceUpdate (NVMeNamespaceUpdateRequest) returns (NVMeNamespace) {
        option (google.api.http) = {
            patch: "/v1/namespaces"
            body: "namespace"
        };
    }
    rpc NVMeNamespaceList   (NVMeNamespaceListRequest)   returns (NVMeNamespaceListResponse)   {
        option (google.api.http) = {
            get: "/v1/namespaces"
        };
    }
    rpc NVMeNamespaceGet    (NVMeNamespaceGetRequest)    returns (NVMeNamespace)    {
        option (google.api.http) = {
            get: "/v1/namespaces/{namespace}"
        };
    }
    rpc NVMeNamespaceStats  (NVMeNamespaceStatsRequest)  returns (NVMeNamespaceStatsResponse)  {}
}

message NVMeSubsystem {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // NVMe subsystem NQN to which the controller belongs
    // Refer to the NQN format in the NVMe base specifications, must not
    // exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
    string nqn = 2;

    // serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
    string serial_number = 3;

    // model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
    string model_number = 4;

    // maximum namespaces within a subsystem
    int64 max_namespaces = 5;

    // firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
    string firmware_revision  = 6;

    // FRU identfier, 16bytes opaque identity for the type of unit
    bytes fru_guid = 7;
}

message NVMeController {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // subsystem controller id range: 0 to 65535.
    // must not be reused under the same subsystem
    int32 nvme_controller_id  = 2;

    // subsystem information
    common.v1.ObjectKey subsystem_id = 3;

    // xPU's PCI ID for the controller
    NvmeControllerPciId pcie_id = 4;

    // maximum number of host submission queues allowed.
    // If not set, the xPU will provide a default.
    int32 max_nsq = 5;

    // maximum number of host completion queues allowed. Optional.
    // If not set, the xPU will provide a default.
    int32 max_ncq = 6;
  
    // maximum number of submission queue entries per submission queue, as a power of 2.
    // default value as per spec is 6
    int32 sqes = 7;

    // maximum number of completion queue entries per completion queue, as a power of 2.
    // default value as per spec is 4
    int32 cqes = 8;

    // maximum Number of namespaces that will be provisioned under
    // the controller.
    int32 max_namespaces = 9;
}

message NVMeNamespace {
    // namespace's unique key
    // replaces: int64 id = 1;
    common.v1.ObjectKey id = 1;

    // subsystem for this namespace
    common.v1.ObjectKey subsystem_id = 2;

    // key of the PCIe controller object that will host this namespace.
    common.v1.ObjectKey controller_id = 3;

    // NSID present to the host by the NVMe PCIe controller.
    // If not provided, then the controller will assign an unused NSID
    // within the max namespace range - auto assigned nsid may not work
    // for live migration
    int32 host_nsid = 4;

    // Block size in bytes, must be power of 2 and must be less than the max
    // io size supported. Typically tested values are 512, and 4k.
    int64 block_size = 5;

    // Size/Capacity of the namespace in blocks, size in bytes will
    // be BlockSize x NumBlocks.
    int64 num_blocks = 6;

    // Globally unique identifier for the namespace
    string nguid = 7;

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified, optional otherwise
    int64 eui64 = 8;

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 9;

    // The back/middle-end volume to back this namespace.
    common.v1.ObjectKey volume_id = 10;

    // optimal write size hint to host driver. Host IO stack may use
    // this to regulate IO size. Must be a multiple of the preferred write
    // granularity. Must not exceed the controller maximum IO size value
    // configured in the nvme agent config file.
    int32 optimal_write_size = 11;

    // preferred write granularity hint to the host driver. Host IO
    // stack may use this to align IO sizes to the write granularity for
    // optimum performance.
    int32 pref_write_granularity= 12;
}

message NVMeSubsystemCreateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemDeleteRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemUpdateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemListRequest {
    // Intentionally empty.
}

message NVMeSubsystemListResponse {
    repeated NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemGetRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemStatsRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemStatsResponse {
    string stats = 1;
}

message NVMeControllerCreateRequest {
    NVMeController controller = 1;
}

message NVMeControllerDeleteRequest {
    common.v1.ObjectKey controller_id = 1;
}

message NVMeControllerUpdateRequest {
    NVMeController controller = 1;
}

message NVMeControllerListRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeControllerListResponse {
    repeated NVMeController controller = 1;
}

message NVMeControllerGetRequest {
    common.v1.ObjectKey controller_id = 1;
}

message NVMeControllerStatsRequest {
    common.v1.ObjectKey id = 1;
}

message NVMeControllerStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

message NVMeNamespaceCreateRequest {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceDeleteRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceUpdateRequest {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceListRequest {
    common.v1.ObjectKey subsystem_id = 1;
    common.v1.ObjectKey controller_id = 2;
}

message NVMeNamespaceListResponse {
    repeated NVMeNamespace namespace = 1;
}

message NVMeNamespaceGetRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceStatsRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

