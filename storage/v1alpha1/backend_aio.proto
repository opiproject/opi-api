// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "BackendAioProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "object_key.proto";
import "uuid.proto";

// Back End (network-facing) APIs. This service is for AIO generic kernel block device.
service AioControllerService {
    rpc CreateAioController (CreateAioControllerRequest) returns (AioController) {
        option (google.api.http) = {
            post: "/v1/subsystems"
            body: "subsystem"
        };
    }
    rpc DeleteAioController (DeleteAioControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/subsystems/{subsystem}"
        };
    }
    rpc UpdateAioController (UpdateAioControllerRequest) returns (AioController) {
        option (google.api.http) = {
            patch: "/v1/subsystems"
            body: "subsystem"
        };
    }
    rpc ListAioController   (ListAioControllerRequest)   returns (ListAioControllerResponse)   {
        option (google.api.http) = {
            get: "/v1/subsystems"
        };
    }
    rpc GetAioController    (GetAioControllerRequest)    returns (AioController)    {
        option (google.api.http) = {
            get: "/v1/subsystems/{subsystem}"
        };
    }
    rpc AioControllerStats  (AioControllerStatsRequest)  returns (AioControllerStatsResponse)  {}
}

message AioController {
    // handle is an opaque object handle that is not user settable.
    // handle will be returned with created object
    common.v1.ObjectKey handle = 1;

    int64 block_size = 2;
    int64 blocks_count = 3;
    common.v1.Uuid uuid = 4;
    string filename = 5;
}

message CreateAioControllerRequest {
    AioController device = 1;
}

message DeleteAioControllerRequest {
    common.v1.ObjectKey handle = 1;
}

message UpdateAioControllerRequest {
    AioController device = 1;
}

message ListAioControllerRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListAioControllerResponse{
    repeated AioController devices = 1;
    string next_page_token = 2;
}

message GetAioControllerRequest {
    common.v1.ObjectKey handle = 1;
}

message AioControllerStatsRequest {
    common.v1.ObjectKey handle = 1;
}

message AioControllerStatsResponse {
    common.v1.ObjectKey handle = 1;
    string stats = 2;
}

