// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// Copyright (C) 2023 Intel Corporation

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "BackendNvmeProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

import "opicommon.proto";
import "uuid.proto";

// Back End APIs. Responsible for connection to external Nvme devices
// e.g. connection to Nvme/TCP Nvme/RDMA and local Nvme/Pcie ssds
service NvmeRemoteControllerService {
    // Create an Nvme Remote Controller
    rpc CreateNvmeRemoteController (CreateNvmeRemoteControllerRequest) returns (NvmeRemoteController) {
        option (google.api.http) = {
            post: "/v1/nvmeRemoteControllers"
            body: "nvme_remote_controller"
        };
        option (google.api.method_signature) = "nvme_remote_controller,nvme_remote_controller_id";
    }
    // Delete an Nvme Remote Controller
    rpc DeleteNvmeRemoteController (DeleteNvmeRemoteControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=nvmeRemoteControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Update an Nvme Remote Controller
    rpc UpdateNvmeRemoteController (UpdateNvmeRemoteControllerRequest) returns (NvmeRemoteController) {
        option (google.api.http) = {
            patch: "/v1/{nvme_remote_controller.name=nvmeRemoteControllers/*}"
            body: "nvme_remote_controller"
        };
        option (google.api.method_signature) = "nvme_remote_controller,update_mask";
    }
    // List Nvme Remote Controllers
    rpc ListNvmeRemoteControllers   (ListNvmeRemoteControllersRequest)   returns (ListNvmeRemoteControllersResponse)   {
        option (google.api.http) = {
            get: "/v1/nvmeRemoteControllers"
        };
    }
    // Get an Nvme Remote Controller
    rpc GetNvmeRemoteController    (GetNvmeRemoteControllerRequest)    returns (NvmeRemoteController)    {
        option (google.api.http) = {
            get: "/v1/{name=nvmeRemoteControllers/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Reset an Nvme Remote Controller
    rpc ResetNvmeRemoteController (ResetNvmeRemoteControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{name=nvmeRemoteControllers/*}:reset"
            body: "*"
        };
        option (google.api.method_signature) = "name";
    }
    // Get an Nvme Remote Controller statistics
    rpc StatsNvmeRemoteController  (StatsNvmeRemoteControllerRequest)  returns (StatsNvmeRemoteControllerResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=nvmeRemoteControllers/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
    // List Nvme Remote Namespaces
    rpc ListNvmeRemoteNamespaces   (ListNvmeRemoteNamespacesRequest)   returns (ListNvmeRemoteNamespacesResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=nvmeRemoteControllers/*}/nvmeRemoteNamespaces"
        };
        option (google.api.method_signature) = "parent";
    }
    // Get an Nvme Remote Namespace
    rpc GetNvmeRemoteNamespace (GetNvmeRemoteNamespaceRequest) returns (NvmeRemoteNamespace) {
        option (google.api.http) = {
            get: "/v1/{name=nvmeRemoteControllers/*/nvmeRemoteNamespaces/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Create an Nvme Path
    rpc CreateNvmePath (CreateNvmePathRequest) returns (NvmePath) {
        option (google.api.http) = {
            post: "/v1/{parent=nvmeRemoteControllers/*}/nvmePaths"
            body: "nvme_path"
        };
        option (google.api.method_signature) = "parent,nvme_path,nvme_path_id";
    }
    // Delete an Nvme Path
    rpc DeleteNvmePath (DeleteNvmePathRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=nvmeRemoteControllers/*/nvmePaths/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Update an Nvme Path
    rpc UpdateNvmePath (UpdateNvmePathRequest) returns (NvmePath) {
        option (google.api.http) = {
            patch: "/v1/{nvme_path.name=nvmeRemoteControllers/*/nvmePaths/*}"
            body: "nvme_path"
        };
        option (google.api.method_signature) = "nvme_path,update_mask";
    }
    // List Nvme Paths
    rpc ListNvmePaths   (ListNvmePathsRequest)   returns (ListNvmePathsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=nvmeRemoteControllers/*}/nvmePaths"
        };
        option (google.api.method_signature) = "parent";
    }
    // Get an Nvme Path
    rpc GetNvmePath    (GetNvmePathRequest)    returns (NvmePath)    {
        option (google.api.http) = {
            get: "/v1/{name=nvmeRemoteControllers/*/nvmePaths/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Get an Nvme Path statistics
    rpc StatsNvmePath  (StatsNvmePathRequest)  returns (StatsNvmePathResponse)  {
        option (google.api.http) = {
            get: "/v1/{name=nvmeRemoteControllers/*/nvmePaths/*}:stats"
        };
        option (google.api.method_signature) = "name";
    }
}

// Represents a target controller
message NvmeRemoteController {
    option (google.api.resource) = {
        type: "opi_api.storage.v1/NvmeRemoteController"
        pattern: "nvmeRemoteControllers/{controller}"
        singular: "nvmeRemoteController"
        plural: "nvmeRemoteControllers"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [(google.api.field_behavior) = IDENTIFIER];

    // Multipath mode
    NvmeMultipath multipath = 2 [(google.api.field_behavior) = REQUIRED];

    // IO queues count
    int64 io_queues_count = 3 [(google.api.field_behavior) = OPTIONAL];

    // Queue size
    int64 queue_size = 4 [(google.api.field_behavior) = OPTIONAL];

    // Nvme over TCP specific fields
    TcpController tcp = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Represents parameters specific for TCP target controller
message TcpController {
    // Header digest
    bool hdgst = 1 [(google.api.field_behavior) = OPTIONAL];

    // Data digest
    bool ddgst = 2 [(google.api.field_behavior) = OPTIONAL];

    // Nvme/TCP published secure channel specification (TP 8011) based on TLS 1.3 and PSK.
    // Use PSK interchange format with base64 encoding as input.
    // Also use information about hash function in interchange
    // format for retained PSK generation. If no hash is selected,
    // use configured PSK as retained PSK.
    // Check the size of interchange PSK to determine cipher suite.
    // Calculate CRC-32 bytes to ensure validity of PSK.
    // Example: "NVMeTLSkey-1:01:VRLbtnN9AQb2WXW3c9+wEf/DRLz0QuLdbYvEhwtdWwNf9LrZ:"
    // if PSK field is empty, then unsecure connection Nvme/TCP without TLS will be made
    bytes psk = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a specific path to target controller
message NvmePath {
    option (google.api.resource) = {
        type: "opi_api.storage.v1/NvmePath"
        pattern: "nvmeRemoteControllers/{controller}/nvmePaths/{path}"
        singular: "nvmePath"
        plural: "nvmePaths"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [(google.api.field_behavior) = IDENTIFIER];

    // Transport type
    NvmeTransportType trtype = 2 [(google.api.field_behavior) = REQUIRED];

    // Destination address (e.g. IP address, BDF for local PCIe)
    string traddr = 3 [(google.api.field_behavior) = REQUIRED];

    // Not applicable for local PCIe. Required for Nvme over fabrics transport types
    FabricsPath fabrics = 4 [(google.api.field_behavior) = OPTIONAL];
}

// Represents Fabrics transport path parameters
message FabricsPath {
    // Destination service id (e.g. Port)
    int64 trsvcid = 1 [(google.api.field_behavior) = REQUIRED];

    // Subsystem NQN
    string subnqn = 2 [(google.api.field_behavior) = REQUIRED];

    // Address family
    NvmeAddressFamily adrfam = 3 [(google.api.field_behavior) = REQUIRED];

    // Source address (e.g. IP of local NIC)
    string source_traddr = 4 [(google.api.field_behavior) = OPTIONAL];

    // Source port (e.g. Port of local NIC)
    int64 source_trsvcid = 5 [(google.api.field_behavior) = OPTIONAL];

    // Host NQN
    string hostnqn = 6 [(google.api.field_behavior) = OPTIONAL];
}

// Represent Nvme namespace created on bridge after connection to a target
message NvmeRemoteNamespace {
    // namespace's unique key. Assign to middle/front-end objects.
    option (google.api.resource) = {
        type: "opi_api.storage.v1/NvmeRemoteNamespace"
        pattern: "nvmeRemoteControllers/{controller}/nvmeRemoteNamespaces/{namespace}"
        singular: "nvmeRemoteNamespace"
        plural: "nvmeRemoteNamespaces"
    };

    // name is an opaque object handle that is not user settable.
    // name will be returned with created object
    // user can only set {resource}_id on the Create request object
    string name = 1 [(google.api.field_behavior) = IDENTIFIER];

    // NSID
    int32 nsid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

    // Globally unique identifier for the namespace
    string nguid = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified
    int64 eui64 = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

    // ANA state and such?
}

// Represents a request to create an Nvme Remote Controller.
message CreateNvmeRemoteControllerRequest {
    // The Nvme Remote Controller to be created.
    NvmeRemoteController nvme_remote_controller = 1 [(google.api.field_behavior) = REQUIRED];
    // An optional ID to assign to the Nvme Remote Controller.
    // If this is not provided the system will auto-generate it.
    string nvme_remote_controller_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

// (-- api-linter: core::0135::force-field=disabled
//     aip.dev/not-precedent: disabled since cascade deleting is a dangerous
//                            operation and we want to force a user to delete
//                            all child resources(paths) on
//                            its own --)
// Represents a request to delete an Nvme Remote Controller.
message DeleteNvmeRemoteControllerRequest {
    // Object's unique identifier to delete
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to update an Nvme Remote Controller.
message UpdateNvmeRemoteControllerRequest {
    // The object's `name` field is used to identify the object to be updated.
    NvmeRemoteController nvme_remote_controller = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to list all Nvme Remote Controllers.
message ListNvmeRemoteControllersRequest {
    // page size of list request
    int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Nvme Remote Controllers.
message ListNvmeRemoteControllersResponse {
    // List of Nvme Remote Controllers
    repeated NvmeRemoteController nvme_remote_controllers = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Nvme Remote Controller.
message GetNvmeRemoteControllerRequest {
    // Object's unique identifier to retrieve
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

// Represents a request to reset an Nvme Remote Controller.
message ResetNvmeRemoteControllerRequest {
    // Object's unique identifier to reset
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

// Represents a request to get an Nvme Remote Controller statistics.
message StatsNvmeRemoteControllerRequest {
    // Object's unique identifier to retrieve statistics
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
}

// Represents a response to get an Nvme Remote Controller statistics.
message StatsNvmeRemoteControllerResponse {
    // Controller statistics
    VolumeStats stats = 1;
}

// Represents a request to list all Nvme Remote Namespaces.
message ListNvmeRemoteNamespacesRequest {
    // The controller's unique object identifier. This lists
    // namespaces for a particular controller.
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).child_type = "opi_api.storage.v1/NvmeRemoteNamespace"
    ];
    // page size of list request
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Nvme Remote Namespaces.
message ListNvmeRemoteNamespacesResponse {
    // List of Remote Namespaces
    repeated NvmeRemoteNamespace nvme_remote_namespaces = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Nvme Remote Namespace.
message GetNvmeRemoteNamespaceRequest {
    // Object's unique identifier to retrieve
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteNamespace"
    ];
}

// Represents a request to create an Nvme Path.
message CreateNvmePathRequest {
    // Parent's remote controller unique identifier
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmeRemoteController"
    ];
    // The Nvme Path to be created.
    NvmePath nvme_path = 2 [(google.api.field_behavior) = REQUIRED];
    // An optional ID to assign to the Nvme Path.
    // If this is not provided the system will auto-generate it.
    string nvme_path_id = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to delete an Nvme Path.
message DeleteNvmePathRequest {
    // object's unique identifier
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to update an Nvme Path.
message UpdateNvmePathRequest {
    // The object's `name` field is used to identify the object to be updated.
    NvmePath nvme_path = 1 [(google.api.field_behavior) = REQUIRED];
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
    // If set to true, and the object is not found, a new object will be created.
    // In this situation, `update_mask` is ignored.
    bool allow_missing = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a request to list all Nvme Paths.
message ListNvmePathsRequest {
    // Parent's object unique identifier
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).child_type = "opi_api.storage.v1/NvmePath"
    ];
    // page size of list request
    int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
    // page token of list request
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Represents a response to list all Nvme Paths.
message ListNvmePathsResponse {
    // List of Nvme Paths
    repeated NvmePath nvme_paths = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// Represents a request to get an Nvme Path.
message GetNvmePathRequest {
    // Object's unique identifier to retrieve
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
}

// Represents a request to get an Nvme Path statistics.
message StatsNvmePathRequest {
    // Object's unique identifier to retrieve statistics
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NvmePath"
    ];
}

// Represents a response to get an Nvme Path statistics.
message StatsNvmePathResponse {
    // Path statistics
    VolumeStats stats = 1;
}

// Multipath mode value options
enum NvmeMultipath {
    // Multipath mode is not specified
    NVME_MULTIPATH_UNSPECIFIED = 0;
    // Multipathing is disabled
    NVME_MULTIPATH_DISABLE     = 1;
    // Failover mode where only one active connection is maintained and
    // path is changed only at switch-over
    NVME_MULTIPATH_FAILOVER    = 2;
    // Multipath mode where active connections are maintained for every path
    NVME_MULTIPATH_MULTIPATH   = 3;
}
