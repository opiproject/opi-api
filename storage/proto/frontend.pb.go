// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: frontend.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NVMeSubsystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nqn          string `protobuf:"bytes,3,opt,name=nqn,proto3" json:"nqn,omitempty"`
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ModelNumber  string `protobuf:"bytes,5,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	MaxNs        int64  `protobuf:"varint,6,opt,name=max_ns,json=maxNs,proto3" json:"max_ns,omitempty"`
}

func (x *NVMeSubsystem) Reset() {
	*x = NVMeSubsystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystem) ProtoMessage() {}

func (x *NVMeSubsystem) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystem.ProtoReflect.Descriptor instead.
func (*NVMeSubsystem) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{0}
}

func (x *NVMeSubsystem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeSubsystem) GetNqn() string {
	if x != nil {
		return x.Nqn
	}
	return ""
}

func (x *NVMeSubsystem) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *NVMeSubsystem) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *NVMeSubsystem) GetMaxNs() int64 {
	if x != nil {
		return x.MaxNs
	}
	return 0
}

type NVMeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SubsystemId string `protobuf:"bytes,3,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	PcieId      string `protobuf:"bytes,4,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	MaxIoQps    int64  `protobuf:"varint,5,opt,name=max_io_qps,json=maxIoQps,proto3" json:"max_io_qps,omitempty"`
	MaxNs       int64  `protobuf:"varint,6,opt,name=max_ns,json=maxNs,proto3" json:"max_ns,omitempty"`
}

func (x *NVMeController) Reset() {
	*x = NVMeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeController) ProtoMessage() {}

func (x *NVMeController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeController.ProtoReflect.Descriptor instead.
func (*NVMeController) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{1}
}

func (x *NVMeController) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeController) GetSubsystemId() string {
	if x != nil {
		return x.SubsystemId
	}
	return ""
}

func (x *NVMeController) GetPcieId() string {
	if x != nil {
		return x.PcieId
	}
	return ""
}

func (x *NVMeController) GetMaxIoQps() int64 {
	if x != nil {
		return x.MaxIoQps
	}
	return 0
}

func (x *NVMeController) GetMaxNs() int64 {
	if x != nil {
		return x.MaxNs
	}
	return 0
}

type NVMeNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SubsystemId    string `protobuf:"bytes,3,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId   int64  `protobuf:"varint,4,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Nsid           int64  `protobuf:"varint,5,opt,name=nsid,proto3" json:"nsid,omitempty"`
	Bdev           string `protobuf:"bytes,6,opt,name=bdev,proto3" json:"bdev,omitempty"`
	BlockSize      int64  `protobuf:"varint,7,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	NumBlocks      int64  `protobuf:"varint,8,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	Nguid          string `protobuf:"bytes,9,opt,name=nguid,proto3" json:"nguid,omitempty"`
	Eui64          string `protobuf:"bytes,10,opt,name=eui64,proto3" json:"eui64,omitempty"`
	Uuid           string `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Multipath      string `protobuf:"bytes,12,opt,name=multipath,proto3" json:"multipath,omitempty"`
	Authentication string `protobuf:"bytes,13,opt,name=authentication,proto3" json:"authentication,omitempty"`
}

func (x *NVMeNamespace) Reset() {
	*x = NVMeNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespace) ProtoMessage() {}

func (x *NVMeNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespace.ProtoReflect.Descriptor instead.
func (*NVMeNamespace) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{2}
}

func (x *NVMeNamespace) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespace) GetSubsystemId() string {
	if x != nil {
		return x.SubsystemId
	}
	return ""
}

func (x *NVMeNamespace) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *NVMeNamespace) GetNsid() int64 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *NVMeNamespace) GetBdev() string {
	if x != nil {
		return x.Bdev
	}
	return ""
}

func (x *NVMeNamespace) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *NVMeNamespace) GetNumBlocks() int64 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *NVMeNamespace) GetNguid() string {
	if x != nil {
		return x.Nguid
	}
	return ""
}

func (x *NVMeNamespace) GetEui64() string {
	if x != nil {
		return x.Eui64
	}
	return ""
}

func (x *NVMeNamespace) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NVMeNamespace) GetMultipath() string {
	if x != nil {
		return x.Multipath
	}
	return ""
}

func (x *NVMeNamespace) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

type VirtioBlk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PcieId       string `protobuf:"bytes,3,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
	Bdev         string `protobuf:"bytes,4,opt,name=bdev,proto3" json:"bdev,omitempty"`
	MaxIoQps     int64  `protobuf:"varint,5,opt,name=max_io_qps,json=maxIoQps,proto3" json:"max_io_qps,omitempty"`
	SerialNumber string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *VirtioBlk) Reset() {
	*x = VirtioBlk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlk) ProtoMessage() {}

func (x *VirtioBlk) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlk.ProtoReflect.Descriptor instead.
func (*VirtioBlk) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{3}
}

func (x *VirtioBlk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioBlk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtioBlk) GetPcieId() string {
	if x != nil {
		return x.PcieId
	}
	return ""
}

func (x *VirtioBlk) GetBdev() string {
	if x != nil {
		return x.Bdev
	}
	return ""
}

func (x *VirtioBlk) GetMaxIoQps() int64 {
	if x != nil {
		return x.MaxIoQps
	}
	return 0
}

func (x *VirtioBlk) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type VirtioScsiController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PcieId string `protobuf:"bytes,4,opt,name=pcie_id,json=pcieId,proto3" json:"pcie_id,omitempty"`
}

func (x *VirtioScsiController) Reset() {
	*x = VirtioScsiController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiController) ProtoMessage() {}

func (x *VirtioScsiController) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiController.ProtoReflect.Descriptor instead.
func (*VirtioScsiController) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{4}
}

func (x *VirtioScsiController) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioScsiController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtioScsiController) GetPcieId() string {
	if x != nil {
		return x.PcieId
	}
	return ""
}

type VirtioScsiLun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ControllerId int64  `protobuf:"varint,4,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	Bdev         string `protobuf:"bytes,6,opt,name=bdev,proto3" json:"bdev,omitempty"`
}

func (x *VirtioScsiLun) Reset() {
	*x = VirtioScsiLun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLun) ProtoMessage() {}

func (x *VirtioScsiLun) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLun.ProtoReflect.Descriptor instead.
func (*VirtioScsiLun) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{5}
}

func (x *VirtioScsiLun) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioScsiLun) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *VirtioScsiLun) GetBdev() string {
	if x != nil {
		return x.Bdev
	}
	return ""
}

type NVMeSubsystemCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemCreateRequest) Reset() {
	*x = NVMeSubsystemCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemCreateRequest) ProtoMessage() {}

func (x *NVMeSubsystemCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{6}
}

func (x *NVMeSubsystemCreateRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeSubsystemCreateResponse) Reset() {
	*x = NVMeSubsystemCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemCreateResponse) ProtoMessage() {}

func (x *NVMeSubsystemCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{7}
}

type NVMeSubsystemDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemDeleteRequest) Reset() {
	*x = NVMeSubsystemDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemDeleteRequest) ProtoMessage() {}

func (x *NVMeSubsystemDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{8}
}

func (x *NVMeSubsystemDeleteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeSubsystemDeleteResponse) Reset() {
	*x = NVMeSubsystemDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemDeleteResponse) ProtoMessage() {}

func (x *NVMeSubsystemDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{9}
}

type NVMeSubsystemUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemUpdateRequest) Reset() {
	*x = NVMeSubsystemUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemUpdateRequest) ProtoMessage() {}

func (x *NVMeSubsystemUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{10}
}

func (x *NVMeSubsystemUpdateRequest) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeSubsystemUpdateResponse) Reset() {
	*x = NVMeSubsystemUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemUpdateResponse) ProtoMessage() {}

func (x *NVMeSubsystemUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{11}
}

type NVMeSubsystemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeSubsystemListRequest) Reset() {
	*x = NVMeSubsystemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListRequest) ProtoMessage() {}

func (x *NVMeSubsystemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{12}
}

type NVMeSubsystemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem []*NVMeSubsystem `protobuf:"bytes,1,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemListResponse) Reset() {
	*x = NVMeSubsystemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListResponse) ProtoMessage() {}

func (x *NVMeSubsystemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{13}
}

func (x *NVMeSubsystemListResponse) GetSubsystem() []*NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemGetRequest) Reset() {
	*x = NVMeSubsystemGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemGetRequest) ProtoMessage() {}

func (x *NVMeSubsystemGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{14}
}

func (x *NVMeSubsystemGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *NVMeSubsystem `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *NVMeSubsystemGetResponse) Reset() {
	*x = NVMeSubsystemGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemGetResponse) ProtoMessage() {}

func (x *NVMeSubsystemGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{15}
}

func (x *NVMeSubsystemGetResponse) GetSubsystem() *NVMeSubsystem {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type NVMeSubsystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemStatsRequest) Reset() {
	*x = NVMeSubsystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsRequest) ProtoMessage() {}

func (x *NVMeSubsystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{16}
}

func (x *NVMeSubsystemStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeSubsystemStatsResponse) Reset() {
	*x = NVMeSubsystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsResponse) ProtoMessage() {}

func (x *NVMeSubsystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{17}
}

func (x *NVMeSubsystemStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeSubsystemStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type NVMeControllerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerCreateRequest) Reset() {
	*x = NVMeControllerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerCreateRequest) ProtoMessage() {}

func (x *NVMeControllerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{18}
}

func (x *NVMeControllerCreateRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeControllerCreateResponse) Reset() {
	*x = NVMeControllerCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerCreateResponse) ProtoMessage() {}

func (x *NVMeControllerCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{19}
}

type NVMeControllerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeControllerDeleteRequest) Reset() {
	*x = NVMeControllerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerDeleteRequest) ProtoMessage() {}

func (x *NVMeControllerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{20}
}

func (x *NVMeControllerDeleteRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeControllerDeleteRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type NVMeControllerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeControllerDeleteResponse) Reset() {
	*x = NVMeControllerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerDeleteResponse) ProtoMessage() {}

func (x *NVMeControllerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{21}
}

type NVMeControllerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerUpdateRequest) Reset() {
	*x = NVMeControllerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerUpdateRequest) ProtoMessage() {}

func (x *NVMeControllerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{22}
}

func (x *NVMeControllerUpdateRequest) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeControllerUpdateResponse) Reset() {
	*x = NVMeControllerUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerUpdateResponse) ProtoMessage() {}

func (x *NVMeControllerUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{23}
}

type NVMeControllerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *NVMeControllerListRequest) Reset() {
	*x = NVMeControllerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListRequest) ProtoMessage() {}

func (x *NVMeControllerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{24}
}

func (x *NVMeControllerListRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

type NVMeControllerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller []*NVMeController `protobuf:"bytes,1,rep,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerListResponse) Reset() {
	*x = NVMeControllerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListResponse) ProtoMessage() {}

func (x *NVMeControllerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{25}
}

func (x *NVMeControllerListResponse) GetController() []*NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeControllerGetRequest) Reset() {
	*x = NVMeControllerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerGetRequest) ProtoMessage() {}

func (x *NVMeControllerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{26}
}

func (x *NVMeControllerGetRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeControllerGetRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type NVMeControllerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *NVMeController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NVMeControllerGetResponse) Reset() {
	*x = NVMeControllerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerGetResponse) ProtoMessage() {}

func (x *NVMeControllerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{27}
}

func (x *NVMeControllerGetResponse) GetController() *NVMeController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type NVMeControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeControllerStatsRequest) Reset() {
	*x = NVMeControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsRequest) ProtoMessage() {}

func (x *NVMeControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{28}
}

func (x *NVMeControllerStatsRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeControllerStatsRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type NVMeControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeControllerStatsResponse) Reset() {
	*x = NVMeControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsResponse) ProtoMessage() {}

func (x *NVMeControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{29}
}

func (x *NVMeControllerStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type NVMeNamespaceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceCreateRequest) Reset() {
	*x = NVMeNamespaceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceCreateRequest) ProtoMessage() {}

func (x *NVMeNamespaceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{30}
}

func (x *NVMeNamespaceCreateRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeNamespaceCreateResponse) Reset() {
	*x = NVMeNamespaceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceCreateResponse) ProtoMessage() {}

func (x *NVMeNamespaceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{31}
}

type NVMeNamespaceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	NamespaceId  int64 `protobuf:"varint,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceDeleteRequest) Reset() {
	*x = NVMeNamespaceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceDeleteRequest) ProtoMessage() {}

func (x *NVMeNamespaceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{32}
}

func (x *NVMeNamespaceDeleteRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeNamespaceDeleteRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *NVMeNamespaceDeleteRequest) GetNamespaceId() int64 {
	if x != nil {
		return x.NamespaceId
	}
	return 0
}

type NVMeNamespaceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeNamespaceDeleteResponse) Reset() {
	*x = NVMeNamespaceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceDeleteResponse) ProtoMessage() {}

func (x *NVMeNamespaceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{33}
}

type NVMeNamespaceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceUpdateRequest) Reset() {
	*x = NVMeNamespaceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceUpdateRequest) ProtoMessage() {}

func (x *NVMeNamespaceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{34}
}

func (x *NVMeNamespaceUpdateRequest) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NVMeNamespaceUpdateResponse) Reset() {
	*x = NVMeNamespaceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceUpdateResponse) ProtoMessage() {}

func (x *NVMeNamespaceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{35}
}

type NVMeNamespaceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *NVMeNamespaceListRequest) Reset() {
	*x = NVMeNamespaceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListRequest) ProtoMessage() {}

func (x *NVMeNamespaceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{36}
}

func (x *NVMeNamespaceListRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeNamespaceListRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type NVMeNamespaceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace []*NVMeNamespace `protobuf:"bytes,1,rep,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceListResponse) Reset() {
	*x = NVMeNamespaceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListResponse) ProtoMessage() {}

func (x *NVMeNamespaceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{37}
}

func (x *NVMeNamespaceListResponse) GetNamespace() []*NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	NamespaceId  int64 `protobuf:"varint,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceGetRequest) Reset() {
	*x = NVMeNamespaceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceGetRequest) ProtoMessage() {}

func (x *NVMeNamespaceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{38}
}

func (x *NVMeNamespaceGetRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeNamespaceGetRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *NVMeNamespaceGetRequest) GetNamespaceId() int64 {
	if x != nil {
		return x.NamespaceId
	}
	return 0
}

type NVMeNamespaceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NVMeNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NVMeNamespaceGetResponse) Reset() {
	*x = NVMeNamespaceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceGetResponse) ProtoMessage() {}

func (x *NVMeNamespaceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{39}
}

func (x *NVMeNamespaceGetResponse) GetNamespace() *NVMeNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type NVMeNamespaceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId  int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ControllerId int64 `protobuf:"varint,2,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	NamespaceId  int64 `protobuf:"varint,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (x *NVMeNamespaceStatsRequest) Reset() {
	*x = NVMeNamespaceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsRequest) ProtoMessage() {}

func (x *NVMeNamespaceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{40}
}

func (x *NVMeNamespaceStatsRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *NVMeNamespaceStatsRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *NVMeNamespaceStatsRequest) GetNamespaceId() int64 {
	if x != nil {
		return x.NamespaceId
	}
	return 0
}

type NVMeNamespaceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *NVMeNamespaceStatsResponse) Reset() {
	*x = NVMeNamespaceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsResponse) ProtoMessage() {}

func (x *NVMeNamespaceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{41}
}

func (x *NVMeNamespaceStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NVMeNamespaceStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type VirtioBlkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioBlk `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioBlkCreateRequest) Reset() {
	*x = VirtioBlkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkCreateRequest) ProtoMessage() {}

func (x *VirtioBlkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkCreateRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{42}
}

func (x *VirtioBlkCreateRequest) GetController() *VirtioBlk {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioBlkCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioBlkCreateResponse) Reset() {
	*x = VirtioBlkCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkCreateResponse) ProtoMessage() {}

func (x *VirtioBlkCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkCreateResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{43}
}

type VirtioBlkDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioBlkDeleteRequest) Reset() {
	*x = VirtioBlkDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkDeleteRequest) ProtoMessage() {}

func (x *VirtioBlkDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkDeleteRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{44}
}

func (x *VirtioBlkDeleteRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioBlkDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioBlkDeleteResponse) Reset() {
	*x = VirtioBlkDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkDeleteResponse) ProtoMessage() {}

func (x *VirtioBlkDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkDeleteResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{45}
}

type VirtioBlkUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioBlk `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioBlkUpdateRequest) Reset() {
	*x = VirtioBlkUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkUpdateRequest) ProtoMessage() {}

func (x *VirtioBlkUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkUpdateRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{46}
}

func (x *VirtioBlkUpdateRequest) GetController() *VirtioBlk {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioBlkUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioBlkUpdateResponse) Reset() {
	*x = VirtioBlkUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkUpdateResponse) ProtoMessage() {}

func (x *VirtioBlkUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkUpdateResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{47}
}

type VirtioBlkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsystemId int64 `protobuf:"varint,1,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
}

func (x *VirtioBlkListRequest) Reset() {
	*x = VirtioBlkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkListRequest) ProtoMessage() {}

func (x *VirtioBlkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkListRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{48}
}

func (x *VirtioBlkListRequest) GetSubsystemId() int64 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

type VirtioBlkListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioBlkListResponse) Reset() {
	*x = VirtioBlkListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkListResponse) ProtoMessage() {}

func (x *VirtioBlkListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkListResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{49}
}

type VirtioBlkGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioBlkGetRequest) Reset() {
	*x = VirtioBlkGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkGetRequest) ProtoMessage() {}

func (x *VirtioBlkGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkGetRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{50}
}

func (x *VirtioBlkGetRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioBlkGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioBlk `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioBlkGetResponse) Reset() {
	*x = VirtioBlkGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkGetResponse) ProtoMessage() {}

func (x *VirtioBlkGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkGetResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{51}
}

func (x *VirtioBlkGetResponse) GetController() *VirtioBlk {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioBlkStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioBlkStatsRequest) Reset() {
	*x = VirtioBlkStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkStatsRequest) ProtoMessage() {}

func (x *VirtioBlkStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkStatsRequest.ProtoReflect.Descriptor instead.
func (*VirtioBlkStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{52}
}

func (x *VirtioBlkStatsRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioBlkStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VirtioBlkStatsResponse) Reset() {
	*x = VirtioBlkStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioBlkStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioBlkStatsResponse) ProtoMessage() {}

func (x *VirtioBlkStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioBlkStatsResponse.ProtoReflect.Descriptor instead.
func (*VirtioBlkStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{53}
}

func (x *VirtioBlkStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioBlkStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type VirtioScsiControllerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioScsiController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioScsiControllerCreateRequest) Reset() {
	*x = VirtioScsiControllerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerCreateRequest) ProtoMessage() {}

func (x *VirtioScsiControllerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerCreateRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{54}
}

func (x *VirtioScsiControllerCreateRequest) GetController() *VirtioScsiController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioScsiControllerCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiControllerCreateResponse) Reset() {
	*x = VirtioScsiControllerCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerCreateResponse) ProtoMessage() {}

func (x *VirtioScsiControllerCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerCreateResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{55}
}

type VirtioScsiControllerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioScsiControllerDeleteRequest) Reset() {
	*x = VirtioScsiControllerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerDeleteRequest) ProtoMessage() {}

func (x *VirtioScsiControllerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerDeleteRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{56}
}

func (x *VirtioScsiControllerDeleteRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioScsiControllerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiControllerDeleteResponse) Reset() {
	*x = VirtioScsiControllerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerDeleteResponse) ProtoMessage() {}

func (x *VirtioScsiControllerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerDeleteResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{57}
}

type VirtioScsiControllerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioScsiController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioScsiControllerUpdateRequest) Reset() {
	*x = VirtioScsiControllerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerUpdateRequest) ProtoMessage() {}

func (x *VirtioScsiControllerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerUpdateRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{58}
}

func (x *VirtioScsiControllerUpdateRequest) GetController() *VirtioScsiController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioScsiControllerUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiControllerUpdateResponse) Reset() {
	*x = VirtioScsiControllerUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerUpdateResponse) ProtoMessage() {}

func (x *VirtioScsiControllerUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerUpdateResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{59}
}

type VirtioScsiControllerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiControllerListRequest) Reset() {
	*x = VirtioScsiControllerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerListRequest) ProtoMessage() {}

func (x *VirtioScsiControllerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerListRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{60}
}

type VirtioScsiControllerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller []*VirtioScsiController `protobuf:"bytes,1,rep,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioScsiControllerListResponse) Reset() {
	*x = VirtioScsiControllerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerListResponse) ProtoMessage() {}

func (x *VirtioScsiControllerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerListResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{61}
}

func (x *VirtioScsiControllerListResponse) GetController() []*VirtioScsiController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioScsiControllerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioScsiControllerGetRequest) Reset() {
	*x = VirtioScsiControllerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerGetRequest) ProtoMessage() {}

func (x *VirtioScsiControllerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerGetRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{62}
}

func (x *VirtioScsiControllerGetRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioScsiControllerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *VirtioScsiController `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *VirtioScsiControllerGetResponse) Reset() {
	*x = VirtioScsiControllerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerGetResponse) ProtoMessage() {}

func (x *VirtioScsiControllerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerGetResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{63}
}

func (x *VirtioScsiControllerGetResponse) GetController() *VirtioScsiController {
	if x != nil {
		return x.Controller
	}
	return nil
}

type VirtioScsiControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioScsiControllerStatsRequest) Reset() {
	*x = VirtioScsiControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerStatsRequest) ProtoMessage() {}

func (x *VirtioScsiControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{64}
}

func (x *VirtioScsiControllerStatsRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioScsiControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VirtioScsiControllerStatsResponse) Reset() {
	*x = VirtioScsiControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiControllerStatsResponse) ProtoMessage() {}

func (x *VirtioScsiControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{65}
}

func (x *VirtioScsiControllerStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioScsiControllerStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type VirtioScsiLunCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lun *VirtioScsiLun `protobuf:"bytes,1,opt,name=lun,proto3" json:"lun,omitempty"`
}

func (x *VirtioScsiLunCreateRequest) Reset() {
	*x = VirtioScsiLunCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunCreateRequest) ProtoMessage() {}

func (x *VirtioScsiLunCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunCreateRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{66}
}

func (x *VirtioScsiLunCreateRequest) GetLun() *VirtioScsiLun {
	if x != nil {
		return x.Lun
	}
	return nil
}

type VirtioScsiLunCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiLunCreateResponse) Reset() {
	*x = VirtioScsiLunCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunCreateResponse) ProtoMessage() {}

func (x *VirtioScsiLunCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunCreateResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{67}
}

type VirtioScsiLunDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	LunId        int64 `protobuf:"varint,2,opt,name=lun_id,json=lunId,proto3" json:"lun_id,omitempty"`
}

func (x *VirtioScsiLunDeleteRequest) Reset() {
	*x = VirtioScsiLunDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunDeleteRequest) ProtoMessage() {}

func (x *VirtioScsiLunDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunDeleteRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{68}
}

func (x *VirtioScsiLunDeleteRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *VirtioScsiLunDeleteRequest) GetLunId() int64 {
	if x != nil {
		return x.LunId
	}
	return 0
}

type VirtioScsiLunDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiLunDeleteResponse) Reset() {
	*x = VirtioScsiLunDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunDeleteResponse) ProtoMessage() {}

func (x *VirtioScsiLunDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunDeleteResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{69}
}

type VirtioScsiLunUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lun *VirtioScsiLun `protobuf:"bytes,1,opt,name=lun,proto3" json:"lun,omitempty"`
}

func (x *VirtioScsiLunUpdateRequest) Reset() {
	*x = VirtioScsiLunUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunUpdateRequest) ProtoMessage() {}

func (x *VirtioScsiLunUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunUpdateRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{70}
}

func (x *VirtioScsiLunUpdateRequest) GetLun() *VirtioScsiLun {
	if x != nil {
		return x.Lun
	}
	return nil
}

type VirtioScsiLunUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtioScsiLunUpdateResponse) Reset() {
	*x = VirtioScsiLunUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunUpdateResponse) ProtoMessage() {}

func (x *VirtioScsiLunUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunUpdateResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{71}
}

type VirtioScsiLunListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
}

func (x *VirtioScsiLunListRequest) Reset() {
	*x = VirtioScsiLunListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunListRequest) ProtoMessage() {}

func (x *VirtioScsiLunListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunListRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{72}
}

func (x *VirtioScsiLunListRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

type VirtioScsiLunListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lun []*VirtioScsiLun `protobuf:"bytes,1,rep,name=lun,proto3" json:"lun,omitempty"`
}

func (x *VirtioScsiLunListResponse) Reset() {
	*x = VirtioScsiLunListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunListResponse) ProtoMessage() {}

func (x *VirtioScsiLunListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunListResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{73}
}

func (x *VirtioScsiLunListResponse) GetLun() []*VirtioScsiLun {
	if x != nil {
		return x.Lun
	}
	return nil
}

type VirtioScsiLunGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	LunId        int64 `protobuf:"varint,2,opt,name=lun_id,json=lunId,proto3" json:"lun_id,omitempty"`
}

func (x *VirtioScsiLunGetRequest) Reset() {
	*x = VirtioScsiLunGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunGetRequest) ProtoMessage() {}

func (x *VirtioScsiLunGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunGetRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{74}
}

func (x *VirtioScsiLunGetRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *VirtioScsiLunGetRequest) GetLunId() int64 {
	if x != nil {
		return x.LunId
	}
	return 0
}

type VirtioScsiLunGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lun *VirtioScsiLun `protobuf:"bytes,1,opt,name=lun,proto3" json:"lun,omitempty"`
}

func (x *VirtioScsiLunGetResponse) Reset() {
	*x = VirtioScsiLunGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunGetResponse) ProtoMessage() {}

func (x *VirtioScsiLunGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunGetResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{75}
}

func (x *VirtioScsiLunGetResponse) GetLun() *VirtioScsiLun {
	if x != nil {
		return x.Lun
	}
	return nil
}

type VirtioScsiLunStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerId int64 `protobuf:"varint,1,opt,name=controller_id,json=controllerId,proto3" json:"controller_id,omitempty"`
	LunId        int64 `protobuf:"varint,2,opt,name=lun_id,json=lunId,proto3" json:"lun_id,omitempty"`
}

func (x *VirtioScsiLunStatsRequest) Reset() {
	*x = VirtioScsiLunStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunStatsRequest) ProtoMessage() {}

func (x *VirtioScsiLunStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunStatsRequest.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{76}
}

func (x *VirtioScsiLunStatsRequest) GetControllerId() int64 {
	if x != nil {
		return x.ControllerId
	}
	return 0
}

func (x *VirtioScsiLunStatsRequest) GetLunId() int64 {
	if x != nil {
		return x.LunId
	}
	return 0
}

type VirtioScsiLunStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Stats string `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VirtioScsiLunStatsResponse) Reset() {
	*x = VirtioScsiLunStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtioScsiLunStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioScsiLunStatsResponse) ProtoMessage() {}

func (x *VirtioScsiLunStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioScsiLunStatsResponse.ProtoReflect.Descriptor instead.
func (*VirtioScsiLunStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{77}
}

func (x *VirtioScsiLunStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtioScsiLunStatsResponse) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

var File_frontend_proto protoreflect.FileDescriptor

var file_frontend_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x22, 0x90, 0x01, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6e, 0x71, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x4e, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x63, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x63, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6f,
	0x5f, 0x71, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49,
	0x6f, 0x51, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x4e, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x0d,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x64, 0x65, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x64, 0x65,
	0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x75, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x42, 0x6c, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x69, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x69, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x64, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6f, 0x5f, 0x71,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x51,
	0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x69, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0d,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x64, 0x65, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x64, 0x65, 0x76, 0x22, 0x59, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d,
	0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a,
	0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x29, 0x0a,
	0x17, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x2b, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42,
	0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x5d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x65, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1b,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x59, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x1b,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1a,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62,
	0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x17, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x86, 0x01, 0x0a,
	0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42,
	0x6c, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x19,
	0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x16, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x42, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x42, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x21, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22,
	0x24, 0x0a, 0x22, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x21, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x22, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x21, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0x24, 0x0a, 0x22, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x20, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x1e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1f, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x20, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x21,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6c, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75,
	0x6e, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x75, 0x6e, 0x49, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d,
	0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x03,
	0x6c, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x22, 0x1d, 0x0a,
	0x1b, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x18,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a,
	0x19, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6c, 0x75,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x22, 0x55, 0x0a, 0x17, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x4c, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x03, 0x6c, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x22,
	0x57, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xb0, 0x05, 0x0a,
	0x14, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xc3, 0x05, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb0, 0x05, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70,
	0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe4, 0x04, 0x0a, 0x10, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x0f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x42, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0d, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0c, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x12,
	0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xb9, 0x06, 0x0a, 0x1b, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb0, 0x05, 0x0a, 0x14,
	0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63,
	0x73, 0x69, 0x4c, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53,
	0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x56, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69,
	0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c,
	0x75, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73,
	0x69, 0x4c, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x53, 0x63, 0x73, 0x69, 0x4c, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_proto_rawDescOnce sync.Once
	file_frontend_proto_rawDescData = file_frontend_proto_rawDesc
)

func file_frontend_proto_rawDescGZIP() []byte {
	file_frontend_proto_rawDescOnce.Do(func() {
		file_frontend_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_proto_rawDescData)
	})
	return file_frontend_proto_rawDescData
}

var file_frontend_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_frontend_proto_goTypes = []interface{}{
	(*NVMeSubsystem)(nil),                      // 0: opi.storage.v1.NVMeSubsystem
	(*NVMeController)(nil),                     // 1: opi.storage.v1.NVMeController
	(*NVMeNamespace)(nil),                      // 2: opi.storage.v1.NVMeNamespace
	(*VirtioBlk)(nil),                          // 3: opi.storage.v1.VirtioBlk
	(*VirtioScsiController)(nil),               // 4: opi.storage.v1.VirtioScsiController
	(*VirtioScsiLun)(nil),                      // 5: opi.storage.v1.VirtioScsiLun
	(*NVMeSubsystemCreateRequest)(nil),         // 6: opi.storage.v1.NVMeSubsystemCreateRequest
	(*NVMeSubsystemCreateResponse)(nil),        // 7: opi.storage.v1.NVMeSubsystemCreateResponse
	(*NVMeSubsystemDeleteRequest)(nil),         // 8: opi.storage.v1.NVMeSubsystemDeleteRequest
	(*NVMeSubsystemDeleteResponse)(nil),        // 9: opi.storage.v1.NVMeSubsystemDeleteResponse
	(*NVMeSubsystemUpdateRequest)(nil),         // 10: opi.storage.v1.NVMeSubsystemUpdateRequest
	(*NVMeSubsystemUpdateResponse)(nil),        // 11: opi.storage.v1.NVMeSubsystemUpdateResponse
	(*NVMeSubsystemListRequest)(nil),           // 12: opi.storage.v1.NVMeSubsystemListRequest
	(*NVMeSubsystemListResponse)(nil),          // 13: opi.storage.v1.NVMeSubsystemListResponse
	(*NVMeSubsystemGetRequest)(nil),            // 14: opi.storage.v1.NVMeSubsystemGetRequest
	(*NVMeSubsystemGetResponse)(nil),           // 15: opi.storage.v1.NVMeSubsystemGetResponse
	(*NVMeSubsystemStatsRequest)(nil),          // 16: opi.storage.v1.NVMeSubsystemStatsRequest
	(*NVMeSubsystemStatsResponse)(nil),         // 17: opi.storage.v1.NVMeSubsystemStatsResponse
	(*NVMeControllerCreateRequest)(nil),        // 18: opi.storage.v1.NVMeControllerCreateRequest
	(*NVMeControllerCreateResponse)(nil),       // 19: opi.storage.v1.NVMeControllerCreateResponse
	(*NVMeControllerDeleteRequest)(nil),        // 20: opi.storage.v1.NVMeControllerDeleteRequest
	(*NVMeControllerDeleteResponse)(nil),       // 21: opi.storage.v1.NVMeControllerDeleteResponse
	(*NVMeControllerUpdateRequest)(nil),        // 22: opi.storage.v1.NVMeControllerUpdateRequest
	(*NVMeControllerUpdateResponse)(nil),       // 23: opi.storage.v1.NVMeControllerUpdateResponse
	(*NVMeControllerListRequest)(nil),          // 24: opi.storage.v1.NVMeControllerListRequest
	(*NVMeControllerListResponse)(nil),         // 25: opi.storage.v1.NVMeControllerListResponse
	(*NVMeControllerGetRequest)(nil),           // 26: opi.storage.v1.NVMeControllerGetRequest
	(*NVMeControllerGetResponse)(nil),          // 27: opi.storage.v1.NVMeControllerGetResponse
	(*NVMeControllerStatsRequest)(nil),         // 28: opi.storage.v1.NVMeControllerStatsRequest
	(*NVMeControllerStatsResponse)(nil),        // 29: opi.storage.v1.NVMeControllerStatsResponse
	(*NVMeNamespaceCreateRequest)(nil),         // 30: opi.storage.v1.NVMeNamespaceCreateRequest
	(*NVMeNamespaceCreateResponse)(nil),        // 31: opi.storage.v1.NVMeNamespaceCreateResponse
	(*NVMeNamespaceDeleteRequest)(nil),         // 32: opi.storage.v1.NVMeNamespaceDeleteRequest
	(*NVMeNamespaceDeleteResponse)(nil),        // 33: opi.storage.v1.NVMeNamespaceDeleteResponse
	(*NVMeNamespaceUpdateRequest)(nil),         // 34: opi.storage.v1.NVMeNamespaceUpdateRequest
	(*NVMeNamespaceUpdateResponse)(nil),        // 35: opi.storage.v1.NVMeNamespaceUpdateResponse
	(*NVMeNamespaceListRequest)(nil),           // 36: opi.storage.v1.NVMeNamespaceListRequest
	(*NVMeNamespaceListResponse)(nil),          // 37: opi.storage.v1.NVMeNamespaceListResponse
	(*NVMeNamespaceGetRequest)(nil),            // 38: opi.storage.v1.NVMeNamespaceGetRequest
	(*NVMeNamespaceGetResponse)(nil),           // 39: opi.storage.v1.NVMeNamespaceGetResponse
	(*NVMeNamespaceStatsRequest)(nil),          // 40: opi.storage.v1.NVMeNamespaceStatsRequest
	(*NVMeNamespaceStatsResponse)(nil),         // 41: opi.storage.v1.NVMeNamespaceStatsResponse
	(*VirtioBlkCreateRequest)(nil),             // 42: opi.storage.v1.VirtioBlkCreateRequest
	(*VirtioBlkCreateResponse)(nil),            // 43: opi.storage.v1.VirtioBlkCreateResponse
	(*VirtioBlkDeleteRequest)(nil),             // 44: opi.storage.v1.VirtioBlkDeleteRequest
	(*VirtioBlkDeleteResponse)(nil),            // 45: opi.storage.v1.VirtioBlkDeleteResponse
	(*VirtioBlkUpdateRequest)(nil),             // 46: opi.storage.v1.VirtioBlkUpdateRequest
	(*VirtioBlkUpdateResponse)(nil),            // 47: opi.storage.v1.VirtioBlkUpdateResponse
	(*VirtioBlkListRequest)(nil),               // 48: opi.storage.v1.VirtioBlkListRequest
	(*VirtioBlkListResponse)(nil),              // 49: opi.storage.v1.VirtioBlkListResponse
	(*VirtioBlkGetRequest)(nil),                // 50: opi.storage.v1.VirtioBlkGetRequest
	(*VirtioBlkGetResponse)(nil),               // 51: opi.storage.v1.VirtioBlkGetResponse
	(*VirtioBlkStatsRequest)(nil),              // 52: opi.storage.v1.VirtioBlkStatsRequest
	(*VirtioBlkStatsResponse)(nil),             // 53: opi.storage.v1.VirtioBlkStatsResponse
	(*VirtioScsiControllerCreateRequest)(nil),  // 54: opi.storage.v1.VirtioScsiControllerCreateRequest
	(*VirtioScsiControllerCreateResponse)(nil), // 55: opi.storage.v1.VirtioScsiControllerCreateResponse
	(*VirtioScsiControllerDeleteRequest)(nil),  // 56: opi.storage.v1.VirtioScsiControllerDeleteRequest
	(*VirtioScsiControllerDeleteResponse)(nil), // 57: opi.storage.v1.VirtioScsiControllerDeleteResponse
	(*VirtioScsiControllerUpdateRequest)(nil),  // 58: opi.storage.v1.VirtioScsiControllerUpdateRequest
	(*VirtioScsiControllerUpdateResponse)(nil), // 59: opi.storage.v1.VirtioScsiControllerUpdateResponse
	(*VirtioScsiControllerListRequest)(nil),    // 60: opi.storage.v1.VirtioScsiControllerListRequest
	(*VirtioScsiControllerListResponse)(nil),   // 61: opi.storage.v1.VirtioScsiControllerListResponse
	(*VirtioScsiControllerGetRequest)(nil),     // 62: opi.storage.v1.VirtioScsiControllerGetRequest
	(*VirtioScsiControllerGetResponse)(nil),    // 63: opi.storage.v1.VirtioScsiControllerGetResponse
	(*VirtioScsiControllerStatsRequest)(nil),   // 64: opi.storage.v1.VirtioScsiControllerStatsRequest
	(*VirtioScsiControllerStatsResponse)(nil),  // 65: opi.storage.v1.VirtioScsiControllerStatsResponse
	(*VirtioScsiLunCreateRequest)(nil),         // 66: opi.storage.v1.VirtioScsiLunCreateRequest
	(*VirtioScsiLunCreateResponse)(nil),        // 67: opi.storage.v1.VirtioScsiLunCreateResponse
	(*VirtioScsiLunDeleteRequest)(nil),         // 68: opi.storage.v1.VirtioScsiLunDeleteRequest
	(*VirtioScsiLunDeleteResponse)(nil),        // 69: opi.storage.v1.VirtioScsiLunDeleteResponse
	(*VirtioScsiLunUpdateRequest)(nil),         // 70: opi.storage.v1.VirtioScsiLunUpdateRequest
	(*VirtioScsiLunUpdateResponse)(nil),        // 71: opi.storage.v1.VirtioScsiLunUpdateResponse
	(*VirtioScsiLunListRequest)(nil),           // 72: opi.storage.v1.VirtioScsiLunListRequest
	(*VirtioScsiLunListResponse)(nil),          // 73: opi.storage.v1.VirtioScsiLunListResponse
	(*VirtioScsiLunGetRequest)(nil),            // 74: opi.storage.v1.VirtioScsiLunGetRequest
	(*VirtioScsiLunGetResponse)(nil),           // 75: opi.storage.v1.VirtioScsiLunGetResponse
	(*VirtioScsiLunStatsRequest)(nil),          // 76: opi.storage.v1.VirtioScsiLunStatsRequest
	(*VirtioScsiLunStatsResponse)(nil),         // 77: opi.storage.v1.VirtioScsiLunStatsResponse
}
var file_frontend_proto_depIdxs = []int32{
	0,  // 0: opi.storage.v1.NVMeSubsystemCreateRequest.subsystem:type_name -> opi.storage.v1.NVMeSubsystem
	0,  // 1: opi.storage.v1.NVMeSubsystemUpdateRequest.subsystem:type_name -> opi.storage.v1.NVMeSubsystem
	0,  // 2: opi.storage.v1.NVMeSubsystemListResponse.subsystem:type_name -> opi.storage.v1.NVMeSubsystem
	0,  // 3: opi.storage.v1.NVMeSubsystemGetResponse.subsystem:type_name -> opi.storage.v1.NVMeSubsystem
	1,  // 4: opi.storage.v1.NVMeControllerCreateRequest.controller:type_name -> opi.storage.v1.NVMeController
	1,  // 5: opi.storage.v1.NVMeControllerUpdateRequest.controller:type_name -> opi.storage.v1.NVMeController
	1,  // 6: opi.storage.v1.NVMeControllerListResponse.controller:type_name -> opi.storage.v1.NVMeController
	1,  // 7: opi.storage.v1.NVMeControllerGetResponse.controller:type_name -> opi.storage.v1.NVMeController
	2,  // 8: opi.storage.v1.NVMeNamespaceCreateRequest.namespace:type_name -> opi.storage.v1.NVMeNamespace
	2,  // 9: opi.storage.v1.NVMeNamespaceUpdateRequest.namespace:type_name -> opi.storage.v1.NVMeNamespace
	2,  // 10: opi.storage.v1.NVMeNamespaceListResponse.namespace:type_name -> opi.storage.v1.NVMeNamespace
	2,  // 11: opi.storage.v1.NVMeNamespaceGetResponse.namespace:type_name -> opi.storage.v1.NVMeNamespace
	3,  // 12: opi.storage.v1.VirtioBlkCreateRequest.controller:type_name -> opi.storage.v1.VirtioBlk
	3,  // 13: opi.storage.v1.VirtioBlkUpdateRequest.controller:type_name -> opi.storage.v1.VirtioBlk
	3,  // 14: opi.storage.v1.VirtioBlkGetResponse.controller:type_name -> opi.storage.v1.VirtioBlk
	4,  // 15: opi.storage.v1.VirtioScsiControllerCreateRequest.controller:type_name -> opi.storage.v1.VirtioScsiController
	4,  // 16: opi.storage.v1.VirtioScsiControllerUpdateRequest.controller:type_name -> opi.storage.v1.VirtioScsiController
	4,  // 17: opi.storage.v1.VirtioScsiControllerListResponse.controller:type_name -> opi.storage.v1.VirtioScsiController
	4,  // 18: opi.storage.v1.VirtioScsiControllerGetResponse.controller:type_name -> opi.storage.v1.VirtioScsiController
	5,  // 19: opi.storage.v1.VirtioScsiLunCreateRequest.lun:type_name -> opi.storage.v1.VirtioScsiLun
	5,  // 20: opi.storage.v1.VirtioScsiLunUpdateRequest.lun:type_name -> opi.storage.v1.VirtioScsiLun
	5,  // 21: opi.storage.v1.VirtioScsiLunListResponse.lun:type_name -> opi.storage.v1.VirtioScsiLun
	5,  // 22: opi.storage.v1.VirtioScsiLunGetResponse.lun:type_name -> opi.storage.v1.VirtioScsiLun
	6,  // 23: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemCreate:input_type -> opi.storage.v1.NVMeSubsystemCreateRequest
	8,  // 24: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemDelete:input_type -> opi.storage.v1.NVMeSubsystemDeleteRequest
	10, // 25: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemUpdate:input_type -> opi.storage.v1.NVMeSubsystemUpdateRequest
	12, // 26: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemList:input_type -> opi.storage.v1.NVMeSubsystemListRequest
	14, // 27: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemGet:input_type -> opi.storage.v1.NVMeSubsystemGetRequest
	16, // 28: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemStats:input_type -> opi.storage.v1.NVMeSubsystemStatsRequest
	18, // 29: opi.storage.v1.NVMeControllerService.NVMeControllerCreate:input_type -> opi.storage.v1.NVMeControllerCreateRequest
	20, // 30: opi.storage.v1.NVMeControllerService.NVMeControllerDelete:input_type -> opi.storage.v1.NVMeControllerDeleteRequest
	22, // 31: opi.storage.v1.NVMeControllerService.NVMeControllerUpdate:input_type -> opi.storage.v1.NVMeControllerUpdateRequest
	24, // 32: opi.storage.v1.NVMeControllerService.NVMeControllerList:input_type -> opi.storage.v1.NVMeControllerListRequest
	26, // 33: opi.storage.v1.NVMeControllerService.NVMeControllerGet:input_type -> opi.storage.v1.NVMeControllerGetRequest
	28, // 34: opi.storage.v1.NVMeControllerService.NVMeControllerStats:input_type -> opi.storage.v1.NVMeControllerStatsRequest
	30, // 35: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceCreate:input_type -> opi.storage.v1.NVMeNamespaceCreateRequest
	32, // 36: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceDelete:input_type -> opi.storage.v1.NVMeNamespaceDeleteRequest
	34, // 37: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceUpdate:input_type -> opi.storage.v1.NVMeNamespaceUpdateRequest
	36, // 38: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceList:input_type -> opi.storage.v1.NVMeNamespaceListRequest
	38, // 39: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceGet:input_type -> opi.storage.v1.NVMeNamespaceGetRequest
	40, // 40: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceStats:input_type -> opi.storage.v1.NVMeNamespaceStatsRequest
	42, // 41: opi.storage.v1.VirtioBlkService.VirtioBlkCreate:input_type -> opi.storage.v1.VirtioBlkCreateRequest
	44, // 42: opi.storage.v1.VirtioBlkService.VirtioBlkDelete:input_type -> opi.storage.v1.VirtioBlkDeleteRequest
	46, // 43: opi.storage.v1.VirtioBlkService.VirtioBlkUpdate:input_type -> opi.storage.v1.VirtioBlkUpdateRequest
	48, // 44: opi.storage.v1.VirtioBlkService.VirtioBlkList:input_type -> opi.storage.v1.VirtioBlkListRequest
	50, // 45: opi.storage.v1.VirtioBlkService.VirtioBlkGet:input_type -> opi.storage.v1.VirtioBlkGetRequest
	52, // 46: opi.storage.v1.VirtioBlkService.VirtioBlkStats:input_type -> opi.storage.v1.VirtioBlkStatsRequest
	54, // 47: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerCreate:input_type -> opi.storage.v1.VirtioScsiControllerCreateRequest
	56, // 48: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerDelete:input_type -> opi.storage.v1.VirtioScsiControllerDeleteRequest
	58, // 49: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerUpdate:input_type -> opi.storage.v1.VirtioScsiControllerUpdateRequest
	60, // 50: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerList:input_type -> opi.storage.v1.VirtioScsiControllerListRequest
	62, // 51: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerGet:input_type -> opi.storage.v1.VirtioScsiControllerGetRequest
	64, // 52: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerStats:input_type -> opi.storage.v1.VirtioScsiControllerStatsRequest
	66, // 53: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunCreate:input_type -> opi.storage.v1.VirtioScsiLunCreateRequest
	68, // 54: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunDelete:input_type -> opi.storage.v1.VirtioScsiLunDeleteRequest
	70, // 55: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunUpdate:input_type -> opi.storage.v1.VirtioScsiLunUpdateRequest
	72, // 56: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunList:input_type -> opi.storage.v1.VirtioScsiLunListRequest
	74, // 57: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunGet:input_type -> opi.storage.v1.VirtioScsiLunGetRequest
	76, // 58: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunStats:input_type -> opi.storage.v1.VirtioScsiLunStatsRequest
	7,  // 59: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemCreate:output_type -> opi.storage.v1.NVMeSubsystemCreateResponse
	9,  // 60: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemDelete:output_type -> opi.storage.v1.NVMeSubsystemDeleteResponse
	11, // 61: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemUpdate:output_type -> opi.storage.v1.NVMeSubsystemUpdateResponse
	13, // 62: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemList:output_type -> opi.storage.v1.NVMeSubsystemListResponse
	15, // 63: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemGet:output_type -> opi.storage.v1.NVMeSubsystemGetResponse
	17, // 64: opi.storage.v1.NVMeSubsystemService.NVMeSubsystemStats:output_type -> opi.storage.v1.NVMeSubsystemStatsResponse
	19, // 65: opi.storage.v1.NVMeControllerService.NVMeControllerCreate:output_type -> opi.storage.v1.NVMeControllerCreateResponse
	21, // 66: opi.storage.v1.NVMeControllerService.NVMeControllerDelete:output_type -> opi.storage.v1.NVMeControllerDeleteResponse
	23, // 67: opi.storage.v1.NVMeControllerService.NVMeControllerUpdate:output_type -> opi.storage.v1.NVMeControllerUpdateResponse
	25, // 68: opi.storage.v1.NVMeControllerService.NVMeControllerList:output_type -> opi.storage.v1.NVMeControllerListResponse
	27, // 69: opi.storage.v1.NVMeControllerService.NVMeControllerGet:output_type -> opi.storage.v1.NVMeControllerGetResponse
	29, // 70: opi.storage.v1.NVMeControllerService.NVMeControllerStats:output_type -> opi.storage.v1.NVMeControllerStatsResponse
	31, // 71: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceCreate:output_type -> opi.storage.v1.NVMeNamespaceCreateResponse
	33, // 72: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceDelete:output_type -> opi.storage.v1.NVMeNamespaceDeleteResponse
	35, // 73: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceUpdate:output_type -> opi.storage.v1.NVMeNamespaceUpdateResponse
	37, // 74: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceList:output_type -> opi.storage.v1.NVMeNamespaceListResponse
	39, // 75: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceGet:output_type -> opi.storage.v1.NVMeNamespaceGetResponse
	41, // 76: opi.storage.v1.NVMeNamespaceService.NVMeNamespaceStats:output_type -> opi.storage.v1.NVMeNamespaceStatsResponse
	43, // 77: opi.storage.v1.VirtioBlkService.VirtioBlkCreate:output_type -> opi.storage.v1.VirtioBlkCreateResponse
	45, // 78: opi.storage.v1.VirtioBlkService.VirtioBlkDelete:output_type -> opi.storage.v1.VirtioBlkDeleteResponse
	47, // 79: opi.storage.v1.VirtioBlkService.VirtioBlkUpdate:output_type -> opi.storage.v1.VirtioBlkUpdateResponse
	49, // 80: opi.storage.v1.VirtioBlkService.VirtioBlkList:output_type -> opi.storage.v1.VirtioBlkListResponse
	51, // 81: opi.storage.v1.VirtioBlkService.VirtioBlkGet:output_type -> opi.storage.v1.VirtioBlkGetResponse
	53, // 82: opi.storage.v1.VirtioBlkService.VirtioBlkStats:output_type -> opi.storage.v1.VirtioBlkStatsResponse
	55, // 83: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerCreate:output_type -> opi.storage.v1.VirtioScsiControllerCreateResponse
	57, // 84: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerDelete:output_type -> opi.storage.v1.VirtioScsiControllerDeleteResponse
	59, // 85: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerUpdate:output_type -> opi.storage.v1.VirtioScsiControllerUpdateResponse
	61, // 86: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerList:output_type -> opi.storage.v1.VirtioScsiControllerListResponse
	63, // 87: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerGet:output_type -> opi.storage.v1.VirtioScsiControllerGetResponse
	65, // 88: opi.storage.v1.VirtioScsiControllerService.VirtioScsiControllerStats:output_type -> opi.storage.v1.VirtioScsiControllerStatsResponse
	67, // 89: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunCreate:output_type -> opi.storage.v1.VirtioScsiLunCreateResponse
	69, // 90: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunDelete:output_type -> opi.storage.v1.VirtioScsiLunDeleteResponse
	71, // 91: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunUpdate:output_type -> opi.storage.v1.VirtioScsiLunUpdateResponse
	73, // 92: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunList:output_type -> opi.storage.v1.VirtioScsiLunListResponse
	75, // 93: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunGet:output_type -> opi.storage.v1.VirtioScsiLunGetResponse
	77, // 94: opi.storage.v1.VirtioScsiLunService.VirtioScsiLunStats:output_type -> opi.storage.v1.VirtioScsiLunStatsResponse
	59, // [59:95] is the sub-list for method output_type
	23, // [23:59] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_frontend_proto_init() }
func file_frontend_proto_init() {
	if File_frontend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frontend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioBlkStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtioScsiLunStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_frontend_proto_goTypes,
		DependencyIndexes: file_frontend_proto_depIdxs,
		MessageInfos:      file_frontend_proto_msgTypes,
	}.Build()
	File_frontend_proto = out.File
	file_frontend_proto_rawDesc = nil
	file_frontend_proto_goTypes = nil
	file_frontend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NVMeSubsystemServiceClient is the client API for NVMeSubsystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeSubsystemServiceClient interface {
	NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystemCreateResponse, error)
	NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*NVMeSubsystemDeleteResponse, error)
	NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystemUpdateResponse, error)
	NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystemGetResponse, error)
	NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error)
}

type nVMeSubsystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeSubsystemServiceClient(cc grpc.ClientConnInterface) NVMeSubsystemServiceClient {
	return &nVMeSubsystemServiceClient{cc}
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystemCreateResponse, error) {
	out := new(NVMeSubsystemCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*NVMeSubsystemDeleteResponse, error) {
	out := new(NVMeSubsystemDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystemUpdateResponse, error) {
	out := new(NVMeSubsystemUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error) {
	out := new(NVMeSubsystemListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystemGetResponse, error) {
	out := new(NVMeSubsystemGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemServiceClient) NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error) {
	out := new(NVMeSubsystemStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeSubsystemServiceServer is the server API for NVMeSubsystemService service.
type NVMeSubsystemServiceServer interface {
	NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystemCreateResponse, error)
	NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*NVMeSubsystemDeleteResponse, error)
	NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystemUpdateResponse, error)
	NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystemGetResponse, error)
	NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error)
}

// UnimplementedNVMeSubsystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeSubsystemServiceServer struct {
}

func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystemCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemCreate not implemented")
}
func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*NVMeSubsystemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemDelete not implemented")
}
func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystemUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemUpdate not implemented")
}
func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemList not implemented")
}
func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemGet not implemented")
}
func (*UnimplementedNVMeSubsystemServiceServer) NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemStats not implemented")
}

func RegisterNVMeSubsystemServiceServer(s *grpc.Server, srv NVMeSubsystemServiceServer) {
	s.RegisterService(&_NVMeSubsystemService_serviceDesc, srv)
}

func _NVMeSubsystemService_NVMeSubsystemCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemCreate(ctx, req.(*NVMeSubsystemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystemService_NVMeSubsystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemDelete(ctx, req.(*NVMeSubsystemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystemService_NVMeSubsystemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemUpdate(ctx, req.(*NVMeSubsystemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystemService_NVMeSubsystemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemList(ctx, req.(*NVMeSubsystemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystemService_NVMeSubsystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemGet(ctx, req.(*NVMeSubsystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystemService_NVMeSubsystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystemService/NVMeSubsystemStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServiceServer).NVMeSubsystemStats(ctx, req.(*NVMeSubsystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeSubsystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeSubsystemService",
	HandlerType: (*NVMeSubsystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeSubsystemCreate",
			Handler:    _NVMeSubsystemService_NVMeSubsystemCreate_Handler,
		},
		{
			MethodName: "NVMeSubsystemDelete",
			Handler:    _NVMeSubsystemService_NVMeSubsystemDelete_Handler,
		},
		{
			MethodName: "NVMeSubsystemUpdate",
			Handler:    _NVMeSubsystemService_NVMeSubsystemUpdate_Handler,
		},
		{
			MethodName: "NVMeSubsystemList",
			Handler:    _NVMeSubsystemService_NVMeSubsystemList_Handler,
		},
		{
			MethodName: "NVMeSubsystemGet",
			Handler:    _NVMeSubsystemService_NVMeSubsystemGet_Handler,
		},
		{
			MethodName: "NVMeSubsystemStats",
			Handler:    _NVMeSubsystemService_NVMeSubsystemStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// NVMeControllerServiceClient is the client API for NVMeControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeControllerServiceClient interface {
	NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeControllerCreateResponse, error)
	NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*NVMeControllerDeleteResponse, error)
	NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeControllerUpdateResponse, error)
	NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error)
	NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeControllerGetResponse, error)
	NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error)
}

type nVMeControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeControllerServiceClient(cc grpc.ClientConnInterface) NVMeControllerServiceClient {
	return &nVMeControllerServiceClient{cc}
}

func (c *nVMeControllerServiceClient) NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeControllerCreateResponse, error) {
	out := new(NVMeControllerCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerServiceClient) NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*NVMeControllerDeleteResponse, error) {
	out := new(NVMeControllerDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerServiceClient) NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeControllerUpdateResponse, error) {
	out := new(NVMeControllerUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerServiceClient) NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error) {
	out := new(NVMeControllerListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerServiceClient) NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeControllerGetResponse, error) {
	out := new(NVMeControllerGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerServiceClient) NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error) {
	out := new(NVMeControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeControllerService/NVMeControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeControllerServiceServer is the server API for NVMeControllerService service.
type NVMeControllerServiceServer interface {
	NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeControllerCreateResponse, error)
	NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*NVMeControllerDeleteResponse, error)
	NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeControllerUpdateResponse, error)
	NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error)
	NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeControllerGetResponse, error)
	NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error)
}

// UnimplementedNVMeControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeControllerServiceServer struct {
}

func (*UnimplementedNVMeControllerServiceServer) NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeControllerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerCreate not implemented")
}
func (*UnimplementedNVMeControllerServiceServer) NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*NVMeControllerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerDelete not implemented")
}
func (*UnimplementedNVMeControllerServiceServer) NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeControllerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerUpdate not implemented")
}
func (*UnimplementedNVMeControllerServiceServer) NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerList not implemented")
}
func (*UnimplementedNVMeControllerServiceServer) NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeControllerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerGet not implemented")
}
func (*UnimplementedNVMeControllerServiceServer) NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerStats not implemented")
}

func RegisterNVMeControllerServiceServer(s *grpc.Server, srv NVMeControllerServiceServer) {
	s.RegisterService(&_NVMeControllerService_serviceDesc, srv)
}

func _NVMeControllerService_NVMeControllerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerCreate(ctx, req.(*NVMeControllerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeControllerService_NVMeControllerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerDelete(ctx, req.(*NVMeControllerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeControllerService_NVMeControllerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerUpdate(ctx, req.(*NVMeControllerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeControllerService_NVMeControllerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerList(ctx, req.(*NVMeControllerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeControllerService_NVMeControllerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerGet(ctx, req.(*NVMeControllerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeControllerService_NVMeControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServiceServer).NVMeControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeControllerService/NVMeControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServiceServer).NVMeControllerStats(ctx, req.(*NVMeControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeControllerService",
	HandlerType: (*NVMeControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeControllerCreate",
			Handler:    _NVMeControllerService_NVMeControllerCreate_Handler,
		},
		{
			MethodName: "NVMeControllerDelete",
			Handler:    _NVMeControllerService_NVMeControllerDelete_Handler,
		},
		{
			MethodName: "NVMeControllerUpdate",
			Handler:    _NVMeControllerService_NVMeControllerUpdate_Handler,
		},
		{
			MethodName: "NVMeControllerList",
			Handler:    _NVMeControllerService_NVMeControllerList_Handler,
		},
		{
			MethodName: "NVMeControllerGet",
			Handler:    _NVMeControllerService_NVMeControllerGet_Handler,
		},
		{
			MethodName: "NVMeControllerStats",
			Handler:    _NVMeControllerService_NVMeControllerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// NVMeNamespaceServiceClient is the client API for NVMeNamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeNamespaceServiceClient interface {
	NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespaceCreateResponse, error)
	NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*NVMeNamespaceDeleteResponse, error)
	NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespaceUpdateResponse, error)
	NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespaceGetResponse, error)
	NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error)
}

type nVMeNamespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeNamespaceServiceClient(cc grpc.ClientConnInterface) NVMeNamespaceServiceClient {
	return &nVMeNamespaceServiceClient{cc}
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespaceCreateResponse, error) {
	out := new(NVMeNamespaceCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*NVMeNamespaceDeleteResponse, error) {
	out := new(NVMeNamespaceDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespaceUpdateResponse, error) {
	out := new(NVMeNamespaceUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error) {
	out := new(NVMeNamespaceListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespaceGetResponse, error) {
	out := new(NVMeNamespaceGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceServiceClient) NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error) {
	out := new(NVMeNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeNamespaceServiceServer is the server API for NVMeNamespaceService service.
type NVMeNamespaceServiceServer interface {
	NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespaceCreateResponse, error)
	NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*NVMeNamespaceDeleteResponse, error)
	NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespaceUpdateResponse, error)
	NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespaceGetResponse, error)
	NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error)
}

// UnimplementedNVMeNamespaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeNamespaceServiceServer struct {
}

func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespaceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceCreate not implemented")
}
func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*NVMeNamespaceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceDelete not implemented")
}
func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespaceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceUpdate not implemented")
}
func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceList not implemented")
}
func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespaceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceGet not implemented")
}
func (*UnimplementedNVMeNamespaceServiceServer) NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceStats not implemented")
}

func RegisterNVMeNamespaceServiceServer(s *grpc.Server, srv NVMeNamespaceServiceServer) {
	s.RegisterService(&_NVMeNamespaceService_serviceDesc, srv)
}

func _NVMeNamespaceService_NVMeNamespaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceCreate(ctx, req.(*NVMeNamespaceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespaceService_NVMeNamespaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceDelete(ctx, req.(*NVMeNamespaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespaceService_NVMeNamespaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceUpdate(ctx, req.(*NVMeNamespaceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespaceService_NVMeNamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceList(ctx, req.(*NVMeNamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespaceService_NVMeNamespaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceGet(ctx, req.(*NVMeNamespaceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespaceService_NVMeNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespaceService/NVMeNamespaceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServiceServer).NVMeNamespaceStats(ctx, req.(*NVMeNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeNamespaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeNamespaceService",
	HandlerType: (*NVMeNamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeNamespaceCreate",
			Handler:    _NVMeNamespaceService_NVMeNamespaceCreate_Handler,
		},
		{
			MethodName: "NVMeNamespaceDelete",
			Handler:    _NVMeNamespaceService_NVMeNamespaceDelete_Handler,
		},
		{
			MethodName: "NVMeNamespaceUpdate",
			Handler:    _NVMeNamespaceService_NVMeNamespaceUpdate_Handler,
		},
		{
			MethodName: "NVMeNamespaceList",
			Handler:    _NVMeNamespaceService_NVMeNamespaceList_Handler,
		},
		{
			MethodName: "NVMeNamespaceGet",
			Handler:    _NVMeNamespaceService_NVMeNamespaceGet_Handler,
		},
		{
			MethodName: "NVMeNamespaceStats",
			Handler:    _NVMeNamespaceService_NVMeNamespaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// VirtioBlkServiceClient is the client API for VirtioBlkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtioBlkServiceClient interface {
	VirtioBlkCreate(ctx context.Context, in *VirtioBlkCreateRequest, opts ...grpc.CallOption) (*VirtioBlkCreateResponse, error)
	VirtioBlkDelete(ctx context.Context, in *VirtioBlkDeleteRequest, opts ...grpc.CallOption) (*VirtioBlkDeleteResponse, error)
	VirtioBlkUpdate(ctx context.Context, in *VirtioBlkUpdateRequest, opts ...grpc.CallOption) (*VirtioBlkUpdateResponse, error)
	VirtioBlkList(ctx context.Context, in *VirtioBlkListRequest, opts ...grpc.CallOption) (*VirtioBlkListResponse, error)
	VirtioBlkGet(ctx context.Context, in *VirtioBlkGetRequest, opts ...grpc.CallOption) (*VirtioBlkGetResponse, error)
	VirtioBlkStats(ctx context.Context, in *VirtioBlkStatsRequest, opts ...grpc.CallOption) (*VirtioBlkStatsResponse, error)
}

type virtioBlkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtioBlkServiceClient(cc grpc.ClientConnInterface) VirtioBlkServiceClient {
	return &virtioBlkServiceClient{cc}
}

func (c *virtioBlkServiceClient) VirtioBlkCreate(ctx context.Context, in *VirtioBlkCreateRequest, opts ...grpc.CallOption) (*VirtioBlkCreateResponse, error) {
	out := new(VirtioBlkCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioBlkServiceClient) VirtioBlkDelete(ctx context.Context, in *VirtioBlkDeleteRequest, opts ...grpc.CallOption) (*VirtioBlkDeleteResponse, error) {
	out := new(VirtioBlkDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioBlkServiceClient) VirtioBlkUpdate(ctx context.Context, in *VirtioBlkUpdateRequest, opts ...grpc.CallOption) (*VirtioBlkUpdateResponse, error) {
	out := new(VirtioBlkUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioBlkServiceClient) VirtioBlkList(ctx context.Context, in *VirtioBlkListRequest, opts ...grpc.CallOption) (*VirtioBlkListResponse, error) {
	out := new(VirtioBlkListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioBlkServiceClient) VirtioBlkGet(ctx context.Context, in *VirtioBlkGetRequest, opts ...grpc.CallOption) (*VirtioBlkGetResponse, error) {
	out := new(VirtioBlkGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioBlkServiceClient) VirtioBlkStats(ctx context.Context, in *VirtioBlkStatsRequest, opts ...grpc.CallOption) (*VirtioBlkStatsResponse, error) {
	out := new(VirtioBlkStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioBlkService/VirtioBlkStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtioBlkServiceServer is the server API for VirtioBlkService service.
type VirtioBlkServiceServer interface {
	VirtioBlkCreate(context.Context, *VirtioBlkCreateRequest) (*VirtioBlkCreateResponse, error)
	VirtioBlkDelete(context.Context, *VirtioBlkDeleteRequest) (*VirtioBlkDeleteResponse, error)
	VirtioBlkUpdate(context.Context, *VirtioBlkUpdateRequest) (*VirtioBlkUpdateResponse, error)
	VirtioBlkList(context.Context, *VirtioBlkListRequest) (*VirtioBlkListResponse, error)
	VirtioBlkGet(context.Context, *VirtioBlkGetRequest) (*VirtioBlkGetResponse, error)
	VirtioBlkStats(context.Context, *VirtioBlkStatsRequest) (*VirtioBlkStatsResponse, error)
}

// UnimplementedVirtioBlkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtioBlkServiceServer struct {
}

func (*UnimplementedVirtioBlkServiceServer) VirtioBlkCreate(context.Context, *VirtioBlkCreateRequest) (*VirtioBlkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkCreate not implemented")
}
func (*UnimplementedVirtioBlkServiceServer) VirtioBlkDelete(context.Context, *VirtioBlkDeleteRequest) (*VirtioBlkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkDelete not implemented")
}
func (*UnimplementedVirtioBlkServiceServer) VirtioBlkUpdate(context.Context, *VirtioBlkUpdateRequest) (*VirtioBlkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkUpdate not implemented")
}
func (*UnimplementedVirtioBlkServiceServer) VirtioBlkList(context.Context, *VirtioBlkListRequest) (*VirtioBlkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkList not implemented")
}
func (*UnimplementedVirtioBlkServiceServer) VirtioBlkGet(context.Context, *VirtioBlkGetRequest) (*VirtioBlkGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkGet not implemented")
}
func (*UnimplementedVirtioBlkServiceServer) VirtioBlkStats(context.Context, *VirtioBlkStatsRequest) (*VirtioBlkStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioBlkStats not implemented")
}

func RegisterVirtioBlkServiceServer(s *grpc.Server, srv VirtioBlkServiceServer) {
	s.RegisterService(&_VirtioBlkService_serviceDesc, srv)
}

func _VirtioBlkService_VirtioBlkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkCreate(ctx, req.(*VirtioBlkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioBlkService_VirtioBlkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkDelete(ctx, req.(*VirtioBlkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioBlkService_VirtioBlkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkUpdate(ctx, req.(*VirtioBlkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioBlkService_VirtioBlkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkList(ctx, req.(*VirtioBlkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioBlkService_VirtioBlkGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkGet(ctx, req.(*VirtioBlkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioBlkService_VirtioBlkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioBlkStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioBlkServiceServer).VirtioBlkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioBlkService/VirtioBlkStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioBlkServiceServer).VirtioBlkStats(ctx, req.(*VirtioBlkStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtioBlkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.VirtioBlkService",
	HandlerType: (*VirtioBlkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VirtioBlkCreate",
			Handler:    _VirtioBlkService_VirtioBlkCreate_Handler,
		},
		{
			MethodName: "VirtioBlkDelete",
			Handler:    _VirtioBlkService_VirtioBlkDelete_Handler,
		},
		{
			MethodName: "VirtioBlkUpdate",
			Handler:    _VirtioBlkService_VirtioBlkUpdate_Handler,
		},
		{
			MethodName: "VirtioBlkList",
			Handler:    _VirtioBlkService_VirtioBlkList_Handler,
		},
		{
			MethodName: "VirtioBlkGet",
			Handler:    _VirtioBlkService_VirtioBlkGet_Handler,
		},
		{
			MethodName: "VirtioBlkStats",
			Handler:    _VirtioBlkService_VirtioBlkStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// VirtioScsiControllerServiceClient is the client API for VirtioScsiControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtioScsiControllerServiceClient interface {
	VirtioScsiControllerCreate(ctx context.Context, in *VirtioScsiControllerCreateRequest, opts ...grpc.CallOption) (*VirtioScsiControllerCreateResponse, error)
	VirtioScsiControllerDelete(ctx context.Context, in *VirtioScsiControllerDeleteRequest, opts ...grpc.CallOption) (*VirtioScsiControllerDeleteResponse, error)
	VirtioScsiControllerUpdate(ctx context.Context, in *VirtioScsiControllerUpdateRequest, opts ...grpc.CallOption) (*VirtioScsiControllerUpdateResponse, error)
	VirtioScsiControllerList(ctx context.Context, in *VirtioScsiControllerListRequest, opts ...grpc.CallOption) (*VirtioScsiControllerListResponse, error)
	VirtioScsiControllerGet(ctx context.Context, in *VirtioScsiControllerGetRequest, opts ...grpc.CallOption) (*VirtioScsiControllerGetResponse, error)
	VirtioScsiControllerStats(ctx context.Context, in *VirtioScsiControllerStatsRequest, opts ...grpc.CallOption) (*VirtioScsiControllerStatsResponse, error)
}

type virtioScsiControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtioScsiControllerServiceClient(cc grpc.ClientConnInterface) VirtioScsiControllerServiceClient {
	return &virtioScsiControllerServiceClient{cc}
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerCreate(ctx context.Context, in *VirtioScsiControllerCreateRequest, opts ...grpc.CallOption) (*VirtioScsiControllerCreateResponse, error) {
	out := new(VirtioScsiControllerCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerDelete(ctx context.Context, in *VirtioScsiControllerDeleteRequest, opts ...grpc.CallOption) (*VirtioScsiControllerDeleteResponse, error) {
	out := new(VirtioScsiControllerDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerUpdate(ctx context.Context, in *VirtioScsiControllerUpdateRequest, opts ...grpc.CallOption) (*VirtioScsiControllerUpdateResponse, error) {
	out := new(VirtioScsiControllerUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerList(ctx context.Context, in *VirtioScsiControllerListRequest, opts ...grpc.CallOption) (*VirtioScsiControllerListResponse, error) {
	out := new(VirtioScsiControllerListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerGet(ctx context.Context, in *VirtioScsiControllerGetRequest, opts ...grpc.CallOption) (*VirtioScsiControllerGetResponse, error) {
	out := new(VirtioScsiControllerGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiControllerServiceClient) VirtioScsiControllerStats(ctx context.Context, in *VirtioScsiControllerStatsRequest, opts ...grpc.CallOption) (*VirtioScsiControllerStatsResponse, error) {
	out := new(VirtioScsiControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtioScsiControllerServiceServer is the server API for VirtioScsiControllerService service.
type VirtioScsiControllerServiceServer interface {
	VirtioScsiControllerCreate(context.Context, *VirtioScsiControllerCreateRequest) (*VirtioScsiControllerCreateResponse, error)
	VirtioScsiControllerDelete(context.Context, *VirtioScsiControllerDeleteRequest) (*VirtioScsiControllerDeleteResponse, error)
	VirtioScsiControllerUpdate(context.Context, *VirtioScsiControllerUpdateRequest) (*VirtioScsiControllerUpdateResponse, error)
	VirtioScsiControllerList(context.Context, *VirtioScsiControllerListRequest) (*VirtioScsiControllerListResponse, error)
	VirtioScsiControllerGet(context.Context, *VirtioScsiControllerGetRequest) (*VirtioScsiControllerGetResponse, error)
	VirtioScsiControllerStats(context.Context, *VirtioScsiControllerStatsRequest) (*VirtioScsiControllerStatsResponse, error)
}

// UnimplementedVirtioScsiControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtioScsiControllerServiceServer struct {
}

func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerCreate(context.Context, *VirtioScsiControllerCreateRequest) (*VirtioScsiControllerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerCreate not implemented")
}
func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerDelete(context.Context, *VirtioScsiControllerDeleteRequest) (*VirtioScsiControllerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerDelete not implemented")
}
func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerUpdate(context.Context, *VirtioScsiControllerUpdateRequest) (*VirtioScsiControllerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerUpdate not implemented")
}
func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerList(context.Context, *VirtioScsiControllerListRequest) (*VirtioScsiControllerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerList not implemented")
}
func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerGet(context.Context, *VirtioScsiControllerGetRequest) (*VirtioScsiControllerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerGet not implemented")
}
func (*UnimplementedVirtioScsiControllerServiceServer) VirtioScsiControllerStats(context.Context, *VirtioScsiControllerStatsRequest) (*VirtioScsiControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiControllerStats not implemented")
}

func RegisterVirtioScsiControllerServiceServer(s *grpc.Server, srv VirtioScsiControllerServiceServer) {
	s.RegisterService(&_VirtioScsiControllerService_serviceDesc, srv)
}

func _VirtioScsiControllerService_VirtioScsiControllerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerCreate(ctx, req.(*VirtioScsiControllerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiControllerService_VirtioScsiControllerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerDelete(ctx, req.(*VirtioScsiControllerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiControllerService_VirtioScsiControllerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerUpdate(ctx, req.(*VirtioScsiControllerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiControllerService_VirtioScsiControllerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerList(ctx, req.(*VirtioScsiControllerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiControllerService_VirtioScsiControllerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerGet(ctx, req.(*VirtioScsiControllerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiControllerService_VirtioScsiControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiControllerService/VirtioScsiControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiControllerServiceServer).VirtioScsiControllerStats(ctx, req.(*VirtioScsiControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtioScsiControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.VirtioScsiControllerService",
	HandlerType: (*VirtioScsiControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VirtioScsiControllerCreate",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerCreate_Handler,
		},
		{
			MethodName: "VirtioScsiControllerDelete",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerDelete_Handler,
		},
		{
			MethodName: "VirtioScsiControllerUpdate",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerUpdate_Handler,
		},
		{
			MethodName: "VirtioScsiControllerList",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerList_Handler,
		},
		{
			MethodName: "VirtioScsiControllerGet",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerGet_Handler,
		},
		{
			MethodName: "VirtioScsiControllerStats",
			Handler:    _VirtioScsiControllerService_VirtioScsiControllerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// VirtioScsiLunServiceClient is the client API for VirtioScsiLunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtioScsiLunServiceClient interface {
	VirtioScsiLunCreate(ctx context.Context, in *VirtioScsiLunCreateRequest, opts ...grpc.CallOption) (*VirtioScsiLunCreateResponse, error)
	VirtioScsiLunDelete(ctx context.Context, in *VirtioScsiLunDeleteRequest, opts ...grpc.CallOption) (*VirtioScsiLunDeleteResponse, error)
	VirtioScsiLunUpdate(ctx context.Context, in *VirtioScsiLunUpdateRequest, opts ...grpc.CallOption) (*VirtioScsiLunUpdateResponse, error)
	VirtioScsiLunList(ctx context.Context, in *VirtioScsiLunListRequest, opts ...grpc.CallOption) (*VirtioScsiLunListResponse, error)
	VirtioScsiLunGet(ctx context.Context, in *VirtioScsiLunGetRequest, opts ...grpc.CallOption) (*VirtioScsiLunGetResponse, error)
	VirtioScsiLunStats(ctx context.Context, in *VirtioScsiLunStatsRequest, opts ...grpc.CallOption) (*VirtioScsiLunStatsResponse, error)
}

type virtioScsiLunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtioScsiLunServiceClient(cc grpc.ClientConnInterface) VirtioScsiLunServiceClient {
	return &virtioScsiLunServiceClient{cc}
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunCreate(ctx context.Context, in *VirtioScsiLunCreateRequest, opts ...grpc.CallOption) (*VirtioScsiLunCreateResponse, error) {
	out := new(VirtioScsiLunCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunDelete(ctx context.Context, in *VirtioScsiLunDeleteRequest, opts ...grpc.CallOption) (*VirtioScsiLunDeleteResponse, error) {
	out := new(VirtioScsiLunDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunUpdate(ctx context.Context, in *VirtioScsiLunUpdateRequest, opts ...grpc.CallOption) (*VirtioScsiLunUpdateResponse, error) {
	out := new(VirtioScsiLunUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunList(ctx context.Context, in *VirtioScsiLunListRequest, opts ...grpc.CallOption) (*VirtioScsiLunListResponse, error) {
	out := new(VirtioScsiLunListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunGet(ctx context.Context, in *VirtioScsiLunGetRequest, opts ...grpc.CallOption) (*VirtioScsiLunGetResponse, error) {
	out := new(VirtioScsiLunGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtioScsiLunServiceClient) VirtioScsiLunStats(ctx context.Context, in *VirtioScsiLunStatsRequest, opts ...grpc.CallOption) (*VirtioScsiLunStatsResponse, error) {
	out := new(VirtioScsiLunStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtioScsiLunServiceServer is the server API for VirtioScsiLunService service.
type VirtioScsiLunServiceServer interface {
	VirtioScsiLunCreate(context.Context, *VirtioScsiLunCreateRequest) (*VirtioScsiLunCreateResponse, error)
	VirtioScsiLunDelete(context.Context, *VirtioScsiLunDeleteRequest) (*VirtioScsiLunDeleteResponse, error)
	VirtioScsiLunUpdate(context.Context, *VirtioScsiLunUpdateRequest) (*VirtioScsiLunUpdateResponse, error)
	VirtioScsiLunList(context.Context, *VirtioScsiLunListRequest) (*VirtioScsiLunListResponse, error)
	VirtioScsiLunGet(context.Context, *VirtioScsiLunGetRequest) (*VirtioScsiLunGetResponse, error)
	VirtioScsiLunStats(context.Context, *VirtioScsiLunStatsRequest) (*VirtioScsiLunStatsResponse, error)
}

// UnimplementedVirtioScsiLunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtioScsiLunServiceServer struct {
}

func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunCreate(context.Context, *VirtioScsiLunCreateRequest) (*VirtioScsiLunCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunCreate not implemented")
}
func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunDelete(context.Context, *VirtioScsiLunDeleteRequest) (*VirtioScsiLunDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunDelete not implemented")
}
func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunUpdate(context.Context, *VirtioScsiLunUpdateRequest) (*VirtioScsiLunUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunUpdate not implemented")
}
func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunList(context.Context, *VirtioScsiLunListRequest) (*VirtioScsiLunListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunList not implemented")
}
func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunGet(context.Context, *VirtioScsiLunGetRequest) (*VirtioScsiLunGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunGet not implemented")
}
func (*UnimplementedVirtioScsiLunServiceServer) VirtioScsiLunStats(context.Context, *VirtioScsiLunStatsRequest) (*VirtioScsiLunStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtioScsiLunStats not implemented")
}

func RegisterVirtioScsiLunServiceServer(s *grpc.Server, srv VirtioScsiLunServiceServer) {
	s.RegisterService(&_VirtioScsiLunService_serviceDesc, srv)
}

func _VirtioScsiLunService_VirtioScsiLunCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunCreate(ctx, req.(*VirtioScsiLunCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiLunService_VirtioScsiLunDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunDelete(ctx, req.(*VirtioScsiLunDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiLunService_VirtioScsiLunUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunUpdate(ctx, req.(*VirtioScsiLunUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiLunService_VirtioScsiLunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunList(ctx, req.(*VirtioScsiLunListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiLunService_VirtioScsiLunGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunGet(ctx, req.(*VirtioScsiLunGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtioScsiLunService_VirtioScsiLunStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtioScsiLunStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.VirtioScsiLunService/VirtioScsiLunStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtioScsiLunServiceServer).VirtioScsiLunStats(ctx, req.(*VirtioScsiLunStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtioScsiLunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.VirtioScsiLunService",
	HandlerType: (*VirtioScsiLunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VirtioScsiLunCreate",
			Handler:    _VirtioScsiLunService_VirtioScsiLunCreate_Handler,
		},
		{
			MethodName: "VirtioScsiLunDelete",
			Handler:    _VirtioScsiLunService_VirtioScsiLunDelete_Handler,
		},
		{
			MethodName: "VirtioScsiLunUpdate",
			Handler:    _VirtioScsiLunService_VirtioScsiLunUpdate_Handler,
		},
		{
			MethodName: "VirtioScsiLunList",
			Handler:    _VirtioScsiLunService_VirtioScsiLunList_Handler,
		},
		{
			MethodName: "VirtioScsiLunGet",
			Handler:    _VirtioScsiLunService_VirtioScsiLunGet_Handler,
		},
		{
			MethodName: "VirtioScsiLunStats",
			Handler:    _VirtioScsiLunService_VirtioScsiLunStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
