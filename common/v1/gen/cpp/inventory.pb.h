// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inventory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inventory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inventory_2eproto;
namespace opi_api {
namespace inventory {
namespace v1 {
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class InventoryGetRequest;
struct InventoryGetRequestDefaultTypeInternal;
extern InventoryGetRequestDefaultTypeInternal _InventoryGetRequest_default_instance_;
class InventoryGetResponse;
struct InventoryGetResponseDefaultTypeInternal;
extern InventoryGetResponseDefaultTypeInternal _InventoryGetResponse_default_instance_;
}  // namespace v1
}  // namespace inventory
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::inventory::v1::DeviceInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::DeviceInfo>(Arena*);
template<> ::opi_api::inventory::v1::InventoryGetRequest* Arena::CreateMaybeMessage<::opi_api::inventory::v1::InventoryGetRequest>(Arena*);
template<> ::opi_api::inventory::v1::InventoryGetResponse* Arena::CreateMaybeMessage<::opi_api::inventory::v1::InventoryGetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace inventory {
namespace v1 {

// ===================================================================

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kIdFieldNumber = 3,
    kMfgNameFieldNumber = 4,
    kMfgDateFieldNumber = 5,
    kHwVersionFieldNumber = 6,
    kFwVersionFieldNumber = 7,
    kSwVersionFieldNumber = 8,
    kSerialNoFieldNumber = 9,
    kPartNoFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string mfg_name = 4;
  void clear_mfg_name();
  const std::string& mfg_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mfg_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mfg_name();
  PROTOBUF_NODISCARD std::string* release_mfg_name();
  void set_allocated_mfg_name(std::string* mfg_name);
  private:
  const std::string& _internal_mfg_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mfg_name(const std::string& value);
  std::string* _internal_mutable_mfg_name();
  public:

  // string mfg_date = 5;
  void clear_mfg_date();
  const std::string& mfg_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mfg_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mfg_date();
  PROTOBUF_NODISCARD std::string* release_mfg_date();
  void set_allocated_mfg_date(std::string* mfg_date);
  private:
  const std::string& _internal_mfg_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mfg_date(const std::string& value);
  std::string* _internal_mutable_mfg_date();
  public:

  // string hw_version = 6;
  void clear_hw_version();
  const std::string& hw_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hw_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hw_version();
  PROTOBUF_NODISCARD std::string* release_hw_version();
  void set_allocated_hw_version(std::string* hw_version);
  private:
  const std::string& _internal_hw_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hw_version(const std::string& value);
  std::string* _internal_mutable_hw_version();
  public:

  // string fw_version = 7;
  void clear_fw_version();
  const std::string& fw_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fw_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fw_version();
  PROTOBUF_NODISCARD std::string* release_fw_version();
  void set_allocated_fw_version(std::string* fw_version);
  private:
  const std::string& _internal_fw_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fw_version(const std::string& value);
  std::string* _internal_mutable_fw_version();
  public:

  // string sw_version = 8;
  void clear_sw_version();
  const std::string& sw_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sw_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sw_version();
  PROTOBUF_NODISCARD std::string* release_sw_version();
  void set_allocated_sw_version(std::string* sw_version);
  private:
  const std::string& _internal_sw_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sw_version(const std::string& value);
  std::string* _internal_mutable_sw_version();
  public:

  // string serial_no = 9;
  void clear_serial_no();
  const std::string& serial_no() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_no(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_no();
  PROTOBUF_NODISCARD std::string* release_serial_no();
  void set_allocated_serial_no(std::string* serial_no);
  private:
  const std::string& _internal_serial_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_no(const std::string& value);
  std::string* _internal_mutable_serial_no();
  public:

  // string part_no = 10;
  void clear_part_no();
  const std::string& part_no() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_no(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_no();
  PROTOBUF_NODISCARD std::string* release_part_no();
  void set_allocated_part_no(std::string* part_no);
  private:
  const std::string& _internal_part_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_no(const std::string& value);
  std::string* _internal_mutable_part_no();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mfg_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mfg_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hw_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fw_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class InventoryGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.InventoryGetRequest) */ {
 public:
  inline InventoryGetRequest() : InventoryGetRequest(nullptr) {}
  explicit constexpr InventoryGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InventoryGetRequest(const InventoryGetRequest& from);
  InventoryGetRequest(InventoryGetRequest&& from) noexcept
    : InventoryGetRequest() {
    *this = ::std::move(from);
  }

  inline InventoryGetRequest& operator=(const InventoryGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGetRequest& operator=(InventoryGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InventoryGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGetRequest* internal_default_instance() {
    return reinterpret_cast<const InventoryGetRequest*>(
               &_InventoryGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InventoryGetRequest& a, InventoryGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InventoryGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InventoryGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.InventoryGetRequest";
  }
  protected:
  explicit InventoryGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.InventoryGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class InventoryGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.InventoryGetResponse) */ {
 public:
  inline InventoryGetResponse() : InventoryGetResponse(nullptr) {}
  ~InventoryGetResponse() override;
  explicit constexpr InventoryGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InventoryGetResponse(const InventoryGetResponse& from);
  InventoryGetResponse(InventoryGetResponse&& from) noexcept
    : InventoryGetResponse() {
    *this = ::std::move(from);
  }

  inline InventoryGetResponse& operator=(const InventoryGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGetResponse& operator=(InventoryGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InventoryGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGetResponse* internal_default_instance() {
    return reinterpret_cast<const InventoryGetResponse*>(
               &_InventoryGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InventoryGetResponse& a, InventoryGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InventoryGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InventoryGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InventoryGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.InventoryGetResponse";
  }
  protected:
  explicit InventoryGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevinfoFieldNumber = 1,
  };
  // .opi_api.inventory.v1.DeviceInfo devinfo = 1;
  bool has_devinfo() const;
  private:
  bool _internal_has_devinfo() const;
  public:
  void clear_devinfo();
  const ::opi_api::inventory::v1::DeviceInfo& devinfo() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::DeviceInfo* release_devinfo();
  ::opi_api::inventory::v1::DeviceInfo* mutable_devinfo();
  void set_allocated_devinfo(::opi_api::inventory::v1::DeviceInfo* devinfo);
  private:
  const ::opi_api::inventory::v1::DeviceInfo& _internal_devinfo() const;
  ::opi_api::inventory::v1::DeviceInfo* _internal_mutable_devinfo();
  public:
  void unsafe_arena_set_allocated_devinfo(
      ::opi_api::inventory::v1::DeviceInfo* devinfo);
  ::opi_api::inventory::v1::DeviceInfo* unsafe_arena_release_devinfo();

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.InventoryGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::inventory::v1::DeviceInfo* devinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfo

// string name = 1;
inline void DeviceInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.name)
}
inline std::string* DeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.name)
  return _s;
}
inline const std::string& DeviceInfo::_internal_name() const {
  return name_.Get();
}
inline void DeviceInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.name)
}

// string description = 2;
inline void DeviceInfo::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& DeviceInfo::description() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.description)
}
inline std::string* DeviceInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.description)
  return _s;
}
inline const std::string& DeviceInfo::_internal_description() const {
  return description_.Get();
}
inline void DeviceInfo::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.description)
}

// string id = 3;
inline void DeviceInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.id)
}
inline std::string* DeviceInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.id)
  return _s;
}
inline const std::string& DeviceInfo::_internal_id() const {
  return id_.Get();
}
inline void DeviceInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.id)
}

// string mfg_name = 4;
inline void DeviceInfo::clear_mfg_name() {
  mfg_name_.ClearToEmpty();
}
inline const std::string& DeviceInfo::mfg_name() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.mfg_name)
  return _internal_mfg_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_mfg_name(ArgT0&& arg0, ArgT... args) {
 
 mfg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.mfg_name)
}
inline std::string* DeviceInfo::mutable_mfg_name() {
  std::string* _s = _internal_mutable_mfg_name();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.mfg_name)
  return _s;
}
inline const std::string& DeviceInfo::_internal_mfg_name() const {
  return mfg_name_.Get();
}
inline void DeviceInfo::_internal_set_mfg_name(const std::string& value) {
  
  mfg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_mfg_name() {
  
  return mfg_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_mfg_name() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.mfg_name)
  return mfg_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_mfg_name(std::string* mfg_name) {
  if (mfg_name != nullptr) {
    
  } else {
    
  }
  mfg_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mfg_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mfg_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mfg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.mfg_name)
}

// string mfg_date = 5;
inline void DeviceInfo::clear_mfg_date() {
  mfg_date_.ClearToEmpty();
}
inline const std::string& DeviceInfo::mfg_date() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.mfg_date)
  return _internal_mfg_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_mfg_date(ArgT0&& arg0, ArgT... args) {
 
 mfg_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.mfg_date)
}
inline std::string* DeviceInfo::mutable_mfg_date() {
  std::string* _s = _internal_mutable_mfg_date();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.mfg_date)
  return _s;
}
inline const std::string& DeviceInfo::_internal_mfg_date() const {
  return mfg_date_.Get();
}
inline void DeviceInfo::_internal_set_mfg_date(const std::string& value) {
  
  mfg_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_mfg_date() {
  
  return mfg_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_mfg_date() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.mfg_date)
  return mfg_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_mfg_date(std::string* mfg_date) {
  if (mfg_date != nullptr) {
    
  } else {
    
  }
  mfg_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mfg_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mfg_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mfg_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.mfg_date)
}

// string hw_version = 6;
inline void DeviceInfo::clear_hw_version() {
  hw_version_.ClearToEmpty();
}
inline const std::string& DeviceInfo::hw_version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.hw_version)
  return _internal_hw_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_hw_version(ArgT0&& arg0, ArgT... args) {
 
 hw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.hw_version)
}
inline std::string* DeviceInfo::mutable_hw_version() {
  std::string* _s = _internal_mutable_hw_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.hw_version)
  return _s;
}
inline const std::string& DeviceInfo::_internal_hw_version() const {
  return hw_version_.Get();
}
inline void DeviceInfo::_internal_set_hw_version(const std::string& value) {
  
  hw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_hw_version() {
  
  return hw_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_hw_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.hw_version)
  return hw_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_hw_version(std::string* hw_version) {
  if (hw_version != nullptr) {
    
  } else {
    
  }
  hw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hw_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.hw_version)
}

// string fw_version = 7;
inline void DeviceInfo::clear_fw_version() {
  fw_version_.ClearToEmpty();
}
inline const std::string& DeviceInfo::fw_version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.fw_version)
  return _internal_fw_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_fw_version(ArgT0&& arg0, ArgT... args) {
 
 fw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.fw_version)
}
inline std::string* DeviceInfo::mutable_fw_version() {
  std::string* _s = _internal_mutable_fw_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.fw_version)
  return _s;
}
inline const std::string& DeviceInfo::_internal_fw_version() const {
  return fw_version_.Get();
}
inline void DeviceInfo::_internal_set_fw_version(const std::string& value) {
  
  fw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_fw_version() {
  
  return fw_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_fw_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.fw_version)
  return fw_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_fw_version(std::string* fw_version) {
  if (fw_version != nullptr) {
    
  } else {
    
  }
  fw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fw_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.fw_version)
}

// string sw_version = 8;
inline void DeviceInfo::clear_sw_version() {
  sw_version_.ClearToEmpty();
}
inline const std::string& DeviceInfo::sw_version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.sw_version)
  return _internal_sw_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_sw_version(ArgT0&& arg0, ArgT... args) {
 
 sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.sw_version)
}
inline std::string* DeviceInfo::mutable_sw_version() {
  std::string* _s = _internal_mutable_sw_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.sw_version)
  return _s;
}
inline const std::string& DeviceInfo::_internal_sw_version() const {
  return sw_version_.Get();
}
inline void DeviceInfo::_internal_set_sw_version(const std::string& value) {
  
  sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_sw_version() {
  
  return sw_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_sw_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.sw_version)
  return sw_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_sw_version(std::string* sw_version) {
  if (sw_version != nullptr) {
    
  } else {
    
  }
  sw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.sw_version)
}

// string serial_no = 9;
inline void DeviceInfo::clear_serial_no() {
  serial_no_.ClearToEmpty();
}
inline const std::string& DeviceInfo::serial_no() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.serial_no)
  return _internal_serial_no();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_serial_no(ArgT0&& arg0, ArgT... args) {
 
 serial_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.serial_no)
}
inline std::string* DeviceInfo::mutable_serial_no() {
  std::string* _s = _internal_mutable_serial_no();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.serial_no)
  return _s;
}
inline const std::string& DeviceInfo::_internal_serial_no() const {
  return serial_no_.Get();
}
inline void DeviceInfo::_internal_set_serial_no(const std::string& value) {
  
  serial_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_serial_no() {
  
  return serial_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_serial_no() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.serial_no)
  return serial_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_serial_no(std::string* serial_no) {
  if (serial_no != nullptr) {
    
  } else {
    
  }
  serial_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_no,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_no_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_no_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.serial_no)
}

// string part_no = 10;
inline void DeviceInfo::clear_part_no() {
  part_no_.ClearToEmpty();
}
inline const std::string& DeviceInfo::part_no() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.DeviceInfo.part_no)
  return _internal_part_no();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_part_no(ArgT0&& arg0, ArgT... args) {
 
 part_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.DeviceInfo.part_no)
}
inline std::string* DeviceInfo::mutable_part_no() {
  std::string* _s = _internal_mutable_part_no();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.DeviceInfo.part_no)
  return _s;
}
inline const std::string& DeviceInfo::_internal_part_no() const {
  return part_no_.Get();
}
inline void DeviceInfo::_internal_set_part_no(const std::string& value) {
  
  part_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_part_no() {
  
  return part_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_part_no() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.DeviceInfo.part_no)
  return part_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_part_no(std::string* part_no) {
  if (part_no != nullptr) {
    
  } else {
    
  }
  part_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), part_no,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (part_no_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    part_no_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.DeviceInfo.part_no)
}

// -------------------------------------------------------------------

// InventoryGetRequest

// -------------------------------------------------------------------

// InventoryGetResponse

// .opi_api.inventory.v1.DeviceInfo devinfo = 1;
inline bool InventoryGetResponse::_internal_has_devinfo() const {
  return this != internal_default_instance() && devinfo_ != nullptr;
}
inline bool InventoryGetResponse::has_devinfo() const {
  return _internal_has_devinfo();
}
inline void InventoryGetResponse::clear_devinfo() {
  if (GetArenaForAllocation() == nullptr && devinfo_ != nullptr) {
    delete devinfo_;
  }
  devinfo_ = nullptr;
}
inline const ::opi_api::inventory::v1::DeviceInfo& InventoryGetResponse::_internal_devinfo() const {
  const ::opi_api::inventory::v1::DeviceInfo* p = devinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::DeviceInfo&>(
      ::opi_api::inventory::v1::_DeviceInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::DeviceInfo& InventoryGetResponse::devinfo() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.devinfo)
  return _internal_devinfo();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_devinfo(
    ::opi_api::inventory::v1::DeviceInfo* devinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devinfo_);
  }
  devinfo_ = devinfo;
  if (devinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.devinfo)
}
inline ::opi_api::inventory::v1::DeviceInfo* InventoryGetResponse::release_devinfo() {
  
  ::opi_api::inventory::v1::DeviceInfo* temp = devinfo_;
  devinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::DeviceInfo* InventoryGetResponse::unsafe_arena_release_devinfo() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.devinfo)
  
  ::opi_api::inventory::v1::DeviceInfo* temp = devinfo_;
  devinfo_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::DeviceInfo* InventoryGetResponse::_internal_mutable_devinfo() {
  
  if (devinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::DeviceInfo>(GetArenaForAllocation());
    devinfo_ = p;
  }
  return devinfo_;
}
inline ::opi_api::inventory::v1::DeviceInfo* InventoryGetResponse::mutable_devinfo() {
  ::opi_api::inventory::v1::DeviceInfo* _msg = _internal_mutable_devinfo();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.devinfo)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_devinfo(::opi_api::inventory::v1::DeviceInfo* devinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete devinfo_;
  }
  if (devinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::DeviceInfo>::GetOwningArena(devinfo);
    if (message_arena != submessage_arena) {
      devinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devinfo, submessage_arena);
    }
    
  } else {
    
  }
  devinfo_ = devinfo;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.devinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace inventory
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto
