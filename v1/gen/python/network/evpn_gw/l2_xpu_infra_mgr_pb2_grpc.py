# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from network.evpn_gw import l2_xpu_infra_mgr_pb2 as network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2


class LogicalBridgeServiceStub(object):
    """Management of LogicalBridge Resources
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateLogicalBridge = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/CreateLogicalBridge',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateLogicalBridgeRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
                _registered_method=True)
        self.ListLogicalBridges = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/ListLogicalBridges',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesResponse.FromString,
                _registered_method=True)
        self.GetLogicalBridge = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/GetLogicalBridge',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetLogicalBridgeRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
                _registered_method=True)
        self.DeleteLogicalBridge = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/DeleteLogicalBridge',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteLogicalBridgeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateLogicalBridge = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/UpdateLogicalBridge',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateLogicalBridgeRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
                _registered_method=True)


class LogicalBridgeServiceServicer(object):
    """Management of LogicalBridge Resources
    """

    def CreateLogicalBridge(self, request, context):
        """Create a Logical Bridge
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLogicalBridges(self, request, context):
        """List Logical Bridges
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogicalBridge(self, request, context):
        """Retrieve a Logical Bridge
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLogicalBridge(self, request, context):
        """Delete a Logical Bridge
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLogicalBridge(self, request, context):
        """Update a Logical Bridge
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogicalBridgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateLogicalBridge': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLogicalBridge,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateLogicalBridgeRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.SerializeToString,
            ),
            'ListLogicalBridges': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLogicalBridges,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesResponse.SerializeToString,
            ),
            'GetLogicalBridge': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogicalBridge,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetLogicalBridgeRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.SerializeToString,
            ),
            'DeleteLogicalBridge': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLogicalBridge,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteLogicalBridgeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateLogicalBridge': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLogicalBridge,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateLogicalBridgeRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogicalBridgeService(object):
    """Management of LogicalBridge Resources
    """

    @staticmethod
    def CreateLogicalBridge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/CreateLogicalBridge',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateLogicalBridgeRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLogicalBridges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/ListLogicalBridges',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListLogicalBridgesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLogicalBridge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/GetLogicalBridge',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetLogicalBridgeRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteLogicalBridge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/DeleteLogicalBridge',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteLogicalBridgeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLogicalBridge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/UpdateLogicalBridge',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateLogicalBridgeRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.LogicalBridge.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BridgePortServiceStub(object):
    """Management of BridgePort resources
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBridgePort = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/CreateBridgePort',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateBridgePortRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
                _registered_method=True)
        self.ListBridgePorts = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/ListBridgePorts',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsResponse.FromString,
                _registered_method=True)
        self.GetBridgePort = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/GetBridgePort',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetBridgePortRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
                _registered_method=True)
        self.DeleteBridgePort = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/DeleteBridgePort',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteBridgePortRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateBridgePort = channel.unary_unary(
                '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/UpdateBridgePort',
                request_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateBridgePortRequest.SerializeToString,
                response_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
                _registered_method=True)


class BridgePortServiceServicer(object):
    """Management of BridgePort resources
    """

    def CreateBridgePort(self, request, context):
        """Create a Bridge Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBridgePorts(self, request, context):
        """List Bridge Ports
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBridgePort(self, request, context):
        """Retrieve a Bridge Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBridgePort(self, request, context):
        """Delete a Bridge Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBridgePort(self, request, context):
        """Update a Bridge Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BridgePortServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBridgePort': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBridgePort,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateBridgePortRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.SerializeToString,
            ),
            'ListBridgePorts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBridgePorts,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsResponse.SerializeToString,
            ),
            'GetBridgePort': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBridgePort,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetBridgePortRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.SerializeToString,
            ),
            'DeleteBridgePort': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBridgePort,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteBridgePortRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateBridgePort': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBridgePort,
                    request_deserializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateBridgePortRequest.FromString,
                    response_serializer=network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.network.evpn_gw.v1alpha1.BridgePortService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opi_api.network.evpn_gw.v1alpha1.BridgePortService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BridgePortService(object):
    """Management of BridgePort resources
    """

    @staticmethod
    def CreateBridgePort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/CreateBridgePort',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.CreateBridgePortRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBridgePorts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/ListBridgePorts',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.ListBridgePortsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBridgePort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/GetBridgePort',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.GetBridgePortRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBridgePort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/DeleteBridgePort',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.DeleteBridgePortRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBridgePort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opi_api.network.evpn_gw.v1alpha1.BridgePortService/UpdateBridgePort',
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.UpdateBridgePortRequest.SerializeToString,
            network_dot_evpn__gw_dot_l2__xpu__infra__mgr__pb2.BridgePort.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
