// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// device's network configuration

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: network/cloud/cloudrpc.proto

package _go

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Get DeviceCapabilities Request
type GetDeviceCapabilitiesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceCapabilitiesRequest) Reset() {
	*x = GetDeviceCapabilitiesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCapabilitiesRequest) ProtoMessage() {}

func (x *GetDeviceCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{0}
}

// Create Device Request
type CreateDeviceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// device
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// device_id
	DeviceId      string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeviceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CreateDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Delete device request
type DeleteDeviceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// device id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDeviceRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update device request
type UpdateDeviceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of device updated
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated device info
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateDeviceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List device request
type ListDevicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ListDevicesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDevicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List device response
type ListDevicesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of devices
	Device []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{5}
}

func (x *ListDevicesResponse) GetDevice() []*Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ListDevicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get device request
type GetDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Update port request
type UpdatePortRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of port requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated port info
	Port *Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortRequest) Reset() {
	*x = UpdatePortRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortRequest) ProtoMessage() {}

func (x *UpdatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePortRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePortRequest) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *UpdatePortRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List port request
type ListPortsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPortsRequest) Reset() {
	*x = ListPortsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsRequest) ProtoMessage() {}

func (x *ListPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsRequest.ProtoReflect.Descriptor instead.
func (*ListPortsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{8}
}

func (x *ListPortsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPortsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPortsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List port response
type ListPortsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of ports
	Port []*Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPortsResponse) Reset() {
	*x = ListPortsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsResponse) ProtoMessage() {}

func (x *ListPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsResponse.ProtoReflect.Descriptor instead.
func (*ListPortsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ListPortsResponse) GetPort() []*Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ListPortsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get port request
type GetPortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortRequest) Reset() {
	*x = GetPortRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortRequest) ProtoMessage() {}

func (x *GetPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortRequest.ProtoReflect.Descriptor instead.
func (*GetPortRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetPortRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Vnic Request
type CreateVnicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vnic
	Vnic *Vnic `protobuf:"bytes,2,opt,name=vnic,proto3" json:"vnic,omitempty"`
	// vnic_id
	VnicId        string `protobuf:"bytes,3,opt,name=vnic_id,json=vnicId,proto3" json:"vnic_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVnicRequest) Reset() {
	*x = CreateVnicRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVnicRequest) ProtoMessage() {}

func (x *CreateVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVnicRequest.ProtoReflect.Descriptor instead.
func (*CreateVnicRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVnicRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVnicRequest) GetVnic() *Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *CreateVnicRequest) GetVnicId() string {
	if x != nil {
		return x.VnicId
	}
	return ""
}

// Delete vnic request
type DeleteVnicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vnic id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVnicRequest) Reset() {
	*x = DeleteVnicRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVnicRequest) ProtoMessage() {}

func (x *DeleteVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVnicRequest.ProtoReflect.Descriptor instead.
func (*DeleteVnicRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVnicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVnicRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update vnic request
type UpdateVnicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of Vnic requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated vnic info
	Vnic *Vnic `protobuf:"bytes,2,opt,name=vnic,proto3" json:"vnic,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVnicRequest) Reset() {
	*x = UpdateVnicRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVnicRequest) ProtoMessage() {}

func (x *UpdateVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVnicRequest.ProtoReflect.Descriptor instead.
func (*UpdateVnicRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateVnicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVnicRequest) GetVnic() *Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *UpdateVnicRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vnic request
type ListVnicsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVnicsRequest) Reset() {
	*x = ListVnicsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVnicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVnicsRequest) ProtoMessage() {}

func (x *ListVnicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVnicsRequest.ProtoReflect.Descriptor instead.
func (*ListVnicsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{14}
}

func (x *ListVnicsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVnicsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVnicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vnic response
type ListVnicsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of vnics
	Vnic []*Vnic `protobuf:"bytes,1,rep,name=vnic,proto3" json:"vnic,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVnicsResponse) Reset() {
	*x = ListVnicsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVnicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVnicsResponse) ProtoMessage() {}

func (x *ListVnicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVnicsResponse.ProtoReflect.Descriptor instead.
func (*ListVnicsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{15}
}

func (x *ListVnicsResponse) GetVnic() []*Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *ListVnicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vnic request
type GetVnicRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVnicRequest) Reset() {
	*x = GetVnicRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVnicRequest) ProtoMessage() {}

func (x *GetVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVnicRequest.ProtoReflect.Descriptor instead.
func (*GetVnicRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetVnicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Interface Request
type CreateInterfaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// interface
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// interface_id
	InterfaceId   string `protobuf:"bytes,3,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{17}
}

func (x *CreateInterfaceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *CreateInterfaceRequest) GetInterfaceId() string {
	if x != nil {
		return x.InterfaceId
	}
	return ""
}

// Delete interface request
type DeleteInterfaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// interface id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInterfaceRequest) Reset() {
	*x = DeleteInterfaceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceRequest) ProtoMessage() {}

func (x *DeleteInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteInterfaceRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update interface request
type UpdateInterfaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of interface requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated interface info
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInterfaceRequest) Reset() {
	*x = UpdateInterfaceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterfaceRequest) ProtoMessage() {}

func (x *UpdateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *UpdateInterfaceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List interface request
type ListInterfacesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInterfacesRequest) Reset() {
	*x = ListInterfacesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesRequest) ProtoMessage() {}

func (x *ListInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{20}
}

func (x *ListInterfacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListInterfacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInterfacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List interface response
type ListInterfacesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of interfaces
	Interface []*Interface `protobuf:"bytes,1,rep,name=interface,proto3" json:"interface,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInterfacesResponse) Reset() {
	*x = ListInterfacesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesResponse) ProtoMessage() {}

func (x *ListInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{21}
}

func (x *ListInterfacesResponse) GetInterface() []*Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *ListInterfacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get interface request
type GetInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInterfaceRequest) Reset() {
	*x = GetInterfaceRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceRequest) ProtoMessage() {}

func (x *GetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create RouteTable Request
type CreateRouteTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// routetable
	Routetable *RouteTable `protobuf:"bytes,2,opt,name=routetable,proto3" json:"routetable,omitempty"`
	// routetable_id
	RoutetableId  string `protobuf:"bytes,3,opt,name=routetable_id,json=routetableId,proto3" json:"routetable_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRouteTableRequest) Reset() {
	*x = CreateRouteTableRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteTableRequest) ProtoMessage() {}

func (x *CreateRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteTableRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{23}
}

func (x *CreateRouteTableRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRouteTableRequest) GetRoutetable() *RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *CreateRouteTableRequest) GetRoutetableId() string {
	if x != nil {
		return x.RoutetableId
	}
	return ""
}

// Delete routetable request
type DeleteRouteTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// routetable id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteTableRequest) Reset() {
	*x = DeleteRouteTableRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteTableRequest) ProtoMessage() {}

func (x *DeleteRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteRouteTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRouteTableRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update routetable request
type UpdateRouteTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of route table requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated routetable info
	Routetable *RouteTable `protobuf:"bytes,2,opt,name=routetable,proto3" json:"routetable,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRouteTableRequest) Reset() {
	*x = UpdateRouteTableRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouteTableRequest) ProtoMessage() {}

func (x *UpdateRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouteTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateRouteTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRouteTableRequest) GetRoutetable() *RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *UpdateRouteTableRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List routetable request
type ListRouteTablesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRouteTablesRequest) Reset() {
	*x = ListRouteTablesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRouteTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesRequest) ProtoMessage() {}

func (x *ListRouteTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesRequest.ProtoReflect.Descriptor instead.
func (*ListRouteTablesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{26}
}

func (x *ListRouteTablesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRouteTablesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRouteTablesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List routetable response
type ListRouteTablesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of routetables
	Routetable []*RouteTable `protobuf:"bytes,1,rep,name=routetable,proto3" json:"routetable,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRouteTablesResponse) Reset() {
	*x = ListRouteTablesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRouteTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesResponse) ProtoMessage() {}

func (x *ListRouteTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesResponse.ProtoReflect.Descriptor instead.
func (*ListRouteTablesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{27}
}

func (x *ListRouteTablesResponse) GetRoutetable() []*RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *ListRouteTablesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get routetable request
type GetRouteTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRouteTableRequest) Reset() {
	*x = GetRouteTableRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteTableRequest) ProtoMessage() {}

func (x *GetRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteTableRequest.ProtoReflect.Descriptor instead.
func (*GetRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{28}
}

func (x *GetRouteTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Route Request
type CreateRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// route
	Route *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// route_id
	RouteId       string `protobuf:"bytes,3,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRouteRequest) Reset() {
	*x = CreateRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteRequest) ProtoMessage() {}

func (x *CreateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{29}
}

func (x *CreateRouteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *CreateRouteRequest) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

// Delete route request
type DeleteRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// route id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRouteRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update route request
type UpdateRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of route requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated route info
	Route *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRouteRequest) Reset() {
	*x = UpdateRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouteRequest) ProtoMessage() {}

func (x *UpdateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouteRequest.ProtoReflect.Descriptor instead.
func (*UpdateRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *UpdateRouteRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List route request
type ListRoutesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{32}
}

func (x *ListRoutesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRoutesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoutesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List route response
type ListRoutesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of routes
	Route []*Route `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{33}
}

func (x *ListRoutesResponse) GetRoute() []*Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *ListRoutesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get route request
type GetRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRouteRequest) Reset() {
	*x = GetRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRequest) ProtoMessage() {}

func (x *GetRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create UnderlayRoute Request
type CreateUnderlayRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// underlayroute
	Underlayroute *UnderlayRoute `protobuf:"bytes,2,opt,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// underlayroute_id
	UnderlayrouteId string `protobuf:"bytes,3,opt,name=underlayroute_id,json=underlayrouteId,proto3" json:"underlayroute_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateUnderlayRouteRequest) Reset() {
	*x = CreateUnderlayRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnderlayRouteRequest) ProtoMessage() {}

func (x *CreateUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{35}
}

func (x *CreateUnderlayRouteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateUnderlayRouteRequest) GetUnderlayroute() *UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *CreateUnderlayRouteRequest) GetUnderlayrouteId() string {
	if x != nil {
		return x.UnderlayrouteId
	}
	return ""
}

// Delete underlayroute request
type DeleteUnderlayRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// underlayroute id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUnderlayRouteRequest) Reset() {
	*x = DeleteUnderlayRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnderlayRouteRequest) ProtoMessage() {}

func (x *DeleteUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteUnderlayRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteUnderlayRouteRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update underlayroute request
type UpdateUnderlayRouteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of underlay route requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated underlayroute info
	Underlayroute *UnderlayRoute `protobuf:"bytes,2,opt,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUnderlayRouteRequest) Reset() {
	*x = UpdateUnderlayRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnderlayRouteRequest) ProtoMessage() {}

func (x *UpdateUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*UpdateUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateUnderlayRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUnderlayRouteRequest) GetUnderlayroute() *UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *UpdateUnderlayRouteRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List underlayroute request
type ListUnderlayRoutesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnderlayRoutesRequest) Reset() {
	*x = ListUnderlayRoutesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnderlayRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnderlayRoutesRequest) ProtoMessage() {}

func (x *ListUnderlayRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnderlayRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListUnderlayRoutesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{38}
}

func (x *ListUnderlayRoutesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUnderlayRoutesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUnderlayRoutesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List underlayroute response
type ListUnderlayRoutesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of underlayroutes
	Underlayroute []*UnderlayRoute `protobuf:"bytes,1,rep,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnderlayRoutesResponse) Reset() {
	*x = ListUnderlayRoutesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnderlayRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnderlayRoutesResponse) ProtoMessage() {}

func (x *ListUnderlayRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnderlayRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListUnderlayRoutesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{39}
}

func (x *ListUnderlayRoutesResponse) GetUnderlayroute() []*UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *ListUnderlayRoutesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get underlayroute request
type GetUnderlayRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnderlayRouteRequest) Reset() {
	*x = GetUnderlayRouteRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnderlayRouteRequest) ProtoMessage() {}

func (x *GetUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*GetUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetUnderlayRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Bgp Requests/Responses
//
// Create BgpRouter Request
type CreateBgpRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp
	BgpRouter *BgpRouter `protobuf:"bytes,1,opt,name=bgp_router,json=bgpRouter,proto3" json:"bgp_router,omitempty"`
	// bgp_id
	BgpRouterId   string `protobuf:"bytes,2,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBgpRouterRequest) Reset() {
	*x = CreateBgpRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBgpRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBgpRouterRequest) ProtoMessage() {}

func (x *CreateBgpRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBgpRouterRequest.ProtoReflect.Descriptor instead.
func (*CreateBgpRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{41}
}

func (x *CreateBgpRouterRequest) GetBgpRouter() *BgpRouter {
	if x != nil {
		return x.BgpRouter
	}
	return nil
}

func (x *CreateBgpRouterRequest) GetBgpRouterId() string {
	if x != nil {
		return x.BgpRouterId
	}
	return ""
}

// Delete BgpRouter request
type DeleteBgpRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBgpRouterRequest) Reset() {
	*x = DeleteBgpRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBgpRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBgpRouterRequest) ProtoMessage() {}

func (x *DeleteBgpRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBgpRouterRequest.ProtoReflect.Descriptor instead.
func (*DeleteBgpRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteBgpRouterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBgpRouterRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update BgpRouter request
type UpdateBgpRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated bgp router info
	BgpRouter *BgpRouter `protobuf:"bytes,1,opt,name=bgp_router,json=bgpRouter,proto3" json:"bgp_router,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBgpRouterRequest) Reset() {
	*x = UpdateBgpRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBgpRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBgpRouterRequest) ProtoMessage() {}

func (x *UpdateBgpRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBgpRouterRequest.ProtoReflect.Descriptor instead.
func (*UpdateBgpRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateBgpRouterRequest) GetBgpRouter() *BgpRouter {
	if x != nil {
		return x.BgpRouter
	}
	return nil
}

func (x *UpdateBgpRouterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List BgpRouter request
type ListBgpRoutersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpRoutersRequest) Reset() {
	*x = ListBgpRoutersRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpRoutersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpRoutersRequest) ProtoMessage() {}

func (x *ListBgpRoutersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpRoutersRequest.ProtoReflect.Descriptor instead.
func (*ListBgpRoutersRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{44}
}

func (x *ListBgpRoutersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBgpRoutersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBgpRoutersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List BgpRouter response
type ListBgpRoutersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of bgp routers
	Bgp []*BgpRouter `protobuf:"bytes,1,rep,name=bgp,proto3" json:"bgp,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpRoutersResponse) Reset() {
	*x = ListBgpRoutersResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpRoutersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpRoutersResponse) ProtoMessage() {}

func (x *ListBgpRoutersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpRoutersResponse.ProtoReflect.Descriptor instead.
func (*ListBgpRoutersResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{45}
}

func (x *ListBgpRoutersResponse) GetBgp() []*BgpRouter {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *ListBgpRoutersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgp request
type GetBgpRouterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBgpRouterRequest) Reset() {
	*x = GetBgpRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBgpRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBgpRouterRequest) ProtoMessage() {}

func (x *GetBgpRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBgpRouterRequest.ProtoReflect.Descriptor instead.
func (*GetBgpRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{46}
}

func (x *GetBgpRouterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// BgpPeer Requests/Responses
//
// Create BgpPeer Request
type CreateBgpPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp_peer_id
	BgpPeerId string `protobuf:"bytes,1,opt,name=bgp_peer_id,json=bgpPeerId,proto3" json:"bgp_peer_id,omitempty"`
	// bgp_peer
	BgpPeer       *BgpPeer `protobuf:"bytes,2,opt,name=bgp_peer,json=bgpPeer,proto3" json:"bgp_peer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBgpPeerRequest) Reset() {
	*x = CreateBgpPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBgpPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBgpPeerRequest) ProtoMessage() {}

func (x *CreateBgpPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBgpPeerRequest.ProtoReflect.Descriptor instead.
func (*CreateBgpPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{47}
}

func (x *CreateBgpPeerRequest) GetBgpPeerId() string {
	if x != nil {
		return x.BgpPeerId
	}
	return ""
}

func (x *CreateBgpPeerRequest) GetBgpPeer() *BgpPeer {
	if x != nil {
		return x.BgpPeer
	}
	return nil
}

// Delete BGP Peer request
type DeleteBgpPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp peer id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBgpPeerRequest) Reset() {
	*x = DeleteBgpPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBgpPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBgpPeerRequest) ProtoMessage() {}

func (x *DeleteBgpPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBgpPeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteBgpPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteBgpPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBgpPeerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update bgp peer request
type UpdateBgpPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated bgp peer info
	BgpPeer *BgpPeer `protobuf:"bytes,1,opt,name=bgp_peer,json=bgpPeer,proto3" json:"bgp_peer,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBgpPeerRequest) Reset() {
	*x = UpdateBgpPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBgpPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBgpPeerRequest) ProtoMessage() {}

func (x *UpdateBgpPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBgpPeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateBgpPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateBgpPeerRequest) GetBgpPeer() *BgpPeer {
	if x != nil {
		return x.BgpPeer
	}
	return nil
}

func (x *UpdateBgpPeerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List bgp peer request
type ListBgpPeersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpPeersRequest) Reset() {
	*x = ListBgpPeersRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpPeersRequest) ProtoMessage() {}

func (x *ListBgpPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpPeersRequest.ProtoReflect.Descriptor instead.
func (*ListBgpPeersRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{50}
}

func (x *ListBgpPeersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBgpPeersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBgpPeersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List bgp peer response
type ListBgpPeersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of bgp peers
	BgpPeer []*BgpPeer `protobuf:"bytes,1,rep,name=bgp_peer,json=bgpPeer,proto3" json:"bgp_peer,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpPeersResponse) Reset() {
	*x = ListBgpPeersResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpPeersResponse) ProtoMessage() {}

func (x *ListBgpPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpPeersResponse.ProtoReflect.Descriptor instead.
func (*ListBgpPeersResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{51}
}

func (x *ListBgpPeersResponse) GetBgpPeer() []*BgpPeer {
	if x != nil {
		return x.BgpPeer
	}
	return nil
}

func (x *ListBgpPeersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgp peer request
type GetBgpPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBgpPeerRequest) Reset() {
	*x = GetBgpPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBgpPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBgpPeerRequest) ProtoMessage() {}

func (x *GetBgpPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBgpPeerRequest.ProtoReflect.Descriptor instead.
func (*GetBgpPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{52}
}

func (x *GetBgpPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// BgpPeerAf Requests/Responses
//
// Create BgpPeerAf Request
type CreateBgpPeerAfRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp_peer_af
	BgpPeerAf *BgpPeerAf `protobuf:"bytes,1,opt,name=bgp_peer_af,json=bgpPeerAf,proto3" json:"bgp_peer_af,omitempty"`
	// bgp_peer_af_id
	BgpPeerAfId   string `protobuf:"bytes,2,opt,name=bgp_peer_af_id,json=bgpPeerAfId,proto3" json:"bgp_peer_af_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBgpPeerAfRequest) Reset() {
	*x = CreateBgpPeerAfRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBgpPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBgpPeerAfRequest) ProtoMessage() {}

func (x *CreateBgpPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBgpPeerAfRequest.ProtoReflect.Descriptor instead.
func (*CreateBgpPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{53}
}

func (x *CreateBgpPeerAfRequest) GetBgpPeerAf() *BgpPeerAf {
	if x != nil {
		return x.BgpPeerAf
	}
	return nil
}

func (x *CreateBgpPeerAfRequest) GetBgpPeerAfId() string {
	if x != nil {
		return x.BgpPeerAfId
	}
	return ""
}

// Delete bgp peer af request
type DeleteBgpPeerAfRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bgp peer af id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBgpPeerAfRequest) Reset() {
	*x = DeleteBgpPeerAfRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBgpPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBgpPeerAfRequest) ProtoMessage() {}

func (x *DeleteBgpPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBgpPeerAfRequest.ProtoReflect.Descriptor instead.
func (*DeleteBgpPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteBgpPeerAfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBgpPeerAfRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update bgp peer af request
type UpdateBgpPeerAfRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated bgp peer af info
	BgpPeerAf *BgpPeerAf `protobuf:"bytes,1,opt,name=bgp_peer_af,json=bgpPeerAf,proto3" json:"bgp_peer_af,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBgpPeerAfRequest) Reset() {
	*x = UpdateBgpPeerAfRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBgpPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBgpPeerAfRequest) ProtoMessage() {}

func (x *UpdateBgpPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBgpPeerAfRequest.ProtoReflect.Descriptor instead.
func (*UpdateBgpPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateBgpPeerAfRequest) GetBgpPeerAf() *BgpPeerAf {
	if x != nil {
		return x.BgpPeerAf
	}
	return nil
}

func (x *UpdateBgpPeerAfRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List bgp peer af request
type ListBgpPeerAfsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpPeerAfsRequest) Reset() {
	*x = ListBgpPeerAfsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpPeerAfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpPeerAfsRequest) ProtoMessage() {}

func (x *ListBgpPeerAfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpPeerAfsRequest.ProtoReflect.Descriptor instead.
func (*ListBgpPeerAfsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{56}
}

func (x *ListBgpPeerAfsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBgpPeerAfsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBgpPeerAfsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List bgp peer af response
type ListBgpPeerAfsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of bgp peer afs
	BgpPeerAf []*BgpPeerAf `protobuf:"bytes,1,rep,name=bgp_peer_af,json=bgpPeerAf,proto3" json:"bgp_peer_af,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBgpPeerAfsResponse) Reset() {
	*x = ListBgpPeerAfsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBgpPeerAfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpPeerAfsResponse) ProtoMessage() {}

func (x *ListBgpPeerAfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpPeerAfsResponse.ProtoReflect.Descriptor instead.
func (*ListBgpPeerAfsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{57}
}

func (x *ListBgpPeerAfsResponse) GetBgpPeerAf() []*BgpPeerAf {
	if x != nil {
		return x.BgpPeerAf
	}
	return nil
}

func (x *ListBgpPeerAfsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgp peer af request
type GetBgpPeerAfRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBgpPeerAfRequest) Reset() {
	*x = GetBgpPeerAfRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBgpPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBgpPeerAfRequest) ProtoMessage() {}

func (x *GetBgpPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBgpPeerAfRequest.ProtoReflect.Descriptor instead.
func (*GetBgpPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{58}
}

func (x *GetBgpPeerAfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Mapping Request
type CreateMappingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// mapping
	Mapping *Mapping `protobuf:"bytes,2,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// mapping_id
	MappingId     string `protobuf:"bytes,3,opt,name=mapping_id,json=mappingId,proto3" json:"mapping_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMappingRequest) Reset() {
	*x = CreateMappingRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMappingRequest) ProtoMessage() {}

func (x *CreateMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateMappingRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{59}
}

func (x *CreateMappingRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateMappingRequest) GetMapping() *Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *CreateMappingRequest) GetMappingId() string {
	if x != nil {
		return x.MappingId
	}
	return ""
}

// Delete mapping request
type DeleteMappingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// mapping id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMappingRequest) Reset() {
	*x = DeleteMappingRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMappingRequest) ProtoMessage() {}

func (x *DeleteMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteMappingRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteMappingRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update mapping request
type UpdateMappingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of mapping requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated mapping info
	Mapping *Mapping `protobuf:"bytes,2,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMappingRequest) Reset() {
	*x = UpdateMappingRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMappingRequest) ProtoMessage() {}

func (x *UpdateMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMappingRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMappingRequest) GetMapping() *Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *UpdateMappingRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List mapping request
type ListMappingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMappingsRequest) Reset() {
	*x = ListMappingsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingsRequest) ProtoMessage() {}

func (x *ListMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListMappingsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{62}
}

func (x *ListMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListMappingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMappingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List mapping response
type ListMappingsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of mappings
	Mapping []*Mapping `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMappingsResponse) Reset() {
	*x = ListMappingsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingsResponse) ProtoMessage() {}

func (x *ListMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListMappingsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{63}
}

func (x *ListMappingsResponse) GetMapping() []*Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *ListMappingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get mapping request
type GetMappingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMappingRequest) Reset() {
	*x = GetMappingRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingRequest) ProtoMessage() {}

func (x *GetMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingRequest.ProtoReflect.Descriptor instead.
func (*GetMappingRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{64}
}

func (x *GetMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create NextHop Request
type CreateNextHopRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// nexthop
	Nexthop *NextHop `protobuf:"bytes,2,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	// nexthop_id
	NexthopId     string `protobuf:"bytes,3,opt,name=nexthop_id,json=nexthopId,proto3" json:"nexthop_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNextHopRequest) Reset() {
	*x = CreateNextHopRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopRequest) ProtoMessage() {}

func (x *CreateNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{65}
}

func (x *CreateNextHopRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateNextHopRequest) GetNexthop() *NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *CreateNextHopRequest) GetNexthopId() string {
	if x != nil {
		return x.NexthopId
	}
	return ""
}

// Delete nexthop request
type DeleteNextHopRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// nexthop id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNextHopRequest) Reset() {
	*x = DeleteNextHopRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNextHopRequest) ProtoMessage() {}

func (x *DeleteNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNextHopRequest.ProtoReflect.Descriptor instead.
func (*DeleteNextHopRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteNextHopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNextHopRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update nexthop request
type UpdateNextHopRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of nexthop requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated nexthop info
	Nexthop *NextHop `protobuf:"bytes,2,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNextHopRequest) Reset() {
	*x = UpdateNextHopRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNextHopRequest) ProtoMessage() {}

func (x *UpdateNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNextHopRequest.ProtoReflect.Descriptor instead.
func (*UpdateNextHopRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateNextHopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNextHopRequest) GetNexthop() *NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *UpdateNextHopRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List nexthop request
type ListNextHopRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNextHopRequest) Reset() {
	*x = ListNextHopRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopRequest) ProtoMessage() {}

func (x *ListNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopRequest.ProtoReflect.Descriptor instead.
func (*ListNextHopRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{68}
}

func (x *ListNextHopRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNextHopRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNextHopRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List nexthop response
type ListNextHopsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of nexthops
	Nexthop []*NextHop `protobuf:"bytes,1,rep,name=nexthop,proto3" json:"nexthop,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNextHopsResponse) Reset() {
	*x = ListNextHopsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNextHopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopsResponse) ProtoMessage() {}

func (x *ListNextHopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopsResponse.ProtoReflect.Descriptor instead.
func (*ListNextHopsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{69}
}

func (x *ListNextHopsResponse) GetNexthop() []*NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *ListNextHopsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get nexthop request
type GetNextHopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextHopRequest) Reset() {
	*x = GetNextHopRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopRequest) ProtoMessage() {}

func (x *GetNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{70}
}

func (x *GetNextHopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create NextHopGroup Request
type CreateNextHopGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// nexthopgroup
	Nexthopgroup *NextHopGroup `protobuf:"bytes,2,opt,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// nexthopgroup_id
	NexthopgroupId string `protobuf:"bytes,3,opt,name=nexthopgroup_id,json=nexthopgroupId,proto3" json:"nexthopgroup_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateNextHopGroupRequest) Reset() {
	*x = CreateNextHopGroupRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupRequest) ProtoMessage() {}

func (x *CreateNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{71}
}

func (x *CreateNextHopGroupRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateNextHopGroupRequest) GetNexthopgroup() *NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *CreateNextHopGroupRequest) GetNexthopgroupId() string {
	if x != nil {
		return x.NexthopgroupId
	}
	return ""
}

// Delete nexthopgroup request
type DeleteNextHopGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// nexthopgroup id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNextHopGroupRequest) Reset() {
	*x = DeleteNextHopGroupRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNextHopGroupRequest) ProtoMessage() {}

func (x *DeleteNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteNextHopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNextHopGroupRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update nexthopgroup request
type UpdateNextHopGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of next hop group requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated nexthopgroup info
	Nexthopgroup *NextHopGroup `protobuf:"bytes,2,opt,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNextHopGroupRequest) Reset() {
	*x = UpdateNextHopGroupRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNextHopGroupRequest) ProtoMessage() {}

func (x *UpdateNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateNextHopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNextHopGroupRequest) GetNexthopgroup() *NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *UpdateNextHopGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List nexthopgroup request
type ListNextHopGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNextHopGroupsRequest) Reset() {
	*x = ListNextHopGroupsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNextHopGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopGroupsRequest) ProtoMessage() {}

func (x *ListNextHopGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListNextHopGroupsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{74}
}

func (x *ListNextHopGroupsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNextHopGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNextHopGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List nexthopgroup response
type ListNextHopGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of nexthopgroups
	Nexthopgroup []*NextHopGroup `protobuf:"bytes,1,rep,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNextHopGroupsResponse) Reset() {
	*x = ListNextHopGroupsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNextHopGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopGroupsResponse) ProtoMessage() {}

func (x *ListNextHopGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListNextHopGroupsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{75}
}

func (x *ListNextHopGroupsResponse) GetNexthopgroup() []*NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *ListNextHopGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get nexthopgroup request
type GetNextHopGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextHopGroupRequest) Reset() {
	*x = GetNextHopGroupRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupRequest) ProtoMessage() {}

func (x *GetNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{76}
}

func (x *GetNextHopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Subnet Request
type CreateSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// subnet
	Subnet *Subnet `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// subnet_id
	SubnetId      string `protobuf:"bytes,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSubnetRequest) Reset() {
	*x = CreateSubnetRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetRequest) ProtoMessage() {}

func (x *CreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{77}
}

func (x *CreateSubnetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *CreateSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

// Delete subnet request
type DeleteSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// subnet id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSubnetRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update subnet request
type UpdateSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of subnet requested
	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // updated subnet info
	Subnet *Subnet `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *UpdateSubnetRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List subnet request
type ListSubnetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{80}
}

func (x *ListSubnetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSubnetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSubnetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List subnet response
type ListSubnetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of subnets
	Subnet []*Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetsResponse) Reset() {
	*x = ListSubnetsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsResponse) ProtoMessage() {}

func (x *ListSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{81}
}

func (x *ListSubnetsResponse) GetSubnet() []*Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ListSubnetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get subnet request
type GetSubnetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubnetRequest) Reset() {
	*x = GetSubnetRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetRequest) ProtoMessage() {}

func (x *GetSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{82}
}

func (x *GetSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Tunnel Request
type CreateTunnelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// tunnel
	Tunnel *Tunnel `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// tunnel_id
	TunnelId      string `protobuf:"bytes,3,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTunnelRequest) Reset() {
	*x = CreateTunnelRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelRequest) ProtoMessage() {}

func (x *CreateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{83}
}

func (x *CreateTunnelRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateTunnelRequest) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *CreateTunnelRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

// Delete Tunnel request
type DeleteTunnelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tunnel id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTunnelRequest) Reset() {
	*x = DeleteTunnelRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelRequest) ProtoMessage() {}

func (x *DeleteTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelRequest.ProtoReflect.Descriptor instead.
func (*DeleteTunnelRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteTunnelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteTunnelRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update Tunnel request
type UpdateTunnelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of tunnel requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated tunnel info
	Tunnel *Tunnel `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTunnelRequest) Reset() {
	*x = UpdateTunnelRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTunnelRequest) ProtoMessage() {}

func (x *UpdateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTunnelRequest.ProtoReflect.Descriptor instead.
func (*UpdateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateTunnelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTunnelRequest) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *UpdateTunnelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List Tunnel request
type ListTunnelsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTunnelsRequest) Reset() {
	*x = ListTunnelsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsRequest) ProtoMessage() {}

func (x *ListTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsRequest.ProtoReflect.Descriptor instead.
func (*ListTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{86}
}

func (x *ListTunnelsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListTunnelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTunnelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List Tunnel response
type ListTunnelsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of tunnels
	Tunnel []*Tunnel `protobuf:"bytes,1,rep,name=tunnel,proto3" json:"tunnel,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTunnelsResponse) Reset() {
	*x = ListTunnelsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsResponse) ProtoMessage() {}

func (x *ListTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsResponse.ProtoReflect.Descriptor instead.
func (*ListTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{87}
}

func (x *ListTunnelsResponse) GetTunnel() []*Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *ListTunnelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get Tunnel request
type GetTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTunnelRequest) Reset() {
	*x = GetTunnelRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelRequest) ProtoMessage() {}

func (x *GetTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{88}
}

func (x *GetTunnelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create Vpc Request
type CreateVpcRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vpc
	Vpc *Vpc `protobuf:"bytes,2,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// vpc_id
	VpcId         string `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpcRequest) Reset() {
	*x = CreateVpcRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpcRequest) ProtoMessage() {}

func (x *CreateVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpcRequest.ProtoReflect.Descriptor instead.
func (*CreateVpcRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{89}
}

func (x *CreateVpcRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *CreateVpcRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

// Delete vpc request
type DeleteVpcRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vpc id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpcRequest) Reset() {
	*x = DeleteVpcRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpcRequest) ProtoMessage() {}

func (x *DeleteVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpcRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpcRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteVpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVpcRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update vpc request
type UpdateVpcRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of vpc requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated vpc info
	Vpc *Vpc `protobuf:"bytes,2,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpcRequest) Reset() {
	*x = UpdateVpcRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpcRequest) ProtoMessage() {}

func (x *UpdateVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpcRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateVpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *UpdateVpcRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vpc request
type ListVpcsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpcsRequest) Reset() {
	*x = ListVpcsRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcsRequest) ProtoMessage() {}

func (x *ListVpcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcsRequest.ProtoReflect.Descriptor instead.
func (*ListVpcsRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{92}
}

func (x *ListVpcsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVpcsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVpcsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vpc response
type ListVpcsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of vpcs
	Vpc []*Vpc `protobuf:"bytes,1,rep,name=vpc,proto3" json:"vpc,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpcsResponse) Reset() {
	*x = ListVpcsResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpcsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcsResponse) ProtoMessage() {}

func (x *ListVpcsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcsResponse.ProtoReflect.Descriptor instead.
func (*ListVpcsResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{93}
}

func (x *ListVpcsResponse) GetVpc() []*Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *ListVpcsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vpc request
type GetVpcRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVpcRequest) Reset() {
	*x = GetVpcRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVpcRequest) ProtoMessage() {}

func (x *GetVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVpcRequest.ProtoReflect.Descriptor instead.
func (*GetVpcRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{94}
}

func (x *GetVpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create VPCPeer Request
type CreateVPCPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vpcpeer
	Vpcpeer *VPCPeer `protobuf:"bytes,2,opt,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// vpcpeer_id
	VpcpeerId     string `protobuf:"bytes,3,opt,name=vpcpeer_id,json=vpcpeerId,proto3" json:"vpcpeer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCPeerRequest) Reset() {
	*x = CreateVPCPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCPeerRequest) ProtoMessage() {}

func (x *CreateVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*CreateVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{95}
}

func (x *CreateVPCPeerRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVPCPeerRequest) GetVpcpeer() *VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *CreateVPCPeerRequest) GetVpcpeerId() string {
	if x != nil {
		return x.VpcpeerId
	}
	return ""
}

// Delete vpcpeer request
type DeleteVPCPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vpcpeer id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVPCPeerRequest) Reset() {
	*x = DeleteVPCPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVPCPeerRequest) ProtoMessage() {}

func (x *DeleteVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{96}
}

func (x *DeleteVPCPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVPCPeerRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update vpcpeer request
type UpdateVPCPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of vpc peer requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated vpcpeer info
	Vpcpeer *VPCPeer `protobuf:"bytes,2,opt,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVPCPeerRequest) Reset() {
	*x = UpdateVPCPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVPCPeerRequest) ProtoMessage() {}

func (x *UpdateVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateVPCPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVPCPeerRequest) GetVpcpeer() *VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *UpdateVPCPeerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vpcpeer request
type ListVPCPeersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVPCPeersRequest) Reset() {
	*x = ListVPCPeersRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCPeersRequest) ProtoMessage() {}

func (x *ListVPCPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCPeersRequest.ProtoReflect.Descriptor instead.
func (*ListVPCPeersRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{98}
}

func (x *ListVPCPeersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVPCPeersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVPCPeersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vpcpeer response
type ListVPCPeersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of vpcpeers
	Vpcpeer []*VPCPeer `protobuf:"bytes,1,rep,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVPCPeersResponse) Reset() {
	*x = ListVPCPeersResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCPeersResponse) ProtoMessage() {}

func (x *ListVPCPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCPeersResponse.ProtoReflect.Descriptor instead.
func (*ListVPCPeersResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{99}
}

func (x *ListVPCPeersResponse) GetVpcpeer() []*VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *ListVPCPeersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vpcpeer request
type GetVPCPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVPCPeerRequest) Reset() {
	*x = GetVPCPeerRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCPeerRequest) ProtoMessage() {}

func (x *GetVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*GetVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{100}
}

func (x *GetVPCPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create SecurityPolicy Request
type CreateSecurityPolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securitypolicy
	Securitypolicy *SecurityPolicy `protobuf:"bytes,2,opt,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// securitypolicy_id
	SecuritypolicyId string `protobuf:"bytes,3,opt,name=securitypolicy_id,json=securitypolicyId,proto3" json:"securitypolicy_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateSecurityPolicyRequest) Reset() {
	*x = CreateSecurityPolicyRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityPolicyRequest) ProtoMessage() {}

func (x *CreateSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{101}
}

func (x *CreateSecurityPolicyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityPolicyRequest) GetSecuritypolicy() *SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *CreateSecurityPolicyRequest) GetSecuritypolicyId() string {
	if x != nil {
		return x.SecuritypolicyId
	}
	return ""
}

// Delete securitypolicy request
type DeleteSecurityPolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// securitypolicy id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSecurityPolicyRequest) Reset() {
	*x = DeleteSecurityPolicyRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityPolicyRequest) ProtoMessage() {}

func (x *DeleteSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteSecurityPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecurityPolicyRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update securitypolicy request
type UpdateSecurityPolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of security policy requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated securitypolicy info
	Securitypolicy *SecurityPolicy `protobuf:"bytes,2,opt,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSecurityPolicyRequest) Reset() {
	*x = UpdateSecurityPolicyRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityPolicyRequest) ProtoMessage() {}

func (x *UpdateSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateSecurityPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSecurityPolicyRequest) GetSecuritypolicy() *SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *UpdateSecurityPolicyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securitypolicy request
type ListSecurityPolicysRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityPolicysRequest) Reset() {
	*x = ListSecurityPolicysRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityPolicysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityPolicysRequest) ProtoMessage() {}

func (x *ListSecurityPolicysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityPolicysRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityPolicysRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{104}
}

func (x *ListSecurityPolicysRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityPolicysRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityPolicysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securitypolicy response
type ListSecurityPolicysResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of securitypolicys
	Securitypolicy []*SecurityPolicy `protobuf:"bytes,1,rep,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityPolicysResponse) Reset() {
	*x = ListSecurityPolicysResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityPolicysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityPolicysResponse) ProtoMessage() {}

func (x *ListSecurityPolicysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityPolicysResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityPolicysResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{105}
}

func (x *ListSecurityPolicysResponse) GetSecuritypolicy() []*SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *ListSecurityPolicysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securitypolicy request
type GetSecurityPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSecurityPolicyRequest) Reset() {
	*x = GetSecurityPolicyRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityPolicyRequest) ProtoMessage() {}

func (x *GetSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{106}
}

func (x *GetSecurityPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create SecurityRule Request
type CreateSecurityRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securityrule
	Securityrule *SecurityRule `protobuf:"bytes,2,opt,name=securityrule,proto3" json:"securityrule,omitempty"`
	// securityrule_id
	SecurityruleId string `protobuf:"bytes,3,opt,name=securityrule_id,json=securityruleId,proto3" json:"securityrule_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSecurityRuleRequest) Reset() {
	*x = CreateSecurityRuleRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityRuleRequest) ProtoMessage() {}

func (x *CreateSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{107}
}

func (x *CreateSecurityRuleRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityRuleRequest) GetSecurityrule() *SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *CreateSecurityRuleRequest) GetSecurityruleId() string {
	if x != nil {
		return x.SecurityruleId
	}
	return ""
}

// Delete securityrule request
type DeleteSecurityRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// securityrule id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSecurityRuleRequest) Reset() {
	*x = DeleteSecurityRuleRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityRuleRequest) ProtoMessage() {}

func (x *DeleteSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{108}
}

func (x *DeleteSecurityRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecurityRuleRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update securityrule request
type UpdateSecurityRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of security rule requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated securityrule info
	Securityrule *SecurityRule `protobuf:"bytes,2,opt,name=securityrule,proto3" json:"securityrule,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSecurityRuleRequest) Reset() {
	*x = UpdateSecurityRuleRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityRuleRequest) ProtoMessage() {}

func (x *UpdateSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateSecurityRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSecurityRuleRequest) GetSecurityrule() *SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *UpdateSecurityRuleRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securityrule request
type ListSecurityRulesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityRulesRequest) Reset() {
	*x = ListSecurityRulesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityRulesRequest) ProtoMessage() {}

func (x *ListSecurityRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityRulesRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityRulesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{110}
}

func (x *ListSecurityRulesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityRulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityRulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securityrule response
type ListSecurityRulesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of securityrules
	Securityrule []*SecurityRule `protobuf:"bytes,1,rep,name=securityrule,proto3" json:"securityrule,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityRulesResponse) Reset() {
	*x = ListSecurityRulesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityRulesResponse) ProtoMessage() {}

func (x *ListSecurityRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityRulesResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityRulesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{111}
}

func (x *ListSecurityRulesResponse) GetSecurityrule() []*SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *ListSecurityRulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securityrule request
type GetSecurityRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSecurityRuleRequest) Reset() {
	*x = GetSecurityRuleRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRuleRequest) ProtoMessage() {}

func (x *GetSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{112}
}

func (x *GetSecurityRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create SecurityProfile Request
type CreateSecurityProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securityprofile
	Securityprofile *SecurityProfile `protobuf:"bytes,2,opt,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// securityprofile_id
	SecurityprofileId string `protobuf:"bytes,3,opt,name=securityprofile_id,json=securityprofileId,proto3" json:"securityprofile_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSecurityProfileRequest) Reset() {
	*x = CreateSecurityProfileRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityProfileRequest) ProtoMessage() {}

func (x *CreateSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{113}
}

func (x *CreateSecurityProfileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityProfileRequest) GetSecurityprofile() *SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *CreateSecurityProfileRequest) GetSecurityprofileId() string {
	if x != nil {
		return x.SecurityprofileId
	}
	return ""
}

// Delete securityprofile request
type DeleteSecurityProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// securityprofile id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSecurityProfileRequest) Reset() {
	*x = DeleteSecurityProfileRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityProfileRequest) ProtoMessage() {}

func (x *DeleteSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecurityProfileRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Update securityprofile request
type UpdateSecurityProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of security profile requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// updated securityprofile info
	Securityprofile *SecurityProfile `protobuf:"bytes,2,opt,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSecurityProfileRequest) Reset() {
	*x = UpdateSecurityProfileRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityProfileRequest) ProtoMessage() {}

func (x *UpdateSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSecurityProfileRequest) GetSecurityprofile() *SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *UpdateSecurityProfileRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securityprofile request
type ListSecurityProfilesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityProfilesRequest) Reset() {
	*x = ListSecurityProfilesRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityProfilesRequest) ProtoMessage() {}

func (x *ListSecurityProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityProfilesRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{116}
}

func (x *ListSecurityProfilesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securityprofile response
type ListSecurityProfilesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of securityprofiles
	Securityprofile []*SecurityProfile `protobuf:"bytes,1,rep,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecurityProfilesResponse) Reset() {
	*x = ListSecurityProfilesResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecurityProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityProfilesResponse) ProtoMessage() {}

func (x *ListSecurityProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityProfilesResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{117}
}

func (x *ListSecurityProfilesResponse) GetSecurityprofile() []*SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *ListSecurityProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securityprofile request
type GetSecurityProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSecurityProfileRequest) Reset() {
	*x = GetSecurityProfileRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityProfileRequest) ProtoMessage() {}

func (x *GetSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{118}
}

func (x *GetSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Create OSPF Router Request
type CreateOspfRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF identifier
	OspfRouterId string `protobuf:"bytes,1,opt,name=ospf_router_id,json=ospfRouterId,proto3" json:"ospf_router_id,omitempty"`
	// OSPF configuration
	OspfRouter    *OspfRouter `protobuf:"bytes,2,opt,name=ospf_router,json=ospfRouter,proto3" json:"ospf_router,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOspfRouterRequest) Reset() {
	*x = CreateOspfRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOspfRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOspfRouterRequest) ProtoMessage() {}

func (x *CreateOspfRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOspfRouterRequest.ProtoReflect.Descriptor instead.
func (*CreateOspfRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{119}
}

func (x *CreateOspfRouterRequest) GetOspfRouterId() string {
	if x != nil {
		return x.OspfRouterId
	}
	return ""
}

func (x *CreateOspfRouterRequest) GetOspfRouter() *OspfRouter {
	if x != nil {
		return x.OspfRouter
	}
	return nil
}

// Update OSPF request
type UpdateOspfRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated ospf configuration
	OspfRouter *OspfRouter `protobuf:"bytes,1,opt,name=ospf_router,json=ospfRouter,proto3" json:"ospf_router,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOspfRouterRequest) Reset() {
	*x = UpdateOspfRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOspfRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOspfRouterRequest) ProtoMessage() {}

func (x *UpdateOspfRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOspfRouterRequest.ProtoReflect.Descriptor instead.
func (*UpdateOspfRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{120}
}

func (x *UpdateOspfRouterRequest) GetOspfRouter() *OspfRouter {
	if x != nil {
		return x.OspfRouter
	}
	return nil
}

func (x *UpdateOspfRouterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Delete OSPF request
type DeleteOspfRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name or OSPF identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOspfRouterRequest) Reset() {
	*x = DeleteOspfRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOspfRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOspfRouterRequest) ProtoMessage() {}

func (x *DeleteOspfRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOspfRouterRequest.ProtoReflect.Descriptor instead.
func (*DeleteOspfRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{121}
}

func (x *DeleteOspfRouterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOspfRouterRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Get OSPF request
type GetOspfRouterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the OSPF Config to retrieve
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOspfRouterRequest) Reset() {
	*x = GetOspfRouterRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOspfRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOspfRouterRequest) ProtoMessage() {}

func (x *GetOspfRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOspfRouterRequest.ProtoReflect.Descriptor instead.
func (*GetOspfRouterRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{122}
}

func (x *GetOspfRouterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List OSPF request
type ListOspfRoutersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of OSPF routers to return. The service may return fewer than this value.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListOspfRouters` call.
	// Provide this to retrieve the subsequent page.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfRoutersRequest) Reset() {
	*x = ListOspfRoutersRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfRoutersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfRoutersRequest) ProtoMessage() {}

func (x *ListOspfRoutersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfRoutersRequest.ProtoReflect.Descriptor instead.
func (*ListOspfRoutersRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{123}
}

func (x *ListOspfRoutersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOspfRoutersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOspfRoutersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List OSPF response
type ListOspfRoutersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of OSPF configs
	OspfRouters []*OspfRouter `protobuf:"bytes,1,rep,name=ospf_routers,json=ospfRouters,proto3" json:"ospf_routers,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are not subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfRoutersResponse) Reset() {
	*x = ListOspfRoutersResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfRoutersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfRoutersResponse) ProtoMessage() {}

func (x *ListOspfRoutersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfRoutersResponse.ProtoReflect.Descriptor instead.
func (*ListOspfRoutersResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{124}
}

func (x *ListOspfRoutersResponse) GetOspfRouters() []*OspfRouter {
	if x != nil {
		return x.OspfRouters
	}
	return nil
}

func (x *ListOspfRoutersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Create OspfArea Request
type CreateOspfAreaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ospf_area_id
	OspfAreaId string `protobuf:"bytes,1,opt,name=ospf_area_id,json=ospfAreaId,proto3" json:"ospf_area_id,omitempty"`
	// ospf_area
	OspfArea      *OspfArea `protobuf:"bytes,2,opt,name=ospf_area,json=ospfArea,proto3" json:"ospf_area,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOspfAreaRequest) Reset() {
	*x = CreateOspfAreaRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOspfAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOspfAreaRequest) ProtoMessage() {}

func (x *CreateOspfAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOspfAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateOspfAreaRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{125}
}

func (x *CreateOspfAreaRequest) GetOspfAreaId() string {
	if x != nil {
		return x.OspfAreaId
	}
	return ""
}

func (x *CreateOspfAreaRequest) GetOspfArea() *OspfArea {
	if x != nil {
		return x.OspfArea
	}
	return nil
}

// Update OspfArea request
type UpdateOspfAreaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated ospf_area info
	OspfArea *OspfArea `protobuf:"bytes,1,opt,name=ospf_area,json=ospfArea,proto3" json:"ospf_area,omitempty"`
	// list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOspfAreaRequest) Reset() {
	*x = UpdateOspfAreaRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOspfAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOspfAreaRequest) ProtoMessage() {}

func (x *UpdateOspfAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOspfAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateOspfAreaRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateOspfAreaRequest) GetOspfArea() *OspfArea {
	if x != nil {
		return x.OspfArea
	}
	return nil
}

func (x *UpdateOspfAreaRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Delete OspfArea request
type DeleteOspfAreaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name or area_id
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOspfAreaRequest) Reset() {
	*x = DeleteOspfAreaRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOspfAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOspfAreaRequest) ProtoMessage() {}

func (x *DeleteOspfAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOspfAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteOspfAreaRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteOspfAreaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOspfAreaRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Get OspfArea request
type GetOspfAreaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOspfAreaRequest) Reset() {
	*x = GetOspfAreaRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOspfAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOspfAreaRequest) ProtoMessage() {}

func (x *GetOspfAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOspfAreaRequest.ProtoReflect.Descriptor instead.
func (*GetOspfAreaRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{128}
}

func (x *GetOspfAreaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List OspfArea request
type ListOspfAreasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfAreasRequest) Reset() {
	*x = ListOspfAreasRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfAreasRequest) ProtoMessage() {}

func (x *ListOspfAreasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfAreasRequest.ProtoReflect.Descriptor instead.
func (*ListOspfAreasRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{129}
}

func (x *ListOspfAreasRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOspfAreasRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOspfAreasRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List OspfArea response
type ListOspfAreasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of ospf_areas
	OspfAreas []*OspfArea `protobuf:"bytes,1,rep,name=ospf_areas,json=ospfAreas,proto3" json:"ospf_areas,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfAreasResponse) Reset() {
	*x = ListOspfAreasResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfAreasResponse) ProtoMessage() {}

func (x *ListOspfAreasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfAreasResponse.ProtoReflect.Descriptor instead.
func (*ListOspfAreasResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{130}
}

func (x *ListOspfAreasResponse) GetOspfAreas() []*OspfArea {
	if x != nil {
		return x.OspfAreas
	}
	return nil
}

func (x *ListOspfAreasResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Create OspfIfNetwork Request
type CreateOspfIfNetworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF IfNetwork ID
	OspfIfNetworkId string `protobuf:"bytes,1,opt,name=ospf_if_network_id,json=ospfIfNetworkId,proto3" json:"ospf_if_network_id,omitempty"`
	// ospf_if_network
	OspfIfNetwork *OspfIfNetwork `protobuf:"bytes,2,opt,name=ospf_if_network,json=ospfIfNetwork,proto3" json:"ospf_if_network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOspfIfNetworkRequest) Reset() {
	*x = CreateOspfIfNetworkRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOspfIfNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOspfIfNetworkRequest) ProtoMessage() {}

func (x *CreateOspfIfNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOspfIfNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateOspfIfNetworkRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{131}
}

func (x *CreateOspfIfNetworkRequest) GetOspfIfNetworkId() string {
	if x != nil {
		return x.OspfIfNetworkId
	}
	return ""
}

func (x *CreateOspfIfNetworkRequest) GetOspfIfNetwork() *OspfIfNetwork {
	if x != nil {
		return x.OspfIfNetwork
	}
	return nil
}

// Update OspfIfNetwork request
type UpdateOspfIfNetworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// updated OSPF IfNetwork information
	OspfIfNetwork *OspfIfNetwork `protobuf:"bytes,1,opt,name=ospf_if_network,json=ospfIfNetwork,proto3" json:"ospf_if_network,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing  bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOspfIfNetworkRequest) Reset() {
	*x = UpdateOspfIfNetworkRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOspfIfNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOspfIfNetworkRequest) ProtoMessage() {}

func (x *UpdateOspfIfNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOspfIfNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateOspfIfNetworkRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{132}
}

func (x *UpdateOspfIfNetworkRequest) GetOspfIfNetwork() *OspfIfNetwork {
	if x != nil {
		return x.OspfIfNetwork
	}
	return nil
}

func (x *UpdateOspfIfNetworkRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateOspfIfNetworkRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Delete OspfIfNetwork request
type DeleteOspfIfNetworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF IfNetwork name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing  bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOspfIfNetworkRequest) Reset() {
	*x = DeleteOspfIfNetworkRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOspfIfNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOspfIfNetworkRequest) ProtoMessage() {}

func (x *DeleteOspfIfNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOspfIfNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteOspfIfNetworkRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteOspfIfNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOspfIfNetworkRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Get OspfIfNetwork request
type GetOspfIfNetworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOspfIfNetworkRequest) Reset() {
	*x = GetOspfIfNetworkRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOspfIfNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOspfIfNetworkRequest) ProtoMessage() {}

func (x *GetOspfIfNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOspfIfNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetOspfIfNetworkRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{134}
}

func (x *GetOspfIfNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List OspfIfNetwork request
type ListOspfIfNetworksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent or IfNetwork identifier
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfIfNetworksRequest) Reset() {
	*x = ListOspfIfNetworksRequest{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfIfNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfIfNetworksRequest) ProtoMessage() {}

func (x *ListOspfIfNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfIfNetworksRequest.ProtoReflect.Descriptor instead.
func (*ListOspfIfNetworksRequest) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{135}
}

func (x *ListOspfIfNetworksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOspfIfNetworksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOspfIfNetworksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List OspfIfNetwork response
type ListOspfIfNetworksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of OspfIfNetwork
	OspfIfNetworks []*OspfIfNetwork `protobuf:"bytes,1,rep,name=ospf_if_networks,json=ospfIfNetworks,proto3" json:"ospf_if_networks,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOspfIfNetworksResponse) Reset() {
	*x = ListOspfIfNetworksResponse{}
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOspfIfNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOspfIfNetworksResponse) ProtoMessage() {}

func (x *ListOspfIfNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_cloudrpc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOspfIfNetworksResponse.ProtoReflect.Descriptor instead.
func (*ListOspfIfNetworksResponse) Descriptor() ([]byte, []int) {
	return file_network_cloud_cloudrpc_proto_rawDescGZIP(), []int{136}
}

func (x *ListOspfIfNetworksResponse) GetOspfIfNetworks() []*OspfIfNetwork {
	if x != nil {
		return x.OspfIfNetworks
	}
	return nil
}

func (x *ListOspfIfNetworksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_network_cloud_cloudrpc_proto protoreflect.FileDescriptor

var file_network_cloud_cloudrpc_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6e, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21,
	0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x75, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a,
	0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69,
	0x63, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x76, 0x6e, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6e, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x22, 0x73, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69,
	0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x04, 0x76, 0x6e, 0x69,
	0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8d,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x99, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25,
	0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xca, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20,
	0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a,
	0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a,
	0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x9f, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24,
	0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x97, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x62, 0x67, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x03, 0x62, 0x67,
	0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x08, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x62, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x07, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12,
	0x28, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x62, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x66, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8b, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x67,
	0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x09, 0x62, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22,
	0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x46, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0xed, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x9d, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a,
	0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x56, 0x70, 0x63, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x03,
	0x76, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x22,
	0x71, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07,
	0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x70, 0x63,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xd4,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50,
	0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x07,
	0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0xf7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29,
	0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5f, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x27, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a,
	0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x61, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a,
	0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73,
	0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6f,
	0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6f, 0x73, 0x70,
	0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6b, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x0c, 0x0a, 0x0a, 0x4f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x73, 0x70,
	0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe0, 0x41,
	0x01, 0xfa, 0x41, 0x0c, 0x0a, 0x0a, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8a, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x09, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x22, 0xa5, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41,
	0x72, 0x65, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x67, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73,
	0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x0a, 0x0a, 0x08, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x0a, 0x0a, 0x08, 0x4f, 0x73, 0x70, 0x66, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70,
	0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x69, 0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xe4, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x71, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x0f,
	0x0a, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28,
	0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x49,
	0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x0f, 0x0a, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66,
	0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x6f, 0x73, 0x70, 0x66, 0x49,
	0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x32, 0xf3, 0x91, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x22, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2e, 0xda, 0x41, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3a, 0xda, 0x41, 0x13, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x32, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x7d, 0x2f, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xda, 0x41,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x23, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d, 0x2f,
	0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x34, 0xda, 0x41, 0x11, 0x70, 0x6f,
	0x72, 0x74, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x7d, 0x2f, 0x2a, 0x12,
	0x86, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x14, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x21, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x8d, 0x01,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x6e, 0x69, 0x63, 0x22, 0x26, 0xda, 0x41, 0x0c, 0x76, 0x6e, 0x69, 0x63, 0x2c, 0x76,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x04, 0x76, 0x6e,
	0x69, 0x63, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x7a, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69,
	0x63, 0x22, 0x34, 0xda, 0x41, 0x11, 0x76, 0x6e, 0x69, 0x63, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x04, 0x76,
	0x6e, 0x69, 0x63, 0x32, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76,
	0x6e, 0x69, 0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0xda, 0x41, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6e, 0x69, 0x63, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e,
	0x69, 0x63, 0x22, 0x21, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x6e, 0x69,
	0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x3a, 0xda, 0x41,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x43, 0xda, 0x41, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x32, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x2f, 0x2a,
	0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x96, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x33,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x26,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb7, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x3e, 0xda, 0x41, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2c,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x3a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x8c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12,
	0xbf, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x46, 0xda, 0x41, 0x17, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x7d, 0x2f,
	0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x27, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12,
	0x94, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x2a, 0xda, 0x41, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x3a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x22, 0x37, 0xda, 0x41, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x32, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x22, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12,
	0xcc, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0x4a, 0xda, 0x41, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x0d, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xd1, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x4f, 0xda, 0x41, 0x1a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x0d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x32, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x22, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x2a,
	0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x3d, 0xda, 0x41, 0x18, 0x62, 0x67, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2c, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x62, 0x67, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x7d, 0x2f,
	0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x4f, 0xda, 0x41, 0x16, 0x62, 0x67, 0x70,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x32, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xda, 0x41, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x26, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa5,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x22,
	0x35, 0xda, 0x41, 0x14, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x2c, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x08,
	0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb7, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x22, 0x47, 0xda,
	0x41, 0x14, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x08, 0x62, 0x67,
	0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x32, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12,
	0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x66, 0x22, 0x40, 0xda, 0x41, 0x1a, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x2c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x66, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x66, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x7d, 0x2f, 0x2a,
	0x12, 0xc8, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x66, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x22, 0x52, 0xda, 0x41, 0x17, 0x62, 0x67, 0x70, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x32, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x12, 0x35,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x41, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x22, 0x26, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x7d, 0x2f, 0x2a,
	0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0x32, 0xda, 0x41, 0x12, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x3d, 0xda, 0x41,
	0x14, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x32, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x24, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x7d, 0x2f,
	0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x22, 0x32, 0xda, 0x41, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2c, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xad, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x34,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x3d, 0xda,
	0x41, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x07, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x32, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x32, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12,
	0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x31,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x2f, 0x2a,
	0x12, 0xc5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x46, 0xda, 0x41, 0x1c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x29, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xcb, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4c, 0xda,
	0x41, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x3a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x29,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x2e, 0xda, 0x41, 0x10, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x2c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x3a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x3a, 0xda, 0x41, 0x13, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xda,
	0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x23, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x7d,
	0x2f, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x2e, 0xda, 0x41, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2c, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x06, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x7d, 0x2f, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x3a, 0xda, 0x41, 0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2c, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x8e, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x23, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63,
	0x22, 0x22, 0xda, 0x41, 0x0a, 0x76, 0x70, 0x63, 0x2c, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x03, 0x76, 0x70, 0x63, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x70, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70,
	0x63, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x70, 0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x95, 0x01,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x70, 0x63, 0x22, 0x31, 0xda, 0x41, 0x10, 0x76, 0x70, 0x63, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x03, 0x76,
	0x70, 0x63, 0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x70,
	0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70,
	0x63, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x63, 0x73, 0x12, 0x7e, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x56, 0x70, 0x63, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x76, 0x70, 0x63, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x22, 0x32, 0xda, 0x41, 0x12,
	0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x2c, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65,
	0x72, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x22, 0x3d, 0xda, 0x41, 0x14, 0x76, 0x70, 0x63, 0x70, 0x65,
	0x65, 0x72, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x32, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50,
	0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50,
	0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50,
	0x43, 0x50, 0x65, 0x65, 0x72, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x4e, 0xda, 0x41, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2b, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xd7, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x52, 0xda, 0x41, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x3a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x2b, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x46, 0xda, 0x41, 0x1c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x2c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x7d, 0x2f,
	0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x4c, 0xda, 0x41, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x75, 0x6c, 0x65, 0x32, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12,
	0xa6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xda, 0x41, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x29, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xda, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x52, 0xda, 0x41, 0x22, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xdd, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x55, 0xda, 0x41, 0x1c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0xda, 0x41,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xae, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x2c, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x2a, 0x12, 0xc0,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73,
	0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x47, 0xda, 0x41, 0x1a, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x0b, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xd2, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73,
	0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x59, 0xda, 0x41, 0x17,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x0b, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x32, 0x2a, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70,
	0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22,
	0x2d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa1,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70,
	0x66, 0x41, 0x72, 0x65, 0x61, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70,
	0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73,
	0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x22, 0x3f, 0xda, 0x41, 0x16, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x2c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x09, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x22, 0x51, 0xda, 0x41, 0x15,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x09, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x7b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8c,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x2b, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a,
	0x1c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x98, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x22, 0x2b, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x12, 0xd8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x56, 0xda, 0x41, 0x22, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2c, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0xea, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0x68, 0xda, 0x41, 0x1b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x66, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69,
	0x66, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0x31, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66, 0x49,
	0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9a, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x73, 0x70, 0x66,
	0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x2a, 0x7d, 0x12, 0xac, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x30, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x69, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x50, 0x43, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70,
	0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_cloud_cloudrpc_proto_rawDescOnce sync.Once
	file_network_cloud_cloudrpc_proto_rawDescData = file_network_cloud_cloudrpc_proto_rawDesc
)

func file_network_cloud_cloudrpc_proto_rawDescGZIP() []byte {
	file_network_cloud_cloudrpc_proto_rawDescOnce.Do(func() {
		file_network_cloud_cloudrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_cloud_cloudrpc_proto_rawDescData)
	})
	return file_network_cloud_cloudrpc_proto_rawDescData
}

var file_network_cloud_cloudrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 137)
var file_network_cloud_cloudrpc_proto_goTypes = []any{
	(*GetDeviceCapabilitiesRequest)(nil), // 0: opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest
	(*CreateDeviceRequest)(nil),          // 1: opi_api.network.cloud.v1alpha1.CreateDeviceRequest
	(*DeleteDeviceRequest)(nil),          // 2: opi_api.network.cloud.v1alpha1.DeleteDeviceRequest
	(*UpdateDeviceRequest)(nil),          // 3: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest
	(*ListDevicesRequest)(nil),           // 4: opi_api.network.cloud.v1alpha1.ListDevicesRequest
	(*ListDevicesResponse)(nil),          // 5: opi_api.network.cloud.v1alpha1.ListDevicesResponse
	(*GetDeviceRequest)(nil),             // 6: opi_api.network.cloud.v1alpha1.GetDeviceRequest
	(*UpdatePortRequest)(nil),            // 7: opi_api.network.cloud.v1alpha1.UpdatePortRequest
	(*ListPortsRequest)(nil),             // 8: opi_api.network.cloud.v1alpha1.ListPortsRequest
	(*ListPortsResponse)(nil),            // 9: opi_api.network.cloud.v1alpha1.ListPortsResponse
	(*GetPortRequest)(nil),               // 10: opi_api.network.cloud.v1alpha1.GetPortRequest
	(*CreateVnicRequest)(nil),            // 11: opi_api.network.cloud.v1alpha1.CreateVnicRequest
	(*DeleteVnicRequest)(nil),            // 12: opi_api.network.cloud.v1alpha1.DeleteVnicRequest
	(*UpdateVnicRequest)(nil),            // 13: opi_api.network.cloud.v1alpha1.UpdateVnicRequest
	(*ListVnicsRequest)(nil),             // 14: opi_api.network.cloud.v1alpha1.ListVnicsRequest
	(*ListVnicsResponse)(nil),            // 15: opi_api.network.cloud.v1alpha1.ListVnicsResponse
	(*GetVnicRequest)(nil),               // 16: opi_api.network.cloud.v1alpha1.GetVnicRequest
	(*CreateInterfaceRequest)(nil),       // 17: opi_api.network.cloud.v1alpha1.CreateInterfaceRequest
	(*DeleteInterfaceRequest)(nil),       // 18: opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest
	(*UpdateInterfaceRequest)(nil),       // 19: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest
	(*ListInterfacesRequest)(nil),        // 20: opi_api.network.cloud.v1alpha1.ListInterfacesRequest
	(*ListInterfacesResponse)(nil),       // 21: opi_api.network.cloud.v1alpha1.ListInterfacesResponse
	(*GetInterfaceRequest)(nil),          // 22: opi_api.network.cloud.v1alpha1.GetInterfaceRequest
	(*CreateRouteTableRequest)(nil),      // 23: opi_api.network.cloud.v1alpha1.CreateRouteTableRequest
	(*DeleteRouteTableRequest)(nil),      // 24: opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest
	(*UpdateRouteTableRequest)(nil),      // 25: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest
	(*ListRouteTablesRequest)(nil),       // 26: opi_api.network.cloud.v1alpha1.ListRouteTablesRequest
	(*ListRouteTablesResponse)(nil),      // 27: opi_api.network.cloud.v1alpha1.ListRouteTablesResponse
	(*GetRouteTableRequest)(nil),         // 28: opi_api.network.cloud.v1alpha1.GetRouteTableRequest
	(*CreateRouteRequest)(nil),           // 29: opi_api.network.cloud.v1alpha1.CreateRouteRequest
	(*DeleteRouteRequest)(nil),           // 30: opi_api.network.cloud.v1alpha1.DeleteRouteRequest
	(*UpdateRouteRequest)(nil),           // 31: opi_api.network.cloud.v1alpha1.UpdateRouteRequest
	(*ListRoutesRequest)(nil),            // 32: opi_api.network.cloud.v1alpha1.ListRoutesRequest
	(*ListRoutesResponse)(nil),           // 33: opi_api.network.cloud.v1alpha1.ListRoutesResponse
	(*GetRouteRequest)(nil),              // 34: opi_api.network.cloud.v1alpha1.GetRouteRequest
	(*CreateUnderlayRouteRequest)(nil),   // 35: opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest
	(*DeleteUnderlayRouteRequest)(nil),   // 36: opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest
	(*UpdateUnderlayRouteRequest)(nil),   // 37: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest
	(*ListUnderlayRoutesRequest)(nil),    // 38: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest
	(*ListUnderlayRoutesResponse)(nil),   // 39: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse
	(*GetUnderlayRouteRequest)(nil),      // 40: opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest
	(*CreateBgpRouterRequest)(nil),       // 41: opi_api.network.cloud.v1alpha1.CreateBgpRouterRequest
	(*DeleteBgpRouterRequest)(nil),       // 42: opi_api.network.cloud.v1alpha1.DeleteBgpRouterRequest
	(*UpdateBgpRouterRequest)(nil),       // 43: opi_api.network.cloud.v1alpha1.UpdateBgpRouterRequest
	(*ListBgpRoutersRequest)(nil),        // 44: opi_api.network.cloud.v1alpha1.ListBgpRoutersRequest
	(*ListBgpRoutersResponse)(nil),       // 45: opi_api.network.cloud.v1alpha1.ListBgpRoutersResponse
	(*GetBgpRouterRequest)(nil),          // 46: opi_api.network.cloud.v1alpha1.GetBgpRouterRequest
	(*CreateBgpPeerRequest)(nil),         // 47: opi_api.network.cloud.v1alpha1.CreateBgpPeerRequest
	(*DeleteBgpPeerRequest)(nil),         // 48: opi_api.network.cloud.v1alpha1.DeleteBgpPeerRequest
	(*UpdateBgpPeerRequest)(nil),         // 49: opi_api.network.cloud.v1alpha1.UpdateBgpPeerRequest
	(*ListBgpPeersRequest)(nil),          // 50: opi_api.network.cloud.v1alpha1.ListBgpPeersRequest
	(*ListBgpPeersResponse)(nil),         // 51: opi_api.network.cloud.v1alpha1.ListBgpPeersResponse
	(*GetBgpPeerRequest)(nil),            // 52: opi_api.network.cloud.v1alpha1.GetBgpPeerRequest
	(*CreateBgpPeerAfRequest)(nil),       // 53: opi_api.network.cloud.v1alpha1.CreateBgpPeerAfRequest
	(*DeleteBgpPeerAfRequest)(nil),       // 54: opi_api.network.cloud.v1alpha1.DeleteBgpPeerAfRequest
	(*UpdateBgpPeerAfRequest)(nil),       // 55: opi_api.network.cloud.v1alpha1.UpdateBgpPeerAfRequest
	(*ListBgpPeerAfsRequest)(nil),        // 56: opi_api.network.cloud.v1alpha1.ListBgpPeerAfsRequest
	(*ListBgpPeerAfsResponse)(nil),       // 57: opi_api.network.cloud.v1alpha1.ListBgpPeerAfsResponse
	(*GetBgpPeerAfRequest)(nil),          // 58: opi_api.network.cloud.v1alpha1.GetBgpPeerAfRequest
	(*CreateMappingRequest)(nil),         // 59: opi_api.network.cloud.v1alpha1.CreateMappingRequest
	(*DeleteMappingRequest)(nil),         // 60: opi_api.network.cloud.v1alpha1.DeleteMappingRequest
	(*UpdateMappingRequest)(nil),         // 61: opi_api.network.cloud.v1alpha1.UpdateMappingRequest
	(*ListMappingsRequest)(nil),          // 62: opi_api.network.cloud.v1alpha1.ListMappingsRequest
	(*ListMappingsResponse)(nil),         // 63: opi_api.network.cloud.v1alpha1.ListMappingsResponse
	(*GetMappingRequest)(nil),            // 64: opi_api.network.cloud.v1alpha1.GetMappingRequest
	(*CreateNextHopRequest)(nil),         // 65: opi_api.network.cloud.v1alpha1.CreateNextHopRequest
	(*DeleteNextHopRequest)(nil),         // 66: opi_api.network.cloud.v1alpha1.DeleteNextHopRequest
	(*UpdateNextHopRequest)(nil),         // 67: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest
	(*ListNextHopRequest)(nil),           // 68: opi_api.network.cloud.v1alpha1.ListNextHopRequest
	(*ListNextHopsResponse)(nil),         // 69: opi_api.network.cloud.v1alpha1.ListNextHopsResponse
	(*GetNextHopRequest)(nil),            // 70: opi_api.network.cloud.v1alpha1.GetNextHopRequest
	(*CreateNextHopGroupRequest)(nil),    // 71: opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest
	(*DeleteNextHopGroupRequest)(nil),    // 72: opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest
	(*UpdateNextHopGroupRequest)(nil),    // 73: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest
	(*ListNextHopGroupsRequest)(nil),     // 74: opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest
	(*ListNextHopGroupsResponse)(nil),    // 75: opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse
	(*GetNextHopGroupRequest)(nil),       // 76: opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest
	(*CreateSubnetRequest)(nil),          // 77: opi_api.network.cloud.v1alpha1.CreateSubnetRequest
	(*DeleteSubnetRequest)(nil),          // 78: opi_api.network.cloud.v1alpha1.DeleteSubnetRequest
	(*UpdateSubnetRequest)(nil),          // 79: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest
	(*ListSubnetsRequest)(nil),           // 80: opi_api.network.cloud.v1alpha1.ListSubnetsRequest
	(*ListSubnetsResponse)(nil),          // 81: opi_api.network.cloud.v1alpha1.ListSubnetsResponse
	(*GetSubnetRequest)(nil),             // 82: opi_api.network.cloud.v1alpha1.GetSubnetRequest
	(*CreateTunnelRequest)(nil),          // 83: opi_api.network.cloud.v1alpha1.CreateTunnelRequest
	(*DeleteTunnelRequest)(nil),          // 84: opi_api.network.cloud.v1alpha1.DeleteTunnelRequest
	(*UpdateTunnelRequest)(nil),          // 85: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest
	(*ListTunnelsRequest)(nil),           // 86: opi_api.network.cloud.v1alpha1.ListTunnelsRequest
	(*ListTunnelsResponse)(nil),          // 87: opi_api.network.cloud.v1alpha1.ListTunnelsResponse
	(*GetTunnelRequest)(nil),             // 88: opi_api.network.cloud.v1alpha1.GetTunnelRequest
	(*CreateVpcRequest)(nil),             // 89: opi_api.network.cloud.v1alpha1.CreateVpcRequest
	(*DeleteVpcRequest)(nil),             // 90: opi_api.network.cloud.v1alpha1.DeleteVpcRequest
	(*UpdateVpcRequest)(nil),             // 91: opi_api.network.cloud.v1alpha1.UpdateVpcRequest
	(*ListVpcsRequest)(nil),              // 92: opi_api.network.cloud.v1alpha1.ListVpcsRequest
	(*ListVpcsResponse)(nil),             // 93: opi_api.network.cloud.v1alpha1.ListVpcsResponse
	(*GetVpcRequest)(nil),                // 94: opi_api.network.cloud.v1alpha1.GetVpcRequest
	(*CreateVPCPeerRequest)(nil),         // 95: opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest
	(*DeleteVPCPeerRequest)(nil),         // 96: opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest
	(*UpdateVPCPeerRequest)(nil),         // 97: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest
	(*ListVPCPeersRequest)(nil),          // 98: opi_api.network.cloud.v1alpha1.ListVPCPeersRequest
	(*ListVPCPeersResponse)(nil),         // 99: opi_api.network.cloud.v1alpha1.ListVPCPeersResponse
	(*GetVPCPeerRequest)(nil),            // 100: opi_api.network.cloud.v1alpha1.GetVPCPeerRequest
	(*CreateSecurityPolicyRequest)(nil),  // 101: opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest
	(*DeleteSecurityPolicyRequest)(nil),  // 102: opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest
	(*UpdateSecurityPolicyRequest)(nil),  // 103: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest
	(*ListSecurityPolicysRequest)(nil),   // 104: opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest
	(*ListSecurityPolicysResponse)(nil),  // 105: opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse
	(*GetSecurityPolicyRequest)(nil),     // 106: opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest
	(*CreateSecurityRuleRequest)(nil),    // 107: opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest
	(*DeleteSecurityRuleRequest)(nil),    // 108: opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest
	(*UpdateSecurityRuleRequest)(nil),    // 109: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest
	(*ListSecurityRulesRequest)(nil),     // 110: opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest
	(*ListSecurityRulesResponse)(nil),    // 111: opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse
	(*GetSecurityRuleRequest)(nil),       // 112: opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest
	(*CreateSecurityProfileRequest)(nil), // 113: opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest
	(*DeleteSecurityProfileRequest)(nil), // 114: opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest
	(*UpdateSecurityProfileRequest)(nil), // 115: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest
	(*ListSecurityProfilesRequest)(nil),  // 116: opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest
	(*ListSecurityProfilesResponse)(nil), // 117: opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse
	(*GetSecurityProfileRequest)(nil),    // 118: opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest
	(*CreateOspfRouterRequest)(nil),      // 119: opi_api.network.cloud.v1alpha1.CreateOspfRouterRequest
	(*UpdateOspfRouterRequest)(nil),      // 120: opi_api.network.cloud.v1alpha1.UpdateOspfRouterRequest
	(*DeleteOspfRouterRequest)(nil),      // 121: opi_api.network.cloud.v1alpha1.DeleteOspfRouterRequest
	(*GetOspfRouterRequest)(nil),         // 122: opi_api.network.cloud.v1alpha1.GetOspfRouterRequest
	(*ListOspfRoutersRequest)(nil),       // 123: opi_api.network.cloud.v1alpha1.ListOspfRoutersRequest
	(*ListOspfRoutersResponse)(nil),      // 124: opi_api.network.cloud.v1alpha1.ListOspfRoutersResponse
	(*CreateOspfAreaRequest)(nil),        // 125: opi_api.network.cloud.v1alpha1.CreateOspfAreaRequest
	(*UpdateOspfAreaRequest)(nil),        // 126: opi_api.network.cloud.v1alpha1.UpdateOspfAreaRequest
	(*DeleteOspfAreaRequest)(nil),        // 127: opi_api.network.cloud.v1alpha1.DeleteOspfAreaRequest
	(*GetOspfAreaRequest)(nil),           // 128: opi_api.network.cloud.v1alpha1.GetOspfAreaRequest
	(*ListOspfAreasRequest)(nil),         // 129: opi_api.network.cloud.v1alpha1.ListOspfAreasRequest
	(*ListOspfAreasResponse)(nil),        // 130: opi_api.network.cloud.v1alpha1.ListOspfAreasResponse
	(*CreateOspfIfNetworkRequest)(nil),   // 131: opi_api.network.cloud.v1alpha1.CreateOspfIfNetworkRequest
	(*UpdateOspfIfNetworkRequest)(nil),   // 132: opi_api.network.cloud.v1alpha1.UpdateOspfIfNetworkRequest
	(*DeleteOspfIfNetworkRequest)(nil),   // 133: opi_api.network.cloud.v1alpha1.DeleteOspfIfNetworkRequest
	(*GetOspfIfNetworkRequest)(nil),      // 134: opi_api.network.cloud.v1alpha1.GetOspfIfNetworkRequest
	(*ListOspfIfNetworksRequest)(nil),    // 135: opi_api.network.cloud.v1alpha1.ListOspfIfNetworksRequest
	(*ListOspfIfNetworksResponse)(nil),   // 136: opi_api.network.cloud.v1alpha1.ListOspfIfNetworksResponse
	(*Device)(nil),                       // 137: opi_api.network.cloud.v1alpha1.Device
	(*fieldmaskpb.FieldMask)(nil),        // 138: google.protobuf.FieldMask
	(*Port)(nil),                         // 139: opi_api.network.cloud.v1alpha1.Port
	(*Vnic)(nil),                         // 140: opi_api.network.cloud.v1alpha1.Vnic
	(*Interface)(nil),                    // 141: opi_api.network.cloud.v1alpha1.Interface
	(*RouteTable)(nil),                   // 142: opi_api.network.cloud.v1alpha1.RouteTable
	(*Route)(nil),                        // 143: opi_api.network.cloud.v1alpha1.Route
	(*UnderlayRoute)(nil),                // 144: opi_api.network.cloud.v1alpha1.UnderlayRoute
	(*BgpRouter)(nil),                    // 145: opi_api.network.cloud.v1alpha1.BgpRouter
	(*BgpPeer)(nil),                      // 146: opi_api.network.cloud.v1alpha1.BgpPeer
	(*BgpPeerAf)(nil),                    // 147: opi_api.network.cloud.v1alpha1.BgpPeerAf
	(*Mapping)(nil),                      // 148: opi_api.network.cloud.v1alpha1.Mapping
	(*NextHop)(nil),                      // 149: opi_api.network.cloud.v1alpha1.NextHop
	(*NextHopGroup)(nil),                 // 150: opi_api.network.cloud.v1alpha1.NextHopGroup
	(*Subnet)(nil),                       // 151: opi_api.network.cloud.v1alpha1.Subnet
	(*Tunnel)(nil),                       // 152: opi_api.network.cloud.v1alpha1.Tunnel
	(*Vpc)(nil),                          // 153: opi_api.network.cloud.v1alpha1.Vpc
	(*VPCPeer)(nil),                      // 154: opi_api.network.cloud.v1alpha1.VPCPeer
	(*SecurityPolicy)(nil),               // 155: opi_api.network.cloud.v1alpha1.SecurityPolicy
	(*SecurityRule)(nil),                 // 156: opi_api.network.cloud.v1alpha1.SecurityRule
	(*SecurityProfile)(nil),              // 157: opi_api.network.cloud.v1alpha1.SecurityProfile
	(*OspfRouter)(nil),                   // 158: opi_api.network.cloud.v1alpha1.OspfRouter
	(*OspfArea)(nil),                     // 159: opi_api.network.cloud.v1alpha1.OspfArea
	(*OspfIfNetwork)(nil),                // 160: opi_api.network.cloud.v1alpha1.OspfIfNetwork
	(*DeviceCapabilities)(nil),           // 161: opi_api.network.cloud.v1alpha1.DeviceCapabilities
	(*emptypb.Empty)(nil),                // 162: google.protobuf.Empty
}
var file_network_cloud_cloudrpc_proto_depIdxs = []int32{
	137, // 0: opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	137, // 1: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	138, // 2: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask:type_name -> google.protobuf.FieldMask
	137, // 3: opi_api.network.cloud.v1alpha1.ListDevicesResponse.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	139, // 4: opi_api.network.cloud.v1alpha1.UpdatePortRequest.port:type_name -> opi_api.network.cloud.v1alpha1.Port
	138, // 5: opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask:type_name -> google.protobuf.FieldMask
	139, // 6: opi_api.network.cloud.v1alpha1.ListPortsResponse.port:type_name -> opi_api.network.cloud.v1alpha1.Port
	140, // 7: opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	140, // 8: opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	138, // 9: opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask:type_name -> google.protobuf.FieldMask
	140, // 10: opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	141, // 11: opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	141, // 12: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	138, // 13: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask:type_name -> google.protobuf.FieldMask
	141, // 14: opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	142, // 15: opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	142, // 16: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	138, // 17: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask:type_name -> google.protobuf.FieldMask
	142, // 18: opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	143, // 19: opi_api.network.cloud.v1alpha1.CreateRouteRequest.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	143, // 20: opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	138, // 21: opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask:type_name -> google.protobuf.FieldMask
	143, // 22: opi_api.network.cloud.v1alpha1.ListRoutesResponse.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	144, // 23: opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	144, // 24: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	138, // 25: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask:type_name -> google.protobuf.FieldMask
	144, // 26: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	145, // 27: opi_api.network.cloud.v1alpha1.CreateBgpRouterRequest.bgp_router:type_name -> opi_api.network.cloud.v1alpha1.BgpRouter
	145, // 28: opi_api.network.cloud.v1alpha1.UpdateBgpRouterRequest.bgp_router:type_name -> opi_api.network.cloud.v1alpha1.BgpRouter
	138, // 29: opi_api.network.cloud.v1alpha1.UpdateBgpRouterRequest.update_mask:type_name -> google.protobuf.FieldMask
	145, // 30: opi_api.network.cloud.v1alpha1.ListBgpRoutersResponse.bgp:type_name -> opi_api.network.cloud.v1alpha1.BgpRouter
	146, // 31: opi_api.network.cloud.v1alpha1.CreateBgpPeerRequest.bgp_peer:type_name -> opi_api.network.cloud.v1alpha1.BgpPeer
	146, // 32: opi_api.network.cloud.v1alpha1.UpdateBgpPeerRequest.bgp_peer:type_name -> opi_api.network.cloud.v1alpha1.BgpPeer
	138, // 33: opi_api.network.cloud.v1alpha1.UpdateBgpPeerRequest.update_mask:type_name -> google.protobuf.FieldMask
	146, // 34: opi_api.network.cloud.v1alpha1.ListBgpPeersResponse.bgp_peer:type_name -> opi_api.network.cloud.v1alpha1.BgpPeer
	147, // 35: opi_api.network.cloud.v1alpha1.CreateBgpPeerAfRequest.bgp_peer_af:type_name -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	147, // 36: opi_api.network.cloud.v1alpha1.UpdateBgpPeerAfRequest.bgp_peer_af:type_name -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	138, // 37: opi_api.network.cloud.v1alpha1.UpdateBgpPeerAfRequest.update_mask:type_name -> google.protobuf.FieldMask
	147, // 38: opi_api.network.cloud.v1alpha1.ListBgpPeerAfsResponse.bgp_peer_af:type_name -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	148, // 39: opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	148, // 40: opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	138, // 41: opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask:type_name -> google.protobuf.FieldMask
	148, // 42: opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	149, // 43: opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	149, // 44: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	138, // 45: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask:type_name -> google.protobuf.FieldMask
	149, // 46: opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	150, // 47: opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	150, // 48: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	138, // 49: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	150, // 50: opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	151, // 51: opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	151, // 52: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	138, // 53: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask:type_name -> google.protobuf.FieldMask
	151, // 54: opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	152, // 55: opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	152, // 56: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	138, // 57: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask:type_name -> google.protobuf.FieldMask
	152, // 58: opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	153, // 59: opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	153, // 60: opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	138, // 61: opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask:type_name -> google.protobuf.FieldMask
	153, // 62: opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	154, // 63: opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	154, // 64: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	138, // 65: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask:type_name -> google.protobuf.FieldMask
	154, // 66: opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	155, // 67: opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	155, // 68: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	138, // 69: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	155, // 70: opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	156, // 71: opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	156, // 72: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	138, // 73: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask:type_name -> google.protobuf.FieldMask
	156, // 74: opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	157, // 75: opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	157, // 76: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	138, // 77: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask:type_name -> google.protobuf.FieldMask
	157, // 78: opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	158, // 79: opi_api.network.cloud.v1alpha1.CreateOspfRouterRequest.ospf_router:type_name -> opi_api.network.cloud.v1alpha1.OspfRouter
	158, // 80: opi_api.network.cloud.v1alpha1.UpdateOspfRouterRequest.ospf_router:type_name -> opi_api.network.cloud.v1alpha1.OspfRouter
	138, // 81: opi_api.network.cloud.v1alpha1.UpdateOspfRouterRequest.update_mask:type_name -> google.protobuf.FieldMask
	158, // 82: opi_api.network.cloud.v1alpha1.ListOspfRoutersResponse.ospf_routers:type_name -> opi_api.network.cloud.v1alpha1.OspfRouter
	159, // 83: opi_api.network.cloud.v1alpha1.CreateOspfAreaRequest.ospf_area:type_name -> opi_api.network.cloud.v1alpha1.OspfArea
	159, // 84: opi_api.network.cloud.v1alpha1.UpdateOspfAreaRequest.ospf_area:type_name -> opi_api.network.cloud.v1alpha1.OspfArea
	138, // 85: opi_api.network.cloud.v1alpha1.UpdateOspfAreaRequest.update_mask:type_name -> google.protobuf.FieldMask
	159, // 86: opi_api.network.cloud.v1alpha1.ListOspfAreasResponse.ospf_areas:type_name -> opi_api.network.cloud.v1alpha1.OspfArea
	160, // 87: opi_api.network.cloud.v1alpha1.CreateOspfIfNetworkRequest.ospf_if_network:type_name -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	160, // 88: opi_api.network.cloud.v1alpha1.UpdateOspfIfNetworkRequest.ospf_if_network:type_name -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	138, // 89: opi_api.network.cloud.v1alpha1.UpdateOspfIfNetworkRequest.update_mask:type_name -> google.protobuf.FieldMask
	160, // 90: opi_api.network.cloud.v1alpha1.ListOspfIfNetworksResponse.ospf_if_networks:type_name -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	0,   // 91: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDeviceCapabilities:input_type -> opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest
	1,   // 92: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateDevice:input_type -> opi_api.network.cloud.v1alpha1.CreateDeviceRequest
	2,   // 93: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteDevice:input_type -> opi_api.network.cloud.v1alpha1.DeleteDeviceRequest
	3,   // 94: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateDevice:input_type -> opi_api.network.cloud.v1alpha1.UpdateDeviceRequest
	4,   // 95: opi_api.network.cloud.v1alpha1.CloudInfraService.ListDevices:input_type -> opi_api.network.cloud.v1alpha1.ListDevicesRequest
	6,   // 96: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDevice:input_type -> opi_api.network.cloud.v1alpha1.GetDeviceRequest
	7,   // 97: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdatePort:input_type -> opi_api.network.cloud.v1alpha1.UpdatePortRequest
	8,   // 98: opi_api.network.cloud.v1alpha1.CloudInfraService.ListPorts:input_type -> opi_api.network.cloud.v1alpha1.ListPortsRequest
	10,  // 99: opi_api.network.cloud.v1alpha1.CloudInfraService.GetPort:input_type -> opi_api.network.cloud.v1alpha1.GetPortRequest
	11,  // 100: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVnic:input_type -> opi_api.network.cloud.v1alpha1.CreateVnicRequest
	12,  // 101: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVnic:input_type -> opi_api.network.cloud.v1alpha1.DeleteVnicRequest
	13,  // 102: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVnic:input_type -> opi_api.network.cloud.v1alpha1.UpdateVnicRequest
	14,  // 103: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVnics:input_type -> opi_api.network.cloud.v1alpha1.ListVnicsRequest
	16,  // 104: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVnic:input_type -> opi_api.network.cloud.v1alpha1.GetVnicRequest
	17,  // 105: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateInterface:input_type -> opi_api.network.cloud.v1alpha1.CreateInterfaceRequest
	18,  // 106: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteInterface:input_type -> opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest
	19,  // 107: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateInterface:input_type -> opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest
	20,  // 108: opi_api.network.cloud.v1alpha1.CloudInfraService.ListInterfaces:input_type -> opi_api.network.cloud.v1alpha1.ListInterfacesRequest
	22,  // 109: opi_api.network.cloud.v1alpha1.CloudInfraService.GetInterface:input_type -> opi_api.network.cloud.v1alpha1.GetInterfaceRequest
	23,  // 110: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRouteTable:input_type -> opi_api.network.cloud.v1alpha1.CreateRouteTableRequest
	24,  // 111: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRouteTable:input_type -> opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest
	25,  // 112: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRouteTable:input_type -> opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest
	26,  // 113: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRouteTables:input_type -> opi_api.network.cloud.v1alpha1.ListRouteTablesRequest
	28,  // 114: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRouteTable:input_type -> opi_api.network.cloud.v1alpha1.GetRouteTableRequest
	29,  // 115: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRoute:input_type -> opi_api.network.cloud.v1alpha1.CreateRouteRequest
	30,  // 116: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRoute:input_type -> opi_api.network.cloud.v1alpha1.DeleteRouteRequest
	31,  // 117: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRoute:input_type -> opi_api.network.cloud.v1alpha1.UpdateRouteRequest
	32,  // 118: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRoutes:input_type -> opi_api.network.cloud.v1alpha1.ListRoutesRequest
	34,  // 119: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRoute:input_type -> opi_api.network.cloud.v1alpha1.GetRouteRequest
	35,  // 120: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest
	36,  // 121: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest
	37,  // 122: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest
	38,  // 123: opi_api.network.cloud.v1alpha1.CloudInfraService.ListUnderlayRoutes:input_type -> opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest
	40,  // 124: opi_api.network.cloud.v1alpha1.CloudInfraService.GetUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest
	41,  // 125: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpRouter:input_type -> opi_api.network.cloud.v1alpha1.CreateBgpRouterRequest
	42,  // 126: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpRouter:input_type -> opi_api.network.cloud.v1alpha1.DeleteBgpRouterRequest
	43,  // 127: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpRouter:input_type -> opi_api.network.cloud.v1alpha1.UpdateBgpRouterRequest
	44,  // 128: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpRouters:input_type -> opi_api.network.cloud.v1alpha1.ListBgpRoutersRequest
	46,  // 129: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpRouter:input_type -> opi_api.network.cloud.v1alpha1.GetBgpRouterRequest
	47,  // 130: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpPeer:input_type -> opi_api.network.cloud.v1alpha1.CreateBgpPeerRequest
	48,  // 131: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpPeer:input_type -> opi_api.network.cloud.v1alpha1.DeleteBgpPeerRequest
	49,  // 132: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpPeer:input_type -> opi_api.network.cloud.v1alpha1.UpdateBgpPeerRequest
	50,  // 133: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpPeers:input_type -> opi_api.network.cloud.v1alpha1.ListBgpPeersRequest
	52,  // 134: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpPeer:input_type -> opi_api.network.cloud.v1alpha1.GetBgpPeerRequest
	53,  // 135: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpPeerAf:input_type -> opi_api.network.cloud.v1alpha1.CreateBgpPeerAfRequest
	54,  // 136: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpPeerAf:input_type -> opi_api.network.cloud.v1alpha1.DeleteBgpPeerAfRequest
	55,  // 137: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpPeerAf:input_type -> opi_api.network.cloud.v1alpha1.UpdateBgpPeerAfRequest
	56,  // 138: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpPeerAfs:input_type -> opi_api.network.cloud.v1alpha1.ListBgpPeerAfsRequest
	58,  // 139: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpPeerAf:input_type -> opi_api.network.cloud.v1alpha1.GetBgpPeerAfRequest
	59,  // 140: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateMapping:input_type -> opi_api.network.cloud.v1alpha1.CreateMappingRequest
	60,  // 141: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteMapping:input_type -> opi_api.network.cloud.v1alpha1.DeleteMappingRequest
	61,  // 142: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateMapping:input_type -> opi_api.network.cloud.v1alpha1.UpdateMappingRequest
	62,  // 143: opi_api.network.cloud.v1alpha1.CloudInfraService.ListMappings:input_type -> opi_api.network.cloud.v1alpha1.ListMappingsRequest
	64,  // 144: opi_api.network.cloud.v1alpha1.CloudInfraService.GetMapping:input_type -> opi_api.network.cloud.v1alpha1.GetMappingRequest
	65,  // 145: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHop:input_type -> opi_api.network.cloud.v1alpha1.CreateNextHopRequest
	66,  // 146: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHop:input_type -> opi_api.network.cloud.v1alpha1.DeleteNextHopRequest
	67,  // 147: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHop:input_type -> opi_api.network.cloud.v1alpha1.UpdateNextHopRequest
	68,  // 148: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHop:input_type -> opi_api.network.cloud.v1alpha1.ListNextHopRequest
	70,  // 149: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHop:input_type -> opi_api.network.cloud.v1alpha1.GetNextHopRequest
	71,  // 150: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest
	72,  // 151: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest
	73,  // 152: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest
	74,  // 153: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHopGroups:input_type -> opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest
	76,  // 154: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest
	77,  // 155: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSubnet:input_type -> opi_api.network.cloud.v1alpha1.CreateSubnetRequest
	78,  // 156: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSubnet:input_type -> opi_api.network.cloud.v1alpha1.DeleteSubnetRequest
	79,  // 157: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSubnet:input_type -> opi_api.network.cloud.v1alpha1.UpdateSubnetRequest
	80,  // 158: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSubnets:input_type -> opi_api.network.cloud.v1alpha1.ListSubnetsRequest
	82,  // 159: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSubnet:input_type -> opi_api.network.cloud.v1alpha1.GetSubnetRequest
	83,  // 160: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateTunnel:input_type -> opi_api.network.cloud.v1alpha1.CreateTunnelRequest
	84,  // 161: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteTunnel:input_type -> opi_api.network.cloud.v1alpha1.DeleteTunnelRequest
	85,  // 162: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateTunnel:input_type -> opi_api.network.cloud.v1alpha1.UpdateTunnelRequest
	86,  // 163: opi_api.network.cloud.v1alpha1.CloudInfraService.ListTunnels:input_type -> opi_api.network.cloud.v1alpha1.ListTunnelsRequest
	88,  // 164: opi_api.network.cloud.v1alpha1.CloudInfraService.GetTunnel:input_type -> opi_api.network.cloud.v1alpha1.GetTunnelRequest
	89,  // 165: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVpc:input_type -> opi_api.network.cloud.v1alpha1.CreateVpcRequest
	90,  // 166: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVpc:input_type -> opi_api.network.cloud.v1alpha1.DeleteVpcRequest
	91,  // 167: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVpc:input_type -> opi_api.network.cloud.v1alpha1.UpdateVpcRequest
	92,  // 168: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVpcs:input_type -> opi_api.network.cloud.v1alpha1.ListVpcsRequest
	94,  // 169: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVpc:input_type -> opi_api.network.cloud.v1alpha1.GetVpcRequest
	95,  // 170: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest
	96,  // 171: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest
	97,  // 172: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest
	98,  // 173: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVPCPeers:input_type -> opi_api.network.cloud.v1alpha1.ListVPCPeersRequest
	100, // 174: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.GetVPCPeerRequest
	101, // 175: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest
	102, // 176: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest
	103, // 177: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest
	104, // 178: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityPolicys:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest
	106, // 179: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest
	107, // 180: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest
	108, // 181: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest
	109, // 182: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest
	110, // 183: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityRules:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest
	112, // 184: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest
	113, // 185: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest
	114, // 186: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest
	115, // 187: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest
	116, // 188: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityProfiles:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest
	118, // 189: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest
	119, // 190: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfRouter:input_type -> opi_api.network.cloud.v1alpha1.CreateOspfRouterRequest
	120, // 191: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfRouter:input_type -> opi_api.network.cloud.v1alpha1.UpdateOspfRouterRequest
	121, // 192: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfRouter:input_type -> opi_api.network.cloud.v1alpha1.DeleteOspfRouterRequest
	122, // 193: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfRouter:input_type -> opi_api.network.cloud.v1alpha1.GetOspfRouterRequest
	123, // 194: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfRouters:input_type -> opi_api.network.cloud.v1alpha1.ListOspfRoutersRequest
	125, // 195: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfArea:input_type -> opi_api.network.cloud.v1alpha1.CreateOspfAreaRequest
	126, // 196: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfArea:input_type -> opi_api.network.cloud.v1alpha1.UpdateOspfAreaRequest
	127, // 197: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfArea:input_type -> opi_api.network.cloud.v1alpha1.DeleteOspfAreaRequest
	128, // 198: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfArea:input_type -> opi_api.network.cloud.v1alpha1.GetOspfAreaRequest
	129, // 199: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfAreas:input_type -> opi_api.network.cloud.v1alpha1.ListOspfAreasRequest
	131, // 200: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfIfNetwork:input_type -> opi_api.network.cloud.v1alpha1.CreateOspfIfNetworkRequest
	132, // 201: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfIfNetwork:input_type -> opi_api.network.cloud.v1alpha1.UpdateOspfIfNetworkRequest
	133, // 202: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfIfNetwork:input_type -> opi_api.network.cloud.v1alpha1.DeleteOspfIfNetworkRequest
	134, // 203: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfIfNetwork:input_type -> opi_api.network.cloud.v1alpha1.GetOspfIfNetworkRequest
	135, // 204: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfIfNetworks:input_type -> opi_api.network.cloud.v1alpha1.ListOspfIfNetworksRequest
	161, // 205: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDeviceCapabilities:output_type -> opi_api.network.cloud.v1alpha1.DeviceCapabilities
	137, // 206: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	162, // 207: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteDevice:output_type -> google.protobuf.Empty
	137, // 208: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	5,   // 209: opi_api.network.cloud.v1alpha1.CloudInfraService.ListDevices:output_type -> opi_api.network.cloud.v1alpha1.ListDevicesResponse
	137, // 210: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	139, // 211: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdatePort:output_type -> opi_api.network.cloud.v1alpha1.Port
	9,   // 212: opi_api.network.cloud.v1alpha1.CloudInfraService.ListPorts:output_type -> opi_api.network.cloud.v1alpha1.ListPortsResponse
	139, // 213: opi_api.network.cloud.v1alpha1.CloudInfraService.GetPort:output_type -> opi_api.network.cloud.v1alpha1.Port
	140, // 214: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	162, // 215: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVnic:output_type -> google.protobuf.Empty
	140, // 216: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	15,  // 217: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVnics:output_type -> opi_api.network.cloud.v1alpha1.ListVnicsResponse
	140, // 218: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	141, // 219: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	162, // 220: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteInterface:output_type -> google.protobuf.Empty
	141, // 221: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	21,  // 222: opi_api.network.cloud.v1alpha1.CloudInfraService.ListInterfaces:output_type -> opi_api.network.cloud.v1alpha1.ListInterfacesResponse
	141, // 223: opi_api.network.cloud.v1alpha1.CloudInfraService.GetInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	142, // 224: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	162, // 225: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRouteTable:output_type -> google.protobuf.Empty
	142, // 226: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	27,  // 227: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRouteTables:output_type -> opi_api.network.cloud.v1alpha1.ListRouteTablesResponse
	142, // 228: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	143, // 229: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	162, // 230: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRoute:output_type -> google.protobuf.Empty
	143, // 231: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	33,  // 232: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRoutes:output_type -> opi_api.network.cloud.v1alpha1.ListRoutesResponse
	143, // 233: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	144, // 234: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	162, // 235: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteUnderlayRoute:output_type -> google.protobuf.Empty
	144, // 236: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	39,  // 237: opi_api.network.cloud.v1alpha1.CloudInfraService.ListUnderlayRoutes:output_type -> opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse
	144, // 238: opi_api.network.cloud.v1alpha1.CloudInfraService.GetUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	145, // 239: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpRouter:output_type -> opi_api.network.cloud.v1alpha1.BgpRouter
	162, // 240: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpRouter:output_type -> google.protobuf.Empty
	145, // 241: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpRouter:output_type -> opi_api.network.cloud.v1alpha1.BgpRouter
	45,  // 242: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpRouters:output_type -> opi_api.network.cloud.v1alpha1.ListBgpRoutersResponse
	145, // 243: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpRouter:output_type -> opi_api.network.cloud.v1alpha1.BgpRouter
	146, // 244: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpPeer:output_type -> opi_api.network.cloud.v1alpha1.BgpPeer
	162, // 245: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpPeer:output_type -> google.protobuf.Empty
	146, // 246: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpPeer:output_type -> opi_api.network.cloud.v1alpha1.BgpPeer
	51,  // 247: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpPeers:output_type -> opi_api.network.cloud.v1alpha1.ListBgpPeersResponse
	146, // 248: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpPeer:output_type -> opi_api.network.cloud.v1alpha1.BgpPeer
	147, // 249: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgpPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	162, // 250: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgpPeerAf:output_type -> google.protobuf.Empty
	147, // 251: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgpPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	57,  // 252: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgpPeerAfs:output_type -> opi_api.network.cloud.v1alpha1.ListBgpPeerAfsResponse
	147, // 253: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgpPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BgpPeerAf
	148, // 254: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	162, // 255: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteMapping:output_type -> google.protobuf.Empty
	148, // 256: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	63,  // 257: opi_api.network.cloud.v1alpha1.CloudInfraService.ListMappings:output_type -> opi_api.network.cloud.v1alpha1.ListMappingsResponse
	148, // 258: opi_api.network.cloud.v1alpha1.CloudInfraService.GetMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	149, // 259: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	162, // 260: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHop:output_type -> google.protobuf.Empty
	149, // 261: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	69,  // 262: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHop:output_type -> opi_api.network.cloud.v1alpha1.ListNextHopsResponse
	149, // 263: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	150, // 264: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	162, // 265: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHopGroup:output_type -> google.protobuf.Empty
	150, // 266: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	75,  // 267: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHopGroups:output_type -> opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse
	150, // 268: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	151, // 269: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	162, // 270: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSubnet:output_type -> google.protobuf.Empty
	151, // 271: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	81,  // 272: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSubnets:output_type -> opi_api.network.cloud.v1alpha1.ListSubnetsResponse
	151, // 273: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	152, // 274: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	162, // 275: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteTunnel:output_type -> google.protobuf.Empty
	152, // 276: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	87,  // 277: opi_api.network.cloud.v1alpha1.CloudInfraService.ListTunnels:output_type -> opi_api.network.cloud.v1alpha1.ListTunnelsResponse
	152, // 278: opi_api.network.cloud.v1alpha1.CloudInfraService.GetTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	153, // 279: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	162, // 280: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVpc:output_type -> google.protobuf.Empty
	153, // 281: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	93,  // 282: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVpcs:output_type -> opi_api.network.cloud.v1alpha1.ListVpcsResponse
	153, // 283: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	154, // 284: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	162, // 285: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVPCPeer:output_type -> google.protobuf.Empty
	154, // 286: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	99,  // 287: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVPCPeers:output_type -> opi_api.network.cloud.v1alpha1.ListVPCPeersResponse
	154, // 288: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	155, // 289: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	162, // 290: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityPolicy:output_type -> google.protobuf.Empty
	155, // 291: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	105, // 292: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityPolicys:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse
	155, // 293: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	156, // 294: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	162, // 295: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityRule:output_type -> google.protobuf.Empty
	156, // 296: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	111, // 297: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityRules:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse
	156, // 298: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	157, // 299: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	162, // 300: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityProfile:output_type -> google.protobuf.Empty
	157, // 301: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	117, // 302: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityProfiles:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse
	157, // 303: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	158, // 304: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfRouter:output_type -> opi_api.network.cloud.v1alpha1.OspfRouter
	158, // 305: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfRouter:output_type -> opi_api.network.cloud.v1alpha1.OspfRouter
	162, // 306: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfRouter:output_type -> google.protobuf.Empty
	158, // 307: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfRouter:output_type -> opi_api.network.cloud.v1alpha1.OspfRouter
	124, // 308: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfRouters:output_type -> opi_api.network.cloud.v1alpha1.ListOspfRoutersResponse
	159, // 309: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfArea:output_type -> opi_api.network.cloud.v1alpha1.OspfArea
	159, // 310: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfArea:output_type -> opi_api.network.cloud.v1alpha1.OspfArea
	162, // 311: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfArea:output_type -> google.protobuf.Empty
	159, // 312: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfArea:output_type -> opi_api.network.cloud.v1alpha1.OspfArea
	130, // 313: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfAreas:output_type -> opi_api.network.cloud.v1alpha1.ListOspfAreasResponse
	160, // 314: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateOspfIfNetwork:output_type -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	160, // 315: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateOspfIfNetwork:output_type -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	162, // 316: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteOspfIfNetwork:output_type -> google.protobuf.Empty
	160, // 317: opi_api.network.cloud.v1alpha1.CloudInfraService.GetOspfIfNetwork:output_type -> opi_api.network.cloud.v1alpha1.OspfIfNetwork
	136, // 318: opi_api.network.cloud.v1alpha1.CloudInfraService.ListOspfIfNetworks:output_type -> opi_api.network.cloud.v1alpha1.ListOspfIfNetworksResponse
	205, // [205:319] is the sub-list for method output_type
	91,  // [91:205] is the sub-list for method input_type
	91,  // [91:91] is the sub-list for extension type_name
	91,  // [91:91] is the sub-list for extension extendee
	0,   // [0:91] is the sub-list for field type_name
}

func init() { file_network_cloud_cloudrpc_proto_init() }
func file_network_cloud_cloudrpc_proto_init() {
	if File_network_cloud_cloudrpc_proto != nil {
		return
	}
	file_network_cloud_bgp_proto_init()
	file_network_cloud_device_proto_init()
	file_network_cloud_interface_proto_init()
	file_network_cloud_mapping_proto_init()
	file_network_cloud_networkpolicy_proto_init()
	file_network_cloud_nexthop_proto_init()
	file_network_cloud_ospf_proto_init()
	file_network_cloud_port_proto_init()
	file_network_cloud_route_proto_init()
	file_network_cloud_subnet_proto_init()
	file_network_cloud_tunnel_proto_init()
	file_network_cloud_underlayroute_proto_init()
	file_network_cloud_vnic_proto_init()
	file_network_cloud_vpc_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_cloud_cloudrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   137,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_cloud_cloudrpc_proto_goTypes,
		DependencyIndexes: file_network_cloud_cloudrpc_proto_depIdxs,
		MessageInfos:      file_network_cloud_cloudrpc_proto_msgTypes,
	}.Build()
	File_network_cloud_cloudrpc_proto = out.File
	file_network_cloud_cloudrpc_proto_rawDesc = nil
	file_network_cloud_cloudrpc_proto_goTypes = nil
	file_network_cloud_cloudrpc_proto_depIdxs = nil
}
