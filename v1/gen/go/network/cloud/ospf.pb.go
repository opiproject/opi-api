// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) 2024-2024 Intel Corporation
// protobuf specification for OSPF
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: network/cloud/ospf.proto

package _go

import (
	_go "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OSPF Version Number
type OSPFVersion int32

const (
	// OSPF Version not specified and assume v2
	OSPFVersion_OSPF_VERSION_UNSPECIFIED OSPFVersion = 0
	// OSPF Version 2
	OSPFVersion_OSPF_VERSION_2 OSPFVersion = 1
	// OSPF Version 3
	OSPFVersion_OSPF_VERSION_3 OSPFVersion = 2
)

// Enum value maps for OSPFVersion.
var (
	OSPFVersion_name = map[int32]string{
		0: "OSPF_VERSION_UNSPECIFIED",
		1: "OSPF_VERSION_2",
		2: "OSPF_VERSION_3",
	}
	OSPFVersion_value = map[string]int32{
		"OSPF_VERSION_UNSPECIFIED": 0,
		"OSPF_VERSION_2":           1,
		"OSPF_VERSION_3":           2,
	}
)

func (x OSPFVersion) Enum() *OSPFVersion {
	p := new(OSPFVersion)
	*p = x
	return p
}

func (x OSPFVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSPFVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_network_cloud_ospf_proto_enumTypes[0].Descriptor()
}

func (OSPFVersion) Type() protoreflect.EnumType {
	return &file_network_cloud_ospf_proto_enumTypes[0]
}

func (x OSPFVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSPFVersion.Descriptor instead.
func (OSPFVersion) EnumDescriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{0}
}

// IfNetwork Types
type OspfIfNetworkType int32

const (
	// IfNetwork Type Unspecified
	OspfIfNetworkType_OSPF_IF_NETWORK_TYPE_UNSPECIFIED OspfIfNetworkType = 0
	// Broadcast type
	OspfIfNetworkType_OSPF_IF_NETWORK_TYPE_BROADCAST OspfIfNetworkType = 1
	// Point to Point type
	OspfIfNetworkType_OSPF_IF_NETWORK_TYPE_POINT_TO_POINT OspfIfNetworkType = 2
)

// Enum value maps for OspfIfNetworkType.
var (
	OspfIfNetworkType_name = map[int32]string{
		0: "OSPF_IF_NETWORK_TYPE_UNSPECIFIED",
		1: "OSPF_IF_NETWORK_TYPE_BROADCAST",
		2: "OSPF_IF_NETWORK_TYPE_POINT_TO_POINT",
	}
	OspfIfNetworkType_value = map[string]int32{
		"OSPF_IF_NETWORK_TYPE_UNSPECIFIED":    0,
		"OSPF_IF_NETWORK_TYPE_BROADCAST":      1,
		"OSPF_IF_NETWORK_TYPE_POINT_TO_POINT": 2,
	}
)

func (x OspfIfNetworkType) Enum() *OspfIfNetworkType {
	p := new(OspfIfNetworkType)
	*p = x
	return p
}

func (x OspfIfNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OspfIfNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_cloud_ospf_proto_enumTypes[1].Descriptor()
}

func (OspfIfNetworkType) Type() protoreflect.EnumType {
	return &file_network_cloud_ospf_proto_enumTypes[1]
}

func (x OspfIfNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OspfIfNetworkType.Descriptor instead.
func (OspfIfNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{1}
}

// OSPF Redist Metric Type
type OSPFRedistMetricType int32

const (
	// Redist Metric Unspecified
	OSPFRedistMetricType_OSPF_REDIST_METRIC_TYPE_UNSPECIFIED OSPFRedistMetricType = 0
	// Type 1
	OSPFRedistMetricType_OSPF_REDIST_METRIC_TYPE_1 OSPFRedistMetricType = 1
	// Type 1
	OSPFRedistMetricType_OSPF_REDIST_METRIC_TYPE_2 OSPFRedistMetricType = 2
)

// Enum value maps for OSPFRedistMetricType.
var (
	OSPFRedistMetricType_name = map[int32]string{
		0: "OSPF_REDIST_METRIC_TYPE_UNSPECIFIED",
		1: "OSPF_REDIST_METRIC_TYPE_1",
		2: "OSPF_REDIST_METRIC_TYPE_2",
	}
	OSPFRedistMetricType_value = map[string]int32{
		"OSPF_REDIST_METRIC_TYPE_UNSPECIFIED": 0,
		"OSPF_REDIST_METRIC_TYPE_1":           1,
		"OSPF_REDIST_METRIC_TYPE_2":           2,
	}
)

func (x OSPFRedistMetricType) Enum() *OSPFRedistMetricType {
	p := new(OSPFRedistMetricType)
	*p = x
	return p
}

func (x OSPFRedistMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSPFRedistMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_cloud_ospf_proto_enumTypes[2].Descriptor()
}

func (OSPFRedistMetricType) Type() protoreflect.EnumType {
	return &file_network_cloud_ospf_proto_enumTypes[2]
}

func (x OSPFRedistMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSPFRedistMetricType.Descriptor instead.
func (OSPFRedistMetricType) EnumDescriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{2}
}

// OSPF Redist Type
type OSPFRedistType int32

const (
	// Redist Unspecified
	OSPFRedistType_OSPF_REDIST_TYPE_UNSPECIFIED OSPFRedistType = 0
	// Connection
	OSPFRedistType_OSPF_REDIST_TYPE_CONNECTED OSPFRedistType = 1
	// Static
	OSPFRedistType_OSPF_REDIST_TYPE_STATIC OSPFRedistType = 2
	// BGP
	OSPFRedistType_OSPF_REDIST_TYPE_BGP OSPFRedistType = 3
)

// Enum value maps for OSPFRedistType.
var (
	OSPFRedistType_name = map[int32]string{
		0: "OSPF_REDIST_TYPE_UNSPECIFIED",
		1: "OSPF_REDIST_TYPE_CONNECTED",
		2: "OSPF_REDIST_TYPE_STATIC",
		3: "OSPF_REDIST_TYPE_BGP",
	}
	OSPFRedistType_value = map[string]int32{
		"OSPF_REDIST_TYPE_UNSPECIFIED": 0,
		"OSPF_REDIST_TYPE_CONNECTED":   1,
		"OSPF_REDIST_TYPE_STATIC":      2,
		"OSPF_REDIST_TYPE_BGP":         3,
	}
)

func (x OSPFRedistType) Enum() *OSPFRedistType {
	p := new(OSPFRedistType)
	*p = x
	return p
}

func (x OSPFRedistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSPFRedistType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_cloud_ospf_proto_enumTypes[3].Descriptor()
}

func (OSPFRedistType) Type() protoreflect.EnumType {
	return &file_network_cloud_ospf_proto_enumTypes[3]
}

func (x OSPFRedistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSPFRedistType.Descriptor instead.
func (OSPFRedistType) EnumDescriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{3}
}

// OSPFOperState operational state
type OSPFOperState int32

const (
	// unspecified
	OSPFOperState_OSPF_OPER_STATE_UNSPECIFIED OSPFOperState = 0
	// up
	OSPFOperState_OSPF_OPER_STATE_UP OSPFOperState = 1
	// down
	OSPFOperState_OSPF_OPER_STATE_DOWN OSPFOperState = 2
	// going up
	OSPFOperState_OSPF_OPER_STATE_GOING_UP OSPFOperState = 3
	// going down
	OSPFOperState_OSPF_OPER_STATE_GOING_DOWN OSPFOperState = 4
	// activation failed
	OSPFOperState_OSPF_OPER_STATE_ACT_FAILED OSPFOperState = 5
)

// Enum value maps for OSPFOperState.
var (
	OSPFOperState_name = map[int32]string{
		0: "OSPF_OPER_STATE_UNSPECIFIED",
		1: "OSPF_OPER_STATE_UP",
		2: "OSPF_OPER_STATE_DOWN",
		3: "OSPF_OPER_STATE_GOING_UP",
		4: "OSPF_OPER_STATE_GOING_DOWN",
		5: "OSPF_OPER_STATE_ACT_FAILED",
	}
	OSPFOperState_value = map[string]int32{
		"OSPF_OPER_STATE_UNSPECIFIED": 0,
		"OSPF_OPER_STATE_UP":          1,
		"OSPF_OPER_STATE_DOWN":        2,
		"OSPF_OPER_STATE_GOING_UP":    3,
		"OSPF_OPER_STATE_GOING_DOWN":  4,
		"OSPF_OPER_STATE_ACT_FAILED":  5,
	}
)

func (x OSPFOperState) Enum() *OSPFOperState {
	p := new(OSPFOperState)
	*p = x
	return p
}

func (x OSPFOperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSPFOperState) Descriptor() protoreflect.EnumDescriptor {
	return file_network_cloud_ospf_proto_enumTypes[4].Descriptor()
}

func (OSPFOperState) Type() protoreflect.EnumType {
	return &file_network_cloud_ospf_proto_enumTypes[4]
}

func (x OSPFOperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSPFOperState.Descriptor instead.
func (OSPFOperState) EnumDescriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{4}
}

// OSPF Config object
type OspfRouter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is an opaque object handle that is not user settable.
	// name will be returned with created object
	// user can only set {resource}_id on the Create request object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// OSPF Configuration specification
	Spec *OSPFSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// OSPF State
	State         OSPFOperState `protobuf:"varint,3,opt,name=state,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFOperState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfRouter) Reset() {
	*x = OspfRouter{}
	mi := &file_network_cloud_ospf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfRouter) ProtoMessage() {}

func (x *OspfRouter) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfRouter.ProtoReflect.Descriptor instead.
func (*OspfRouter) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{0}
}

func (x *OspfRouter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OspfRouter) GetSpec() *OSPFSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *OspfRouter) GetState() OSPFOperState {
	if x != nil {
		return x.State
	}
	return OSPFOperState_OSPF_OPER_STATE_UNSPECIFIED
}

// OSPF configuration
type OSPFSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF version v2 or v3 or unspecified assumes v2
	OspfVersion OSPFVersion `protobuf:"varint,1,opt,name=ospf_version,json=ospfVersion,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFVersion" json:"ospf_version,omitempty"`
	// router ID for this ospf instance
	RouterId string `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	// Suppress default resolution if true
	SuppressDefaultResolution bool `protobuf:"varint,3,opt,name=suppress_default_resolution,json=suppressDefaultResolution,proto3" json:"suppress_default_resolution,omitempty"`
	// Redistribution
	Redist *OSPFRedistSpec `protobuf:"bytes,4,opt,name=redist,proto3" json:"redist,omitempty"`
	// Passive Interface name
	PassiveIf     string `protobuf:"bytes,5,opt,name=passive_if,json=passiveIf,proto3" json:"passive_if,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSPFSpec) Reset() {
	*x = OSPFSpec{}
	mi := &file_network_cloud_ospf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSPFSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSPFSpec) ProtoMessage() {}

func (x *OSPFSpec) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSPFSpec.ProtoReflect.Descriptor instead.
func (*OSPFSpec) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{1}
}

func (x *OSPFSpec) GetOspfVersion() OSPFVersion {
	if x != nil {
		return x.OspfVersion
	}
	return OSPFVersion_OSPF_VERSION_UNSPECIFIED
}

func (x *OSPFSpec) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *OSPFSpec) GetSuppressDefaultResolution() bool {
	if x != nil {
		return x.SuppressDefaultResolution
	}
	return false
}

func (x *OSPFSpec) GetRedist() *OSPFRedistSpec {
	if x != nil {
		return x.Redist
	}
	return nil
}

func (x *OSPFSpec) GetPassiveIf() string {
	if x != nil {
		return x.PassiveIf
	}
	return ""
}

// OSPFRedistSpec configuration
type OSPFRedistSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF redistribution type
	RedistType OSPFRedistType `protobuf:"varint,1,opt,name=redist_type,json=redistType,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFRedistType" json:"redist_type,omitempty"`
	// peer enable/disable admin state. if peer is not enabled then local router
	// must not initiate connections to the neighbor and must not respond to
	// TCP connections attempts from neighbor
	State _go.AdminState `protobuf:"varint,2,opt,name=state,proto3,enum=opi_api.network.opinetcommon.v1alpha1.AdminState" json:"state,omitempty"`
	// OSPF local IP address. control plane chooses the local IP address of the
	// session if an all 0 IP address is provided
	LocalAddress *_go.IPAddress `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// Route-Map
	RouteMap string `protobuf:"bytes,4,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	// Metric type
	MetricType OSPFRedistMetricType `protobuf:"varint,5,opt,name=metric_type,json=metricType,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFRedistMetricType" json:"metric_type,omitempty"`
	// Metric value
	Metric        int32 `protobuf:"varint,6,opt,name=metric,proto3" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSPFRedistSpec) Reset() {
	*x = OSPFRedistSpec{}
	mi := &file_network_cloud_ospf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSPFRedistSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSPFRedistSpec) ProtoMessage() {}

func (x *OSPFRedistSpec) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSPFRedistSpec.ProtoReflect.Descriptor instead.
func (*OSPFRedistSpec) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{2}
}

func (x *OSPFRedistSpec) GetRedistType() OSPFRedistType {
	if x != nil {
		return x.RedistType
	}
	return OSPFRedistType_OSPF_REDIST_TYPE_UNSPECIFIED
}

func (x *OSPFRedistSpec) GetState() _go.AdminState {
	if x != nil {
		return x.State
	}
	return _go.AdminState(0)
}

func (x *OSPFRedistSpec) GetLocalAddress() *_go.IPAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *OSPFRedistSpec) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *OSPFRedistSpec) GetMetricType() OSPFRedistMetricType {
	if x != nil {
		return x.MetricType
	}
	return OSPFRedistMetricType_OSPF_REDIST_METRIC_TYPE_UNSPECIFIED
}

func (x *OSPFRedistSpec) GetMetric() int32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// OspfArea object
type OspfArea struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique name to identify the area.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// area configuration
	Spec *OspfAreaSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// area state
	State         OSPFOperState `protobuf:"varint,3,opt,name=state,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFOperState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfArea) Reset() {
	*x = OspfArea{}
	mi := &file_network_cloud_ospf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfArea) ProtoMessage() {}

func (x *OspfArea) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfArea.ProtoReflect.Descriptor instead.
func (*OspfArea) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{3}
}

func (x *OspfArea) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OspfArea) GetSpec() *OspfAreaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *OspfArea) GetState() OSPFOperState {
	if x != nil {
		return x.State
	}
	return OSPFOperState_OSPF_OPER_STATE_UNSPECIFIED
}

// OspfAreaSpec configuration
type OspfAreaSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OSPF Area IP address. control plane chooses the local IP address of the
	// session if an all 0 IP address is provided, example area zero 0.0.0.0 and
	// area 1 0.0.0.1
	AreaAddress *_go.IPAddress `protobuf:"bytes,1,opt,name=area_address,json=areaAddress,proto3" json:"area_address,omitempty"`
	// OSPF Process & context definition for (IPv4)
	State _go.AdminState `protobuf:"varint,2,opt,name=state,proto3,enum=opi_api.network.opinetcommon.v1alpha1.AdminState" json:"state,omitempty"`
	// Network prefix address
	NetworkPrefix *_go.IPPrefix `protobuf:"bytes,3,opt,name=network_prefix,json=networkPrefix,proto3" json:"network_prefix,omitempty"`
	// example configuration: area 0 authentication_message_digest
	AuthMessageDigest string `protobuf:"bytes,4,opt,name=auth_message_digest,json=authMessageDigest,proto3" json:"auth_message_digest,omitempty"`
	// IfNetwork Type
	NetworkType   OspfIfNetworkType `protobuf:"varint,5,opt,name=network_type,json=networkType,proto3,enum=opi_api.network.cloud.v1alpha1.OspfIfNetworkType" json:"network_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfAreaSpec) Reset() {
	*x = OspfAreaSpec{}
	mi := &file_network_cloud_ospf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfAreaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfAreaSpec) ProtoMessage() {}

func (x *OspfAreaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfAreaSpec.ProtoReflect.Descriptor instead.
func (*OspfAreaSpec) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{4}
}

func (x *OspfAreaSpec) GetAreaAddress() *_go.IPAddress {
	if x != nil {
		return x.AreaAddress
	}
	return nil
}

func (x *OspfAreaSpec) GetState() _go.AdminState {
	if x != nil {
		return x.State
	}
	return _go.AdminState(0)
}

func (x *OspfAreaSpec) GetNetworkPrefix() *_go.IPPrefix {
	if x != nil {
		return x.NetworkPrefix
	}
	return nil
}

func (x *OspfAreaSpec) GetAuthMessageDigest() string {
	if x != nil {
		return x.AuthMessageDigest
	}
	return ""
}

func (x *OspfAreaSpec) GetNetworkType() OspfIfNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return OspfIfNetworkType_OSPF_IF_NETWORK_TYPE_UNSPECIFIED
}

// OspfIfNetwork
type OspfIfNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique key/identifier of ifnetwork
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// OspfIfNetwork configuration
	Spec *OspfIfNetworkSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// OspfIfNetwork state
	State         OSPFOperState `protobuf:"varint,3,opt,name=state,proto3,enum=opi_api.network.cloud.v1alpha1.OSPFOperState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfIfNetwork) Reset() {
	*x = OspfIfNetwork{}
	mi := &file_network_cloud_ospf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfIfNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfIfNetwork) ProtoMessage() {}

func (x *OspfIfNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfIfNetwork.ProtoReflect.Descriptor instead.
func (*OspfIfNetwork) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{5}
}

func (x *OspfIfNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OspfIfNetwork) GetSpec() *OspfIfNetworkSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *OspfIfNetwork) GetState() OSPFOperState {
	if x != nil {
		return x.State
	}
	return OSPFOperState_OSPF_OPER_STATE_UNSPECIFIED
}

// OspfIfNetworkSpec configuration
type OspfIfNetworkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network Type Point_To_Point or Broadcast
	NetworkType string `protobuf:"bytes,1,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	// peer enable/disable admin state. if peer is not enabled then local router
	// must not initiate connections to the neighbor and must not respond to
	// TCP connections attempts from neighbor
	State _go.AdminState `protobuf:"varint,2,opt,name=state,proto3,enum=opi_api.network.opinetcommon.v1alpha1.AdminState" json:"state,omitempty"`
	// OSPF local IP address. control plane chooses the local IP address of the
	// session if an all 0 IP address is provided
	LocalAddress *_go.IPAddress `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// Cost or link metric value is 16 bits and must be validated
	CostOrLinkMetric int32 `protobuf:"varint,4,opt,name=cost_or_link_metric,json=costOrLinkMetric,proto3" json:"cost_or_link_metric,omitempty"`
	// Example: ip ospf message-digest-key 1 md5 intel
	Md5Auth       *OSPFMD5Auth `protobuf:"bytes,5,opt,name=md5_auth,json=md5Auth,proto3" json:"md5_auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfIfNetworkSpec) Reset() {
	*x = OspfIfNetworkSpec{}
	mi := &file_network_cloud_ospf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfIfNetworkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfIfNetworkSpec) ProtoMessage() {}

func (x *OspfIfNetworkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfIfNetworkSpec.ProtoReflect.Descriptor instead.
func (*OspfIfNetworkSpec) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{6}
}

func (x *OspfIfNetworkSpec) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *OspfIfNetworkSpec) GetState() _go.AdminState {
	if x != nil {
		return x.State
	}
	return _go.AdminState(0)
}

func (x *OspfIfNetworkSpec) GetLocalAddress() *_go.IPAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *OspfIfNetworkSpec) GetCostOrLinkMetric() int32 {
	if x != nil {
		return x.CostOrLinkMetric
	}
	return 0
}

func (x *OspfIfNetworkSpec) GetMd5Auth() *OSPFMD5Auth {
	if x != nil {
		return x.Md5Auth
	}
	return nil
}

// MD5 Auth
type OSPFMD5Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message Digest Key value
	MessageDigestKey int32 `protobuf:"varint,1,opt,name=message_digest_key,json=messageDigestKey,proto3" json:"message_digest_key,omitempty"`
	// Password
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSPFMD5Auth) Reset() {
	*x = OSPFMD5Auth{}
	mi := &file_network_cloud_ospf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSPFMD5Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSPFMD5Auth) ProtoMessage() {}

func (x *OSPFMD5Auth) ProtoReflect() protoreflect.Message {
	mi := &file_network_cloud_ospf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSPFMD5Auth.ProtoReflect.Descriptor instead.
func (*OSPFMD5Auth) Descriptor() ([]byte, []int) {
	return file_network_cloud_ospf_proto_rawDescGZIP(), []int{7}
}

func (x *OSPFMD5Auth) GetMessageDigestKey() int32 {
	if x != nil {
		return x.MessageDigestKey
	}
	return 0
}

func (x *OSPFMD5Auth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_network_cloud_ospf_proto protoreflect.FileDescriptor

var file_network_cloud_ospf_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x27, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x91, 0x02, 0x0a, 0x0a, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x5d, 0xea, 0x41, 0x5a, 0x0a, 0x29, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x7d, 0x2a, 0x0b, 0x6f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x32, 0x0a, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x22, 0xa3, 0x02, 0x0a, 0x08, 0x4f, 0x53, 0x50, 0x46, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x53, 0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6f, 0x73, 0x70, 0x66, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x06, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x66, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x4f, 0x53,
	0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4f, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x55, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x85,
	0x02, 0x0a, 0x08, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x54, 0xea, 0x41, 0x51, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x12, 0x11,
	0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x7d, 0x2a, 0x09, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x73, 0x32, 0x08, 0x6f, 0x73,
	0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x22, 0x8f, 0x03, 0x0a, 0x0c, 0x4f, 0x73, 0x70, 0x66, 0x41,
	0x72, 0x65, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x61, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x4f, 0x73, 0x70,
	0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x53, 0x50, 0x46, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x6a, 0xea, 0x41, 0x67, 0x0a, 0x2c, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x7d, 0x2a, 0x0e, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x32, 0x0d, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0xd2, 0x02, 0x0a, 0x11, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d,
	0x0a, 0x13, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x73,
	0x74, 0x4f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x64, 0x35, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4f, 0x53, 0x50, 0x46, 0x4d, 0x44, 0x35, 0x41, 0x75, 0x74, 0x68, 0x52, 0x07, 0x6d, 0x64,
	0x35, 0x41, 0x75, 0x74, 0x68, 0x22, 0x57, 0x0a, 0x0b, 0x4f, 0x53, 0x50, 0x46, 0x4d, 0x44, 0x35,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0x53,
	0x0a, 0x0b, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x53, 0x50, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x33, 0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a, 0x11, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x66, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x53, 0x50,
	0x46, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x49, 0x46, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x14,
	0x4f, 0x53, 0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x32, 0x10, 0x02, 0x2a, 0x89, 0x01, 0x0a, 0x0e,
	0x4f, 0x53, 0x50, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x03, 0x2a, 0xc0, 0x01, 0x0a, 0x0d, 0x4f, 0x53, 0x50, 0x46,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x53, 0x50,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53,
	0x50, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x53,
	0x50, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x4f,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x53,
	0x50, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0x6a, 0x0a, 0x1e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x09, 0x4f, 0x53,
	0x50, 0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_network_cloud_ospf_proto_rawDescOnce sync.Once
	file_network_cloud_ospf_proto_rawDescData []byte
)

func file_network_cloud_ospf_proto_rawDescGZIP() []byte {
	file_network_cloud_ospf_proto_rawDescOnce.Do(func() {
		file_network_cloud_ospf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_network_cloud_ospf_proto_rawDesc), len(file_network_cloud_ospf_proto_rawDesc)))
	})
	return file_network_cloud_ospf_proto_rawDescData
}

var file_network_cloud_ospf_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_network_cloud_ospf_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_network_cloud_ospf_proto_goTypes = []any{
	(OSPFVersion)(0),          // 0: opi_api.network.cloud.v1alpha1.OSPFVersion
	(OspfIfNetworkType)(0),    // 1: opi_api.network.cloud.v1alpha1.OspfIfNetworkType
	(OSPFRedistMetricType)(0), // 2: opi_api.network.cloud.v1alpha1.OSPFRedistMetricType
	(OSPFRedistType)(0),       // 3: opi_api.network.cloud.v1alpha1.OSPFRedistType
	(OSPFOperState)(0),        // 4: opi_api.network.cloud.v1alpha1.OSPFOperState
	(*OspfRouter)(nil),        // 5: opi_api.network.cloud.v1alpha1.OspfRouter
	(*OSPFSpec)(nil),          // 6: opi_api.network.cloud.v1alpha1.OSPFSpec
	(*OSPFRedistSpec)(nil),    // 7: opi_api.network.cloud.v1alpha1.OSPFRedistSpec
	(*OspfArea)(nil),          // 8: opi_api.network.cloud.v1alpha1.OspfArea
	(*OspfAreaSpec)(nil),      // 9: opi_api.network.cloud.v1alpha1.OspfAreaSpec
	(*OspfIfNetwork)(nil),     // 10: opi_api.network.cloud.v1alpha1.OspfIfNetwork
	(*OspfIfNetworkSpec)(nil), // 11: opi_api.network.cloud.v1alpha1.OspfIfNetworkSpec
	(*OSPFMD5Auth)(nil),       // 12: opi_api.network.cloud.v1alpha1.OSPFMD5Auth
	(_go.AdminState)(0),       // 13: opi_api.network.opinetcommon.v1alpha1.AdminState
	(*_go.IPAddress)(nil),     // 14: opi_api.network.opinetcommon.v1alpha1.IPAddress
	(*_go.IPPrefix)(nil),      // 15: opi_api.network.opinetcommon.v1alpha1.IPPrefix
}
var file_network_cloud_ospf_proto_depIdxs = []int32{
	6,  // 0: opi_api.network.cloud.v1alpha1.OspfRouter.spec:type_name -> opi_api.network.cloud.v1alpha1.OSPFSpec
	4,  // 1: opi_api.network.cloud.v1alpha1.OspfRouter.state:type_name -> opi_api.network.cloud.v1alpha1.OSPFOperState
	0,  // 2: opi_api.network.cloud.v1alpha1.OSPFSpec.ospf_version:type_name -> opi_api.network.cloud.v1alpha1.OSPFVersion
	7,  // 3: opi_api.network.cloud.v1alpha1.OSPFSpec.redist:type_name -> opi_api.network.cloud.v1alpha1.OSPFRedistSpec
	3,  // 4: opi_api.network.cloud.v1alpha1.OSPFRedistSpec.redist_type:type_name -> opi_api.network.cloud.v1alpha1.OSPFRedistType
	13, // 5: opi_api.network.cloud.v1alpha1.OSPFRedistSpec.state:type_name -> opi_api.network.opinetcommon.v1alpha1.AdminState
	14, // 6: opi_api.network.cloud.v1alpha1.OSPFRedistSpec.local_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	2,  // 7: opi_api.network.cloud.v1alpha1.OSPFRedistSpec.metric_type:type_name -> opi_api.network.cloud.v1alpha1.OSPFRedistMetricType
	9,  // 8: opi_api.network.cloud.v1alpha1.OspfArea.spec:type_name -> opi_api.network.cloud.v1alpha1.OspfAreaSpec
	4,  // 9: opi_api.network.cloud.v1alpha1.OspfArea.state:type_name -> opi_api.network.cloud.v1alpha1.OSPFOperState
	14, // 10: opi_api.network.cloud.v1alpha1.OspfAreaSpec.area_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	13, // 11: opi_api.network.cloud.v1alpha1.OspfAreaSpec.state:type_name -> opi_api.network.opinetcommon.v1alpha1.AdminState
	15, // 12: opi_api.network.cloud.v1alpha1.OspfAreaSpec.network_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	1,  // 13: opi_api.network.cloud.v1alpha1.OspfAreaSpec.network_type:type_name -> opi_api.network.cloud.v1alpha1.OspfIfNetworkType
	11, // 14: opi_api.network.cloud.v1alpha1.OspfIfNetwork.spec:type_name -> opi_api.network.cloud.v1alpha1.OspfIfNetworkSpec
	4,  // 15: opi_api.network.cloud.v1alpha1.OspfIfNetwork.state:type_name -> opi_api.network.cloud.v1alpha1.OSPFOperState
	13, // 16: opi_api.network.cloud.v1alpha1.OspfIfNetworkSpec.state:type_name -> opi_api.network.opinetcommon.v1alpha1.AdminState
	14, // 17: opi_api.network.cloud.v1alpha1.OspfIfNetworkSpec.local_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	12, // 18: opi_api.network.cloud.v1alpha1.OspfIfNetworkSpec.md5_auth:type_name -> opi_api.network.cloud.v1alpha1.OSPFMD5Auth
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_network_cloud_ospf_proto_init() }
func file_network_cloud_ospf_proto_init() {
	if File_network_cloud_ospf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_network_cloud_ospf_proto_rawDesc), len(file_network_cloud_ospf_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_cloud_ospf_proto_goTypes,
		DependencyIndexes: file_network_cloud_ospf_proto_depIdxs,
		EnumInfos:         file_network_cloud_ospf_proto_enumTypes,
		MessageInfos:      file_network_cloud_ospf_proto_msgTypes,
	}.Build()
	File_network_cloud_ospf_proto = out.File
	file_network_cloud_ospf_proto_goTypes = nil
	file_network_cloud_ospf_proto_depIdxs = nil
}
