// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// device's network configuration

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: network/cloud/cloudrpc.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudInfraService_GetDeviceCapabilities_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDeviceCapabilities"
	CloudInfraService_CreateDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateDevice"
	CloudInfraService_DeleteDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteDevice"
	CloudInfraService_UpdateDevice_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateDevice"
	CloudInfraService_ListDevices_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListDevices"
	CloudInfraService_GetDevice_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDevice"
	CloudInfraService_UpdatePort_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdatePort"
	CloudInfraService_ListPorts_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListPorts"
	CloudInfraService_GetPort_FullMethodName               = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetPort"
	CloudInfraService_CreateVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVnic"
	CloudInfraService_DeleteVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVnic"
	CloudInfraService_UpdateVnic_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVnic"
	CloudInfraService_ListVnics_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVnics"
	CloudInfraService_GetVnic_FullMethodName               = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVnic"
	CloudInfraService_CreateInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateInterface"
	CloudInfraService_DeleteInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteInterface"
	CloudInfraService_UpdateInterface_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateInterface"
	CloudInfraService_ListInterfaces_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListInterfaces"
	CloudInfraService_GetInterface_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetInterface"
	CloudInfraService_CreateRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRouteTable"
	CloudInfraService_DeleteRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRouteTable"
	CloudInfraService_UpdateRouteTable_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRouteTable"
	CloudInfraService_ListRouteTables_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRouteTables"
	CloudInfraService_GetRouteTable_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRouteTable"
	CloudInfraService_CreateRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRoute"
	CloudInfraService_DeleteRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRoute"
	CloudInfraService_UpdateRoute_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRoute"
	CloudInfraService_ListRoutes_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRoutes"
	CloudInfraService_GetRoute_FullMethodName              = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRoute"
	CloudInfraService_CreateUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateUnderlayRoute"
	CloudInfraService_DeleteUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteUnderlayRoute"
	CloudInfraService_UpdateUnderlayRoute_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateUnderlayRoute"
	CloudInfraService_ListUnderlayRoutes_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListUnderlayRoutes"
	CloudInfraService_GetUnderlayRoute_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetUnderlayRoute"
	CloudInfraService_CreateBgpRouter_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgpRouter"
	CloudInfraService_DeleteBgpRouter_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgpRouter"
	CloudInfraService_UpdateBgpRouter_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgpRouter"
	CloudInfraService_ListBgpRouters_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgpRouters"
	CloudInfraService_GetBgpRouter_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgpRouter"
	CloudInfraService_CreateBgpPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgpPeer"
	CloudInfraService_DeleteBgpPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgpPeer"
	CloudInfraService_UpdateBgpPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgpPeer"
	CloudInfraService_ListBgpPeers_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgpPeers"
	CloudInfraService_GetBgpPeer_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgpPeer"
	CloudInfraService_CreateBgpPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgpPeerAf"
	CloudInfraService_DeleteBgpPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgpPeerAf"
	CloudInfraService_UpdateBgpPeerAf_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgpPeerAf"
	CloudInfraService_ListBgpPeerAfs_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgpPeerAfs"
	CloudInfraService_GetBgpPeerAf_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgpPeerAf"
	CloudInfraService_CreateMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateMapping"
	CloudInfraService_DeleteMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteMapping"
	CloudInfraService_UpdateMapping_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateMapping"
	CloudInfraService_ListMappings_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListMappings"
	CloudInfraService_GetMapping_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetMapping"
	CloudInfraService_CreateNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHop"
	CloudInfraService_DeleteNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHop"
	CloudInfraService_UpdateNextHop_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHop"
	CloudInfraService_ListNextHop_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHop"
	CloudInfraService_GetNextHop_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHop"
	CloudInfraService_CreateNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHopGroup"
	CloudInfraService_DeleteNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHopGroup"
	CloudInfraService_UpdateNextHopGroup_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHopGroup"
	CloudInfraService_ListNextHopGroups_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHopGroups"
	CloudInfraService_GetNextHopGroup_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHopGroup"
	CloudInfraService_CreateSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSubnet"
	CloudInfraService_DeleteSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSubnet"
	CloudInfraService_UpdateSubnet_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSubnet"
	CloudInfraService_ListSubnets_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSubnets"
	CloudInfraService_GetSubnet_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSubnet"
	CloudInfraService_CreateTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateTunnel"
	CloudInfraService_DeleteTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteTunnel"
	CloudInfraService_UpdateTunnel_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateTunnel"
	CloudInfraService_ListTunnels_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListTunnels"
	CloudInfraService_GetTunnel_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetTunnel"
	CloudInfraService_CreateVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVpc"
	CloudInfraService_DeleteVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVpc"
	CloudInfraService_UpdateVpc_FullMethodName             = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVpc"
	CloudInfraService_ListVpcs_FullMethodName              = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVpcs"
	CloudInfraService_GetVpc_FullMethodName                = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVpc"
	CloudInfraService_CreateVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVPCPeer"
	CloudInfraService_DeleteVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVPCPeer"
	CloudInfraService_UpdateVPCPeer_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVPCPeer"
	CloudInfraService_ListVPCPeers_FullMethodName          = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVPCPeers"
	CloudInfraService_GetVPCPeer_FullMethodName            = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVPCPeer"
	CloudInfraService_CreateSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityPolicy"
	CloudInfraService_DeleteSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityPolicy"
	CloudInfraService_UpdateSecurityPolicy_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityPolicy"
	CloudInfraService_ListSecurityPolicys_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityPolicys"
	CloudInfraService_GetSecurityPolicy_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityPolicy"
	CloudInfraService_CreateSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityRule"
	CloudInfraService_DeleteSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityRule"
	CloudInfraService_UpdateSecurityRule_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityRule"
	CloudInfraService_ListSecurityRules_FullMethodName     = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityRules"
	CloudInfraService_GetSecurityRule_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityRule"
	CloudInfraService_CreateSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityProfile"
	CloudInfraService_DeleteSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityProfile"
	CloudInfraService_UpdateSecurityProfile_FullMethodName = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityProfile"
	CloudInfraService_ListSecurityProfiles_FullMethodName  = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityProfiles"
	CloudInfraService_GetSecurityProfile_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityProfile"
	CloudInfraService_CreateOspfRouter_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateOspfRouter"
	CloudInfraService_UpdateOspfRouter_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateOspfRouter"
	CloudInfraService_DeleteOspfRouter_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteOspfRouter"
	CloudInfraService_GetOspfRouter_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetOspfRouter"
	CloudInfraService_ListOspfRouters_FullMethodName       = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListOspfRouters"
	CloudInfraService_CreateOspfArea_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateOspfArea"
	CloudInfraService_UpdateOspfArea_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateOspfArea"
	CloudInfraService_DeleteOspfArea_FullMethodName        = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteOspfArea"
	CloudInfraService_GetOspfArea_FullMethodName           = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetOspfArea"
	CloudInfraService_ListOspfAreas_FullMethodName         = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListOspfAreas"
	CloudInfraService_CreateOspfIfNetwork_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateOspfIfNetwork"
	CloudInfraService_UpdateOspfIfNetwork_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateOspfIfNetwork"
	CloudInfraService_DeleteOspfIfNetwork_FullMethodName   = "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteOspfIfNetwork"
	CloudInfraService_GetOspfIfNetwork_FullMethodName      = "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetOspfIfNetwork"
	CloudInfraService_ListOspfIfNetworks_FullMethodName    = "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListOspfIfNetworks"
)

// CloudInfraServiceClient is the client API for CloudInfraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Cloud Infra APIs - to manage a multi-node cloud infrastructure on a xPU
type CloudInfraServiceClient interface {
	// device capabilities
	GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// port apis
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error)
	ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
	// vnic apis
	CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error)
	GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	// interface apis
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	// routetable apis
	CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	// route apis
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgpRouter(ctx context.Context, in *CreateBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error)
	// BGP Router Delete
	DeleteBgpRouter(ctx context.Context, in *DeleteBgpRouterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// BGP Router Update
	UpdateBgpRouter(ctx context.Context, in *UpdateBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error)
	// BGP Router List
	ListBgpRouters(ctx context.Context, in *ListBgpRoutersRequest, opts ...grpc.CallOption) (*ListBgpRoutersResponse, error)
	// BGP Router Get
	GetBgpRouter(ctx context.Context, in *GetBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error)
	// bgppeer (optional) apis
	CreateBgpPeer(ctx context.Context, in *CreateBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error)
	// BGP Peer Delete
	DeleteBgpPeer(ctx context.Context, in *DeleteBgpPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// BGP Peer Update
	UpdateBgpPeer(ctx context.Context, in *UpdateBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error)
	// BGP Peer List
	ListBgpPeers(ctx context.Context, in *ListBgpPeersRequest, opts ...grpc.CallOption) (*ListBgpPeersResponse, error)
	// BGP Peer Get
	GetBgpPeer(ctx context.Context, in *GetBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error)
	// bgppeeraf (optional) apis
	CreateBgpPeerAf(ctx context.Context, in *CreateBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error)
	// BGP Peer AF Delete
	DeleteBgpPeerAf(ctx context.Context, in *DeleteBgpPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// BGP Peer AF Update
	UpdateBgpPeerAf(ctx context.Context, in *UpdateBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error)
	// BGP Peer AF List
	ListBgpPeerAfs(ctx context.Context, in *ListBgpPeerAfsRequest, opts ...grpc.CallOption) (*ListBgpPeerAfsResponse, error)
	// BGP Peer AF Get
	GetBgpPeerAf(ctx context.Context, in *GetBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error)
	// mapping apis
	CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error)
	GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	// nexthop apis
	CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	ListNextHop(ctx context.Context, in *ListNextHopRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error)
	GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// tunnel apis
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	// vpc apis
	CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error)
	GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error)
	GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error)
	GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	// OSPF APIs
	// Create a OSPF Router. Contains the configuration of the OSPF instance.
	CreateOspfRouter(ctx context.Context, in *CreateOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error)
	// Update a OSPF Router instance
	UpdateOspfRouter(ctx context.Context, in *UpdateOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error)
	// Delete a OSPF instance
	DeleteOspfRouter(ctx context.Context, in *DeleteOspfRouterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an OSPF instance
	GetOspfRouter(ctx context.Context, in *GetOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error)
	// All OSPF instances
	ListOspfRouters(ctx context.Context, in *ListOspfRoutersRequest, opts ...grpc.CallOption) (*ListOspfRoutersResponse, error)
	// Create a OSPF Area
	CreateOspfArea(ctx context.Context, in *CreateOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error)
	// Update an OSPF Area
	UpdateOspfArea(ctx context.Context, in *UpdateOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error)
	// Delete an OSPF Area
	DeleteOspfArea(ctx context.Context, in *DeleteOspfAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an OSPF Area
	GetOspfArea(ctx context.Context, in *GetOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error)
	// List all OSPF Areas
	ListOspfAreas(ctx context.Context, in *ListOspfAreasRequest, opts ...grpc.CallOption) (*ListOspfAreasResponse, error)
	// Create an OSPF IfNetwork
	CreateOspfIfNetwork(ctx context.Context, in *CreateOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error)
	// Update an OSPF IfNetwork
	UpdateOspfIfNetwork(ctx context.Context, in *UpdateOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error)
	// Delete an OSPF IfNetwork
	DeleteOspfIfNetwork(ctx context.Context, in *DeleteOspfIfNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an OSPF IfNetwork
	GetOspfIfNetwork(ctx context.Context, in *GetOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error)
	// List all OSPF IfNetworks
	ListOspfIfNetworks(ctx context.Context, in *ListOspfIfNetworksRequest, opts ...grpc.CallOption) (*ListOspfIfNetworksResponse, error)
}

type cloudInfraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudInfraServiceClient(cc grpc.ClientConnInterface) CloudInfraServiceClient {
	return &cloudInfraServiceClient{cc}
}

func (c *cloudInfraServiceClient) GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceCapabilities)
	err := c.cc.Invoke(ctx, CloudInfraService_GetDeviceCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, CloudInfraService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, CloudInfraService_GetPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVnic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVnic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVnic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVnicsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVnics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vnic)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVnic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Interface)
	err := c.cc.Invoke(ctx, CloudInfraService_GetInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateRouteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteRouteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateRouteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListRouteTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, CloudInfraService_GetRouteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Route)
	err := c.cc.Invoke(ctx, CloudInfraService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateUnderlayRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteUnderlayRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateUnderlayRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnderlayRoutesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListUnderlayRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, CloudInfraService_GetUnderlayRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBgpRouter(ctx context.Context, in *CreateBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBgpRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBgpRouter(ctx context.Context, in *DeleteBgpRouterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBgpRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBgpRouter(ctx context.Context, in *UpdateBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBgpRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBgpRouters(ctx context.Context, in *ListBgpRoutersRequest, opts ...grpc.CallOption) (*ListBgpRoutersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBgpRoutersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBgpRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBgpRouter(ctx context.Context, in *GetBgpRouterRequest, opts ...grpc.CallOption) (*BgpRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBgpRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBgpPeer(ctx context.Context, in *CreateBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBgpPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBgpPeer(ctx context.Context, in *DeleteBgpPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBgpPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBgpPeer(ctx context.Context, in *UpdateBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBgpPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBgpPeers(ctx context.Context, in *ListBgpPeersRequest, opts ...grpc.CallOption) (*ListBgpPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBgpPeersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBgpPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBgpPeer(ctx context.Context, in *GetBgpPeerRequest, opts ...grpc.CallOption) (*BgpPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBgpPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBgpPeerAf(ctx context.Context, in *CreateBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateBgpPeerAf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBgpPeerAf(ctx context.Context, in *DeleteBgpPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteBgpPeerAf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBgpPeerAf(ctx context.Context, in *UpdateBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateBgpPeerAf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBgpPeerAfs(ctx context.Context, in *ListBgpPeerAfsRequest, opts ...grpc.CallOption) (*ListBgpPeerAfsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBgpPeerAfsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListBgpPeerAfs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBgpPeerAf(ctx context.Context, in *GetBgpPeerAfRequest, opts ...grpc.CallOption) (*BgpPeerAf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BgpPeerAf)
	err := c.cc.Invoke(ctx, CloudInfraService_GetBgpPeerAf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMappingsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mapping)
	err := c.cc.Invoke(ctx, CloudInfraService_GetMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHop(ctx context.Context, in *ListNextHopRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNextHopsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHop)
	err := c.cc.Invoke(ctx, CloudInfraService_GetNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNextHopGroupsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListNextHopGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, CloudInfraService_GetNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSubnets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subnet)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListTunnels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, CloudInfraService_GetTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVpcsResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVpcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vpc)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateVPCPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteVPCPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateVPCPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCPeersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListVPCPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, CloudInfraService_GetVPCPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityPolicysResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityPolicys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityRulesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateSecurityProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteSecurityProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateSecurityProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityProfilesResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListSecurityProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, CloudInfraService_GetSecurityProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateOspfRouter(ctx context.Context, in *CreateOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateOspfRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateOspfRouter(ctx context.Context, in *UpdateOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateOspfRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteOspfRouter(ctx context.Context, in *DeleteOspfRouterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteOspfRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetOspfRouter(ctx context.Context, in *GetOspfRouterRequest, opts ...grpc.CallOption) (*OspfRouter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfRouter)
	err := c.cc.Invoke(ctx, CloudInfraService_GetOspfRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListOspfRouters(ctx context.Context, in *ListOspfRoutersRequest, opts ...grpc.CallOption) (*ListOspfRoutersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOspfRoutersResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListOspfRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateOspfArea(ctx context.Context, in *CreateOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfArea)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateOspfArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateOspfArea(ctx context.Context, in *UpdateOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfArea)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateOspfArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteOspfArea(ctx context.Context, in *DeleteOspfAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteOspfArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetOspfArea(ctx context.Context, in *GetOspfAreaRequest, opts ...grpc.CallOption) (*OspfArea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfArea)
	err := c.cc.Invoke(ctx, CloudInfraService_GetOspfArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListOspfAreas(ctx context.Context, in *ListOspfAreasRequest, opts ...grpc.CallOption) (*ListOspfAreasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOspfAreasResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListOspfAreas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateOspfIfNetwork(ctx context.Context, in *CreateOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfIfNetwork)
	err := c.cc.Invoke(ctx, CloudInfraService_CreateOspfIfNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateOspfIfNetwork(ctx context.Context, in *UpdateOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfIfNetwork)
	err := c.cc.Invoke(ctx, CloudInfraService_UpdateOspfIfNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteOspfIfNetwork(ctx context.Context, in *DeleteOspfIfNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudInfraService_DeleteOspfIfNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetOspfIfNetwork(ctx context.Context, in *GetOspfIfNetworkRequest, opts ...grpc.CallOption) (*OspfIfNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OspfIfNetwork)
	err := c.cc.Invoke(ctx, CloudInfraService_GetOspfIfNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListOspfIfNetworks(ctx context.Context, in *ListOspfIfNetworksRequest, opts ...grpc.CallOption) (*ListOspfIfNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOspfIfNetworksResponse)
	err := c.cc.Invoke(ctx, CloudInfraService_ListOspfIfNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudInfraServiceServer is the server API for CloudInfraService service.
// All implementations must embed UnimplementedCloudInfraServiceServer
// for forward compatibility.
//
// Cloud Infra APIs - to manage a multi-node cloud infrastructure on a xPU
type CloudInfraServiceServer interface {
	// device capabilities
	GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// port apis
	UpdatePort(context.Context, *UpdatePortRequest) (*Port, error)
	ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error)
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	// vnic apis
	CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error)
	DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error)
	UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error)
	ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error)
	GetVnic(context.Context, *GetVnicRequest) (*Vnic, error)
	// interface apis
	CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error)
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error)
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error)
	// routetable apis
	CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error)
	DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error)
	UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error)
	ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error)
	// route apis
	CreateRoute(context.Context, *CreateRouteRequest) (*Route, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error)
	UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error)
	DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error)
	UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error)
	ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgpRouter(context.Context, *CreateBgpRouterRequest) (*BgpRouter, error)
	// BGP Router Delete
	DeleteBgpRouter(context.Context, *DeleteBgpRouterRequest) (*emptypb.Empty, error)
	// BGP Router Update
	UpdateBgpRouter(context.Context, *UpdateBgpRouterRequest) (*BgpRouter, error)
	// BGP Router List
	ListBgpRouters(context.Context, *ListBgpRoutersRequest) (*ListBgpRoutersResponse, error)
	// BGP Router Get
	GetBgpRouter(context.Context, *GetBgpRouterRequest) (*BgpRouter, error)
	// bgppeer (optional) apis
	CreateBgpPeer(context.Context, *CreateBgpPeerRequest) (*BgpPeer, error)
	// BGP Peer Delete
	DeleteBgpPeer(context.Context, *DeleteBgpPeerRequest) (*emptypb.Empty, error)
	// BGP Peer Update
	UpdateBgpPeer(context.Context, *UpdateBgpPeerRequest) (*BgpPeer, error)
	// BGP Peer List
	ListBgpPeers(context.Context, *ListBgpPeersRequest) (*ListBgpPeersResponse, error)
	// BGP Peer Get
	GetBgpPeer(context.Context, *GetBgpPeerRequest) (*BgpPeer, error)
	// bgppeeraf (optional) apis
	CreateBgpPeerAf(context.Context, *CreateBgpPeerAfRequest) (*BgpPeerAf, error)
	// BGP Peer AF Delete
	DeleteBgpPeerAf(context.Context, *DeleteBgpPeerAfRequest) (*emptypb.Empty, error)
	// BGP Peer AF Update
	UpdateBgpPeerAf(context.Context, *UpdateBgpPeerAfRequest) (*BgpPeerAf, error)
	// BGP Peer AF List
	ListBgpPeerAfs(context.Context, *ListBgpPeerAfsRequest) (*ListBgpPeerAfsResponse, error)
	// BGP Peer AF Get
	GetBgpPeerAf(context.Context, *GetBgpPeerAfRequest) (*BgpPeerAf, error)
	// mapping apis
	CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error)
	DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error)
	UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error)
	ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error)
	GetMapping(context.Context, *GetMappingRequest) (*Mapping, error)
	// nexthop apis
	CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error)
	DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error)
	UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error)
	ListNextHop(context.Context, *ListNextHopRequest) (*ListNextHopsResponse, error)
	GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error)
	DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error)
	UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error)
	ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error)
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error)
	// tunnel apis
	CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error)
	ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error)
	// vpc apis
	CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error)
	DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error)
	UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error)
	ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error)
	GetVpc(context.Context, *GetVpcRequest) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error)
	DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error)
	UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error)
	ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error)
	GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error)
	DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error)
	UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error)
	ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error)
	DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error)
	UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error)
	ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error)
	GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error)
	DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error)
	UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error)
	ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error)
	// OSPF APIs
	// Create a OSPF Router. Contains the configuration of the OSPF instance.
	CreateOspfRouter(context.Context, *CreateOspfRouterRequest) (*OspfRouter, error)
	// Update a OSPF Router instance
	UpdateOspfRouter(context.Context, *UpdateOspfRouterRequest) (*OspfRouter, error)
	// Delete a OSPF instance
	DeleteOspfRouter(context.Context, *DeleteOspfRouterRequest) (*emptypb.Empty, error)
	// Get an OSPF instance
	GetOspfRouter(context.Context, *GetOspfRouterRequest) (*OspfRouter, error)
	// All OSPF instances
	ListOspfRouters(context.Context, *ListOspfRoutersRequest) (*ListOspfRoutersResponse, error)
	// Create a OSPF Area
	CreateOspfArea(context.Context, *CreateOspfAreaRequest) (*OspfArea, error)
	// Update an OSPF Area
	UpdateOspfArea(context.Context, *UpdateOspfAreaRequest) (*OspfArea, error)
	// Delete an OSPF Area
	DeleteOspfArea(context.Context, *DeleteOspfAreaRequest) (*emptypb.Empty, error)
	// Get an OSPF Area
	GetOspfArea(context.Context, *GetOspfAreaRequest) (*OspfArea, error)
	// List all OSPF Areas
	ListOspfAreas(context.Context, *ListOspfAreasRequest) (*ListOspfAreasResponse, error)
	// Create an OSPF IfNetwork
	CreateOspfIfNetwork(context.Context, *CreateOspfIfNetworkRequest) (*OspfIfNetwork, error)
	// Update an OSPF IfNetwork
	UpdateOspfIfNetwork(context.Context, *UpdateOspfIfNetworkRequest) (*OspfIfNetwork, error)
	// Delete an OSPF IfNetwork
	DeleteOspfIfNetwork(context.Context, *DeleteOspfIfNetworkRequest) (*emptypb.Empty, error)
	// Get an OSPF IfNetwork
	GetOspfIfNetwork(context.Context, *GetOspfIfNetworkRequest) (*OspfIfNetwork, error)
	// List all OSPF IfNetworks
	ListOspfIfNetworks(context.Context, *ListOspfIfNetworksRequest) (*ListOspfIfNetworksResponse, error)
	mustEmbedUnimplementedCloudInfraServiceServer()
}

// UnimplementedCloudInfraServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudInfraServiceServer struct{}

func (UnimplementedCloudInfraServiceServer) GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCapabilities not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVnics not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVnic(context.Context, *GetVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVnic not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteTables not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTable not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetRoute(context.Context, *GetRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnderlayRoutes not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnderlayRoute not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBgpRouter(context.Context, *CreateBgpRouterRequest) (*BgpRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBgpRouter(context.Context, *DeleteBgpRouterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBgpRouter(context.Context, *UpdateBgpRouterRequest) (*BgpRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgpRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBgpRouters(context.Context, *ListBgpRoutersRequest) (*ListBgpRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBgpRouters not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBgpRouter(context.Context, *GetBgpRouterRequest) (*BgpRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgpRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBgpPeer(context.Context, *CreateBgpPeerRequest) (*BgpPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBgpPeer(context.Context, *DeleteBgpPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBgpPeer(context.Context, *UpdateBgpPeerRequest) (*BgpPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgpPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBgpPeers(context.Context, *ListBgpPeersRequest) (*ListBgpPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBgpPeers not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBgpPeer(context.Context, *GetBgpPeerRequest) (*BgpPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgpPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateBgpPeerAf(context.Context, *CreateBgpPeerAfRequest) (*BgpPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteBgpPeerAf(context.Context, *DeleteBgpPeerAfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateBgpPeerAf(context.Context, *UpdateBgpPeerAfRequest) (*BgpPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgpPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListBgpPeerAfs(context.Context, *ListBgpPeerAfsRequest) (*ListBgpPeerAfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBgpPeerAfs not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetBgpPeerAf(context.Context, *GetBgpPeerAfRequest) (*BgpPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgpPeerAf not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappings not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetMapping(context.Context, *GetMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapping not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListNextHop(context.Context, *ListNextHopRequest) (*ListNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHop not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHopGroups not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroup not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnels not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpcs not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVpc(context.Context, *GetVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpc not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCPeers not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCPeer not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityPolicys not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityPolicy not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityRules not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRule not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityProfiles not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityProfile not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateOspfRouter(context.Context, *CreateOspfRouterRequest) (*OspfRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOspfRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateOspfRouter(context.Context, *UpdateOspfRouterRequest) (*OspfRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOspfRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteOspfRouter(context.Context, *DeleteOspfRouterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOspfRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetOspfRouter(context.Context, *GetOspfRouterRequest) (*OspfRouter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOspfRouter not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListOspfRouters(context.Context, *ListOspfRoutersRequest) (*ListOspfRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOspfRouters not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateOspfArea(context.Context, *CreateOspfAreaRequest) (*OspfArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOspfArea not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateOspfArea(context.Context, *UpdateOspfAreaRequest) (*OspfArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOspfArea not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteOspfArea(context.Context, *DeleteOspfAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOspfArea not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetOspfArea(context.Context, *GetOspfAreaRequest) (*OspfArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOspfArea not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListOspfAreas(context.Context, *ListOspfAreasRequest) (*ListOspfAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOspfAreas not implemented")
}
func (UnimplementedCloudInfraServiceServer) CreateOspfIfNetwork(context.Context, *CreateOspfIfNetworkRequest) (*OspfIfNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOspfIfNetwork not implemented")
}
func (UnimplementedCloudInfraServiceServer) UpdateOspfIfNetwork(context.Context, *UpdateOspfIfNetworkRequest) (*OspfIfNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOspfIfNetwork not implemented")
}
func (UnimplementedCloudInfraServiceServer) DeleteOspfIfNetwork(context.Context, *DeleteOspfIfNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOspfIfNetwork not implemented")
}
func (UnimplementedCloudInfraServiceServer) GetOspfIfNetwork(context.Context, *GetOspfIfNetworkRequest) (*OspfIfNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOspfIfNetwork not implemented")
}
func (UnimplementedCloudInfraServiceServer) ListOspfIfNetworks(context.Context, *ListOspfIfNetworksRequest) (*ListOspfIfNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOspfIfNetworks not implemented")
}
func (UnimplementedCloudInfraServiceServer) mustEmbedUnimplementedCloudInfraServiceServer() {}
func (UnimplementedCloudInfraServiceServer) testEmbeddedByValue()                           {}

// UnsafeCloudInfraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudInfraServiceServer will
// result in compilation errors.
type UnsafeCloudInfraServiceServer interface {
	mustEmbedUnimplementedCloudInfraServiceServer()
}

func RegisterCloudInfraServiceServer(s grpc.ServiceRegistrar, srv CloudInfraServiceServer) {
	// If the following call pancis, it indicates UnimplementedCloudInfraServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudInfraService_ServiceDesc, srv)
}

func _CloudInfraService_GetDeviceCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetDeviceCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, req.(*GetDeviceCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, req.(*ListPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, req.(*CreateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, req.(*DeleteVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, req.(*UpdateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVnics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVnicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVnics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, req.(*ListVnicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVnic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, req.(*GetVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, req.(*DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, req.(*UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListRouteTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetRouteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, req.(*GetRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, req.(*UpdateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, req.(*CreateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, req.(*DeleteUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, req.(*UpdateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListUnderlayRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnderlayRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListUnderlayRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, req.(*ListUnderlayRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetUnderlayRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, req.(*GetUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBgpRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBgpRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBgpRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBgpRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBgpRouter(ctx, req.(*CreateBgpRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBgpRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBgpRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBgpRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBgpRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBgpRouter(ctx, req.(*DeleteBgpRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBgpRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBgpRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBgpRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBgpRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBgpRouter(ctx, req.(*UpdateBgpRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBgpRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBgpRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBgpRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBgpRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBgpRouters(ctx, req.(*ListBgpRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBgpRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBgpRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBgpRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBgpRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBgpRouter(ctx, req.(*GetBgpRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBgpPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBgpPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBgpPeer(ctx, req.(*CreateBgpPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBgpPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBgpPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBgpPeer(ctx, req.(*DeleteBgpPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBgpPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBgpPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBgpPeer(ctx, req.(*UpdateBgpPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBgpPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBgpPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBgpPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBgpPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBgpPeers(ctx, req.(*ListBgpPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBgpPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBgpPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBgpPeer(ctx, req.(*GetBgpPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBgpPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBgpPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBgpPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateBgpPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBgpPeerAf(ctx, req.(*CreateBgpPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBgpPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBgpPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBgpPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteBgpPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBgpPeerAf(ctx, req.(*DeleteBgpPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBgpPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBgpPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBgpPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateBgpPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBgpPeerAf(ctx, req.(*UpdateBgpPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBgpPeerAfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBgpPeerAfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBgpPeerAfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListBgpPeerAfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBgpPeerAfs(ctx, req.(*ListBgpPeerAfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBgpPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBgpPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBgpPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetBgpPeerAf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBgpPeerAf(ctx, req.(*GetBgpPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, req.(*CreateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, req.(*UpdateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, req.(*ListMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, req.(*GetMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, req.(*CreateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, req.(*DeleteNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, req.(*UpdateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, req.(*ListNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, req.(*GetNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, req.(*CreateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, req.(*DeleteNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, req.(*UpdateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListNextHopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, req.(*ListNextHopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, req.(*GetNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, req.(*ListTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, req.(*CreateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, req.(*DeleteVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, req.(*UpdateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVpcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, req.(*ListVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, req.(*GetVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, req.(*CreateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, req.(*DeleteVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, req.(*UpdateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVPCPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListVPCPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, req.(*ListVPCPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetVPCPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, req.(*GetVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, req.(*CreateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, req.(*DeleteSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, req.(*UpdateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityPolicys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityPolicysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityPolicys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, req.(*ListSecurityPolicysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, req.(*GetSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, req.(*CreateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, req.(*DeleteSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, req.(*UpdateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, req.(*ListSecurityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, req.(*GetSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, req.(*CreateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, req.(*DeleteSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, req.(*UpdateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListSecurityProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, req.(*ListSecurityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetSecurityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, req.(*GetSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateOspfRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOspfRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateOspfRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateOspfRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateOspfRouter(ctx, req.(*CreateOspfRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateOspfRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOspfRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateOspfRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateOspfRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateOspfRouter(ctx, req.(*UpdateOspfRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteOspfRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOspfRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteOspfRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteOspfRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteOspfRouter(ctx, req.(*DeleteOspfRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetOspfRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOspfRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetOspfRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetOspfRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetOspfRouter(ctx, req.(*GetOspfRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListOspfRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOspfRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListOspfRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListOspfRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListOspfRouters(ctx, req.(*ListOspfRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateOspfArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOspfAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateOspfArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateOspfArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateOspfArea(ctx, req.(*CreateOspfAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateOspfArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOspfAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateOspfArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateOspfArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateOspfArea(ctx, req.(*UpdateOspfAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteOspfArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOspfAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteOspfArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteOspfArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteOspfArea(ctx, req.(*DeleteOspfAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetOspfArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOspfAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetOspfArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetOspfArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetOspfArea(ctx, req.(*GetOspfAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListOspfAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOspfAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListOspfAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListOspfAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListOspfAreas(ctx, req.(*ListOspfAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateOspfIfNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOspfIfNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateOspfIfNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_CreateOspfIfNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateOspfIfNetwork(ctx, req.(*CreateOspfIfNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateOspfIfNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOspfIfNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateOspfIfNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_UpdateOspfIfNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateOspfIfNetwork(ctx, req.(*UpdateOspfIfNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteOspfIfNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOspfIfNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteOspfIfNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_DeleteOspfIfNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteOspfIfNetwork(ctx, req.(*DeleteOspfIfNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetOspfIfNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOspfIfNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetOspfIfNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_GetOspfIfNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetOspfIfNetwork(ctx, req.(*GetOspfIfNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListOspfIfNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOspfIfNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListOspfIfNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudInfraService_ListOspfIfNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListOspfIfNetworks(ctx, req.(*ListOspfIfNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudInfraService_ServiceDesc is the grpc.ServiceDesc for CloudInfraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudInfraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.cloud.v1alpha1.CloudInfraService",
	HandlerType: (*CloudInfraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceCapabilities",
			Handler:    _CloudInfraService_GetDeviceCapabilities_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _CloudInfraService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _CloudInfraService_DeleteDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _CloudInfraService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _CloudInfraService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _CloudInfraService_GetDevice_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _CloudInfraService_UpdatePort_Handler,
		},
		{
			MethodName: "ListPorts",
			Handler:    _CloudInfraService_ListPorts_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _CloudInfraService_GetPort_Handler,
		},
		{
			MethodName: "CreateVnic",
			Handler:    _CloudInfraService_CreateVnic_Handler,
		},
		{
			MethodName: "DeleteVnic",
			Handler:    _CloudInfraService_DeleteVnic_Handler,
		},
		{
			MethodName: "UpdateVnic",
			Handler:    _CloudInfraService_UpdateVnic_Handler,
		},
		{
			MethodName: "ListVnics",
			Handler:    _CloudInfraService_ListVnics_Handler,
		},
		{
			MethodName: "GetVnic",
			Handler:    _CloudInfraService_GetVnic_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _CloudInfraService_CreateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _CloudInfraService_DeleteInterface_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _CloudInfraService_UpdateInterface_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _CloudInfraService_ListInterfaces_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _CloudInfraService_GetInterface_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _CloudInfraService_CreateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _CloudInfraService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "UpdateRouteTable",
			Handler:    _CloudInfraService_UpdateRouteTable_Handler,
		},
		{
			MethodName: "ListRouteTables",
			Handler:    _CloudInfraService_ListRouteTables_Handler,
		},
		{
			MethodName: "GetRouteTable",
			Handler:    _CloudInfraService_GetRouteTable_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _CloudInfraService_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _CloudInfraService_DeleteRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _CloudInfraService_UpdateRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _CloudInfraService_ListRoutes_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _CloudInfraService_GetRoute_Handler,
		},
		{
			MethodName: "CreateUnderlayRoute",
			Handler:    _CloudInfraService_CreateUnderlayRoute_Handler,
		},
		{
			MethodName: "DeleteUnderlayRoute",
			Handler:    _CloudInfraService_DeleteUnderlayRoute_Handler,
		},
		{
			MethodName: "UpdateUnderlayRoute",
			Handler:    _CloudInfraService_UpdateUnderlayRoute_Handler,
		},
		{
			MethodName: "ListUnderlayRoutes",
			Handler:    _CloudInfraService_ListUnderlayRoutes_Handler,
		},
		{
			MethodName: "GetUnderlayRoute",
			Handler:    _CloudInfraService_GetUnderlayRoute_Handler,
		},
		{
			MethodName: "CreateBgpRouter",
			Handler:    _CloudInfraService_CreateBgpRouter_Handler,
		},
		{
			MethodName: "DeleteBgpRouter",
			Handler:    _CloudInfraService_DeleteBgpRouter_Handler,
		},
		{
			MethodName: "UpdateBgpRouter",
			Handler:    _CloudInfraService_UpdateBgpRouter_Handler,
		},
		{
			MethodName: "ListBgpRouters",
			Handler:    _CloudInfraService_ListBgpRouters_Handler,
		},
		{
			MethodName: "GetBgpRouter",
			Handler:    _CloudInfraService_GetBgpRouter_Handler,
		},
		{
			MethodName: "CreateBgpPeer",
			Handler:    _CloudInfraService_CreateBgpPeer_Handler,
		},
		{
			MethodName: "DeleteBgpPeer",
			Handler:    _CloudInfraService_DeleteBgpPeer_Handler,
		},
		{
			MethodName: "UpdateBgpPeer",
			Handler:    _CloudInfraService_UpdateBgpPeer_Handler,
		},
		{
			MethodName: "ListBgpPeers",
			Handler:    _CloudInfraService_ListBgpPeers_Handler,
		},
		{
			MethodName: "GetBgpPeer",
			Handler:    _CloudInfraService_GetBgpPeer_Handler,
		},
		{
			MethodName: "CreateBgpPeerAf",
			Handler:    _CloudInfraService_CreateBgpPeerAf_Handler,
		},
		{
			MethodName: "DeleteBgpPeerAf",
			Handler:    _CloudInfraService_DeleteBgpPeerAf_Handler,
		},
		{
			MethodName: "UpdateBgpPeerAf",
			Handler:    _CloudInfraService_UpdateBgpPeerAf_Handler,
		},
		{
			MethodName: "ListBgpPeerAfs",
			Handler:    _CloudInfraService_ListBgpPeerAfs_Handler,
		},
		{
			MethodName: "GetBgpPeerAf",
			Handler:    _CloudInfraService_GetBgpPeerAf_Handler,
		},
		{
			MethodName: "CreateMapping",
			Handler:    _CloudInfraService_CreateMapping_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _CloudInfraService_DeleteMapping_Handler,
		},
		{
			MethodName: "UpdateMapping",
			Handler:    _CloudInfraService_UpdateMapping_Handler,
		},
		{
			MethodName: "ListMappings",
			Handler:    _CloudInfraService_ListMappings_Handler,
		},
		{
			MethodName: "GetMapping",
			Handler:    _CloudInfraService_GetMapping_Handler,
		},
		{
			MethodName: "CreateNextHop",
			Handler:    _CloudInfraService_CreateNextHop_Handler,
		},
		{
			MethodName: "DeleteNextHop",
			Handler:    _CloudInfraService_DeleteNextHop_Handler,
		},
		{
			MethodName: "UpdateNextHop",
			Handler:    _CloudInfraService_UpdateNextHop_Handler,
		},
		{
			MethodName: "ListNextHop",
			Handler:    _CloudInfraService_ListNextHop_Handler,
		},
		{
			MethodName: "GetNextHop",
			Handler:    _CloudInfraService_GetNextHop_Handler,
		},
		{
			MethodName: "CreateNextHopGroup",
			Handler:    _CloudInfraService_CreateNextHopGroup_Handler,
		},
		{
			MethodName: "DeleteNextHopGroup",
			Handler:    _CloudInfraService_DeleteNextHopGroup_Handler,
		},
		{
			MethodName: "UpdateNextHopGroup",
			Handler:    _CloudInfraService_UpdateNextHopGroup_Handler,
		},
		{
			MethodName: "ListNextHopGroups",
			Handler:    _CloudInfraService_ListNextHopGroups_Handler,
		},
		{
			MethodName: "GetNextHopGroup",
			Handler:    _CloudInfraService_GetNextHopGroup_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _CloudInfraService_CreateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _CloudInfraService_DeleteSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _CloudInfraService_UpdateSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _CloudInfraService_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _CloudInfraService_GetSubnet_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _CloudInfraService_CreateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _CloudInfraService_DeleteTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _CloudInfraService_UpdateTunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _CloudInfraService_ListTunnels_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _CloudInfraService_GetTunnel_Handler,
		},
		{
			MethodName: "CreateVpc",
			Handler:    _CloudInfraService_CreateVpc_Handler,
		},
		{
			MethodName: "DeleteVpc",
			Handler:    _CloudInfraService_DeleteVpc_Handler,
		},
		{
			MethodName: "UpdateVpc",
			Handler:    _CloudInfraService_UpdateVpc_Handler,
		},
		{
			MethodName: "ListVpcs",
			Handler:    _CloudInfraService_ListVpcs_Handler,
		},
		{
			MethodName: "GetVpc",
			Handler:    _CloudInfraService_GetVpc_Handler,
		},
		{
			MethodName: "CreateVPCPeer",
			Handler:    _CloudInfraService_CreateVPCPeer_Handler,
		},
		{
			MethodName: "DeleteVPCPeer",
			Handler:    _CloudInfraService_DeleteVPCPeer_Handler,
		},
		{
			MethodName: "UpdateVPCPeer",
			Handler:    _CloudInfraService_UpdateVPCPeer_Handler,
		},
		{
			MethodName: "ListVPCPeers",
			Handler:    _CloudInfraService_ListVPCPeers_Handler,
		},
		{
			MethodName: "GetVPCPeer",
			Handler:    _CloudInfraService_GetVPCPeer_Handler,
		},
		{
			MethodName: "CreateSecurityPolicy",
			Handler:    _CloudInfraService_CreateSecurityPolicy_Handler,
		},
		{
			MethodName: "DeleteSecurityPolicy",
			Handler:    _CloudInfraService_DeleteSecurityPolicy_Handler,
		},
		{
			MethodName: "UpdateSecurityPolicy",
			Handler:    _CloudInfraService_UpdateSecurityPolicy_Handler,
		},
		{
			MethodName: "ListSecurityPolicys",
			Handler:    _CloudInfraService_ListSecurityPolicys_Handler,
		},
		{
			MethodName: "GetSecurityPolicy",
			Handler:    _CloudInfraService_GetSecurityPolicy_Handler,
		},
		{
			MethodName: "CreateSecurityRule",
			Handler:    _CloudInfraService_CreateSecurityRule_Handler,
		},
		{
			MethodName: "DeleteSecurityRule",
			Handler:    _CloudInfraService_DeleteSecurityRule_Handler,
		},
		{
			MethodName: "UpdateSecurityRule",
			Handler:    _CloudInfraService_UpdateSecurityRule_Handler,
		},
		{
			MethodName: "ListSecurityRules",
			Handler:    _CloudInfraService_ListSecurityRules_Handler,
		},
		{
			MethodName: "GetSecurityRule",
			Handler:    _CloudInfraService_GetSecurityRule_Handler,
		},
		{
			MethodName: "CreateSecurityProfile",
			Handler:    _CloudInfraService_CreateSecurityProfile_Handler,
		},
		{
			MethodName: "DeleteSecurityProfile",
			Handler:    _CloudInfraService_DeleteSecurityProfile_Handler,
		},
		{
			MethodName: "UpdateSecurityProfile",
			Handler:    _CloudInfraService_UpdateSecurityProfile_Handler,
		},
		{
			MethodName: "ListSecurityProfiles",
			Handler:    _CloudInfraService_ListSecurityProfiles_Handler,
		},
		{
			MethodName: "GetSecurityProfile",
			Handler:    _CloudInfraService_GetSecurityProfile_Handler,
		},
		{
			MethodName: "CreateOspfRouter",
			Handler:    _CloudInfraService_CreateOspfRouter_Handler,
		},
		{
			MethodName: "UpdateOspfRouter",
			Handler:    _CloudInfraService_UpdateOspfRouter_Handler,
		},
		{
			MethodName: "DeleteOspfRouter",
			Handler:    _CloudInfraService_DeleteOspfRouter_Handler,
		},
		{
			MethodName: "GetOspfRouter",
			Handler:    _CloudInfraService_GetOspfRouter_Handler,
		},
		{
			MethodName: "ListOspfRouters",
			Handler:    _CloudInfraService_ListOspfRouters_Handler,
		},
		{
			MethodName: "CreateOspfArea",
			Handler:    _CloudInfraService_CreateOspfArea_Handler,
		},
		{
			MethodName: "UpdateOspfArea",
			Handler:    _CloudInfraService_UpdateOspfArea_Handler,
		},
		{
			MethodName: "DeleteOspfArea",
			Handler:    _CloudInfraService_DeleteOspfArea_Handler,
		},
		{
			MethodName: "GetOspfArea",
			Handler:    _CloudInfraService_GetOspfArea_Handler,
		},
		{
			MethodName: "ListOspfAreas",
			Handler:    _CloudInfraService_ListOspfAreas_Handler,
		},
		{
			MethodName: "CreateOspfIfNetwork",
			Handler:    _CloudInfraService_CreateOspfIfNetwork_Handler,
		},
		{
			MethodName: "UpdateOspfIfNetwork",
			Handler:    _CloudInfraService_UpdateOspfIfNetwork_Handler,
		},
		{
			MethodName: "DeleteOspfIfNetwork",
			Handler:    _CloudInfraService_DeleteOspfIfNetwork_Handler,
		},
		{
			MethodName: "GetOspfIfNetwork",
			Handler:    _CloudInfraService_GetOspfIfNetwork_Handler,
		},
		{
			MethodName: "ListOspfIfNetworks",
			Handler:    _CloudInfraService_ListOspfIfNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/cloud/cloudrpc.proto",
}
