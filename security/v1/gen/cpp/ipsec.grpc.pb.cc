// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ipsec.proto

#include "ipsec.pb.h"
#include "ipsec.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace opi_api {
namespace security {
namespace v1 {

static const char* IPsecService_method_names[] = {
  "/opi_api.security.v1.IPsecService/IPsecVersion",
  "/opi_api.security.v1.IPsecService/IPsecStats",
  "/opi_api.security.v1.IPsecService/IPsecInitiate",
  "/opi_api.security.v1.IPsecService/IPsecTerminate",
  "/opi_api.security.v1.IPsecService/IPsecRekey",
  "/opi_api.security.v1.IPsecService/IPsecListSas",
  "/opi_api.security.v1.IPsecService/IPsecListConns",
  "/opi_api.security.v1.IPsecService/IPsecListCerts",
  "/opi_api.security.v1.IPsecService/IPsecLoadConn",
  "/opi_api.security.v1.IPsecService/IPsecUnloadConn",
};

std::unique_ptr< IPsecService::Stub> IPsecService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IPsecService::Stub> stub(new IPsecService::Stub(channel, options));
  return stub;
}

IPsecService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IPsecVersion_(IPsecService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecStats_(IPsecService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecInitiate_(IPsecService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecTerminate_(IPsecService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecRekey_(IPsecService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecListSas_(IPsecService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecListConns_(IPsecService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecListCerts_(IPsecService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecLoadConn_(IPsecService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IPsecUnloadConn_(IPsecService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IPsecService::Stub::IPsecVersion(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecVersionRequest& request, ::opi_api::security::v1::IPsecVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecVersionRequest, ::opi_api::security::v1::IPsecVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecVersion_, context, request, response);
}

void IPsecService::Stub::async::IPsecVersion(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecVersionRequest* request, ::opi_api::security::v1::IPsecVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecVersionRequest, ::opi_api::security::v1::IPsecVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecVersion_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecVersion(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecVersionRequest* request, ::opi_api::security::v1::IPsecVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecVersionResponse>* IPsecService::Stub::PrepareAsyncIPsecVersionRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecVersionResponse, ::opi_api::security::v1::IPsecVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecVersionResponse>* IPsecService::Stub::AsyncIPsecVersionRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecStats(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecStatsRequest& request, ::opi_api::security::v1::IPsecStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecStatsRequest, ::opi_api::security::v1::IPsecStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecStats_, context, request, response);
}

void IPsecService::Stub::async::IPsecStats(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecStatsRequest* request, ::opi_api::security::v1::IPsecStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecStatsRequest, ::opi_api::security::v1::IPsecStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecStats_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecStats(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecStatsRequest* request, ::opi_api::security::v1::IPsecStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecStatsResponse>* IPsecService::Stub::PrepareAsyncIPsecStatsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecStatsResponse, ::opi_api::security::v1::IPsecStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecStatsResponse>* IPsecService::Stub::AsyncIPsecStatsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecInitiate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecInitiateRequest& request, ::opi_api::security::v1::IPsecInitiateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecInitiateRequest, ::opi_api::security::v1::IPsecInitiateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecInitiate_, context, request, response);
}

void IPsecService::Stub::async::IPsecInitiate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecInitiateRequest* request, ::opi_api::security::v1::IPsecInitiateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecInitiateRequest, ::opi_api::security::v1::IPsecInitiateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecInitiate_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecInitiate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecInitiateRequest* request, ::opi_api::security::v1::IPsecInitiateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecInitiate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecInitiateResponse>* IPsecService::Stub::PrepareAsyncIPsecInitiateRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecInitiateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecInitiateResponse, ::opi_api::security::v1::IPsecInitiateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecInitiate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecInitiateResponse>* IPsecService::Stub::AsyncIPsecInitiateRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecInitiateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecInitiateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecTerminate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecTerminateRequest& request, ::opi_api::security::v1::IPsecTerminateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecTerminateRequest, ::opi_api::security::v1::IPsecTerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecTerminate_, context, request, response);
}

void IPsecService::Stub::async::IPsecTerminate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecTerminateRequest* request, ::opi_api::security::v1::IPsecTerminateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecTerminateRequest, ::opi_api::security::v1::IPsecTerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecTerminate_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecTerminate(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecTerminateRequest* request, ::opi_api::security::v1::IPsecTerminateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecTerminate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecTerminateResponse>* IPsecService::Stub::PrepareAsyncIPsecTerminateRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecTerminateResponse, ::opi_api::security::v1::IPsecTerminateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecTerminate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecTerminateResponse>* IPsecService::Stub::AsyncIPsecTerminateRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecTerminateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecRekey(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecRekeyRequest& request, ::opi_api::security::v1::IPsecRekeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecRekeyRequest, ::opi_api::security::v1::IPsecRekeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecRekey_, context, request, response);
}

void IPsecService::Stub::async::IPsecRekey(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecRekeyRequest* request, ::opi_api::security::v1::IPsecRekeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecRekeyRequest, ::opi_api::security::v1::IPsecRekeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecRekey_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecRekey(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecRekeyRequest* request, ::opi_api::security::v1::IPsecRekeyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecRekey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecRekeyResponse>* IPsecService::Stub::PrepareAsyncIPsecRekeyRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecRekeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecRekeyResponse, ::opi_api::security::v1::IPsecRekeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecRekey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecRekeyResponse>* IPsecService::Stub::AsyncIPsecRekeyRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecRekeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecRekeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecListSas(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListSasRequest& request, ::opi_api::security::v1::IPsecListSasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecListSasRequest, ::opi_api::security::v1::IPsecListSasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecListSas_, context, request, response);
}

void IPsecService::Stub::async::IPsecListSas(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListSasRequest* request, ::opi_api::security::v1::IPsecListSasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecListSasRequest, ::opi_api::security::v1::IPsecListSasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListSas_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecListSas(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListSasRequest* request, ::opi_api::security::v1::IPsecListSasResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListSas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListSasResponse>* IPsecService::Stub::PrepareAsyncIPsecListSasRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListSasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecListSasResponse, ::opi_api::security::v1::IPsecListSasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecListSas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListSasResponse>* IPsecService::Stub::AsyncIPsecListSasRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListSasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecListSasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecListConns(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListConnsRequest& request, ::opi_api::security::v1::IPsecListConnsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecListConnsRequest, ::opi_api::security::v1::IPsecListConnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecListConns_, context, request, response);
}

void IPsecService::Stub::async::IPsecListConns(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListConnsRequest* request, ::opi_api::security::v1::IPsecListConnsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecListConnsRequest, ::opi_api::security::v1::IPsecListConnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListConns_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecListConns(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListConnsRequest* request, ::opi_api::security::v1::IPsecListConnsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListConns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListConnsResponse>* IPsecService::Stub::PrepareAsyncIPsecListConnsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListConnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecListConnsResponse, ::opi_api::security::v1::IPsecListConnsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecListConns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListConnsResponse>* IPsecService::Stub::AsyncIPsecListConnsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListConnsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecListConnsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecListCerts(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListCertsRequest& request, ::opi_api::security::v1::IPsecListCertsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecListCertsRequest, ::opi_api::security::v1::IPsecListCertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecListCerts_, context, request, response);
}

void IPsecService::Stub::async::IPsecListCerts(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListCertsRequest* request, ::opi_api::security::v1::IPsecListCertsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecListCertsRequest, ::opi_api::security::v1::IPsecListCertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListCerts_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecListCerts(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListCertsRequest* request, ::opi_api::security::v1::IPsecListCertsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecListCerts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListCertsResponse>* IPsecService::Stub::PrepareAsyncIPsecListCertsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListCertsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecListCertsResponse, ::opi_api::security::v1::IPsecListCertsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecListCerts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecListCertsResponse>* IPsecService::Stub::AsyncIPsecListCertsRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecListCertsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecListCertsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecLoadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest& request, ::opi_api::security::v1::IPsecLoadConnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecLoadConnRequest, ::opi_api::security::v1::IPsecLoadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecLoadConn_, context, request, response);
}

void IPsecService::Stub::async::IPsecLoadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest* request, ::opi_api::security::v1::IPsecLoadConnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecLoadConnRequest, ::opi_api::security::v1::IPsecLoadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecLoadConn_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecLoadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest* request, ::opi_api::security::v1::IPsecLoadConnResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecLoadConn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecLoadConnResponse>* IPsecService::Stub::PrepareAsyncIPsecLoadConnRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecLoadConnResponse, ::opi_api::security::v1::IPsecLoadConnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecLoadConn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecLoadConnResponse>* IPsecService::Stub::AsyncIPsecLoadConnRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecLoadConnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IPsecService::Stub::IPsecUnloadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest& request, ::opi_api::security::v1::IPsecUnloadConnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::security::v1::IPsecUnloadConnRequest, ::opi_api::security::v1::IPsecUnloadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IPsecUnloadConn_, context, request, response);
}

void IPsecService::Stub::async::IPsecUnloadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest* request, ::opi_api::security::v1::IPsecUnloadConnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::security::v1::IPsecUnloadConnRequest, ::opi_api::security::v1::IPsecUnloadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecUnloadConn_, context, request, response, std::move(f));
}

void IPsecService::Stub::async::IPsecUnloadConn(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest* request, ::opi_api::security::v1::IPsecUnloadConnResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IPsecUnloadConn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecUnloadConnResponse>* IPsecService::Stub::PrepareAsyncIPsecUnloadConnRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::security::v1::IPsecUnloadConnResponse, ::opi_api::security::v1::IPsecUnloadConnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IPsecUnloadConn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::security::v1::IPsecUnloadConnResponse>* IPsecService::Stub::AsyncIPsecUnloadConnRaw(::grpc::ClientContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIPsecUnloadConnRaw(context, request, cq);
  result->StartCall();
  return result;
}

IPsecService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecVersionRequest, ::opi_api::security::v1::IPsecVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecVersionRequest* req,
             ::opi_api::security::v1::IPsecVersionResponse* resp) {
               return service->IPsecVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecStatsRequest, ::opi_api::security::v1::IPsecStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecStatsRequest* req,
             ::opi_api::security::v1::IPsecStatsResponse* resp) {
               return service->IPsecStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecInitiateRequest, ::opi_api::security::v1::IPsecInitiateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecInitiateRequest* req,
             ::opi_api::security::v1::IPsecInitiateResponse* resp) {
               return service->IPsecInitiate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecTerminateRequest, ::opi_api::security::v1::IPsecTerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecTerminateRequest* req,
             ::opi_api::security::v1::IPsecTerminateResponse* resp) {
               return service->IPsecTerminate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecRekeyRequest, ::opi_api::security::v1::IPsecRekeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecRekeyRequest* req,
             ::opi_api::security::v1::IPsecRekeyResponse* resp) {
               return service->IPsecRekey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecListSasRequest, ::opi_api::security::v1::IPsecListSasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecListSasRequest* req,
             ::opi_api::security::v1::IPsecListSasResponse* resp) {
               return service->IPsecListSas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecListConnsRequest, ::opi_api::security::v1::IPsecListConnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecListConnsRequest* req,
             ::opi_api::security::v1::IPsecListConnsResponse* resp) {
               return service->IPsecListConns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecListCertsRequest, ::opi_api::security::v1::IPsecListCertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecListCertsRequest* req,
             ::opi_api::security::v1::IPsecListCertsResponse* resp) {
               return service->IPsecListCerts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecLoadConnRequest, ::opi_api::security::v1::IPsecLoadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecLoadConnRequest* req,
             ::opi_api::security::v1::IPsecLoadConnResponse* resp) {
               return service->IPsecLoadConn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPsecService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPsecService::Service, ::opi_api::security::v1::IPsecUnloadConnRequest, ::opi_api::security::v1::IPsecUnloadConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPsecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::security::v1::IPsecUnloadConnRequest* req,
             ::opi_api::security::v1::IPsecUnloadConnResponse* resp) {
               return service->IPsecUnloadConn(ctx, req, resp);
             }, this)));
}

IPsecService::Service::~Service() {
}

::grpc::Status IPsecService::Service::IPsecVersion(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecVersionRequest* request, ::opi_api::security::v1::IPsecVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecStats(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecStatsRequest* request, ::opi_api::security::v1::IPsecStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecInitiate(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecInitiateRequest* request, ::opi_api::security::v1::IPsecInitiateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecTerminate(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecTerminateRequest* request, ::opi_api::security::v1::IPsecTerminateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecRekey(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecRekeyRequest* request, ::opi_api::security::v1::IPsecRekeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecListSas(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecListSasRequest* request, ::opi_api::security::v1::IPsecListSasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecListConns(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecListConnsRequest* request, ::opi_api::security::v1::IPsecListConnsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecListCerts(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecListCertsRequest* request, ::opi_api::security::v1::IPsecListCertsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecLoadConn(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecLoadConnRequest* request, ::opi_api::security::v1::IPsecLoadConnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPsecService::Service::IPsecUnloadConn(::grpc::ServerContext* context, const ::opi_api::security::v1::IPsecUnloadConnRequest* request, ::opi_api::security::v1::IPsecUnloadConnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace security
}  // namespace v1

