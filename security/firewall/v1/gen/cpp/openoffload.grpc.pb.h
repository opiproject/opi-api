// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openoffload.proto
// Original file comments:
// Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
// Copyright (C) 2020 Palo Alto Networks Intellectual Property. All rights reserved.
// Copyright (C) 2022 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// NOTE: This file originally came from here:
//       https://github.com/att/sessionOffload/blob/master/protos/openoffload.proto
//
//       The OPI project will modify this protobuf file to fit our firewall
//       use case, but it's a great starting point.
//
#ifndef GRPC_openoffload_2eproto__INCLUDED
#define GRPC_openoffload_2eproto__INCLUDED

#include "openoffload.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace security {
namespace firewall {
namespace v1 {

//
// The session table was combined with the statistices service
// in v1alpha4 to simplfy the code.
//
class SessionTable final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.security.firewall.v1.SessionTable";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Adds a session
    // This was changed in v1alpha4 to be a streaming API, for performance
    // reasons.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>> AddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>>(AddSessionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>> AsyncAddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>>(AsyncAddSessionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>> PrepareAsyncAddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>>(PrepareAsyncAddSessionRaw(context, response, cq));
    }
    //
    // Obtains the session 
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::opi_api::security::firewall::v1::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    //
    // Delete a session
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::opi_api::security::firewall::v1::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    //
    // Stream back a specific session or all current sessions
    // To stream a single session, pass SessionId as zero
    virtual ::grpc::Status GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::opi_api::security::firewall::v1::SessionResponses* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>> AsyncGetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>>(AsyncGetAllSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>> PrepareAsyncGetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>>(PrepareAsyncGetAllSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Adds a session
      // This was changed in v1alpha4 to be a streaming API, for performance
      // reasons.
      virtual void AddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::ClientWriteReactor< ::opi_api::security::firewall::v1::SessionRequest>* reactor) = 0;
      //
      // Obtains the session 
      virtual void GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Delete a session
      virtual void DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stream back a specific session or all current sessions
      // To stream a single session, pass SessionId as zero
      virtual void GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>* AddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>* AsyncAddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::opi_api::security::firewall::v1::SessionRequest>* PrepareAsyncAddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>* AsyncGetAllSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::security::firewall::v1::SessionResponses>* PrepareAsyncGetAllSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::opi_api::security::firewall::v1::SessionRequest>> AddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::opi_api::security::firewall::v1::SessionRequest>>(AddSessionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>> AsyncAddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>>(AsyncAddSessionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>> PrepareAsyncAddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>>(PrepareAsyncAddSessionRaw(context, response, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::opi_api::security::firewall::v1::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::opi_api::security::firewall::v1::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    ::grpc::Status GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::opi_api::security::firewall::v1::SessionResponses* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>> AsyncGetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>>(AsyncGetAllSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>> PrepareAsyncGetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>>(PrepareAsyncGetAllSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddSession(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::ClientWriteReactor< ::opi_api::security::firewall::v1::SessionRequest>* reactor) override;
      void GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response, std::function<void(::grpc::Status)>) override;
      void GetAllSession(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::opi_api::security::firewall::v1::SessionRequest>* AddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response) override;
    ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>* AsyncAddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::opi_api::security::firewall::v1::SessionRequest>* PrepareAsyncAddSessionRaw(::grpc::ClientContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>* AsyncGetAllSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::security::firewall::v1::SessionResponses>* PrepareAsyncGetAllSessionRaw(::grpc::ClientContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Adds a session
    // This was changed in v1alpha4 to be a streaming API, for performance
    // reasons.
    virtual ::grpc::Status AddSession(::grpc::ServerContext* context, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* reader, ::opi_api::security::firewall::v1::AddSessionResponse* response);
    //
    // Obtains the session 
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response);
    //
    // Delete a session
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response);
    //
    // Stream back a specific session or all current sessions
    // To stream a single session, pass SessionId as zero
    virtual ::grpc::Status GetAllSession(::grpc::ServerContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* /*reader*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::opi_api::security::firewall::v1::AddSessionResponse, ::opi_api::security::firewall::v1::SessionRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::opi_api::security::firewall::v1::SessionId* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::security::firewall::v1::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::opi_api::security::firewall::v1::SessionId* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::security::firewall::v1::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSession(::grpc::ServerContext* context, ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::security::firewall::v1::SessionResponses>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddSession<WithAsyncMethod_GetSession<WithAsyncMethod_DeleteSession<WithAsyncMethod_GetAllSession<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::opi_api::security::firewall::v1::SessionRequest, ::opi_api::security::firewall::v1::AddSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::opi_api::security::firewall::v1::AddSessionResponse* response) { return this->AddSession(context, response); }));
    }
    ~WithCallbackMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* /*reader*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::opi_api::security::firewall::v1::SessionRequest>* AddSession(
      ::grpc::CallbackServerContext* /*context*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response) { return this->GetSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetSession(
        ::grpc::MessageAllocator< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::security::firewall::v1::SessionId* request, ::opi_api::security::firewall::v1::SessionResponse* response) { return this->DeleteSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSession(
        ::grpc::MessageAllocator< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllSession() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionRequestArgs, ::opi_api::security::firewall::v1::SessionResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::security::firewall::v1::SessionRequestArgs* request, ::opi_api::security::firewall::v1::SessionResponses* response) { return this->GetAllSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllSession(
        ::grpc::MessageAllocator< ::opi_api::security::firewall::v1::SessionRequestArgs, ::opi_api::security::firewall::v1::SessionResponses>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::security::firewall::v1::SessionRequestArgs, ::opi_api::security::firewall::v1::SessionResponses>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSession(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddSession<WithCallbackMethod_GetSession<WithCallbackMethod_DeleteSession<WithCallbackMethod_GetAllSession<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* /*reader*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* /*reader*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllSession() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddSession(context, response); }));
    }
    ~WithRawCallbackMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::opi_api::security::firewall::v1::SessionRequest>* /*reader*/, ::opi_api::security::firewall::v1::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddSession(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllSession() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>* streamer) {
                       return this->StreamedGetSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::security::firewall::v1::SessionId,::opi_api::security::firewall::v1::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::security::firewall::v1::SessionId, ::opi_api::security::firewall::v1::SessionResponse>* streamer) {
                       return this->StreamedDeleteSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionId* /*request*/, ::opi_api::security::firewall::v1::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::security::firewall::v1::SessionId,::opi_api::security::firewall::v1::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllSession() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::security::firewall::v1::SessionRequestArgs, ::opi_api::security::firewall::v1::SessionResponses>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::security::firewall::v1::SessionRequestArgs, ::opi_api::security::firewall::v1::SessionResponses>* streamer) {
                       return this->StreamedGetAllSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllSession(::grpc::ServerContext* /*context*/, const ::opi_api::security::firewall::v1::SessionRequestArgs* /*request*/, ::opi_api::security::firewall::v1::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::security::firewall::v1::SessionRequestArgs,::opi_api::security::firewall::v1::SessionResponses>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetAllSession<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetAllSession<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace firewall
}  // namespace security
}  // namespace opi_api


#endif  // GRPC_openoffload_2eproto__INCLUDED
