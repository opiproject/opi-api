// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openoffload.proto

#include "openoffload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace security {
namespace firewall {
namespace v1 {
constexpr SessionId::SessionId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct SessionIdDefaultTypeInternal {
  constexpr SessionIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionIdDefaultTypeInternal() {}
  union {
    SessionId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionIdDefaultTypeInternal _SessionId_default_instance_;
constexpr ActionParameters::ActionParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionnexthopv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proxysrcv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proxydstv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcconnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dstconnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actiontype_(0)

  , actionnexthop_(0u)
  , proxysrcv4_(0u)
  , proxydstv4_(0u){}
struct ActionParametersDefaultTypeInternal {
  constexpr ActionParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionParametersDefaultTypeInternal() {}
  union {
    ActionParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionParametersDefaultTypeInternal _ActionParameters_default_instance_;
constexpr SessionRequest::SessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourceipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destinationipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcconnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dstconnid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(nullptr)
  , action_(nullptr)
  , inlif_(0)
  , outlif_(0)
  , ipversion_(0)

  , sourceip_(0u)
  , sourceport_(0u)
  , destinationip_(0u)
  , destinationport_(0u)
  , protocolid_(0)

  , cachetimeout_(0u){}
struct SessionRequestDefaultTypeInternal {
  constexpr SessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionRequestDefaultTypeInternal() {}
  union {
    SessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionRequestDefaultTypeInternal _SessionRequest_default_instance_;
constexpr SessionResponseError::SessionResponseError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(nullptr)
  , errorstatus_(0){}
struct SessionResponseErrorDefaultTypeInternal {
  constexpr SessionResponseErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponseErrorDefaultTypeInternal() {}
  union {
    SessionResponseError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponseErrorDefaultTypeInternal _SessionResponseError_default_instance_;
constexpr SessionResponses::SessionResponses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessioninfo_()
  , nextkey_(uint64_t{0u}){}
struct SessionResponsesDefaultTypeInternal {
  constexpr SessionResponsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponsesDefaultTypeInternal() {}
  union {
    SessionResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponsesDefaultTypeInternal _SessionResponses_default_instance_;
constexpr AddSessionResponse::AddSessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responseerror_()
  , starttime_(nullptr)
  , errorstatus_(uint64_t{0u})
  , requeststatus_(0)
{}
struct AddSessionResponseDefaultTypeInternal {
  constexpr AddSessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddSessionResponseDefaultTypeInternal() {}
  union {
    AddSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddSessionResponseDefaultTypeInternal _AddSessionResponse_default_instance_;
constexpr SessionResponse::SessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(nullptr)
  , starttime_(nullptr)
  , endtime_(nullptr)
  , inpackets_(uint64_t{0u})
  , outpackets_(uint64_t{0u})
  , inbytes_(uint64_t{0u})
  , outbytes_(uint64_t{0u})
  , sessionstate_(0)

  , sessionclosecode_(0)

  , requeststatus_(0)
{}
struct SessionResponseDefaultTypeInternal {
  constexpr SessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponseDefaultTypeInternal() {}
  union {
    SessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponseDefaultTypeInternal _SessionResponse_default_instance_;
constexpr SessionRequestArgs::SessionRequestArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(nullptr)
  , sessionstate_(0)
{}
struct SessionRequestArgsDefaultTypeInternal {
  constexpr SessionRequestArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionRequestArgsDefaultTypeInternal() {}
  union {
    SessionRequestArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionRequestArgsDefaultTypeInternal _SessionRequestArgs_default_instance_;
}  // namespace v1
}  // namespace firewall
}  // namespace security
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openoffload_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openoffload_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openoffload_2eproto = nullptr;

const uint32_t TableStruct_openoffload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionId, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, actiontype_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, actionnexthop_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, actionnexthopv6_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, proxysrcv4_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, proxydstv4_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, proxysrcv6_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, proxydstv6_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, srcconnid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::ActionParameters, dstconnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, inlif_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, outlif_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, ipversion_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, sourceip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, sourceipv6_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, sourceport_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, destinationip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, destinationipv6_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, destinationport_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, protocolid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, action_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, cachetimeout_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, srcconnid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequest, dstconnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponseError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponseError, sessionid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponseError, errorstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponses, sessioninfo_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponses, nextkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::AddSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::AddSessionResponse, requeststatus_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::AddSessionResponse, errorstatus_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::AddSessionResponse, starttime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::AddSessionResponse, responseerror_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, sessionid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, inpackets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, outpackets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, inbytes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, outbytes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, sessionstate_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, sessionclosecode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, requeststatus_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, starttime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionResponse, endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequestArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequestArgs, sessionid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::security::firewall::v1::SessionRequestArgs, sessionstate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionId)},
  { 7, -1, -1, sizeof(::opi_api::security::firewall::v1::ActionParameters)},
  { 22, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionRequest)},
  { 43, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionResponseError)},
  { 51, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionResponses)},
  { 59, -1, -1, sizeof(::opi_api::security::firewall::v1::AddSessionResponse)},
  { 69, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionResponse)},
  { 85, -1, -1, sizeof(::opi_api::security::firewall::v1::SessionRequestArgs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_ActionParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionResponseError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_AddSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::security::firewall::v1::_SessionRequestArgs_default_instance_),
};

const char descriptor_table_protodef_openoffload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021openoffload.proto\022\034opi_api.security.fi"
  "rewall.v1\032\037google/protobuf/timestamp.pro"
  "to\032\nuuid.proto\"\037\n\tSessionId\022\022\n\nsession_i"
  "d\030\001 \001(\004\"\366\001\n\020ActionParameters\022<\n\nactionty"
  "pe\030\001 \001(\0162(.opi_api.security.firewall.v1."
  "ActionType\022\025\n\ractionnexthop\030\002 \001(\r\022\027\n\017act"
  "ionnexthopv6\030\003 \001(\014\022\022\n\nproxysrcv4\030\004 \001(\r\022\022"
  "\n\nproxydstv4\030\005 \001(\r\022\022\n\nproxysrcv6\030\006 \001(\014\022\022"
  "\n\nproxydstv6\030\007 \001(\014\022\021\n\tsrcconnid\030\010 \001(\014\022\021\n"
  "\tdstconnid\030\t \001(\014\"\325\003\n\016SessionRequest\022+\n\ns"
  "ession_id\030\001 \001(\0132\027.opi_api.common.v1.Uuid"
  "\022\r\n\005inlif\030\002 \001(\005\022\016\n\006outlif\030\003 \001(\005\022:\n\tipver"
  "sion\030\004 \001(\0162\'.opi_api.security.firewall.v"
  "1.IpVersion\022\020\n\010sourceip\030\005 \001(\r\022\022\n\nsourcei"
  "pv6\030\006 \001(\014\022\022\n\nsourceport\030\007 \001(\r\022\025\n\rdestina"
  "tionip\030\010 \001(\r\022\027\n\017destinationipv6\030\t \001(\014\022\027\n"
  "\017destinationport\030\n \001(\r\022<\n\nprotocolid\030\013 \001"
  "(\0162(.opi_api.security.firewall.v1.Protoc"
  "olId\022>\n\006action\030\014 \001(\0132..opi_api.security."
  "firewall.v1.ActionParameters\022\024\n\014cachetim"
  "eout\030\r \001(\r\022\021\n\tsrcconnid\030\016 \001(\014\022\021\n\tdstconn"
  "id\030\017 \001(\014\"W\n\024SessionResponseError\022*\n\tsess"
  "ionid\030\001 \001(\0132\027.opi_api.common.v1.Uuid\022\023\n\013"
  "errorstatus\030\002 \001(\005\"g\n\020SessionResponses\022B\n"
  "\013sessioninfo\030\001 \003(\0132-.opi_api.security.fi"
  "rewall.v1.SessionResponse\022\017\n\007nextkey\030\002 \001"
  "(\004\"\352\001\n\022AddSessionResponse\022E\n\rrequeststat"
  "us\030\001 \001(\0162..opi_api.security.firewall.v1."
  "AddSessionStatus\022\023\n\013errorstatus\030\002 \001(\004\022-\n"
  "\tstarttime\030\003 \001(\0132\032.google.protobuf.Times"
  "tamp\022I\n\rresponseerror\030\004 \003(\01322.opi_api.se"
  "curity.firewall.v1.SessionResponseError\""
  "\263\003\n\017SessionResponse\022*\n\tsessionid\030\001 \001(\0132\027"
  ".opi_api.common.v1.Uuid\022\021\n\tinpackets\030\002 \001"
  "(\004\022\022\n\noutpackets\030\003 \001(\004\022\017\n\007inbytes\030\004 \001(\004\022"
  "\020\n\010outbytes\030\005 \001(\004\022@\n\014sessionstate\030\006 \001(\0162"
  "*.opi_api.security.firewall.v1.SessionSt"
  "ate\022H\n\020sessionclosecode\030\007 \001(\0162..opi_api."
  "security.firewall.v1.SessionCloseCode\022B\n"
  "\rrequeststatus\030\010 \001(\0162+.opi_api.security."
  "firewall.v1.RequestStatus\022-\n\tstarttime\030\t"
  " \001(\0132\032.google.protobuf.Timestamp\022+\n\007endt"
  "ime\030\n \001(\0132\032.google.protobuf.Timestamp\"\202\001"
  "\n\022SessionRequestArgs\022*\n\tsessionid\030\001 \001(\0132"
  "\027.opi_api.common.v1.Uuid\022@\n\014sessionstate"
  "\030\002 \001(\0162*.opi_api.security.firewall.v1.Se"
  "ssionState*!\n\tIpVersion\022\t\n\005_IPV4\020\000\022\t\n\005_I"
  "PV6\020\001*@\n\nProtocolId\022\013\n\007_HOPOPT\020\000\022\010\n\004_TCP"
  "\020\006\022\010\n\004_UDP\020\021\"\004\010\001\020\005\"\004\010\007\020\020\"\005\010\022\020\377\001*a\n\014Sessi"
  "onState\022\020\n\014_ESTABLISHED\020\000\022\016\n\n_CLOSING_1\020"
  "\001\022\016\n\n_CLOSING_2\020\002\022\013\n\007_CLOSED\020\003\022\022\n\016_UNKNO"
  "WN_STATE\020\004*a\n\020SessionCloseCode\022\017\n\013_NOT_C"
  "LOSED\020\000\022\013\n\007_FINACK\020\001\022\010\n\004_RST\020\002\022\014\n\010_TIMEO"
  "UT\020\003\022\027\n\023_UNKNOWN_CLOSE_CODE\020\004*\226\001\n\020AddSes"
  "sionStatus\022\025\n\021_SESSION_ACCEPTED\020\000\022\025\n\021_SE"
  "SSION_REJECTED\020\001\022\027\n\023_SESSION_TABLE_FULL\020"
  "\002\022\036\n\032_SESSION_TABLE_UNAVAILABLE\020\003\022\033\n\027_SE"
  "SSION_ALREADY_EXISTS\020\004*\317\001\n\rRequestStatus"
  "\022\r\n\t_ACCEPTED\020\000\022\r\n\t_REJECTED\020\001\022!\n\035_REJEC"
  "TED_SESSION_NONEXISTENT\020\002\022 \n\034_REJECTED_S"
  "ESSION_TABLE_FULL\020\003\022$\n _REJECTED_SESSION"
  "_ALREADY_EXISTS\020\004\022\027\n\023_NO_CLOSED_SESSIONS"
  "\020\005\022\034\n\030_REJECTED_INTERNAL_ERROR\020\006*J\n\nActi"
  "onType\022\t\n\005_DROP\020\000\022\014\n\010_FORWARD\020\001\022\013\n\007_MIRR"
  "OR\020\002\022\n\n\006_SNOOP\020\003\022\n\n\006_PROXY\020\0042\310\003\n\014Session"
  "Table\022p\n\nAddSession\022,.opi_api.security.f"
  "irewall.v1.SessionRequest\0320.opi_api.secu"
  "rity.firewall.v1.AddSessionResponse\"\000(\001\022"
  "f\n\nGetSession\022\'.opi_api.security.firewal"
  "l.v1.SessionId\032-.opi_api.security.firewa"
  "ll.v1.SessionResponse\"\000\022i\n\rDeleteSession"
  "\022\'.opi_api.security.firewall.v1.SessionI"
  "d\032-.opi_api.security.firewall.v1.Session"
  "Response\"\000\022s\n\rGetAllSession\0220.opi_api.se"
  "curity.firewall.v1.SessionRequestArgs\032.."
  "opi_api.security.firewall.v1.SessionResp"
  "onses\"\000B;Z9github.com/opiproject/opi-api"
  "/security/firewall/v1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openoffload_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_uuid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openoffload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openoffload_2eproto = {
  false, false, 3116, descriptor_table_protodef_openoffload_2eproto, "openoffload.proto", 
  &descriptor_table_openoffload_2eproto_once, descriptor_table_openoffload_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_openoffload_2eproto::offsets,
  file_level_metadata_openoffload_2eproto, file_level_enum_descriptors_openoffload_2eproto, file_level_service_descriptors_openoffload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_openoffload_2eproto_getter() {
  return &descriptor_table_openoffload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_openoffload_2eproto(&descriptor_table_openoffload_2eproto);
namespace opi_api {
namespace security {
namespace firewall {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[0];
}
bool IpVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[1];
}
bool ProtocolId_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[2];
}
bool SessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionCloseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[3];
}
bool SessionCloseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddSessionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[4];
}
bool AddSessionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[5];
}
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[6];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SessionId::_Internal {
 public:
};

SessionId::SessionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionId)
}
SessionId::SessionId(const SessionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionId)
}

inline void SessionId::SharedCtor() {
session_id_ = uint64_t{0u};
}

SessionId::~SessionId() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionId::ArenaDtor(void* object) {
  SessionId* _this = reinterpret_cast< SessionId* >(object);
  (void)_this;
}
void SessionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionId::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionId)
  return target;
}

size_t SessionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionId::GetClassData() const { return &_class_data_; }

void SessionId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionId *>(to)->MergeFrom(
      static_cast<const SessionId &>(from));
}


void SessionId::MergeFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionId::CopyFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionId::IsInitialized() const {
  return true;
}

void SessionId::InternalSwap(SessionId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[0]);
}

// ===================================================================

class ActionParameters::_Internal {
 public:
};

ActionParameters::ActionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.ActionParameters)
}
ActionParameters::ActionParameters(const ActionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionnexthopv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actionnexthopv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actionnexthopv6().empty()) {
    actionnexthopv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionnexthopv6(), 
      GetArenaForAllocation());
  }
  proxysrcv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxysrcv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxysrcv6().empty()) {
    proxysrcv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxysrcv6(), 
      GetArenaForAllocation());
  }
  proxydstv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxydstv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxydstv6().empty()) {
    proxydstv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxydstv6(), 
      GetArenaForAllocation());
  }
  srcconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcconnid().empty()) {
    srcconnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcconnid(), 
      GetArenaForAllocation());
  }
  dstconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dstconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstconnid().empty()) {
    dstconnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstconnid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&actiontype_, &from.actiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxydstv4_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(proxydstv4_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.ActionParameters)
}

inline void ActionParameters::SharedCtor() {
actionnexthopv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actionnexthopv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proxysrcv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxysrcv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proxydstv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxydstv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
srcconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dstconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dstconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actiontype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proxydstv4_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(proxydstv4_));
}

ActionParameters::~ActionParameters() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.ActionParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionnexthopv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxysrcv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxydstv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcconnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstconnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActionParameters::ArenaDtor(void* object) {
  ActionParameters* _this = reinterpret_cast< ActionParameters* >(object);
  (void)_this;
}
void ActionParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.ActionParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionnexthopv6_.ClearToEmpty();
  proxysrcv6_.ClearToEmpty();
  proxydstv6_.ClearToEmpty();
  srcconnid_.ClearToEmpty();
  dstconnid_.ClearToEmpty();
  ::memset(&actiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxydstv4_) -
      reinterpret_cast<char*>(&actiontype_)) + sizeof(proxydstv4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.firewall.v1.ActionType actiontype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::opi_api::security::firewall::v1::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 actionnexthop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          actionnexthop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes actionnexthopv6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_actionnexthopv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proxysrcv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          proxysrcv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proxydstv4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          proxydstv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proxysrcv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_proxysrcv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proxydstv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_proxydstv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes srcconnid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_srcconnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes dstconnid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_dstconnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.ActionParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.firewall.v1.ActionType actiontype = 1;
  if (this->_internal_actiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actiontype(), target);
  }

  // uint32 actionnexthop = 2;
  if (this->_internal_actionnexthop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_actionnexthop(), target);
  }

  // bytes actionnexthopv6 = 3;
  if (!this->_internal_actionnexthopv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_actionnexthopv6(), target);
  }

  // uint32 proxysrcv4 = 4;
  if (this->_internal_proxysrcv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_proxysrcv4(), target);
  }

  // uint32 proxydstv4 = 5;
  if (this->_internal_proxydstv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_proxydstv4(), target);
  }

  // bytes proxysrcv6 = 6;
  if (!this->_internal_proxysrcv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_proxysrcv6(), target);
  }

  // bytes proxydstv6 = 7;
  if (!this->_internal_proxydstv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_proxydstv6(), target);
  }

  // bytes srcconnid = 8;
  if (!this->_internal_srcconnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_srcconnid(), target);
  }

  // bytes dstconnid = 9;
  if (!this->_internal_dstconnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_dstconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.ActionParameters)
  return target;
}

size_t ActionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.ActionParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes actionnexthopv6 = 3;
  if (!this->_internal_actionnexthopv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actionnexthopv6());
  }

  // bytes proxysrcv6 = 6;
  if (!this->_internal_proxysrcv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proxysrcv6());
  }

  // bytes proxydstv6 = 7;
  if (!this->_internal_proxydstv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proxydstv6());
  }

  // bytes srcconnid = 8;
  if (!this->_internal_srcconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcconnid());
  }

  // bytes dstconnid = 9;
  if (!this->_internal_dstconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstconnid());
  }

  // .opi_api.security.firewall.v1.ActionType actiontype = 1;
  if (this->_internal_actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  // uint32 actionnexthop = 2;
  if (this->_internal_actionnexthop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_actionnexthop());
  }

  // uint32 proxysrcv4 = 4;
  if (this->_internal_proxysrcv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proxysrcv4());
  }

  // uint32 proxydstv4 = 5;
  if (this->_internal_proxydstv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proxydstv4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionParameters::GetClassData() const { return &_class_data_; }

void ActionParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionParameters *>(to)->MergeFrom(
      static_cast<const ActionParameters &>(from));
}


void ActionParameters::MergeFrom(const ActionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.ActionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionnexthopv6().empty()) {
    _internal_set_actionnexthopv6(from._internal_actionnexthopv6());
  }
  if (!from._internal_proxysrcv6().empty()) {
    _internal_set_proxysrcv6(from._internal_proxysrcv6());
  }
  if (!from._internal_proxydstv6().empty()) {
    _internal_set_proxydstv6(from._internal_proxydstv6());
  }
  if (!from._internal_srcconnid().empty()) {
    _internal_set_srcconnid(from._internal_srcconnid());
  }
  if (!from._internal_dstconnid().empty()) {
    _internal_set_dstconnid(from._internal_dstconnid());
  }
  if (from._internal_actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
  if (from._internal_actionnexthop() != 0) {
    _internal_set_actionnexthop(from._internal_actionnexthop());
  }
  if (from._internal_proxysrcv4() != 0) {
    _internal_set_proxysrcv4(from._internal_proxysrcv4());
  }
  if (from._internal_proxydstv4() != 0) {
    _internal_set_proxydstv4(from._internal_proxydstv4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionParameters::CopyFrom(const ActionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.ActionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionParameters::IsInitialized() const {
  return true;
}

void ActionParameters::InternalSwap(ActionParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionnexthopv6_, lhs_arena,
      &other->actionnexthopv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxysrcv6_, lhs_arena,
      &other->proxysrcv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxydstv6_, lhs_arena,
      &other->proxydstv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcconnid_, lhs_arena,
      &other->srcconnid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dstconnid_, lhs_arena,
      &other->dstconnid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionParameters, proxydstv4_)
      + sizeof(ActionParameters::proxydstv4_)
      - PROTOBUF_FIELD_OFFSET(ActionParameters, actiontype_)>(
          reinterpret_cast<char*>(&actiontype_),
          reinterpret_cast<char*>(&other->actiontype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[1]);
}

// ===================================================================

class SessionRequest::_Internal {
 public:
  static const ::opi_api::common::v1::Uuid& session_id(const SessionRequest* msg);
  static const ::opi_api::security::firewall::v1::ActionParameters& action(const SessionRequest* msg);
};

const ::opi_api::common::v1::Uuid&
SessionRequest::_Internal::session_id(const SessionRequest* msg) {
  return *msg->session_id_;
}
const ::opi_api::security::firewall::v1::ActionParameters&
SessionRequest::_Internal::action(const SessionRequest* msg) {
  return *msg->action_;
}
void SessionRequest::clear_session_id() {
  if (GetArenaForAllocation() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
}
SessionRequest::SessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionRequest)
}
SessionRequest::SessionRequest(const SessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourceipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceipv6().empty()) {
    sourceipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceipv6(), 
      GetArenaForAllocation());
  }
  destinationipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destinationipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destinationipv6().empty()) {
    destinationipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destinationipv6(), 
      GetArenaForAllocation());
  }
  srcconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcconnid().empty()) {
    srcconnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcconnid(), 
      GetArenaForAllocation());
  }
  dstconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dstconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstconnid().empty()) {
    dstconnid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstconnid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_session_id()) {
    session_id_ = new ::opi_api::common::v1::Uuid(*from.session_id_);
  } else {
    session_id_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::opi_api::security::firewall::v1::ActionParameters(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&inlif_, &from.inlif_,
    static_cast<size_t>(reinterpret_cast<char*>(&cachetimeout_) -
    reinterpret_cast<char*>(&inlif_)) + sizeof(cachetimeout_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionRequest)
}

inline void SessionRequest::SharedCtor() {
sourceipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourceipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destinationipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destinationipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
srcconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dstconnid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dstconnid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cachetimeout_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(cachetimeout_));
}

SessionRequest::~SessionRequest() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sourceipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destinationipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcconnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstconnid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete action_;
}

void SessionRequest::ArenaDtor(void* object) {
  SessionRequest* _this = reinterpret_cast< SessionRequest* >(object);
  (void)_this;
}
void SessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceipv6_.ClearToEmpty();
  destinationipv6_.ClearToEmpty();
  srcconnid_.ClearToEmpty();
  dstconnid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&inlif_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cachetimeout_) -
      reinterpret_cast<char*>(&inlif_)) + sizeof(cachetimeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.Uuid session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inlif = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          inlif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outlif = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          outlif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.IpVersion ipversion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ipversion(static_cast<::opi_api::security::firewall::v1::IpVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 sourceip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sourceip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sourceipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sourceipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sourceport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 destinationip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          destinationip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes destinationipv6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_destinationipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 destinationport = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          destinationport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.ProtocolId protocolid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocolid(static_cast<::opi_api::security::firewall::v1::ProtocolId>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.ActionParameters action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cachetimeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          cachetimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes srcconnid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_srcconnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes dstconnid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_dstconnid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid session_id = 1;
  if (this->_internal_has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session_id(this), target, stream);
  }

  // int32 inlif = 2;
  if (this->_internal_inlif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inlif(), target);
  }

  // int32 outlif = 3;
  if (this->_internal_outlif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_outlif(), target);
  }

  // .opi_api.security.firewall.v1.IpVersion ipversion = 4;
  if (this->_internal_ipversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ipversion(), target);
  }

  // uint32 sourceip = 5;
  if (this->_internal_sourceip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sourceip(), target);
  }

  // bytes sourceipv6 = 6;
  if (!this->_internal_sourceipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sourceipv6(), target);
  }

  // uint32 sourceport = 7;
  if (this->_internal_sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sourceport(), target);
  }

  // uint32 destinationip = 8;
  if (this->_internal_destinationip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_destinationip(), target);
  }

  // bytes destinationipv6 = 9;
  if (!this->_internal_destinationipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_destinationipv6(), target);
  }

  // uint32 destinationport = 10;
  if (this->_internal_destinationport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_destinationport(), target);
  }

  // .opi_api.security.firewall.v1.ProtocolId protocolid = 11;
  if (this->_internal_protocolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_protocolid(), target);
  }

  // .opi_api.security.firewall.v1.ActionParameters action = 12;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::action(this), target, stream);
  }

  // uint32 cachetimeout = 13;
  if (this->_internal_cachetimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cachetimeout(), target);
  }

  // bytes srcconnid = 14;
  if (!this->_internal_srcconnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_srcconnid(), target);
  }

  // bytes dstconnid = 15;
  if (!this->_internal_dstconnid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_dstconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionRequest)
  return target;
}

size_t SessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sourceipv6 = 6;
  if (!this->_internal_sourceipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sourceipv6());
  }

  // bytes destinationipv6 = 9;
  if (!this->_internal_destinationipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destinationipv6());
  }

  // bytes srcconnid = 14;
  if (!this->_internal_srcconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcconnid());
  }

  // bytes dstconnid = 15;
  if (!this->_internal_dstconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstconnid());
  }

  // .opi_api.common.v1.Uuid session_id = 1;
  if (this->_internal_has_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_id_);
  }

  // .opi_api.security.firewall.v1.ActionParameters action = 12;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 inlif = 2;
  if (this->_internal_inlif() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_inlif());
  }

  // int32 outlif = 3;
  if (this->_internal_outlif() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_outlif());
  }

  // .opi_api.security.firewall.v1.IpVersion ipversion = 4;
  if (this->_internal_ipversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ipversion());
  }

  // uint32 sourceip = 5;
  if (this->_internal_sourceip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceip());
  }

  // uint32 sourceport = 7;
  if (this->_internal_sourceport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceport());
  }

  // uint32 destinationip = 8;
  if (this->_internal_destinationip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_destinationip());
  }

  // uint32 destinationport = 10;
  if (this->_internal_destinationport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_destinationport());
  }

  // .opi_api.security.firewall.v1.ProtocolId protocolid = 11;
  if (this->_internal_protocolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocolid());
  }

  // uint32 cachetimeout = 13;
  if (this->_internal_cachetimeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cachetimeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRequest::GetClassData() const { return &_class_data_; }

void SessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionRequest *>(to)->MergeFrom(
      static_cast<const SessionRequest &>(from));
}


void SessionRequest::MergeFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourceipv6().empty()) {
    _internal_set_sourceipv6(from._internal_sourceipv6());
  }
  if (!from._internal_destinationipv6().empty()) {
    _internal_set_destinationipv6(from._internal_destinationipv6());
  }
  if (!from._internal_srcconnid().empty()) {
    _internal_set_srcconnid(from._internal_srcconnid());
  }
  if (!from._internal_dstconnid().empty()) {
    _internal_set_dstconnid(from._internal_dstconnid());
  }
  if (from._internal_has_session_id()) {
    _internal_mutable_session_id()->::opi_api::common::v1::Uuid::MergeFrom(from._internal_session_id());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::opi_api::security::firewall::v1::ActionParameters::MergeFrom(from._internal_action());
  }
  if (from._internal_inlif() != 0) {
    _internal_set_inlif(from._internal_inlif());
  }
  if (from._internal_outlif() != 0) {
    _internal_set_outlif(from._internal_outlif());
  }
  if (from._internal_ipversion() != 0) {
    _internal_set_ipversion(from._internal_ipversion());
  }
  if (from._internal_sourceip() != 0) {
    _internal_set_sourceip(from._internal_sourceip());
  }
  if (from._internal_sourceport() != 0) {
    _internal_set_sourceport(from._internal_sourceport());
  }
  if (from._internal_destinationip() != 0) {
    _internal_set_destinationip(from._internal_destinationip());
  }
  if (from._internal_destinationport() != 0) {
    _internal_set_destinationport(from._internal_destinationport());
  }
  if (from._internal_protocolid() != 0) {
    _internal_set_protocolid(from._internal_protocolid());
  }
  if (from._internal_cachetimeout() != 0) {
    _internal_set_cachetimeout(from._internal_cachetimeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRequest::CopyFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequest::IsInitialized() const {
  return true;
}

void SessionRequest::InternalSwap(SessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourceipv6_, lhs_arena,
      &other->sourceipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destinationipv6_, lhs_arena,
      &other->destinationipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcconnid_, lhs_arena,
      &other->srcconnid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dstconnid_, lhs_arena,
      &other->dstconnid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRequest, cachetimeout_)
      + sizeof(SessionRequest::cachetimeout_)
      - PROTOBUF_FIELD_OFFSET(SessionRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[2]);
}

// ===================================================================

class SessionResponseError::_Internal {
 public:
  static const ::opi_api::common::v1::Uuid& sessionid(const SessionResponseError* msg);
};

const ::opi_api::common::v1::Uuid&
SessionResponseError::_Internal::sessionid(const SessionResponseError* msg) {
  return *msg->sessionid_;
}
void SessionResponseError::clear_sessionid() {
  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
}
SessionResponseError::SessionResponseError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionResponseError)
}
SessionResponseError::SessionResponseError(const SessionResponseError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sessionid()) {
    sessionid_ = new ::opi_api::common::v1::Uuid(*from.sessionid_);
  } else {
    sessionid_ = nullptr;
  }
  errorstatus_ = from.errorstatus_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionResponseError)
}

inline void SessionResponseError::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorstatus_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(errorstatus_));
}

SessionResponseError::~SessionResponseError() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionResponseError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponseError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sessionid_;
}

void SessionResponseError::ArenaDtor(void* object) {
  SessionResponseError* _this = reinterpret_cast< SessionResponseError* >(object);
  (void)_this;
}
void SessionResponseError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponseError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponseError::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionResponseError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
  errorstatus_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponseError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.Uuid sessionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponseError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionResponseError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sessionid(this), target, stream);
  }

  // int32 errorstatus = 2;
  if (this->_internal_errorstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionResponseError)
  return target;
}

size_t SessionResponseError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionResponseError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sessionid_);
  }

  // int32 errorstatus = 2;
  if (this->_internal_errorstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponseError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponseError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponseError::GetClassData() const { return &_class_data_; }

void SessionResponseError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponseError *>(to)->MergeFrom(
      static_cast<const SessionResponseError &>(from));
}


void SessionResponseError::MergeFrom(const SessionResponseError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionResponseError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sessionid()) {
    _internal_mutable_sessionid()->::opi_api::common::v1::Uuid::MergeFrom(from._internal_sessionid());
  }
  if (from._internal_errorstatus() != 0) {
    _internal_set_errorstatus(from._internal_errorstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponseError::CopyFrom(const SessionResponseError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionResponseError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponseError::IsInitialized() const {
  return true;
}

void SessionResponseError::InternalSwap(SessionResponseError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionResponseError, errorstatus_)
      + sizeof(SessionResponseError::errorstatus_)
      - PROTOBUF_FIELD_OFFSET(SessionResponseError, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponseError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[3]);
}

// ===================================================================

class SessionResponses::_Internal {
 public:
};

SessionResponses::SessionResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sessioninfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionResponses)
}
SessionResponses::SessionResponses(const SessionResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessioninfo_(from.sessioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nextkey_ = from.nextkey_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionResponses)
}

inline void SessionResponses::SharedCtor() {
nextkey_ = uint64_t{0u};
}

SessionResponses::~SessionResponses() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionResponses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionResponses::ArenaDtor(void* object) {
  SessionResponses* _this = reinterpret_cast< SessionResponses* >(object);
  (void)_this;
}
void SessionResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessioninfo_.Clear();
  nextkey_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.security.firewall.v1.SessionResponse sessioninfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 nextkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nextkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.security.firewall.v1.SessionResponse sessioninfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sessioninfo(i), target, stream);
  }

  // uint64 nextkey = 2;
  if (this->_internal_nextkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nextkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionResponses)
  return target;
}

size_t SessionResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.firewall.v1.SessionResponse sessioninfo = 1;
  total_size += 1UL * this->_internal_sessioninfo_size();
  for (const auto& msg : this->sessioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 nextkey = 2;
  if (this->_internal_nextkey() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nextkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponses::GetClassData() const { return &_class_data_; }

void SessionResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponses *>(to)->MergeFrom(
      static_cast<const SessionResponses &>(from));
}


void SessionResponses::MergeFrom(const SessionResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionResponses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sessioninfo_.MergeFrom(from.sessioninfo_);
  if (from._internal_nextkey() != 0) {
    _internal_set_nextkey(from._internal_nextkey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponses::CopyFrom(const SessionResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponses::IsInitialized() const {
  return true;
}

void SessionResponses::InternalSwap(SessionResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sessioninfo_.InternalSwap(&other->sessioninfo_);
  swap(nextkey_, other->nextkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[4]);
}

// ===================================================================

class AddSessionResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const AddSessionResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AddSessionResponse::_Internal::starttime(const AddSessionResponse* msg) {
  return *msg->starttime_;
}
void AddSessionResponse::clear_starttime() {
  if (GetArenaForAllocation() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
AddSessionResponse::AddSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responseerror_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.AddSessionResponse)
}
AddSessionResponse::AddSessionResponse(const AddSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responseerror_(from.responseerror_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    starttime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  ::memcpy(&errorstatus_, &from.errorstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&errorstatus_)) + sizeof(requeststatus_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.AddSessionResponse)
}

inline void AddSessionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(requeststatus_));
}

AddSessionResponse::~AddSessionResponse() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.AddSessionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete starttime_;
}

void AddSessionResponse::ArenaDtor(void* object) {
  AddSessionResponse* _this = reinterpret_cast< AddSessionResponse* >(object);
  (void)_this;
}
void AddSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.AddSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responseerror_.Clear();
  if (GetArenaForAllocation() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  ::memset(&errorstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&errorstatus_)) + sizeof(requeststatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.security.firewall.v1.AddSessionStatus requeststatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requeststatus(static_cast<::opi_api::security::firewall::v1::AddSessionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 errorstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp starttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.security.firewall.v1.SessionResponseError responseerror = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responseerror(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.AddSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.security.firewall.v1.AddSessionStatus requeststatus = 1;
  if (this->_internal_requeststatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requeststatus(), target);
  }

  // uint64 errorstatus = 2;
  if (this->_internal_errorstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_errorstatus(), target);
  }

  // .google.protobuf.Timestamp starttime = 3;
  if (this->_internal_has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::starttime(this), target, stream);
  }

  // repeated .opi_api.security.firewall.v1.SessionResponseError responseerror = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responseerror_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_responseerror(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.AddSessionResponse)
  return target;
}

size_t AddSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.AddSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.security.firewall.v1.SessionResponseError responseerror = 4;
  total_size += 1UL * this->_internal_responseerror_size();
  for (const auto& msg : this->responseerror_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp starttime = 3;
  if (this->_internal_has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // uint64 errorstatus = 2;
  if (this->_internal_errorstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_errorstatus());
  }

  // .opi_api.security.firewall.v1.AddSessionStatus requeststatus = 1;
  if (this->_internal_requeststatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requeststatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSessionResponse::GetClassData() const { return &_class_data_; }

void AddSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSessionResponse *>(to)->MergeFrom(
      static_cast<const AddSessionResponse &>(from));
}


void AddSessionResponse::MergeFrom(const AddSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.AddSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  responseerror_.MergeFrom(from.responseerror_);
  if (from._internal_has_starttime()) {
    _internal_mutable_starttime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from._internal_errorstatus() != 0) {
    _internal_set_errorstatus(from._internal_errorstatus());
  }
  if (from._internal_requeststatus() != 0) {
    _internal_set_requeststatus(from._internal_requeststatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSessionResponse::CopyFrom(const AddSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.AddSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSessionResponse::IsInitialized() const {
  return true;
}

void AddSessionResponse::InternalSwap(AddSessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responseerror_.InternalSwap(&other->responseerror_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddSessionResponse, requeststatus_)
      + sizeof(AddSessionResponse::requeststatus_)
      - PROTOBUF_FIELD_OFFSET(AddSessionResponse, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSessionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[5]);
}

// ===================================================================

class SessionResponse::_Internal {
 public:
  static const ::opi_api::common::v1::Uuid& sessionid(const SessionResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const SessionResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& endtime(const SessionResponse* msg);
};

const ::opi_api::common::v1::Uuid&
SessionResponse::_Internal::sessionid(const SessionResponse* msg) {
  return *msg->sessionid_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionResponse::_Internal::starttime(const SessionResponse* msg) {
  return *msg->starttime_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionResponse::_Internal::endtime(const SessionResponse* msg) {
  return *msg->endtime_;
}
void SessionResponse::clear_sessionid() {
  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
}
void SessionResponse::clear_starttime() {
  if (GetArenaForAllocation() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
void SessionResponse::clear_endtime() {
  if (GetArenaForAllocation() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
SessionResponse::SessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sessionid()) {
    sessionid_ = new ::opi_api::common::v1::Uuid(*from.sessionid_);
  } else {
    sessionid_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  if (from._internal_has_endtime()) {
    endtime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  ::memcpy(&inpackets_, &from.inpackets_,
    static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&inpackets_)) + sizeof(requeststatus_));
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionResponse)
}

inline void SessionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requeststatus_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(requeststatus_));
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sessionid_;
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete endtime_;
}

void SessionResponse::ArenaDtor(void* object) {
  SessionResponse* _this = reinterpret_cast< SessionResponse* >(object);
  (void)_this;
}
void SessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  ::memset(&inpackets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requeststatus_) -
      reinterpret_cast<char*>(&inpackets_)) + sizeof(requeststatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.Uuid sessionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 inpackets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          inpackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 outpackets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          outpackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 inbytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          inbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 outbytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          outbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.SessionState sessionstate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sessionstate(static_cast<::opi_api::security::firewall::v1::SessionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.SessionCloseCode sessionclosecode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sessionclosecode(static_cast<::opi_api::security::firewall::v1::SessionCloseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.RequestStatus requeststatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requeststatus(static_cast<::opi_api::security::firewall::v1::RequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp starttime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp endtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sessionid(this), target, stream);
  }

  // uint64 inpackets = 2;
  if (this->_internal_inpackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inpackets(), target);
  }

  // uint64 outpackets = 3;
  if (this->_internal_outpackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_outpackets(), target);
  }

  // uint64 inbytes = 4;
  if (this->_internal_inbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_inbytes(), target);
  }

  // uint64 outbytes = 5;
  if (this->_internal_outbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_outbytes(), target);
  }

  // .opi_api.security.firewall.v1.SessionState sessionstate = 6;
  if (this->_internal_sessionstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sessionstate(), target);
  }

  // .opi_api.security.firewall.v1.SessionCloseCode sessionclosecode = 7;
  if (this->_internal_sessionclosecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sessionclosecode(), target);
  }

  // .opi_api.security.firewall.v1.RequestStatus requeststatus = 8;
  if (this->_internal_requeststatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_requeststatus(), target);
  }

  // .google.protobuf.Timestamp starttime = 9;
  if (this->_internal_has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::starttime(this), target, stream);
  }

  // .google.protobuf.Timestamp endtime = 10;
  if (this->_internal_has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::endtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionResponse)
  return target;
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sessionid_);
  }

  // .google.protobuf.Timestamp starttime = 9;
  if (this->_internal_has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .google.protobuf.Timestamp endtime = 10;
  if (this->_internal_has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  // uint64 inpackets = 2;
  if (this->_internal_inpackets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_inpackets());
  }

  // uint64 outpackets = 3;
  if (this->_internal_outpackets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_outpackets());
  }

  // uint64 inbytes = 4;
  if (this->_internal_inbytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_inbytes());
  }

  // uint64 outbytes = 5;
  if (this->_internal_outbytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_outbytes());
  }

  // .opi_api.security.firewall.v1.SessionState sessionstate = 6;
  if (this->_internal_sessionstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sessionstate());
  }

  // .opi_api.security.firewall.v1.SessionCloseCode sessionclosecode = 7;
  if (this->_internal_sessionclosecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sessionclosecode());
  }

  // .opi_api.security.firewall.v1.RequestStatus requeststatus = 8;
  if (this->_internal_requeststatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requeststatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponse::GetClassData() const { return &_class_data_; }

void SessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponse *>(to)->MergeFrom(
      static_cast<const SessionResponse &>(from));
}


void SessionResponse::MergeFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sessionid()) {
    _internal_mutable_sessionid()->::opi_api::common::v1::Uuid::MergeFrom(from._internal_sessionid());
  }
  if (from._internal_has_starttime()) {
    _internal_mutable_starttime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from._internal_has_endtime()) {
    _internal_mutable_endtime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_endtime());
  }
  if (from._internal_inpackets() != 0) {
    _internal_set_inpackets(from._internal_inpackets());
  }
  if (from._internal_outpackets() != 0) {
    _internal_set_outpackets(from._internal_outpackets());
  }
  if (from._internal_inbytes() != 0) {
    _internal_set_inbytes(from._internal_inbytes());
  }
  if (from._internal_outbytes() != 0) {
    _internal_set_outbytes(from._internal_outbytes());
  }
  if (from._internal_sessionstate() != 0) {
    _internal_set_sessionstate(from._internal_sessionstate());
  }
  if (from._internal_sessionclosecode() != 0) {
    _internal_set_sessionclosecode(from._internal_sessionclosecode());
  }
  if (from._internal_requeststatus() != 0) {
    _internal_set_requeststatus(from._internal_requeststatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::InternalSwap(SessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionResponse, requeststatus_)
      + sizeof(SessionResponse::requeststatus_)
      - PROTOBUF_FIELD_OFFSET(SessionResponse, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[6]);
}

// ===================================================================

class SessionRequestArgs::_Internal {
 public:
  static const ::opi_api::common::v1::Uuid& sessionid(const SessionRequestArgs* msg);
};

const ::opi_api::common::v1::Uuid&
SessionRequestArgs::_Internal::sessionid(const SessionRequestArgs* msg) {
  return *msg->sessionid_;
}
void SessionRequestArgs::clear_sessionid() {
  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
}
SessionRequestArgs::SessionRequestArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.security.firewall.v1.SessionRequestArgs)
}
SessionRequestArgs::SessionRequestArgs(const SessionRequestArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sessionid()) {
    sessionid_ = new ::opi_api::common::v1::Uuid(*from.sessionid_);
  } else {
    sessionid_ = nullptr;
  }
  sessionstate_ = from.sessionstate_;
  // @@protoc_insertion_point(copy_constructor:opi_api.security.firewall.v1.SessionRequestArgs)
}

inline void SessionRequestArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionstate_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(sessionstate_));
}

SessionRequestArgs::~SessionRequestArgs() {
  // @@protoc_insertion_point(destructor:opi_api.security.firewall.v1.SessionRequestArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionRequestArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sessionid_;
}

void SessionRequestArgs::ArenaDtor(void* object) {
  SessionRequestArgs* _this = reinterpret_cast< SessionRequestArgs* >(object);
  (void)_this;
}
void SessionRequestArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRequestArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionRequestArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.security.firewall.v1.SessionRequestArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sessionid_ != nullptr) {
    delete sessionid_;
  }
  sessionid_ = nullptr;
  sessionstate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRequestArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.Uuid sessionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.security.firewall.v1.SessionState sessionstate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sessionstate(static_cast<::opi_api::security::firewall::v1::SessionState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRequestArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.security.firewall.v1.SessionRequestArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sessionid(this), target, stream);
  }

  // .opi_api.security.firewall.v1.SessionState sessionstate = 2;
  if (this->_internal_sessionstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sessionstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.security.firewall.v1.SessionRequestArgs)
  return target;
}

size_t SessionRequestArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.security.firewall.v1.SessionRequestArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.Uuid sessionid = 1;
  if (this->_internal_has_sessionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sessionid_);
  }

  // .opi_api.security.firewall.v1.SessionState sessionstate = 2;
  if (this->_internal_sessionstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sessionstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRequestArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionRequestArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRequestArgs::GetClassData() const { return &_class_data_; }

void SessionRequestArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionRequestArgs *>(to)->MergeFrom(
      static_cast<const SessionRequestArgs &>(from));
}


void SessionRequestArgs::MergeFrom(const SessionRequestArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.security.firewall.v1.SessionRequestArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sessionid()) {
    _internal_mutable_sessionid()->::opi_api::common::v1::Uuid::MergeFrom(from._internal_sessionid());
  }
  if (from._internal_sessionstate() != 0) {
    _internal_set_sessionstate(from._internal_sessionstate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRequestArgs::CopyFrom(const SessionRequestArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.security.firewall.v1.SessionRequestArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequestArgs::IsInitialized() const {
  return true;
}

void SessionRequestArgs::InternalSwap(SessionRequestArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRequestArgs, sessionstate_)
      + sizeof(SessionRequestArgs::sessionstate_)
      - PROTOBUF_FIELD_OFFSET(SessionRequestArgs, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRequestArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firewall
}  // namespace security
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionId* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionId >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::ActionParameters* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::ActionParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::ActionParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionRequest* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionResponseError* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionResponseError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionResponseError >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionResponses* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::AddSessionResponse* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::AddSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::AddSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionResponse* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::security::firewall::v1::SessionRequestArgs* Arena::CreateMaybeMessage< ::opi_api::security::firewall::v1::SessionRequestArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::security::firewall::v1::SessionRequestArgs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
