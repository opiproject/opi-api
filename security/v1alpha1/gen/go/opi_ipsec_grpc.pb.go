//
// Copyright (C) 2021 Intel Corporation
// Copyright (c) 2023 Dell Inc, or its subsidiaries.
// SPDX-License-Identifier: Apache-2.0
//
// Service functions for IKE/IPsec resources.
//
// Operations are defined for the following resources:
// - IKE Peer Association Database (PAD)
// - IKE Connections
// - IPsec Security Policy Database (SPD)
// - IPsec Security Associations (SAs)
//
// The configuration model is derived from RFC 9061.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: opi_ipsec.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IkePeerService_CreateIkePeer_FullMethodName = "/opi_api.security.v1alpha1.IkePeerService/CreateIkePeer"
	IkePeerService_UpdateIkePeer_FullMethodName = "/opi_api.security.v1alpha1.IkePeerService/UpdateIkePeer"
	IkePeerService_DeleteIkePeer_FullMethodName = "/opi_api.security.v1alpha1.IkePeerService/DeleteIkePeer"
	IkePeerService_GetIkePeer_FullMethodName    = "/opi_api.security.v1alpha1.IkePeerService/GetIkePeer"
	IkePeerService_ListIkePeers_FullMethodName  = "/opi_api.security.v1alpha1.IkePeerService/ListIkePeers"
)

// IkePeerServiceClient is the client API for IkePeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IkePeerServiceClient interface {
	// Create an IKE peer. This request includes the specification of the keys and certificates
	// associated with the peer.
	CreateIkePeer(ctx context.Context, in *CreateIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error)
	// Update an existing IKE peer specification.
	UpdateIkePeer(ctx context.Context, in *UpdateIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error)
	// Delete an existing IKE peer specification.
	DeleteIkePeer(ctx context.Context, in *DeleteIkePeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an existing IKE peer specification.
	GetIkePeer(ctx context.Context, in *GetIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error)
	// List existing IKE peers.
	ListIkePeers(ctx context.Context, in *ListIkePeersRequest, opts ...grpc.CallOption) (*ListIkePeersResponse, error)
}

type ikePeerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIkePeerServiceClient(cc grpc.ClientConnInterface) IkePeerServiceClient {
	return &ikePeerServiceClient{cc}
}

func (c *ikePeerServiceClient) CreateIkePeer(ctx context.Context, in *CreateIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error) {
	out := new(IkePeer)
	err := c.cc.Invoke(ctx, IkePeerService_CreateIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikePeerServiceClient) UpdateIkePeer(ctx context.Context, in *UpdateIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error) {
	out := new(IkePeer)
	err := c.cc.Invoke(ctx, IkePeerService_UpdateIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikePeerServiceClient) DeleteIkePeer(ctx context.Context, in *DeleteIkePeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IkePeerService_DeleteIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikePeerServiceClient) GetIkePeer(ctx context.Context, in *GetIkePeerRequest, opts ...grpc.CallOption) (*IkePeer, error) {
	out := new(IkePeer)
	err := c.cc.Invoke(ctx, IkePeerService_GetIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikePeerServiceClient) ListIkePeers(ctx context.Context, in *ListIkePeersRequest, opts ...grpc.CallOption) (*ListIkePeersResponse, error) {
	out := new(ListIkePeersResponse)
	err := c.cc.Invoke(ctx, IkePeerService_ListIkePeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IkePeerServiceServer is the server API for IkePeerService service.
// All implementations must embed UnimplementedIkePeerServiceServer
// for forward compatibility
type IkePeerServiceServer interface {
	// Create an IKE peer. This request includes the specification of the keys and certificates
	// associated with the peer.
	CreateIkePeer(context.Context, *CreateIkePeerRequest) (*IkePeer, error)
	// Update an existing IKE peer specification.
	UpdateIkePeer(context.Context, *UpdateIkePeerRequest) (*IkePeer, error)
	// Delete an existing IKE peer specification.
	DeleteIkePeer(context.Context, *DeleteIkePeerRequest) (*emptypb.Empty, error)
	// Get an existing IKE peer specification.
	GetIkePeer(context.Context, *GetIkePeerRequest) (*IkePeer, error)
	// List existing IKE peers.
	ListIkePeers(context.Context, *ListIkePeersRequest) (*ListIkePeersResponse, error)
	mustEmbedUnimplementedIkePeerServiceServer()
}

// UnimplementedIkePeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIkePeerServiceServer struct {
}

func (UnimplementedIkePeerServiceServer) CreateIkePeer(context.Context, *CreateIkePeerRequest) (*IkePeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIkePeer not implemented")
}
func (UnimplementedIkePeerServiceServer) UpdateIkePeer(context.Context, *UpdateIkePeerRequest) (*IkePeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIkePeer not implemented")
}
func (UnimplementedIkePeerServiceServer) DeleteIkePeer(context.Context, *DeleteIkePeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIkePeer not implemented")
}
func (UnimplementedIkePeerServiceServer) GetIkePeer(context.Context, *GetIkePeerRequest) (*IkePeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIkePeer not implemented")
}
func (UnimplementedIkePeerServiceServer) ListIkePeers(context.Context, *ListIkePeersRequest) (*ListIkePeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIkePeers not implemented")
}
func (UnimplementedIkePeerServiceServer) mustEmbedUnimplementedIkePeerServiceServer() {}

// UnsafeIkePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IkePeerServiceServer will
// result in compilation errors.
type UnsafeIkePeerServiceServer interface {
	mustEmbedUnimplementedIkePeerServiceServer()
}

func RegisterIkePeerServiceServer(s grpc.ServiceRegistrar, srv IkePeerServiceServer) {
	s.RegisterService(&IkePeerService_ServiceDesc, srv)
}

func _IkePeerService_CreateIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkePeerServiceServer).CreateIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkePeerService_CreateIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkePeerServiceServer).CreateIkePeer(ctx, req.(*CreateIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkePeerService_UpdateIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkePeerServiceServer).UpdateIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkePeerService_UpdateIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkePeerServiceServer).UpdateIkePeer(ctx, req.(*UpdateIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkePeerService_DeleteIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkePeerServiceServer).DeleteIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkePeerService_DeleteIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkePeerServiceServer).DeleteIkePeer(ctx, req.(*DeleteIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkePeerService_GetIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkePeerServiceServer).GetIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkePeerService_GetIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkePeerServiceServer).GetIkePeer(ctx, req.(*GetIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkePeerService_ListIkePeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIkePeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkePeerServiceServer).ListIkePeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkePeerService_ListIkePeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkePeerServiceServer).ListIkePeers(ctx, req.(*ListIkePeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IkePeerService_ServiceDesc is the grpc.ServiceDesc for IkePeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IkePeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1alpha1.IkePeerService",
	HandlerType: (*IkePeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIkePeer",
			Handler:    _IkePeerService_CreateIkePeer_Handler,
		},
		{
			MethodName: "UpdateIkePeer",
			Handler:    _IkePeerService_UpdateIkePeer_Handler,
		},
		{
			MethodName: "DeleteIkePeer",
			Handler:    _IkePeerService_DeleteIkePeer_Handler,
		},
		{
			MethodName: "GetIkePeer",
			Handler:    _IkePeerService_GetIkePeer_Handler,
		},
		{
			MethodName: "ListIkePeers",
			Handler:    _IkePeerService_ListIkePeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opi_ipsec.proto",
}

const (
	IkeConnectionService_CreateIkeConnection_FullMethodName = "/opi_api.security.v1alpha1.IkeConnectionService/CreateIkeConnection"
	IkeConnectionService_UpdateIkeConnection_FullMethodName = "/opi_api.security.v1alpha1.IkeConnectionService/UpdateIkeConnection"
	IkeConnectionService_DeleteIkeConnection_FullMethodName = "/opi_api.security.v1alpha1.IkeConnectionService/DeleteIkeConnection"
	IkeConnectionService_GetIkeConnection_FullMethodName    = "/opi_api.security.v1alpha1.IkeConnectionService/GetIkeConnection"
	IkeConnectionService_ListIkeConnections_FullMethodName  = "/opi_api.security.v1alpha1.IkeConnectionService/ListIkeConnections"
	IkeConnectionService_StatsIkeConnections_FullMethodName = "/opi_api.security.v1alpha1.IkeConnectionService/StatsIkeConnections"
)

// IkeConnectionServiceClient is the client API for IkeConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IkeConnectionServiceClient interface {
	// Create an IKE connection. The request includes specification of the local
	// and remote IKE peers and the specification of the IPsec SAs (aka child SAs)
	// from this IKE connection.
	CreateIkeConnection(ctx context.Context, in *CreateIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error)
	// Update an existing IKE connection.
	UpdateIkeConnection(ctx context.Context, in *UpdateIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error)
	// Delete an existing IKE connection.
	DeleteIkeConnection(ctx context.Context, in *DeleteIkeConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve an IKE connection.
	GetIkeConnection(ctx context.Context, in *GetIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error)
	// List existing IKE connections.
	ListIkeConnections(ctx context.Context, in *ListIkeConnectionsRequest, opts ...grpc.CallOption) (*ListIkeConnectionsResponse, error)
	// Get IKE connection statistics.
	StatsIkeConnections(ctx context.Context, in *StatsIkeConnectionsRequest, opts ...grpc.CallOption) (*StatsIkeConnectionsResponse, error)
}

type ikeConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIkeConnectionServiceClient(cc grpc.ClientConnInterface) IkeConnectionServiceClient {
	return &ikeConnectionServiceClient{cc}
}

func (c *ikeConnectionServiceClient) CreateIkeConnection(ctx context.Context, in *CreateIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error) {
	out := new(IkeConnection)
	err := c.cc.Invoke(ctx, IkeConnectionService_CreateIkeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikeConnectionServiceClient) UpdateIkeConnection(ctx context.Context, in *UpdateIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error) {
	out := new(IkeConnection)
	err := c.cc.Invoke(ctx, IkeConnectionService_UpdateIkeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikeConnectionServiceClient) DeleteIkeConnection(ctx context.Context, in *DeleteIkeConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IkeConnectionService_DeleteIkeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikeConnectionServiceClient) GetIkeConnection(ctx context.Context, in *GetIkeConnectionRequest, opts ...grpc.CallOption) (*IkeConnection, error) {
	out := new(IkeConnection)
	err := c.cc.Invoke(ctx, IkeConnectionService_GetIkeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikeConnectionServiceClient) ListIkeConnections(ctx context.Context, in *ListIkeConnectionsRequest, opts ...grpc.CallOption) (*ListIkeConnectionsResponse, error) {
	out := new(ListIkeConnectionsResponse)
	err := c.cc.Invoke(ctx, IkeConnectionService_ListIkeConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikeConnectionServiceClient) StatsIkeConnections(ctx context.Context, in *StatsIkeConnectionsRequest, opts ...grpc.CallOption) (*StatsIkeConnectionsResponse, error) {
	out := new(StatsIkeConnectionsResponse)
	err := c.cc.Invoke(ctx, IkeConnectionService_StatsIkeConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IkeConnectionServiceServer is the server API for IkeConnectionService service.
// All implementations must embed UnimplementedIkeConnectionServiceServer
// for forward compatibility
type IkeConnectionServiceServer interface {
	// Create an IKE connection. The request includes specification of the local
	// and remote IKE peers and the specification of the IPsec SAs (aka child SAs)
	// from this IKE connection.
	CreateIkeConnection(context.Context, *CreateIkeConnectionRequest) (*IkeConnection, error)
	// Update an existing IKE connection.
	UpdateIkeConnection(context.Context, *UpdateIkeConnectionRequest) (*IkeConnection, error)
	// Delete an existing IKE connection.
	DeleteIkeConnection(context.Context, *DeleteIkeConnectionRequest) (*emptypb.Empty, error)
	// Retrieve an IKE connection.
	GetIkeConnection(context.Context, *GetIkeConnectionRequest) (*IkeConnection, error)
	// List existing IKE connections.
	ListIkeConnections(context.Context, *ListIkeConnectionsRequest) (*ListIkeConnectionsResponse, error)
	// Get IKE connection statistics.
	StatsIkeConnections(context.Context, *StatsIkeConnectionsRequest) (*StatsIkeConnectionsResponse, error)
	mustEmbedUnimplementedIkeConnectionServiceServer()
}

// UnimplementedIkeConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIkeConnectionServiceServer struct {
}

func (UnimplementedIkeConnectionServiceServer) CreateIkeConnection(context.Context, *CreateIkeConnectionRequest) (*IkeConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIkeConnection not implemented")
}
func (UnimplementedIkeConnectionServiceServer) UpdateIkeConnection(context.Context, *UpdateIkeConnectionRequest) (*IkeConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIkeConnection not implemented")
}
func (UnimplementedIkeConnectionServiceServer) DeleteIkeConnection(context.Context, *DeleteIkeConnectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIkeConnection not implemented")
}
func (UnimplementedIkeConnectionServiceServer) GetIkeConnection(context.Context, *GetIkeConnectionRequest) (*IkeConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIkeConnection not implemented")
}
func (UnimplementedIkeConnectionServiceServer) ListIkeConnections(context.Context, *ListIkeConnectionsRequest) (*ListIkeConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIkeConnections not implemented")
}
func (UnimplementedIkeConnectionServiceServer) StatsIkeConnections(context.Context, *StatsIkeConnectionsRequest) (*StatsIkeConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsIkeConnections not implemented")
}
func (UnimplementedIkeConnectionServiceServer) mustEmbedUnimplementedIkeConnectionServiceServer() {}

// UnsafeIkeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IkeConnectionServiceServer will
// result in compilation errors.
type UnsafeIkeConnectionServiceServer interface {
	mustEmbedUnimplementedIkeConnectionServiceServer()
}

func RegisterIkeConnectionServiceServer(s grpc.ServiceRegistrar, srv IkeConnectionServiceServer) {
	s.RegisterService(&IkeConnectionService_ServiceDesc, srv)
}

func _IkeConnectionService_CreateIkeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIkeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).CreateIkeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_CreateIkeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).CreateIkeConnection(ctx, req.(*CreateIkeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkeConnectionService_UpdateIkeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIkeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).UpdateIkeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_UpdateIkeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).UpdateIkeConnection(ctx, req.(*UpdateIkeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkeConnectionService_DeleteIkeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIkeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).DeleteIkeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_DeleteIkeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).DeleteIkeConnection(ctx, req.(*DeleteIkeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkeConnectionService_GetIkeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIkeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).GetIkeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_GetIkeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).GetIkeConnection(ctx, req.(*GetIkeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkeConnectionService_ListIkeConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIkeConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).ListIkeConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_ListIkeConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).ListIkeConnections(ctx, req.(*ListIkeConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkeConnectionService_StatsIkeConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsIkeConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkeConnectionServiceServer).StatsIkeConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkeConnectionService_StatsIkeConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkeConnectionServiceServer).StatsIkeConnections(ctx, req.(*StatsIkeConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IkeConnectionService_ServiceDesc is the grpc.ServiceDesc for IkeConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IkeConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1alpha1.IkeConnectionService",
	HandlerType: (*IkeConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIkeConnection",
			Handler:    _IkeConnectionService_CreateIkeConnection_Handler,
		},
		{
			MethodName: "UpdateIkeConnection",
			Handler:    _IkeConnectionService_UpdateIkeConnection_Handler,
		},
		{
			MethodName: "DeleteIkeConnection",
			Handler:    _IkeConnectionService_DeleteIkeConnection_Handler,
		},
		{
			MethodName: "GetIkeConnection",
			Handler:    _IkeConnectionService_GetIkeConnection_Handler,
		},
		{
			MethodName: "ListIkeConnections",
			Handler:    _IkeConnectionService_ListIkeConnections_Handler,
		},
		{
			MethodName: "StatsIkeConnections",
			Handler:    _IkeConnectionService_StatsIkeConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opi_ipsec.proto",
}

const (
	IpsecSaService_CreateIpsecSa_FullMethodName = "/opi_api.security.v1alpha1.IpsecSaService/CreateIpsecSa"
	IpsecSaService_UpdateIpsecSa_FullMethodName = "/opi_api.security.v1alpha1.IpsecSaService/UpdateIpsecSa"
	IpsecSaService_DeleteIpsecSa_FullMethodName = "/opi_api.security.v1alpha1.IpsecSaService/DeleteIpsecSa"
	IpsecSaService_GetIpsecSa_FullMethodName    = "/opi_api.security.v1alpha1.IpsecSaService/GetIpsecSa"
	IpsecSaService_ListIpsecSas_FullMethodName  = "/opi_api.security.v1alpha1.IpsecSaService/ListIpsecSas"
)

// IpsecSaServiceClient is the client API for IpsecSaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpsecSaServiceClient interface {
	// Create an IPsec Security Association
	CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error)
	// Update an existing IPsec Security Association
	UpdateIpsecSa(ctx context.Context, in *UpdateIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error)
	// Delete an existing IPsec Security Association
	DeleteIpsecSa(ctx context.Context, in *DeleteIpsecSaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an IPsec Security Association
	GetIpsecSa(ctx context.Context, in *GetIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error)
	// List existing IPsec Security Associations
	ListIpsecSas(ctx context.Context, in *ListIpsecSasRequest, opts ...grpc.CallOption) (*ListIpsecSasResponse, error)
}

type ipsecSaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpsecSaServiceClient(cc grpc.ClientConnInterface) IpsecSaServiceClient {
	return &ipsecSaServiceClient{cc}
}

func (c *ipsecSaServiceClient) CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error) {
	out := new(IpsecSa)
	err := c.cc.Invoke(ctx, IpsecSaService_CreateIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecSaServiceClient) UpdateIpsecSa(ctx context.Context, in *UpdateIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error) {
	out := new(IpsecSa)
	err := c.cc.Invoke(ctx, IpsecSaService_UpdateIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecSaServiceClient) DeleteIpsecSa(ctx context.Context, in *DeleteIpsecSaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IpsecSaService_DeleteIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecSaServiceClient) GetIpsecSa(ctx context.Context, in *GetIpsecSaRequest, opts ...grpc.CallOption) (*IpsecSa, error) {
	out := new(IpsecSa)
	err := c.cc.Invoke(ctx, IpsecSaService_GetIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecSaServiceClient) ListIpsecSas(ctx context.Context, in *ListIpsecSasRequest, opts ...grpc.CallOption) (*ListIpsecSasResponse, error) {
	out := new(ListIpsecSasResponse)
	err := c.cc.Invoke(ctx, IpsecSaService_ListIpsecSas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpsecSaServiceServer is the server API for IpsecSaService service.
// All implementations must embed UnimplementedIpsecSaServiceServer
// for forward compatibility
type IpsecSaServiceServer interface {
	// Create an IPsec Security Association
	CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*IpsecSa, error)
	// Update an existing IPsec Security Association
	UpdateIpsecSa(context.Context, *UpdateIpsecSaRequest) (*IpsecSa, error)
	// Delete an existing IPsec Security Association
	DeleteIpsecSa(context.Context, *DeleteIpsecSaRequest) (*emptypb.Empty, error)
	// Get an IPsec Security Association
	GetIpsecSa(context.Context, *GetIpsecSaRequest) (*IpsecSa, error)
	// List existing IPsec Security Associations
	ListIpsecSas(context.Context, *ListIpsecSasRequest) (*ListIpsecSasResponse, error)
	mustEmbedUnimplementedIpsecSaServiceServer()
}

// UnimplementedIpsecSaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpsecSaServiceServer struct {
}

func (UnimplementedIpsecSaServiceServer) CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*IpsecSa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecSa not implemented")
}
func (UnimplementedIpsecSaServiceServer) UpdateIpsecSa(context.Context, *UpdateIpsecSaRequest) (*IpsecSa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpsecSa not implemented")
}
func (UnimplementedIpsecSaServiceServer) DeleteIpsecSa(context.Context, *DeleteIpsecSaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpsecSa not implemented")
}
func (UnimplementedIpsecSaServiceServer) GetIpsecSa(context.Context, *GetIpsecSaRequest) (*IpsecSa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSa not implemented")
}
func (UnimplementedIpsecSaServiceServer) ListIpsecSas(context.Context, *ListIpsecSasRequest) (*ListIpsecSasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpsecSas not implemented")
}
func (UnimplementedIpsecSaServiceServer) mustEmbedUnimplementedIpsecSaServiceServer() {}

// UnsafeIpsecSaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpsecSaServiceServer will
// result in compilation errors.
type UnsafeIpsecSaServiceServer interface {
	mustEmbedUnimplementedIpsecSaServiceServer()
}

func RegisterIpsecSaServiceServer(s grpc.ServiceRegistrar, srv IpsecSaServiceServer) {
	s.RegisterService(&IpsecSaService_ServiceDesc, srv)
}

func _IpsecSaService_CreateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecSaServiceServer).CreateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecSaService_CreateIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecSaServiceServer).CreateIpsecSa(ctx, req.(*CreateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecSaService_UpdateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecSaServiceServer).UpdateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecSaService_UpdateIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecSaServiceServer).UpdateIpsecSa(ctx, req.(*UpdateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecSaService_DeleteIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecSaServiceServer).DeleteIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecSaService_DeleteIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecSaServiceServer).DeleteIpsecSa(ctx, req.(*DeleteIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecSaService_GetIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecSaServiceServer).GetIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecSaService_GetIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecSaServiceServer).GetIpsecSa(ctx, req.(*GetIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecSaService_ListIpsecSas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpsecSasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecSaServiceServer).ListIpsecSas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecSaService_ListIpsecSas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecSaServiceServer).ListIpsecSas(ctx, req.(*ListIpsecSasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpsecSaService_ServiceDesc is the grpc.ServiceDesc for IpsecSaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpsecSaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1alpha1.IpsecSaService",
	HandlerType: (*IpsecSaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpsecSa",
			Handler:    _IpsecSaService_CreateIpsecSa_Handler,
		},
		{
			MethodName: "UpdateIpsecSa",
			Handler:    _IpsecSaService_UpdateIpsecSa_Handler,
		},
		{
			MethodName: "DeleteIpsecSa",
			Handler:    _IpsecSaService_DeleteIpsecSa_Handler,
		},
		{
			MethodName: "GetIpsecSa",
			Handler:    _IpsecSaService_GetIpsecSa_Handler,
		},
		{
			MethodName: "ListIpsecSas",
			Handler:    _IpsecSaService_ListIpsecSas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opi_ipsec.proto",
}

const (
	IpsecPolicyService_CreateIpsecPolicy_FullMethodName = "/opi_api.security.v1alpha1.IpsecPolicyService/CreateIpsecPolicy"
	IpsecPolicyService_UpdateIpsecPolicy_FullMethodName = "/opi_api.security.v1alpha1.IpsecPolicyService/UpdateIpsecPolicy"
	IpsecPolicyService_DeleteIpsecPolicy_FullMethodName = "/opi_api.security.v1alpha1.IpsecPolicyService/DeleteIpsecPolicy"
	IpsecPolicyService_GetIpsecPolicy_FullMethodName    = "/opi_api.security.v1alpha1.IpsecPolicyService/GetIpsecPolicy"
	IpsecPolicyService_ListIpsecPolicies_FullMethodName = "/opi_api.security.v1alpha1.IpsecPolicyService/ListIpsecPolicies"
)

// IpsecPolicyServiceClient is the client API for IpsecPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpsecPolicyServiceClient interface {
	// Create an IPsec Policy
	CreateIpsecPolicy(ctx context.Context, in *CreateIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error)
	// Update an existing IPsec Policy
	UpdateIpsecPolicy(ctx context.Context, in *UpdateIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error)
	// Delete an existing IPsec Policy
	DeleteIpsecPolicy(ctx context.Context, in *DeleteIpsecPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an IPsec Policy
	GetIpsecPolicy(ctx context.Context, in *GetIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error)
	// List existing IPsec Policies
	ListIpsecPolicies(ctx context.Context, in *ListIpsecPoliciesRequest, opts ...grpc.CallOption) (*ListIpsecPoliciesResponse, error)
}

type ipsecPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpsecPolicyServiceClient(cc grpc.ClientConnInterface) IpsecPolicyServiceClient {
	return &ipsecPolicyServiceClient{cc}
}

func (c *ipsecPolicyServiceClient) CreateIpsecPolicy(ctx context.Context, in *CreateIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error) {
	out := new(IpsecPolicy)
	err := c.cc.Invoke(ctx, IpsecPolicyService_CreateIpsecPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecPolicyServiceClient) UpdateIpsecPolicy(ctx context.Context, in *UpdateIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error) {
	out := new(IpsecPolicy)
	err := c.cc.Invoke(ctx, IpsecPolicyService_UpdateIpsecPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecPolicyServiceClient) DeleteIpsecPolicy(ctx context.Context, in *DeleteIpsecPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IpsecPolicyService_DeleteIpsecPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecPolicyServiceClient) GetIpsecPolicy(ctx context.Context, in *GetIpsecPolicyRequest, opts ...grpc.CallOption) (*IpsecPolicy, error) {
	out := new(IpsecPolicy)
	err := c.cc.Invoke(ctx, IpsecPolicyService_GetIpsecPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecPolicyServiceClient) ListIpsecPolicies(ctx context.Context, in *ListIpsecPoliciesRequest, opts ...grpc.CallOption) (*ListIpsecPoliciesResponse, error) {
	out := new(ListIpsecPoliciesResponse)
	err := c.cc.Invoke(ctx, IpsecPolicyService_ListIpsecPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpsecPolicyServiceServer is the server API for IpsecPolicyService service.
// All implementations must embed UnimplementedIpsecPolicyServiceServer
// for forward compatibility
type IpsecPolicyServiceServer interface {
	// Create an IPsec Policy
	CreateIpsecPolicy(context.Context, *CreateIpsecPolicyRequest) (*IpsecPolicy, error)
	// Update an existing IPsec Policy
	UpdateIpsecPolicy(context.Context, *UpdateIpsecPolicyRequest) (*IpsecPolicy, error)
	// Delete an existing IPsec Policy
	DeleteIpsecPolicy(context.Context, *DeleteIpsecPolicyRequest) (*emptypb.Empty, error)
	// Get an IPsec Policy
	GetIpsecPolicy(context.Context, *GetIpsecPolicyRequest) (*IpsecPolicy, error)
	// List existing IPsec Policies
	ListIpsecPolicies(context.Context, *ListIpsecPoliciesRequest) (*ListIpsecPoliciesResponse, error)
	mustEmbedUnimplementedIpsecPolicyServiceServer()
}

// UnimplementedIpsecPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpsecPolicyServiceServer struct {
}

func (UnimplementedIpsecPolicyServiceServer) CreateIpsecPolicy(context.Context, *CreateIpsecPolicyRequest) (*IpsecPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecPolicy not implemented")
}
func (UnimplementedIpsecPolicyServiceServer) UpdateIpsecPolicy(context.Context, *UpdateIpsecPolicyRequest) (*IpsecPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpsecPolicy not implemented")
}
func (UnimplementedIpsecPolicyServiceServer) DeleteIpsecPolicy(context.Context, *DeleteIpsecPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpsecPolicy not implemented")
}
func (UnimplementedIpsecPolicyServiceServer) GetIpsecPolicy(context.Context, *GetIpsecPolicyRequest) (*IpsecPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecPolicy not implemented")
}
func (UnimplementedIpsecPolicyServiceServer) ListIpsecPolicies(context.Context, *ListIpsecPoliciesRequest) (*ListIpsecPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpsecPolicies not implemented")
}
func (UnimplementedIpsecPolicyServiceServer) mustEmbedUnimplementedIpsecPolicyServiceServer() {}

// UnsafeIpsecPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpsecPolicyServiceServer will
// result in compilation errors.
type UnsafeIpsecPolicyServiceServer interface {
	mustEmbedUnimplementedIpsecPolicyServiceServer()
}

func RegisterIpsecPolicyServiceServer(s grpc.ServiceRegistrar, srv IpsecPolicyServiceServer) {
	s.RegisterService(&IpsecPolicyService_ServiceDesc, srv)
}

func _IpsecPolicyService_CreateIpsecPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecPolicyServiceServer).CreateIpsecPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecPolicyService_CreateIpsecPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecPolicyServiceServer).CreateIpsecPolicy(ctx, req.(*CreateIpsecPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecPolicyService_UpdateIpsecPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpsecPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecPolicyServiceServer).UpdateIpsecPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecPolicyService_UpdateIpsecPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecPolicyServiceServer).UpdateIpsecPolicy(ctx, req.(*UpdateIpsecPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecPolicyService_DeleteIpsecPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpsecPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecPolicyServiceServer).DeleteIpsecPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecPolicyService_DeleteIpsecPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecPolicyServiceServer).DeleteIpsecPolicy(ctx, req.(*DeleteIpsecPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecPolicyService_GetIpsecPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecPolicyServiceServer).GetIpsecPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecPolicyService_GetIpsecPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecPolicyServiceServer).GetIpsecPolicy(ctx, req.(*GetIpsecPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecPolicyService_ListIpsecPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpsecPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecPolicyServiceServer).ListIpsecPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecPolicyService_ListIpsecPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecPolicyServiceServer).ListIpsecPolicies(ctx, req.(*ListIpsecPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpsecPolicyService_ServiceDesc is the grpc.ServiceDesc for IpsecPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpsecPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1alpha1.IpsecPolicyService",
	HandlerType: (*IpsecPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpsecPolicy",
			Handler:    _IpsecPolicyService_CreateIpsecPolicy_Handler,
		},
		{
			MethodName: "UpdateIpsecPolicy",
			Handler:    _IpsecPolicyService_UpdateIpsecPolicy_Handler,
		},
		{
			MethodName: "DeleteIpsecPolicy",
			Handler:    _IpsecPolicyService_DeleteIpsecPolicy_Handler,
		},
		{
			MethodName: "GetIpsecPolicy",
			Handler:    _IpsecPolicyService_GetIpsecPolicy_Handler,
		},
		{
			MethodName: "ListIpsecPolicies",
			Handler:    _IpsecPolicyService_ListIpsecPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opi_ipsec.proto",
}
