// Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
// Copyright (C) 2020 Palo Alto Networks Intellectual Property. All rights reserved.
// Copyright (C) 2022 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// NOTE: This file originally came from here:
//       https://github.com/att/sessionOffload/blob/master/protos/openoffload.proto
//
//       The OPI project will modify this protobuf file to fit our firewall
//       use case, but it's a great starting point.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: openoffload.proto

// will move to v1 at release
// increment beta1 to beta2 , etc for changes during development

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpVersion int32

const (
	IpVersion__IPV4 IpVersion = 0
	IpVersion__IPV6 IpVersion = 1
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "_IPV4",
		1: "_IPV6",
	}
	IpVersion_value = map[string]int32{
		"_IPV4": 0,
		"_IPV6": 1,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[0]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{0}
}

type ProtocolId int32

const (
	ProtocolId__HOPOPT ProtocolId = 0
	ProtocolId__TCP    ProtocolId = 6
	ProtocolId__UDP    ProtocolId = 17
)

// Enum value maps for ProtocolId.
var (
	ProtocolId_name = map[int32]string{
		0:  "_HOPOPT",
		6:  "_TCP",
		17: "_UDP",
	}
	ProtocolId_value = map[string]int32{
		"_HOPOPT": 0,
		"_TCP":    6,
		"_UDP":    17,
	}
)

func (x ProtocolId) Enum() *ProtocolId {
	p := new(ProtocolId)
	*p = x
	return p
}

func (x ProtocolId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolId) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[1].Descriptor()
}

func (ProtocolId) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[1]
}

func (x ProtocolId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolId.Descriptor instead.
func (ProtocolId) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{1}
}

type SessionState int32

const (
	SessionState__ESTABLISHED   SessionState = 0
	SessionState__CLOSING_1     SessionState = 1
	SessionState__CLOSING_2     SessionState = 2
	SessionState__CLOSED        SessionState = 3
	SessionState__UNKNOWN_STATE SessionState = 4
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "_ESTABLISHED",
		1: "_CLOSING_1",
		2: "_CLOSING_2",
		3: "_CLOSED",
		4: "_UNKNOWN_STATE",
	}
	SessionState_value = map[string]int32{
		"_ESTABLISHED":   0,
		"_CLOSING_1":     1,
		"_CLOSING_2":     2,
		"_CLOSED":        3,
		"_UNKNOWN_STATE": 4,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[2].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[2]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{2}
}

type SessionCloseCode int32

const (
	SessionCloseCode__NOT_CLOSED         SessionCloseCode = 0
	SessionCloseCode__FINACK             SessionCloseCode = 1
	SessionCloseCode__RST                SessionCloseCode = 2
	SessionCloseCode__TIMEOUT            SessionCloseCode = 3
	SessionCloseCode__UNKNOWN_CLOSE_CODE SessionCloseCode = 4
)

// Enum value maps for SessionCloseCode.
var (
	SessionCloseCode_name = map[int32]string{
		0: "_NOT_CLOSED",
		1: "_FINACK",
		2: "_RST",
		3: "_TIMEOUT",
		4: "_UNKNOWN_CLOSE_CODE",
	}
	SessionCloseCode_value = map[string]int32{
		"_NOT_CLOSED":         0,
		"_FINACK":             1,
		"_RST":                2,
		"_TIMEOUT":            3,
		"_UNKNOWN_CLOSE_CODE": 4,
	}
)

func (x SessionCloseCode) Enum() *SessionCloseCode {
	p := new(SessionCloseCode)
	*p = x
	return p
}

func (x SessionCloseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionCloseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[3].Descriptor()
}

func (SessionCloseCode) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[3]
}

func (x SessionCloseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionCloseCode.Descriptor instead.
func (SessionCloseCode) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{3}
}

//
// Errors for adding a session
// If all sessions are successful inserted return _ACCEPTED
//
// If check of session capacity in offload device is insufficient to add all sessions
// do not insert any sessions and return  _REJECTED_SESSION_TABLE_FULL. It is the
// responsibility of the client to re-try
//
// If the server is unavailable for some other reason then return _REJECTED_SESSION_TABLE_UNAVAILABLE.
// It is the  responsibility of the client to re-try
//
// All other errors will return _REJECTED with a buit mask of the failed sessions and it is the responsibility
// of the client to address the issues
//
// AddSessionStatus Codes Description
//
// _SESSION_ACCEPTED: Session is accepted by the server and the client performs normal operation
// _SESSION_REJECTED: Session is rejected by the server as the message
//    is invalid, the client needs to correct the error.
// _SESSION_TABLE_FULL: Session is rejected by the server as its session table is full,
//    the client needs to backoff until more space is available
// _SESSION_TABLE_UNAVAILABLE: Session is rejected by the server due to an internal error
//    in the server, the client needs to back off until error is corrected.
// _SESSION_ALREADY_EXISTS: Session is rejected by the the server as it already exists
//    in the server session table, the client will take corrective action to ensure state is consistent.
//
type AddSessionStatus int32

const (
	AddSessionStatus__SESSION_ACCEPTED          AddSessionStatus = 0
	AddSessionStatus__SESSION_REJECTED          AddSessionStatus = 1
	AddSessionStatus__SESSION_TABLE_FULL        AddSessionStatus = 2
	AddSessionStatus__SESSION_TABLE_UNAVAILABLE AddSessionStatus = 3
	AddSessionStatus__SESSION_ALREADY_EXISTS    AddSessionStatus = 4
)

// Enum value maps for AddSessionStatus.
var (
	AddSessionStatus_name = map[int32]string{
		0: "_SESSION_ACCEPTED",
		1: "_SESSION_REJECTED",
		2: "_SESSION_TABLE_FULL",
		3: "_SESSION_TABLE_UNAVAILABLE",
		4: "_SESSION_ALREADY_EXISTS",
	}
	AddSessionStatus_value = map[string]int32{
		"_SESSION_ACCEPTED":          0,
		"_SESSION_REJECTED":          1,
		"_SESSION_TABLE_FULL":        2,
		"_SESSION_TABLE_UNAVAILABLE": 3,
		"_SESSION_ALREADY_EXISTS":    4,
	}
)

func (x AddSessionStatus) Enum() *AddSessionStatus {
	p := new(AddSessionStatus)
	*p = x
	return p
}

func (x AddSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[4].Descriptor()
}

func (AddSessionStatus) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[4]
}

func (x AddSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddSessionStatus.Descriptor instead.
func (AddSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{4}
}

//
// RequestStatus Codes Description
//
// _ACCEPTED: Normal operation
// _REJECTED: Unknown error in the format of the REQUEST message
// _REJECTED_SESSION_NONEXISTENT: In getSession or deleteSession the server does not have the session
//    in its session table. The client needs to reconcile the system state.
// _REJECTED_SESSION_TABLE_FULL: This should never happen as getClosedSessions, getSession, deleteSession never add sessions.
// _REJECTED_SESSION_ALREADY_EXISTS: This should never happen as getClosedSessions, getSession, deleteSession never add sessions.
// _NO_CLOSED_SESSIONS: When getClosedSessions returns with no closed sessions it will return 0 sessions. There should be no
//    message attached so not sure if this is valid.
// _REJECTED_INTERNAL_ERROR: The server has an internal error and cannot serivce the request.
//    The client must log the error and optionally retry or skip the request.
//
type RequestStatus int32

const (
	RequestStatus__ACCEPTED                        RequestStatus = 0
	RequestStatus__REJECTED                        RequestStatus = 1
	RequestStatus__REJECTED_SESSION_NONEXISTENT    RequestStatus = 2
	RequestStatus__REJECTED_SESSION_TABLE_FULL     RequestStatus = 3
	RequestStatus__REJECTED_SESSION_ALREADY_EXISTS RequestStatus = 4
	RequestStatus__NO_CLOSED_SESSIONS              RequestStatus = 5
	RequestStatus__REJECTED_INTERNAL_ERROR         RequestStatus = 6
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "_ACCEPTED",
		1: "_REJECTED",
		2: "_REJECTED_SESSION_NONEXISTENT",
		3: "_REJECTED_SESSION_TABLE_FULL",
		4: "_REJECTED_SESSION_ALREADY_EXISTS",
		5: "_NO_CLOSED_SESSIONS",
		6: "_REJECTED_INTERNAL_ERROR",
	}
	RequestStatus_value = map[string]int32{
		"_ACCEPTED":                        0,
		"_REJECTED":                        1,
		"_REJECTED_SESSION_NONEXISTENT":    2,
		"_REJECTED_SESSION_TABLE_FULL":     3,
		"_REJECTED_SESSION_ALREADY_EXISTS": 4,
		"_NO_CLOSED_SESSIONS":              5,
		"_REJECTED_INTERNAL_ERROR":         6,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[5].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[5]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{5}
}

type ActionType int32

const (
	ActionType__DROP    ActionType = 0
	ActionType__FORWARD ActionType = 1
	ActionType__MIRROR  ActionType = 2
	ActionType__SNOOP   ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "_DROP",
		1: "_FORWARD",
		2: "_MIRROR",
		3: "_SNOOP",
	}
	ActionType_value = map[string]int32{
		"_DROP":    0,
		"_FORWARD": 1,
		"_MIRROR":  2,
		"_SNOOP":   3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openoffload_proto_enumTypes[6].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_openoffload_proto_enumTypes[6]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{6}
}

// should the Application assign the sessionID on AddSession and avoid conflicts
// or have the applications have a mechanism to avoid duplicate sessionIDs across
// applications since there will be many applications instances to 1 switch
type SessionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionId) Reset() {
	*x = SessionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionId) ProtoMessage() {}

func (x *SessionId) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionId.ProtoReflect.Descriptor instead.
func (*SessionId) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{0}
}

func (x *SessionId) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// MIRROR and SNOOP require an actionNextHop
// DROP and FORWARD do not have an actionNextHop
// The IPV4 nextHop definition maps to the V4 struct returned by inet_pton whcih is a uint32_t.
// The IPV6 nextHop definition maps to the V6 struct returned by inet_ptoN which is a uint8_t s6_addr[16]
type ActionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actiontype      ActionType `protobuf:"varint,1,opt,name=actiontype,proto3,enum=opi.security.firewall.v1.ActionType" json:"actiontype,omitempty"`
	Actionnexthop   uint32     `protobuf:"varint,2,opt,name=actionnexthop,proto3" json:"actionnexthop,omitempty"`
	Actionnexthopv6 []byte     `protobuf:"bytes,3,opt,name=actionnexthopv6,proto3" json:"actionnexthopv6,omitempty"`
}

func (x *ActionParameters) Reset() {
	*x = ActionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParameters) ProtoMessage() {}

func (x *ActionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParameters.ProtoReflect.Descriptor instead.
func (*ActionParameters) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{1}
}

func (x *ActionParameters) GetActiontype() ActionType {
	if x != nil {
		return x.Actiontype
	}
	return ActionType__DROP
}

func (x *ActionParameters) GetActionnexthop() uint32 {
	if x != nil {
		return x.Actionnexthop
	}
	return 0
}

func (x *ActionParameters) GetActionnexthopv6() []byte {
	if x != nil {
		return x.Actionnexthopv6
	}
	return nil
}

// SessionId is returned by server side upon successful addSession
// The IPV4 definition maps to the V4 struct returned by inet_pton whcih is a uint32_t.
// The IPV6 definition maps to the V6 struct returned by inet_ptoN which is a uint8_t s6_addr[16]
type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       uint64            `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Inlif           int32             `protobuf:"varint,2,opt,name=inlif,proto3" json:"inlif,omitempty"`
	Outlif          int32             `protobuf:"varint,3,opt,name=outlif,proto3" json:"outlif,omitempty"`
	Ipversion       IpVersion         `protobuf:"varint,4,opt,name=ipversion,proto3,enum=opi.security.firewall.v1.IpVersion" json:"ipversion,omitempty"`
	Sourceip        uint32            `protobuf:"varint,5,opt,name=sourceip,proto3" json:"sourceip,omitempty"`
	Sourceipv6      []byte            `protobuf:"bytes,6,opt,name=sourceipv6,proto3" json:"sourceipv6,omitempty"`
	Sourceport      uint32            `protobuf:"varint,7,opt,name=sourceport,proto3" json:"sourceport,omitempty"`
	Destinationip   uint32            `protobuf:"varint,8,opt,name=destinationip,proto3" json:"destinationip,omitempty"`
	Destinationipv6 []byte            `protobuf:"bytes,9,opt,name=destinationipv6,proto3" json:"destinationipv6,omitempty"`
	Destinationport uint32            `protobuf:"varint,10,opt,name=destinationport,proto3" json:"destinationport,omitempty"`
	Protocolid      ProtocolId        `protobuf:"varint,11,opt,name=protocolid,proto3,enum=opi.security.firewall.v1.ProtocolId" json:"protocolid,omitempty"`
	Action          *ActionParameters `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Cachetimeout    uint32            `protobuf:"varint,13,opt,name=cachetimeout,proto3" json:"cachetimeout,omitempty"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{2}
}

func (x *SessionRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionRequest) GetInlif() int32 {
	if x != nil {
		return x.Inlif
	}
	return 0
}

func (x *SessionRequest) GetOutlif() int32 {
	if x != nil {
		return x.Outlif
	}
	return 0
}

func (x *SessionRequest) GetIpversion() IpVersion {
	if x != nil {
		return x.Ipversion
	}
	return IpVersion__IPV4
}

func (x *SessionRequest) GetSourceip() uint32 {
	if x != nil {
		return x.Sourceip
	}
	return 0
}

func (x *SessionRequest) GetSourceipv6() []byte {
	if x != nil {
		return x.Sourceipv6
	}
	return nil
}

func (x *SessionRequest) GetSourceport() uint32 {
	if x != nil {
		return x.Sourceport
	}
	return 0
}

func (x *SessionRequest) GetDestinationip() uint32 {
	if x != nil {
		return x.Destinationip
	}
	return 0
}

func (x *SessionRequest) GetDestinationipv6() []byte {
	if x != nil {
		return x.Destinationipv6
	}
	return nil
}

func (x *SessionRequest) GetDestinationport() uint32 {
	if x != nil {
		return x.Destinationport
	}
	return 0
}

func (x *SessionRequest) GetProtocolid() ProtocolId {
	if x != nil {
		return x.Protocolid
	}
	return ProtocolId__HOPOPT
}

func (x *SessionRequest) GetAction() *ActionParameters {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *SessionRequest) GetCachetimeout() uint32 {
	if x != nil {
		return x.Cachetimeout
	}
	return 0
}

type SessionResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionid   uint64 `protobuf:"varint,1,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Errorstatus int32  `protobuf:"varint,2,opt,name=errorstatus,proto3" json:"errorstatus,omitempty"`
}

func (x *SessionResponseError) Reset() {
	*x = SessionResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponseError) ProtoMessage() {}

func (x *SessionResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponseError.ProtoReflect.Descriptor instead.
func (*SessionResponseError) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{3}
}

func (x *SessionResponseError) GetSessionid() uint64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *SessionResponseError) GetErrorstatus() int32 {
	if x != nil {
		return x.Errorstatus
	}
	return 0
}

type SessionResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessioninfo []*SessionResponse `protobuf:"bytes,1,rep,name=sessioninfo,proto3" json:"sessioninfo,omitempty"`
	Nextkey     uint64             `protobuf:"varint,2,opt,name=nextkey,proto3" json:"nextkey,omitempty"`
}

func (x *SessionResponses) Reset() {
	*x = SessionResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponses) ProtoMessage() {}

func (x *SessionResponses) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponses.ProtoReflect.Descriptor instead.
func (*SessionResponses) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{4}
}

func (x *SessionResponses) GetSessioninfo() []*SessionResponse {
	if x != nil {
		return x.Sessioninfo
	}
	return nil
}

func (x *SessionResponses) GetNextkey() uint64 {
	if x != nil {
		return x.Nextkey
	}
	return 0
}

//
// In v1apha4 the errorstatus was added to act as a bitmask
// of errors for each of the sesssions sent in a stream (max 64).
//
type AddSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requeststatus AddSessionStatus        `protobuf:"varint,1,opt,name=requeststatus,proto3,enum=opi.security.firewall.v1.AddSessionStatus" json:"requeststatus,omitempty"`
	Errorstatus   uint64                  `protobuf:"varint,2,opt,name=errorstatus,proto3" json:"errorstatus,omitempty"`
	Starttime     *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Responseerror []*SessionResponseError `protobuf:"bytes,4,rep,name=responseerror,proto3" json:"responseerror,omitempty"`
}

func (x *AddSessionResponse) Reset() {
	*x = AddSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSessionResponse) ProtoMessage() {}

func (x *AddSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSessionResponse.ProtoReflect.Descriptor instead.
func (*AddSessionResponse) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{5}
}

func (x *AddSessionResponse) GetRequeststatus() AddSessionStatus {
	if x != nil {
		return x.Requeststatus
	}
	return AddSessionStatus__SESSION_ACCEPTED
}

func (x *AddSessionResponse) GetErrorstatus() uint64 {
	if x != nil {
		return x.Errorstatus
	}
	return 0
}

func (x *AddSessionResponse) GetStarttime() *timestamppb.Timestamp {
	if x != nil {
		return x.Starttime
	}
	return nil
}

func (x *AddSessionResponse) GetResponseerror() []*SessionResponseError {
	if x != nil {
		return x.Responseerror
	}
	return nil
}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionid        uint64                 `protobuf:"varint,1,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Inpackets        uint64                 `protobuf:"varint,2,opt,name=inpackets,proto3" json:"inpackets,omitempty"`
	Outpackets       uint64                 `protobuf:"varint,3,opt,name=outpackets,proto3" json:"outpackets,omitempty"`
	Inbytes          uint64                 `protobuf:"varint,4,opt,name=inbytes,proto3" json:"inbytes,omitempty"`
	Outbytes         uint64                 `protobuf:"varint,5,opt,name=outbytes,proto3" json:"outbytes,omitempty"`
	Sessionstate     SessionState           `protobuf:"varint,6,opt,name=sessionstate,proto3,enum=opi.security.firewall.v1.SessionState" json:"sessionstate,omitempty"`
	Sessionclosecode SessionCloseCode       `protobuf:"varint,7,opt,name=sessionclosecode,proto3,enum=opi.security.firewall.v1.SessionCloseCode" json:"sessionclosecode,omitempty"`
	Requeststatus    RequestStatus          `protobuf:"varint,8,opt,name=requeststatus,proto3,enum=opi.security.firewall.v1.RequestStatus" json:"requeststatus,omitempty"`
	Starttime        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Endtime          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=endtime,proto3" json:"endtime,omitempty"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{6}
}

func (x *SessionResponse) GetSessionid() uint64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *SessionResponse) GetInpackets() uint64 {
	if x != nil {
		return x.Inpackets
	}
	return 0
}

func (x *SessionResponse) GetOutpackets() uint64 {
	if x != nil {
		return x.Outpackets
	}
	return 0
}

func (x *SessionResponse) GetInbytes() uint64 {
	if x != nil {
		return x.Inbytes
	}
	return 0
}

func (x *SessionResponse) GetOutbytes() uint64 {
	if x != nil {
		return x.Outbytes
	}
	return 0
}

func (x *SessionResponse) GetSessionstate() SessionState {
	if x != nil {
		return x.Sessionstate
	}
	return SessionState__ESTABLISHED
}

func (x *SessionResponse) GetSessionclosecode() SessionCloseCode {
	if x != nil {
		return x.Sessionclosecode
	}
	return SessionCloseCode__NOT_CLOSED
}

func (x *SessionResponse) GetRequeststatus() RequestStatus {
	if x != nil {
		return x.Requeststatus
	}
	return RequestStatus__ACCEPTED
}

func (x *SessionResponse) GetStarttime() *timestamppb.Timestamp {
	if x != nil {
		return x.Starttime
	}
	return nil
}

func (x *SessionResponse) GetEndtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Endtime
	}
	return nil
}

type SessionRequestArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If SessionId is zero, return all sessions
	Sessionid uint64 `protobuf:"varint,1,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	// Filter argument to only return sessions of a given state
	Sessionstate SessionState `protobuf:"varint,2,opt,name=sessionstate,proto3,enum=opi.security.firewall.v1.SessionState" json:"sessionstate,omitempty"`
}

func (x *SessionRequestArgs) Reset() {
	*x = SessionRequestArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openoffload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequestArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequestArgs) ProtoMessage() {}

func (x *SessionRequestArgs) ProtoReflect() protoreflect.Message {
	mi := &file_openoffload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequestArgs.ProtoReflect.Descriptor instead.
func (*SessionRequestArgs) Descriptor() ([]byte, []int) {
	return file_openoffload_proto_rawDescGZIP(), []int{7}
}

func (x *SessionRequestArgs) GetSessionid() uint64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *SessionRequestArgs) GetSessionstate() SessionState {
	if x != nil {
		return x.Sessionstate
	}
	return SessionState__ESTABLISHED
}

var File_openoffload_proto protoreflect.FileDescriptor

var file_openoffload_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a,
	0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x76, 0x36, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x76, 0x36, 0x22, 0xa4, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6c, 0x69, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x6c, 0x69, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x66, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x70, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x69, 0x70, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x70, 0x76, 0x36, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x70, 0x76, 0x36, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x56, 0x0a, 0x14,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x6b, 0x65, 0x79, 0x22,
	0x98, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x86, 0x04, 0x0a, 0x0f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2a, 0x21, 0x0a, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x0a, 0x05, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x5f, 0x48, 0x4f, 0x50, 0x4f, 0x50, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x5f,
	0x55, 0x44, 0x50, 0x10, 0x11, 0x22, 0x04, 0x08, 0x01, 0x10, 0x05, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x10, 0x22, 0x05, 0x08, 0x12, 0x10, 0xff, 0x01, 0x2a, 0x61, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x5f, 0x45, 0x53, 0x54,
	0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x10, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x2a, 0x96,
	0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x2a, 0xcf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x3e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x32, 0xa8, 0x03, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x5e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70,
	0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openoffload_proto_rawDescOnce sync.Once
	file_openoffload_proto_rawDescData = file_openoffload_proto_rawDesc
)

func file_openoffload_proto_rawDescGZIP() []byte {
	file_openoffload_proto_rawDescOnce.Do(func() {
		file_openoffload_proto_rawDescData = protoimpl.X.CompressGZIP(file_openoffload_proto_rawDescData)
	})
	return file_openoffload_proto_rawDescData
}

var file_openoffload_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_openoffload_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_openoffload_proto_goTypes = []interface{}{
	(IpVersion)(0),                // 0: opi.security.firewall.v1.IpVersion
	(ProtocolId)(0),               // 1: opi.security.firewall.v1.ProtocolId
	(SessionState)(0),             // 2: opi.security.firewall.v1.SessionState
	(SessionCloseCode)(0),         // 3: opi.security.firewall.v1.SessionCloseCode
	(AddSessionStatus)(0),         // 4: opi.security.firewall.v1.AddSessionStatus
	(RequestStatus)(0),            // 5: opi.security.firewall.v1.RequestStatus
	(ActionType)(0),               // 6: opi.security.firewall.v1.ActionType
	(*SessionId)(nil),             // 7: opi.security.firewall.v1.SessionId
	(*ActionParameters)(nil),      // 8: opi.security.firewall.v1.ActionParameters
	(*SessionRequest)(nil),        // 9: opi.security.firewall.v1.SessionRequest
	(*SessionResponseError)(nil),  // 10: opi.security.firewall.v1.SessionResponseError
	(*SessionResponses)(nil),      // 11: opi.security.firewall.v1.SessionResponses
	(*AddSessionResponse)(nil),    // 12: opi.security.firewall.v1.AddSessionResponse
	(*SessionResponse)(nil),       // 13: opi.security.firewall.v1.SessionResponse
	(*SessionRequestArgs)(nil),    // 14: opi.security.firewall.v1.SessionRequestArgs
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_openoffload_proto_depIdxs = []int32{
	6,  // 0: opi.security.firewall.v1.ActionParameters.actiontype:type_name -> opi.security.firewall.v1.ActionType
	0,  // 1: opi.security.firewall.v1.SessionRequest.ipversion:type_name -> opi.security.firewall.v1.IpVersion
	1,  // 2: opi.security.firewall.v1.SessionRequest.protocolid:type_name -> opi.security.firewall.v1.ProtocolId
	8,  // 3: opi.security.firewall.v1.SessionRequest.action:type_name -> opi.security.firewall.v1.ActionParameters
	13, // 4: opi.security.firewall.v1.SessionResponses.sessioninfo:type_name -> opi.security.firewall.v1.SessionResponse
	4,  // 5: opi.security.firewall.v1.AddSessionResponse.requeststatus:type_name -> opi.security.firewall.v1.AddSessionStatus
	15, // 6: opi.security.firewall.v1.AddSessionResponse.starttime:type_name -> google.protobuf.Timestamp
	10, // 7: opi.security.firewall.v1.AddSessionResponse.responseerror:type_name -> opi.security.firewall.v1.SessionResponseError
	2,  // 8: opi.security.firewall.v1.SessionResponse.sessionstate:type_name -> opi.security.firewall.v1.SessionState
	3,  // 9: opi.security.firewall.v1.SessionResponse.sessionclosecode:type_name -> opi.security.firewall.v1.SessionCloseCode
	5,  // 10: opi.security.firewall.v1.SessionResponse.requeststatus:type_name -> opi.security.firewall.v1.RequestStatus
	15, // 11: opi.security.firewall.v1.SessionResponse.starttime:type_name -> google.protobuf.Timestamp
	15, // 12: opi.security.firewall.v1.SessionResponse.endtime:type_name -> google.protobuf.Timestamp
	2,  // 13: opi.security.firewall.v1.SessionRequestArgs.sessionstate:type_name -> opi.security.firewall.v1.SessionState
	9,  // 14: opi.security.firewall.v1.SessionTable.AddSession:input_type -> opi.security.firewall.v1.SessionRequest
	7,  // 15: opi.security.firewall.v1.SessionTable.GetSession:input_type -> opi.security.firewall.v1.SessionId
	7,  // 16: opi.security.firewall.v1.SessionTable.DeleteSession:input_type -> opi.security.firewall.v1.SessionId
	14, // 17: opi.security.firewall.v1.SessionTable.GetAllSession:input_type -> opi.security.firewall.v1.SessionRequestArgs
	12, // 18: opi.security.firewall.v1.SessionTable.AddSession:output_type -> opi.security.firewall.v1.AddSessionResponse
	13, // 19: opi.security.firewall.v1.SessionTable.GetSession:output_type -> opi.security.firewall.v1.SessionResponse
	13, // 20: opi.security.firewall.v1.SessionTable.DeleteSession:output_type -> opi.security.firewall.v1.SessionResponse
	11, // 21: opi.security.firewall.v1.SessionTable.GetAllSession:output_type -> opi.security.firewall.v1.SessionResponses
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_openoffload_proto_init() }
func file_openoffload_proto_init() {
	if File_openoffload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openoffload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openoffload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequestArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openoffload_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openoffload_proto_goTypes,
		DependencyIndexes: file_openoffload_proto_depIdxs,
		EnumInfos:         file_openoffload_proto_enumTypes,
		MessageInfos:      file_openoffload_proto_msgTypes,
	}.Build()
	File_openoffload_proto = out.File
	file_openoffload_proto_rawDesc = nil
	file_openoffload_proto_goTypes = nil
	file_openoffload_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SessionTableClient is the client API for SessionTable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionTableClient interface {
	//
	// Adds a session
	// This was changed in v1alpha4 to be a streaming API, for performance
	// reasons.
	AddSession(ctx context.Context, opts ...grpc.CallOption) (SessionTable_AddSessionClient, error)
	//
	// Obtains the session
	GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionResponse, error)
	//
	// Delete a session
	DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionResponse, error)
	//
	// Stream back a specific session or all current sessions
	// To stream a single session, pass SessionId as zero
	GetAllSession(ctx context.Context, in *SessionRequestArgs, opts ...grpc.CallOption) (*SessionResponses, error)
}

type sessionTableClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionTableClient(cc grpc.ClientConnInterface) SessionTableClient {
	return &sessionTableClient{cc}
}

func (c *sessionTableClient) AddSession(ctx context.Context, opts ...grpc.CallOption) (SessionTable_AddSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SessionTable_serviceDesc.Streams[0], "/opi.security.firewall.v1.SessionTable/AddSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionTableAddSessionClient{stream}
	return x, nil
}

type SessionTable_AddSessionClient interface {
	Send(*SessionRequest) error
	CloseAndRecv() (*AddSessionResponse, error)
	grpc.ClientStream
}

type sessionTableAddSessionClient struct {
	grpc.ClientStream
}

func (x *sessionTableAddSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionTableAddSessionClient) CloseAndRecv() (*AddSessionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionTableClient) GetSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/opi.security.firewall.v1.SessionTable/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionTableClient) DeleteSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/opi.security.firewall.v1.SessionTable/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionTableClient) GetAllSession(ctx context.Context, in *SessionRequestArgs, opts ...grpc.CallOption) (*SessionResponses, error) {
	out := new(SessionResponses)
	err := c.cc.Invoke(ctx, "/opi.security.firewall.v1.SessionTable/GetAllSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionTableServer is the server API for SessionTable service.
type SessionTableServer interface {
	//
	// Adds a session
	// This was changed in v1alpha4 to be a streaming API, for performance
	// reasons.
	AddSession(SessionTable_AddSessionServer) error
	//
	// Obtains the session
	GetSession(context.Context, *SessionId) (*SessionResponse, error)
	//
	// Delete a session
	DeleteSession(context.Context, *SessionId) (*SessionResponse, error)
	//
	// Stream back a specific session or all current sessions
	// To stream a single session, pass SessionId as zero
	GetAllSession(context.Context, *SessionRequestArgs) (*SessionResponses, error)
}

// UnimplementedSessionTableServer can be embedded to have forward compatible implementations.
type UnimplementedSessionTableServer struct {
}

func (*UnimplementedSessionTableServer) AddSession(SessionTable_AddSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method AddSession not implemented")
}
func (*UnimplementedSessionTableServer) GetSession(context.Context, *SessionId) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (*UnimplementedSessionTableServer) DeleteSession(context.Context, *SessionId) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedSessionTableServer) GetAllSession(context.Context, *SessionRequestArgs) (*SessionResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSession not implemented")
}

func RegisterSessionTableServer(s *grpc.Server, srv SessionTableServer) {
	s.RegisterService(&_SessionTable_serviceDesc, srv)
}

func _SessionTable_AddSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionTableServer).AddSession(&sessionTableAddSessionServer{stream})
}

type SessionTable_AddSessionServer interface {
	SendAndClose(*AddSessionResponse) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type sessionTableAddSessionServer struct {
	grpc.ServerStream
}

func (x *sessionTableAddSessionServer) SendAndClose(m *AddSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionTableAddSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SessionTable_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionTableServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.firewall.v1.SessionTable/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionTableServer).GetSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionTable_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionTableServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.firewall.v1.SessionTable/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionTableServer).DeleteSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionTable_GetAllSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionTableServer).GetAllSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.firewall.v1.SessionTable/GetAllSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionTableServer).GetAllSession(ctx, req.(*SessionRequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionTable_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.security.firewall.v1.SessionTable",
	HandlerType: (*SessionTableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _SessionTable_GetSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionTable_DeleteSession_Handler,
		},
		{
			MethodName: "GetAllSession",
			Handler:    _SessionTable_GetAllSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddSession",
			Handler:       _SessionTable_AddSession_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "openoffload.proto",
}
