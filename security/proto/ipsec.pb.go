//
// Copyright (C) 2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//
// Piece taken from https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ipsec.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm for encryption
type CryptoAlgorithm int32

const (
	CryptoAlgorithm_NONE_CRYPTO CryptoAlgorithm = 0
	CryptoAlgorithm_AES_CBC_128 CryptoAlgorithm = 1
	CryptoAlgorithm_AES_CBC_192 CryptoAlgorithm = 2
	CryptoAlgorithm_AES_CBC_256 CryptoAlgorithm = 3
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0: "NONE_CRYPTO",
		1: "AES_CBC_128",
		2: "AES_CBC_192",
		3: "AES_CBC_256",
	}
	CryptoAlgorithm_value = map[string]int32{
		"NONE_CRYPTO": 0,
		"AES_CBC_128": 1,
		"AES_CBC_192": 2,
		"AES_CBC_256": 3,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[0].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[0]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

// Cryptographic algorithm for authentication
type IntegAlgorithm int32

const (
	IntegAlgorithm_NONE_INTEG  IntegAlgorithm = 0
	IntegAlgorithm_MD5_96      IntegAlgorithm = 1
	IntegAlgorithm_SHA1_96     IntegAlgorithm = 2
	IntegAlgorithm_SHA_256_96  IntegAlgorithm = 3
	IntegAlgorithm_SHA_256_128 IntegAlgorithm = 4
	IntegAlgorithm_SHA_384_192 IntegAlgorithm = 5
	IntegAlgorithm_SHA_512_256 IntegAlgorithm = 6
)

// Enum value maps for IntegAlgorithm.
var (
	IntegAlgorithm_name = map[int32]string{
		0: "NONE_INTEG",
		1: "MD5_96",
		2: "SHA1_96",
		3: "SHA_256_96",
		4: "SHA_256_128",
		5: "SHA_384_192",
		6: "SHA_512_256",
	}
	IntegAlgorithm_value = map[string]int32{
		"NONE_INTEG":  0,
		"MD5_96":      1,
		"SHA1_96":     2,
		"SHA_256_96":  3,
		"SHA_256_128": 4,
		"SHA_384_192": 5,
		"SHA_512_256": 6,
	}
)

func (x IntegAlgorithm) Enum() *IntegAlgorithm {
	p := new(IntegAlgorithm)
	*p = x
	return p
}

func (x IntegAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[1].Descriptor()
}

func (IntegAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[1]
}

func (x IntegAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlgorithm.Descriptor instead.
func (IntegAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

// Policy action
type SecurityPolicyDatabases_SPD_PolicyEntry_Action int32

const (
	SecurityPolicyDatabases_SPD_PolicyEntry_BYPASS  SecurityPolicyDatabases_SPD_PolicyEntry_Action = 0
	SecurityPolicyDatabases_SPD_PolicyEntry_DISCARD SecurityPolicyDatabases_SPD_PolicyEntry_Action = 1
	//RESOLVE = 2; // unused in VPP
	SecurityPolicyDatabases_SPD_PolicyEntry_PROTECT SecurityPolicyDatabases_SPD_PolicyEntry_Action = 3
)

// Enum value maps for SecurityPolicyDatabases_SPD_PolicyEntry_Action.
var (
	SecurityPolicyDatabases_SPD_PolicyEntry_Action_name = map[int32]string{
		0: "BYPASS",
		1: "DISCARD",
		3: "PROTECT",
	}
	SecurityPolicyDatabases_SPD_PolicyEntry_Action_value = map[string]int32{
		"BYPASS":  0,
		"DISCARD": 1,
		"PROTECT": 3,
	}
)

func (x SecurityPolicyDatabases_SPD_PolicyEntry_Action) Enum() *SecurityPolicyDatabases_SPD_PolicyEntry_Action {
	p := new(SecurityPolicyDatabases_SPD_PolicyEntry_Action)
	*p = x
	return p
}

func (x SecurityPolicyDatabases_SPD_PolicyEntry_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicyDatabases_SPD_PolicyEntry_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[2].Descriptor()
}

func (SecurityPolicyDatabases_SPD_PolicyEntry_Action) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[2]
}

func (x SecurityPolicyDatabases_SPD_PolicyEntry_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicyDatabases_SPD_PolicyEntry_Action.Descriptor instead.
func (SecurityPolicyDatabases_SPD_PolicyEntry_Action) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

// IPSec protocol
type SecurityAssociations_SA_IPSecProtocol int32

const (
	SecurityAssociations_SA_AH  SecurityAssociations_SA_IPSecProtocol = 0
	SecurityAssociations_SA_ESP SecurityAssociations_SA_IPSecProtocol = 1
)

// Enum value maps for SecurityAssociations_SA_IPSecProtocol.
var (
	SecurityAssociations_SA_IPSecProtocol_name = map[int32]string{
		0: "AH",
		1: "ESP",
	}
	SecurityAssociations_SA_IPSecProtocol_value = map[string]int32{
		"AH":  0,
		"ESP": 1,
	}
)

func (x SecurityAssociations_SA_IPSecProtocol) Enum() *SecurityAssociations_SA_IPSecProtocol {
	p := new(SecurityAssociations_SA_IPSecProtocol)
	*p = x
	return p
}

func (x SecurityAssociations_SA_IPSecProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityAssociations_SA_IPSecProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[3].Descriptor()
}

func (SecurityAssociations_SA_IPSecProtocol) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[3]
}

func (x SecurityAssociations_SA_IPSecProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityAssociations_SA_IPSecProtocol.Descriptor instead.
func (SecurityAssociations_SA_IPSecProtocol) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2, 0, 0}
}

// Tunnel Interfaces
type TunnelInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*TunnelInterfaces_Tunnel `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (x *TunnelInterfaces) Reset() {
	*x = TunnelInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInterfaces) ProtoMessage() {}

func (x *TunnelInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInterfaces.ProtoReflect.Descriptor instead.
func (*TunnelInterfaces) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelInterfaces) GetTunnels() []*TunnelInterfaces_Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

// Security Policy Database (SPD)
type SecurityPolicyDatabases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spds []*SecurityPolicyDatabases_SPD `protobuf:"bytes,1,rep,name=spds,proto3" json:"spds,omitempty"` // list of all SPDs
}

func (x *SecurityPolicyDatabases) Reset() {
	*x = SecurityPolicyDatabases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases) ProtoMessage() {}

func (x *SecurityPolicyDatabases) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityPolicyDatabases) GetSpds() []*SecurityPolicyDatabases_SPD {
	if x != nil {
		return x.Spds
	}
	return nil
}

// Security Association (SA)
type SecurityAssociations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sas []*SecurityAssociations_SA `protobuf:"bytes,1,rep,name=sas,proto3" json:"sas,omitempty"`
}

func (x *SecurityAssociations) Reset() {
	*x = SecurityAssociations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAssociations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAssociations) ProtoMessage() {}

func (x *SecurityAssociations) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAssociations.ProtoReflect.Descriptor instead.
func (*SecurityAssociations) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityAssociations) GetSas() []*SecurityAssociations_SA {
	if x != nil {
		return x.Sas
	}
	return nil
}

type ResyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*TunnelInterfaces_Tunnel     `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	Spds    []*SecurityPolicyDatabases_SPD `protobuf:"bytes,2,rep,name=spds,proto3" json:"spds,omitempty"`
	Sas     []*SecurityAssociations_SA     `protobuf:"bytes,3,rep,name=sas,proto3" json:"sas,omitempty"`
}

func (x *ResyncRequest) Reset() {
	*x = ResyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncRequest) ProtoMessage() {}

func (x *ResyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncRequest.ProtoReflect.Descriptor instead.
func (*ResyncRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

func (x *ResyncRequest) GetTunnels() []*TunnelInterfaces_Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

func (x *ResyncRequest) GetSpds() []*SecurityPolicyDatabases_SPD {
	if x != nil {
		return x.Spds
	}
	return nil
}

func (x *ResyncRequest) GetSas() []*SecurityAssociations_SA {
	if x != nil {
		return x.Sas
	}
	return nil
}

type IPSec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int64                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Tunnel *TunnelInterfaces        `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Policy *SecurityPolicyDatabases `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	Sa     *SecurityAssociations    `protobuf:"bytes,4,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *IPSec) Reset() {
	*x = IPSec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSec) ProtoMessage() {}

func (x *IPSec) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSec.ProtoReflect.Descriptor instead.
func (*IPSec) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

func (x *IPSec) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *IPSec) GetTunnel() *TunnelInterfaces {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IPSec) GetPolicy() *SecurityPolicyDatabases {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *IPSec) GetSa() *SecurityAssociations {
	if x != nil {
		return x.Sa
	}
	return nil
}

type IPSecServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipsec *IPSec `protobuf:"bytes,1,opt,name=ipsec,proto3" json:"ipsec,omitempty"`
}

func (x *IPSecServiceCreateRequest) Reset() {
	*x = IPSecServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceCreateRequest) ProtoMessage() {}

func (x *IPSecServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*IPSecServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

func (x *IPSecServiceCreateRequest) GetIpsec() *IPSec {
	if x != nil {
		return x.Ipsec
	}
	return nil
}

type IPSecServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPSecServiceCreateResponse) Reset() {
	*x = IPSecServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceCreateResponse) ProtoMessage() {}

func (x *IPSecServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*IPSecServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

type IPSecServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *IPSecServiceDeleteRequest) Reset() {
	*x = IPSecServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceDeleteRequest) ProtoMessage() {}

func (x *IPSecServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*IPSecServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

func (x *IPSecServiceDeleteRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type IPSecServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPSecServiceDeleteResponse) Reset() {
	*x = IPSecServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceDeleteResponse) ProtoMessage() {}

func (x *IPSecServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*IPSecServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

type IPSecServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipsec *IPSec `protobuf:"bytes,1,opt,name=ipsec,proto3" json:"ipsec,omitempty"`
}

func (x *IPSecServiceUpdateRequest) Reset() {
	*x = IPSecServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceUpdateRequest) ProtoMessage() {}

func (x *IPSecServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*IPSecServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

func (x *IPSecServiceUpdateRequest) GetIpsec() *IPSec {
	if x != nil {
		return x.Ipsec
	}
	return nil
}

type IPSecServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPSecServiceUpdateResponse) Reset() {
	*x = IPSecServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceUpdateResponse) ProtoMessage() {}

func (x *IPSecServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*IPSecServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10}
}

type IPSecServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPSecServiceListRequest) Reset() {
	*x = IPSecServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceListRequest) ProtoMessage() {}

func (x *IPSecServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceListRequest.ProtoReflect.Descriptor instead.
func (*IPSecServiceListRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{11}
}

type IPSecServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipsec []*IPSec `protobuf:"bytes,1,rep,name=ipsec,proto3" json:"ipsec,omitempty"`
}

func (x *IPSecServiceListResponse) Reset() {
	*x = IPSecServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceListResponse) ProtoMessage() {}

func (x *IPSecServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceListResponse.ProtoReflect.Descriptor instead.
func (*IPSecServiceListResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12}
}

func (x *IPSecServiceListResponse) GetIpsec() []*IPSec {
	if x != nil {
		return x.Ipsec
	}
	return nil
}

type IPSecServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPSecServiceGetRequest) Reset() {
	*x = IPSecServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceGetRequest) ProtoMessage() {}

func (x *IPSecServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceGetRequest.ProtoReflect.Descriptor instead.
func (*IPSecServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{13}
}

func (x *IPSecServiceGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IPSecServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipsec *IPSec `protobuf:"bytes,1,opt,name=ipsec,proto3" json:"ipsec,omitempty"`
}

func (x *IPSecServiceGetResponse) Reset() {
	*x = IPSecServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecServiceGetResponse) ProtoMessage() {}

func (x *IPSecServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecServiceGetResponse.ProtoReflect.Descriptor instead.
func (*IPSecServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{14}
}

func (x *IPSecServiceGetResponse) GetIpsec() *IPSec {
	if x != nil {
		return x.Ipsec
	}
	return nil
}

type TunnelInterfaces_Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // tunnel name
	Esn             bool            `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`                                 // extended sequence number
	AntiReplay      bool            `protobuf:"varint,3,opt,name=anti_replay,json=antiReplay,proto3" json:"anti_replay,omitempty"` // anti replay option
	LocalIp         string          `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	RemoteIp        string          `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	LocalSpi        uint32          `protobuf:"varint,6,opt,name=local_spi,json=localSpi,proto3" json:"local_spi,omitempty"`
	RemoteSpi       uint32          `protobuf:"varint,7,opt,name=remote_spi,json=remoteSpi,proto3" json:"remote_spi,omitempty"`
	CryptoAlg       CryptoAlgorithm `protobuf:"varint,8,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=opi.security.v1.CryptoAlgorithm" json:"crypto_alg,omitempty"`
	LocalCryptoKey  string          `protobuf:"bytes,9,opt,name=local_crypto_key,json=localCryptoKey,proto3" json:"local_crypto_key,omitempty"`
	RemoteCryptoKey string          `protobuf:"bytes,10,opt,name=remote_crypto_key,json=remoteCryptoKey,proto3" json:"remote_crypto_key,omitempty"`
	IntegAlg        IntegAlgorithm  `protobuf:"varint,11,opt,name=integ_alg,json=integAlg,proto3,enum=opi.security.v1.IntegAlgorithm" json:"integ_alg,omitempty"`
	LocalIntegKey   string          `protobuf:"bytes,12,opt,name=local_integ_key,json=localIntegKey,proto3" json:"local_integ_key,omitempty"`
	RemoteIntegKey  string          `protobuf:"bytes,13,opt,name=remote_integ_key,json=remoteIntegKey,proto3" json:"remote_integ_key,omitempty"`
	// Extra fields related to interface
	Enabled     bool     `protobuf:"varint,100,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IpAddresses []string `protobuf:"bytes,101,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Vrf         uint32   `protobuf:"varint,102,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *TunnelInterfaces_Tunnel) Reset() {
	*x = TunnelInterfaces_Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInterfaces_Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInterfaces_Tunnel) ProtoMessage() {}

func (x *TunnelInterfaces_Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInterfaces_Tunnel.ProtoReflect.Descriptor instead.
func (*TunnelInterfaces_Tunnel) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TunnelInterfaces_Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetEsn() bool {
	if x != nil {
		return x.Esn
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetAntiReplay() bool {
	if x != nil {
		return x.AntiReplay
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetLocalSpi() uint32 {
	if x != nil {
		return x.LocalSpi
	}
	return 0
}

func (x *TunnelInterfaces_Tunnel) GetRemoteSpi() uint32 {
	if x != nil {
		return x.RemoteSpi
	}
	return 0
}

func (x *TunnelInterfaces_Tunnel) GetCryptoAlg() CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlgorithm_NONE_CRYPTO
}

func (x *TunnelInterfaces_Tunnel) GetLocalCryptoKey() string {
	if x != nil {
		return x.LocalCryptoKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteCryptoKey() string {
	if x != nil {
		return x.RemoteCryptoKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetIntegAlg() IntegAlgorithm {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlgorithm_NONE_INTEG
}

func (x *TunnelInterfaces_Tunnel) GetLocalIntegKey() string {
	if x != nil {
		return x.LocalIntegKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteIntegKey() string {
	if x != nil {
		return x.RemoteIntegKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *TunnelInterfaces_Tunnel) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

type SecurityPolicyDatabases_SPD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interfaces    []*SecurityPolicyDatabases_SPD_Interface   `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`                            // list of interfaces belonging to this SPD
	PolicyEntries []*SecurityPolicyDatabases_SPD_PolicyEntry `protobuf:"bytes,3,rep,name=policy_entries,json=policyEntries,proto3" json:"policy_entries,omitempty"` // list of policy entries belonging to this SPD
}

func (x *SecurityPolicyDatabases_SPD) Reset() {
	*x = SecurityPolicyDatabases_SPD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_SPD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_SPD) ProtoMessage() {}

func (x *SecurityPolicyDatabases_SPD) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_SPD.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_SPD) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SecurityPolicyDatabases_SPD) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD) GetInterfaces() []*SecurityPolicyDatabases_SPD_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *SecurityPolicyDatabases_SPD) GetPolicyEntries() []*SecurityPolicyDatabases_SPD_PolicyEntry {
	if x != nil {
		return x.PolicyEntries
	}
	return nil
}

// Interface
type SecurityPolicyDatabases_SPD_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // interface name
}

func (x *SecurityPolicyDatabases_SPD_Interface) Reset() {
	*x = SecurityPolicyDatabases_SPD_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_SPD_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_SPD_Interface) ProtoMessage() {}

func (x *SecurityPolicyDatabases_SPD_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_SPD_Interface.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_SPD_Interface) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *SecurityPolicyDatabases_SPD_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Policy Entry
type SecurityPolicyDatabases_SPD_PolicyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sa              string                                         `protobuf:"bytes,1,opt,name=sa,proto3" json:"sa,omitempty"` // security association name
	Priority        int32                                          `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	IsOutbound      bool                                           `protobuf:"varint,3,opt,name=is_outbound,json=isOutbound,proto3" json:"is_outbound,omitempty"`
	RemoteAddrStart string                                         `protobuf:"bytes,4,opt,name=remote_addr_start,json=remoteAddrStart,proto3" json:"remote_addr_start,omitempty"`
	RemoteAddrStop  string                                         `protobuf:"bytes,5,opt,name=remote_addr_stop,json=remoteAddrStop,proto3" json:"remote_addr_stop,omitempty"`
	LocalAddrStart  string                                         `protobuf:"bytes,6,opt,name=local_addr_start,json=localAddrStart,proto3" json:"local_addr_start,omitempty"`
	LocalAddrStop   string                                         `protobuf:"bytes,7,opt,name=local_addr_stop,json=localAddrStop,proto3" json:"local_addr_stop,omitempty"`
	Protocol        uint32                                         `protobuf:"varint,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RemotePortStart uint32                                         `protobuf:"varint,9,opt,name=remote_port_start,json=remotePortStart,proto3" json:"remote_port_start,omitempty"`
	RemotePortStop  uint32                                         `protobuf:"varint,10,opt,name=remote_port_stop,json=remotePortStop,proto3" json:"remote_port_stop,omitempty"`
	LocalPortStart  uint32                                         `protobuf:"varint,11,opt,name=local_port_start,json=localPortStart,proto3" json:"local_port_start,omitempty"`
	LocalPortStop   uint32                                         `protobuf:"varint,12,opt,name=local_port_stop,json=localPortStop,proto3" json:"local_port_stop,omitempty"`
	Action          SecurityPolicyDatabases_SPD_PolicyEntry_Action `protobuf:"varint,13,opt,name=action,proto3,enum=opi.security.v1.SecurityPolicyDatabases_SPD_PolicyEntry_Action" json:"action,omitempty"` // policy action
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) Reset() {
	*x = SecurityPolicyDatabases_SPD_PolicyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_SPD_PolicyEntry) ProtoMessage() {}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_SPD_PolicyEntry.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_SPD_PolicyEntry) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetSa() string {
	if x != nil {
		return x.Sa
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetRemoteAddrStart() string {
	if x != nil {
		return x.RemoteAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetRemoteAddrStop() string {
	if x != nil {
		return x.RemoteAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetLocalAddrStart() string {
	if x != nil {
		return x.LocalAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetLocalAddrStop() string {
	if x != nil {
		return x.LocalAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetRemotePortStart() uint32 {
	if x != nil {
		return x.RemotePortStart
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetRemotePortStop() uint32 {
	if x != nil {
		return x.RemotePortStop
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetLocalPortStart() uint32 {
	if x != nil {
		return x.LocalPortStart
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetLocalPortStop() uint32 {
	if x != nil {
		return x.LocalPortStop
	}
	return 0
}

func (x *SecurityPolicyDatabases_SPD_PolicyEntry) GetAction() SecurityPolicyDatabases_SPD_PolicyEntry_Action {
	if x != nil {
		return x.Action
	}
	return SecurityPolicyDatabases_SPD_PolicyEntry_BYPASS
}

type SecurityAssociations_SA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // security association name
	Spi            uint32                                `protobuf:"varint,2,opt,name=spi,proto3" json:"spi,omitempty"`  // security parameter index
	Protocol       SecurityAssociations_SA_IPSecProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=opi.security.v1.SecurityAssociations_SA_IPSecProtocol" json:"protocol,omitempty"`
	CryptoAlg      CryptoAlgorithm                       `protobuf:"varint,4,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=opi.security.v1.CryptoAlgorithm" json:"crypto_alg,omitempty"`
	CryptoKey      string                                `protobuf:"bytes,5,opt,name=crypto_key,json=cryptoKey,proto3" json:"crypto_key,omitempty"`
	IntegAlg       IntegAlgorithm                        `protobuf:"varint,6,opt,name=integ_alg,json=integAlg,proto3,enum=opi.security.v1.IntegAlgorithm" json:"integ_alg,omitempty"`
	IntegKey       string                                `protobuf:"bytes,7,opt,name=integ_key,json=integKey,proto3" json:"integ_key,omitempty"`
	UseEsn         bool                                  `protobuf:"varint,8,opt,name=use_esn,json=useEsn,proto3" json:"use_esn,omitempty"`                        // Use extended sequence number
	UseAntiReplay  bool                                  `protobuf:"varint,9,opt,name=use_anti_replay,json=useAntiReplay,proto3" json:"use_anti_replay,omitempty"` // Use anti replay
	TunnelSrcAddr  string                                `protobuf:"bytes,10,opt,name=tunnel_src_addr,json=tunnelSrcAddr,proto3" json:"tunnel_src_addr,omitempty"`
	TunnelDstAddr  string                                `protobuf:"bytes,11,opt,name=tunnel_dst_addr,json=tunnelDstAddr,proto3" json:"tunnel_dst_addr,omitempty"`
	EnableUdpEncap bool                                  `protobuf:"varint,12,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"` // Enable UDP encapsulation for NAT traversal
}

func (x *SecurityAssociations_SA) Reset() {
	*x = SecurityAssociations_SA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAssociations_SA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAssociations_SA) ProtoMessage() {}

func (x *SecurityAssociations_SA) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAssociations_SA.ProtoReflect.Descriptor instead.
func (*SecurityAssociations_SA) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SecurityAssociations_SA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAssociations_SA) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *SecurityAssociations_SA) GetProtocol() SecurityAssociations_SA_IPSecProtocol {
	if x != nil {
		return x.Protocol
	}
	return SecurityAssociations_SA_AH
}

func (x *SecurityAssociations_SA) GetCryptoAlg() CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlgorithm_NONE_CRYPTO
}

func (x *SecurityAssociations_SA) GetCryptoKey() string {
	if x != nil {
		return x.CryptoKey
	}
	return ""
}

func (x *SecurityAssociations_SA) GetIntegAlg() IntegAlgorithm {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlgorithm_NONE_INTEG
}

func (x *SecurityAssociations_SA) GetIntegKey() string {
	if x != nil {
		return x.IntegKey
	}
	return ""
}

func (x *SecurityAssociations_SA) GetUseEsn() bool {
	if x != nil {
		return x.UseEsn
	}
	return false
}

func (x *SecurityAssociations_SA) GetUseAntiReplay() bool {
	if x != nil {
		return x.UseAntiReplay
	}
	return false
}

func (x *SecurityAssociations_SA) GetTunnelSrcAddr() string {
	if x != nil {
		return x.TunnelSrcAddr
	}
	return ""
}

func (x *SecurityAssociations_SA) GetTunnelDstAddr() string {
	if x != nil {
		return x.TunnelDstAddr
	}
	return ""
}

func (x *SecurityAssociations_SA) GetEnableUdpEncap() bool {
	if x != nil {
		return x.EnableUdpEncap
	}
	return false
}

var File_ipsec_proto protoreflect.FileDescriptor

var file_ipsec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x92,
	0x05, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xb9, 0x04, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x69, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41,
	0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x76, 0x72, 0x66, 0x22, 0xa3, 0x07, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x04, 0x73, 0x70, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x44, 0x52, 0x04, 0x73, 0x70, 0x64,
	0x73, 0x1a, 0xc5, 0x06, 0x0a, 0x03, 0x53, 0x50, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x44, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x44, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xcf, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x57, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x44, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0xeb, 0x04, 0x0a, 0x14, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x73, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x03, 0x73, 0x61, 0x73, 0x1a, 0x96,
	0x04, 0x0a, 0x02, 0x53, 0x41, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x52, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x45, 0x73, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x64, 0x70,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x22, 0x20, 0x0a, 0x0d, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x48, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a,
	0x04, 0x73, 0x70, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x44, 0x52, 0x04, 0x73, 0x70, 0x64, 0x73, 0x12,
	0x3a, 0x0a, 0x03, 0x73, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x41, 0x52, 0x03, 0x73, 0x61, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x05,
	0x49, 0x50, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x35, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x73, 0x61, 0x22, 0x49, 0x0a, 0x19, 0x49, 0x50, 0x53,
	0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x52, 0x05, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x1c, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a,
	0x19, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65,
	0x63, 0x52, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x65,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x48, 0x0a, 0x18, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x53, 0x65, 0x63, 0x52, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x22, 0x28, 0x0a, 0x16, 0x49,
	0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x52, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2a, 0x55,
	0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x31, 0x32,
	0x38, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x31,
	0x39, 0x32, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x32, 0x35, 0x36, 0x10, 0x03, 0x2a, 0x7c, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x44, 0x35, 0x5f, 0x39,
	0x36, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x39, 0x36, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x31, 0x32, 0x38, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x5f, 0x31, 0x39, 0x32,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35,
	0x36, 0x10, 0x06, 0x32, 0xb4, 0x04, 0x0a, 0x0c, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53,
	0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50,
	0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x49, 0x50, 0x53, 0x65, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50,
	0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ipsec_proto_rawDescOnce sync.Once
	file_ipsec_proto_rawDescData = file_ipsec_proto_rawDesc
)

func file_ipsec_proto_rawDescGZIP() []byte {
	file_ipsec_proto_rawDescOnce.Do(func() {
		file_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipsec_proto_rawDescData)
	})
	return file_ipsec_proto_rawDescData
}

var file_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ipsec_proto_goTypes = []interface{}{
	(CryptoAlgorithm)(0), // 0: opi.security.v1.CryptoAlgorithm
	(IntegAlgorithm)(0),  // 1: opi.security.v1.IntegAlgorithm
	(SecurityPolicyDatabases_SPD_PolicyEntry_Action)(0), // 2: opi.security.v1.SecurityPolicyDatabases.SPD.PolicyEntry.Action
	(SecurityAssociations_SA_IPSecProtocol)(0),          // 3: opi.security.v1.SecurityAssociations.SA.IPSecProtocol
	(*TunnelInterfaces)(nil),                            // 4: opi.security.v1.TunnelInterfaces
	(*SecurityPolicyDatabases)(nil),                     // 5: opi.security.v1.SecurityPolicyDatabases
	(*SecurityAssociations)(nil),                        // 6: opi.security.v1.SecurityAssociations
	(*ResyncRequest)(nil),                               // 7: opi.security.v1.ResyncRequest
	(*IPSec)(nil),                                       // 8: opi.security.v1.IPSec
	(*IPSecServiceCreateRequest)(nil),                   // 9: opi.security.v1.IPSecServiceCreateRequest
	(*IPSecServiceCreateResponse)(nil),                  // 10: opi.security.v1.IPSecServiceCreateResponse
	(*IPSecServiceDeleteRequest)(nil),                   // 11: opi.security.v1.IPSecServiceDeleteRequest
	(*IPSecServiceDeleteResponse)(nil),                  // 12: opi.security.v1.IPSecServiceDeleteResponse
	(*IPSecServiceUpdateRequest)(nil),                   // 13: opi.security.v1.IPSecServiceUpdateRequest
	(*IPSecServiceUpdateResponse)(nil),                  // 14: opi.security.v1.IPSecServiceUpdateResponse
	(*IPSecServiceListRequest)(nil),                     // 15: opi.security.v1.IPSecServiceListRequest
	(*IPSecServiceListResponse)(nil),                    // 16: opi.security.v1.IPSecServiceListResponse
	(*IPSecServiceGetRequest)(nil),                      // 17: opi.security.v1.IPSecServiceGetRequest
	(*IPSecServiceGetResponse)(nil),                     // 18: opi.security.v1.IPSecServiceGetResponse
	(*TunnelInterfaces_Tunnel)(nil),                     // 19: opi.security.v1.TunnelInterfaces.Tunnel
	(*SecurityPolicyDatabases_SPD)(nil),                 // 20: opi.security.v1.SecurityPolicyDatabases.SPD
	(*SecurityPolicyDatabases_SPD_Interface)(nil),       // 21: opi.security.v1.SecurityPolicyDatabases.SPD.Interface
	(*SecurityPolicyDatabases_SPD_PolicyEntry)(nil),     // 22: opi.security.v1.SecurityPolicyDatabases.SPD.PolicyEntry
	(*SecurityAssociations_SA)(nil),                     // 23: opi.security.v1.SecurityAssociations.SA
}
var file_ipsec_proto_depIdxs = []int32{
	19, // 0: opi.security.v1.TunnelInterfaces.tunnels:type_name -> opi.security.v1.TunnelInterfaces.Tunnel
	20, // 1: opi.security.v1.SecurityPolicyDatabases.spds:type_name -> opi.security.v1.SecurityPolicyDatabases.SPD
	23, // 2: opi.security.v1.SecurityAssociations.sas:type_name -> opi.security.v1.SecurityAssociations.SA
	19, // 3: opi.security.v1.ResyncRequest.tunnels:type_name -> opi.security.v1.TunnelInterfaces.Tunnel
	20, // 4: opi.security.v1.ResyncRequest.spds:type_name -> opi.security.v1.SecurityPolicyDatabases.SPD
	23, // 5: opi.security.v1.ResyncRequest.sas:type_name -> opi.security.v1.SecurityAssociations.SA
	4,  // 6: opi.security.v1.IPSec.tunnel:type_name -> opi.security.v1.TunnelInterfaces
	5,  // 7: opi.security.v1.IPSec.policy:type_name -> opi.security.v1.SecurityPolicyDatabases
	6,  // 8: opi.security.v1.IPSec.sa:type_name -> opi.security.v1.SecurityAssociations
	8,  // 9: opi.security.v1.IPSecServiceCreateRequest.ipsec:type_name -> opi.security.v1.IPSec
	8,  // 10: opi.security.v1.IPSecServiceUpdateRequest.ipsec:type_name -> opi.security.v1.IPSec
	8,  // 11: opi.security.v1.IPSecServiceListResponse.ipsec:type_name -> opi.security.v1.IPSec
	8,  // 12: opi.security.v1.IPSecServiceGetResponse.ipsec:type_name -> opi.security.v1.IPSec
	0,  // 13: opi.security.v1.TunnelInterfaces.Tunnel.crypto_alg:type_name -> opi.security.v1.CryptoAlgorithm
	1,  // 14: opi.security.v1.TunnelInterfaces.Tunnel.integ_alg:type_name -> opi.security.v1.IntegAlgorithm
	21, // 15: opi.security.v1.SecurityPolicyDatabases.SPD.interfaces:type_name -> opi.security.v1.SecurityPolicyDatabases.SPD.Interface
	22, // 16: opi.security.v1.SecurityPolicyDatabases.SPD.policy_entries:type_name -> opi.security.v1.SecurityPolicyDatabases.SPD.PolicyEntry
	2,  // 17: opi.security.v1.SecurityPolicyDatabases.SPD.PolicyEntry.action:type_name -> opi.security.v1.SecurityPolicyDatabases.SPD.PolicyEntry.Action
	3,  // 18: opi.security.v1.SecurityAssociations.SA.protocol:type_name -> opi.security.v1.SecurityAssociations.SA.IPSecProtocol
	0,  // 19: opi.security.v1.SecurityAssociations.SA.crypto_alg:type_name -> opi.security.v1.CryptoAlgorithm
	1,  // 20: opi.security.v1.SecurityAssociations.SA.integ_alg:type_name -> opi.security.v1.IntegAlgorithm
	9,  // 21: opi.security.v1.IPSecService.IPSecServiceCreate:input_type -> opi.security.v1.IPSecServiceCreateRequest
	11, // 22: opi.security.v1.IPSecService.IPSecServiceDelete:input_type -> opi.security.v1.IPSecServiceDeleteRequest
	13, // 23: opi.security.v1.IPSecService.IPSecServiceUpdate:input_type -> opi.security.v1.IPSecServiceUpdateRequest
	15, // 24: opi.security.v1.IPSecService.IPSecServiceList:input_type -> opi.security.v1.IPSecServiceListRequest
	17, // 25: opi.security.v1.IPSecService.IPSecServiceGet:input_type -> opi.security.v1.IPSecServiceGetRequest
	10, // 26: opi.security.v1.IPSecService.IPSecServiceCreate:output_type -> opi.security.v1.IPSecServiceCreateResponse
	12, // 27: opi.security.v1.IPSecService.IPSecServiceDelete:output_type -> opi.security.v1.IPSecServiceDeleteResponse
	14, // 28: opi.security.v1.IPSecService.IPSecServiceUpdate:output_type -> opi.security.v1.IPSecServiceUpdateResponse
	16, // 29: opi.security.v1.IPSecService.IPSecServiceList:output_type -> opi.security.v1.IPSecServiceListResponse
	18, // 30: opi.security.v1.IPSecService.IPSecServiceGet:output_type -> opi.security.v1.IPSecServiceGetResponse
	26, // [26:31] is the sub-list for method output_type
	21, // [21:26] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ipsec_proto_init() }
func file_ipsec_proto_init() {
	if File_ipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAssociations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInterfaces_Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_SPD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_SPD_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_SPD_PolicyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAssociations_SA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipsec_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipsec_proto_goTypes,
		DependencyIndexes: file_ipsec_proto_depIdxs,
		EnumInfos:         file_ipsec_proto_enumTypes,
		MessageInfos:      file_ipsec_proto_msgTypes,
	}.Build()
	File_ipsec_proto = out.File
	file_ipsec_proto_rawDesc = nil
	file_ipsec_proto_goTypes = nil
	file_ipsec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPSecServiceClient is the client API for IPSecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPSecServiceClient interface {
	IPSecServiceCreate(ctx context.Context, in *IPSecServiceCreateRequest, opts ...grpc.CallOption) (*IPSecServiceCreateResponse, error)
	IPSecServiceDelete(ctx context.Context, in *IPSecServiceDeleteRequest, opts ...grpc.CallOption) (*IPSecServiceDeleteResponse, error)
	IPSecServiceUpdate(ctx context.Context, in *IPSecServiceUpdateRequest, opts ...grpc.CallOption) (*IPSecServiceUpdateResponse, error)
	IPSecServiceList(ctx context.Context, in *IPSecServiceListRequest, opts ...grpc.CallOption) (*IPSecServiceListResponse, error)
	IPSecServiceGet(ctx context.Context, in *IPSecServiceGetRequest, opts ...grpc.CallOption) (*IPSecServiceGetResponse, error)
}

type iPSecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPSecServiceClient(cc grpc.ClientConnInterface) IPSecServiceClient {
	return &iPSecServiceClient{cc}
}

func (c *iPSecServiceClient) IPSecServiceCreate(ctx context.Context, in *IPSecServiceCreateRequest, opts ...grpc.CallOption) (*IPSecServiceCreateResponse, error) {
	out := new(IPSecServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPSecService/IPSecServiceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSecServiceClient) IPSecServiceDelete(ctx context.Context, in *IPSecServiceDeleteRequest, opts ...grpc.CallOption) (*IPSecServiceDeleteResponse, error) {
	out := new(IPSecServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPSecService/IPSecServiceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSecServiceClient) IPSecServiceUpdate(ctx context.Context, in *IPSecServiceUpdateRequest, opts ...grpc.CallOption) (*IPSecServiceUpdateResponse, error) {
	out := new(IPSecServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPSecService/IPSecServiceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSecServiceClient) IPSecServiceList(ctx context.Context, in *IPSecServiceListRequest, opts ...grpc.CallOption) (*IPSecServiceListResponse, error) {
	out := new(IPSecServiceListResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPSecService/IPSecServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSecServiceClient) IPSecServiceGet(ctx context.Context, in *IPSecServiceGetRequest, opts ...grpc.CallOption) (*IPSecServiceGetResponse, error) {
	out := new(IPSecServiceGetResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPSecService/IPSecServiceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPSecServiceServer is the server API for IPSecService service.
type IPSecServiceServer interface {
	IPSecServiceCreate(context.Context, *IPSecServiceCreateRequest) (*IPSecServiceCreateResponse, error)
	IPSecServiceDelete(context.Context, *IPSecServiceDeleteRequest) (*IPSecServiceDeleteResponse, error)
	IPSecServiceUpdate(context.Context, *IPSecServiceUpdateRequest) (*IPSecServiceUpdateResponse, error)
	IPSecServiceList(context.Context, *IPSecServiceListRequest) (*IPSecServiceListResponse, error)
	IPSecServiceGet(context.Context, *IPSecServiceGetRequest) (*IPSecServiceGetResponse, error)
}

// UnimplementedIPSecServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIPSecServiceServer struct {
}

func (*UnimplementedIPSecServiceServer) IPSecServiceCreate(context.Context, *IPSecServiceCreateRequest) (*IPSecServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPSecServiceCreate not implemented")
}
func (*UnimplementedIPSecServiceServer) IPSecServiceDelete(context.Context, *IPSecServiceDeleteRequest) (*IPSecServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPSecServiceDelete not implemented")
}
func (*UnimplementedIPSecServiceServer) IPSecServiceUpdate(context.Context, *IPSecServiceUpdateRequest) (*IPSecServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPSecServiceUpdate not implemented")
}
func (*UnimplementedIPSecServiceServer) IPSecServiceList(context.Context, *IPSecServiceListRequest) (*IPSecServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPSecServiceList not implemented")
}
func (*UnimplementedIPSecServiceServer) IPSecServiceGet(context.Context, *IPSecServiceGetRequest) (*IPSecServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPSecServiceGet not implemented")
}

func RegisterIPSecServiceServer(s *grpc.Server, srv IPSecServiceServer) {
	s.RegisterService(&_IPSecService_serviceDesc, srv)
}

func _IPSecService_IPSecServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSecServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSecServiceServer).IPSecServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPSecService/IPSecServiceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSecServiceServer).IPSecServiceCreate(ctx, req.(*IPSecServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSecService_IPSecServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSecServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSecServiceServer).IPSecServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPSecService/IPSecServiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSecServiceServer).IPSecServiceDelete(ctx, req.(*IPSecServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSecService_IPSecServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSecServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSecServiceServer).IPSecServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPSecService/IPSecServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSecServiceServer).IPSecServiceUpdate(ctx, req.(*IPSecServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSecService_IPSecServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSecServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSecServiceServer).IPSecServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPSecService/IPSecServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSecServiceServer).IPSecServiceList(ctx, req.(*IPSecServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSecService_IPSecServiceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSecServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSecServiceServer).IPSecServiceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPSecService/IPSecServiceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSecServiceServer).IPSecServiceGet(ctx, req.(*IPSecServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPSecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.security.v1.IPSecService",
	HandlerType: (*IPSecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPSecServiceCreate",
			Handler:    _IPSecService_IPSecServiceCreate_Handler,
		},
		{
			MethodName: "IPSecServiceDelete",
			Handler:    _IPSecService_IPSecServiceDelete_Handler,
		},
		{
			MethodName: "IPSecServiceUpdate",
			Handler:    _IPSecService_IPSecServiceUpdate_Handler,
		},
		{
			MethodName: "IPSecServiceList",
			Handler:    _IPSecService_IPSecServiceList_Handler,
		},
		{
			MethodName: "IPSecServiceGet",
			Handler:    _IPSecService_IPSecServiceGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}
