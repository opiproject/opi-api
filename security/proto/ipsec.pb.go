//
// Copyright (C) 2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//
// Major pieces taken from:
// https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ipsec.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm for encryption
type CryptoAlgorithm int32

const (
	CryptoAlgorithm_NONE_CRYPTO  CryptoAlgorithm = 0
	CryptoAlgorithm_AES_CBC_128  CryptoAlgorithm = 1
	CryptoAlgorithm_AES_CBC_192  CryptoAlgorithm = 2
	CryptoAlgorithm_AES_CBC_256  CryptoAlgorithm = 3
	CryptoAlgorithm_AES_GCM_128  CryptoAlgorithm = 4
	CryptoAlgorithm_AES_GCM_256  CryptoAlgorithm = 5
	CryptoAlgorithm_AES_GMAC_128 CryptoAlgorithm = 6
	CryptoAlgorithm_AES_GMAC_256 CryptoAlgorithm = 7
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0: "NONE_CRYPTO",
		1: "AES_CBC_128",
		2: "AES_CBC_192",
		3: "AES_CBC_256",
		4: "AES_GCM_128",
		5: "AES_GCM_256",
		6: "AES_GMAC_128",
		7: "AES_GMAC_256",
	}
	CryptoAlgorithm_value = map[string]int32{
		"NONE_CRYPTO":  0,
		"AES_CBC_128":  1,
		"AES_CBC_192":  2,
		"AES_CBC_256":  3,
		"AES_GCM_128":  4,
		"AES_GCM_256":  5,
		"AES_GMAC_128": 6,
		"AES_GMAC_256": 7,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[0].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[0]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

// Cryptographic algorithm for authentication
type IntegAlgorithm int32

const (
	IntegAlgorithm_NONE_INTEG  IntegAlgorithm = 0
	IntegAlgorithm_MD5_96      IntegAlgorithm = 1
	IntegAlgorithm_SHA1_96     IntegAlgorithm = 2
	IntegAlgorithm_SHA_256_96  IntegAlgorithm = 3
	IntegAlgorithm_SHA_256_128 IntegAlgorithm = 4
	IntegAlgorithm_SHA_384_192 IntegAlgorithm = 5
	IntegAlgorithm_SHA_512_256 IntegAlgorithm = 6
)

// Enum value maps for IntegAlgorithm.
var (
	IntegAlgorithm_name = map[int32]string{
		0: "NONE_INTEG",
		1: "MD5_96",
		2: "SHA1_96",
		3: "SHA_256_96",
		4: "SHA_256_128",
		5: "SHA_384_192",
		6: "SHA_512_256",
	}
	IntegAlgorithm_value = map[string]int32{
		"NONE_INTEG":  0,
		"MD5_96":      1,
		"SHA1_96":     2,
		"SHA_256_96":  3,
		"SHA_256_128": 4,
		"SHA_384_192": 5,
		"SHA_512_256": 6,
	}
)

func (x IntegAlgorithm) Enum() *IntegAlgorithm {
	p := new(IntegAlgorithm)
	*p = x
	return p
}

func (x IntegAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[1].Descriptor()
}

func (IntegAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[1]
}

func (x IntegAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlgorithm.Descriptor instead.
func (IntegAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

// Tunnel mode
type IPsecMode int32

const (
	IPsecMode_TUNNEL_MODE    IPsecMode = 0
	IPsecMode_TRANSPORT_MODE IPsecMode = 1
)

// Enum value maps for IPsecMode.
var (
	IPsecMode_name = map[int32]string{
		0: "TUNNEL_MODE",
		1: "TRANSPORT_MODE",
	}
	IPsecMode_value = map[string]int32{
		"TUNNEL_MODE":    0,
		"TRANSPORT_MODE": 1,
	}
)

func (x IPsecMode) Enum() *IPsecMode {
	p := new(IPsecMode)
	*p = x
	return p
}

func (x IPsecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPsecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[2].Descriptor()
}

func (IPsecMode) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[2]
}

func (x IPsecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPsecMode.Descriptor instead.
func (IPsecMode) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

// Policy action
type SecurityPolicyDatabases_Spd_PolicyEntry_Action int32

const (
	SecurityPolicyDatabases_Spd_PolicyEntry_BYPASS  SecurityPolicyDatabases_Spd_PolicyEntry_Action = 0
	SecurityPolicyDatabases_Spd_PolicyEntry_DISCARD SecurityPolicyDatabases_Spd_PolicyEntry_Action = 1
	//RESOLVE = 2; // unused in VPP
	SecurityPolicyDatabases_Spd_PolicyEntry_PROTECT SecurityPolicyDatabases_Spd_PolicyEntry_Action = 3
)

// Enum value maps for SecurityPolicyDatabases_Spd_PolicyEntry_Action.
var (
	SecurityPolicyDatabases_Spd_PolicyEntry_Action_name = map[int32]string{
		0: "BYPASS",
		1: "DISCARD",
		3: "PROTECT",
	}
	SecurityPolicyDatabases_Spd_PolicyEntry_Action_value = map[string]int32{
		"BYPASS":  0,
		"DISCARD": 1,
		"PROTECT": 3,
	}
)

func (x SecurityPolicyDatabases_Spd_PolicyEntry_Action) Enum() *SecurityPolicyDatabases_Spd_PolicyEntry_Action {
	p := new(SecurityPolicyDatabases_Spd_PolicyEntry_Action)
	*p = x
	return p
}

func (x SecurityPolicyDatabases_Spd_PolicyEntry_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicyDatabases_Spd_PolicyEntry_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[3].Descriptor()
}

func (SecurityPolicyDatabases_Spd_PolicyEntry_Action) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[3]
}

func (x SecurityPolicyDatabases_Spd_PolicyEntry_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicyDatabases_Spd_PolicyEntry_Action.Descriptor instead.
func (SecurityPolicyDatabases_Spd_PolicyEntry_Action) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

// IPsec protocol
type SecurityAssociations_Sa_IPsecProtocol int32

const (
	SecurityAssociations_Sa_AH  SecurityAssociations_Sa_IPsecProtocol = 0
	SecurityAssociations_Sa_ESP SecurityAssociations_Sa_IPsecProtocol = 1
)

// Enum value maps for SecurityAssociations_Sa_IPsecProtocol.
var (
	SecurityAssociations_Sa_IPsecProtocol_name = map[int32]string{
		0: "AH",
		1: "ESP",
	}
	SecurityAssociations_Sa_IPsecProtocol_value = map[string]int32{
		"AH":  0,
		"ESP": 1,
	}
)

func (x SecurityAssociations_Sa_IPsecProtocol) Enum() *SecurityAssociations_Sa_IPsecProtocol {
	p := new(SecurityAssociations_Sa_IPsecProtocol)
	*p = x
	return p
}

func (x SecurityAssociations_Sa_IPsecProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityAssociations_Sa_IPsecProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[4].Descriptor()
}

func (SecurityAssociations_Sa_IPsecProtocol) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[4]
}

func (x SecurityAssociations_Sa_IPsecProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityAssociations_Sa_IPsecProtocol.Descriptor instead.
func (SecurityAssociations_Sa_IPsecProtocol) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2, 0, 0}
}

// Tunnel Interfaces
type TunnelInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*TunnelInterfaces_Tunnel `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (x *TunnelInterfaces) Reset() {
	*x = TunnelInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInterfaces) ProtoMessage() {}

func (x *TunnelInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInterfaces.ProtoReflect.Descriptor instead.
func (*TunnelInterfaces) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelInterfaces) GetTunnels() []*TunnelInterfaces_Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

// Security Policy Database (SPD)
type SecurityPolicyDatabases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spds []*SecurityPolicyDatabases_Spd `protobuf:"bytes,1,rep,name=spds,proto3" json:"spds,omitempty"` // list of all SPDs
}

func (x *SecurityPolicyDatabases) Reset() {
	*x = SecurityPolicyDatabases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases) ProtoMessage() {}

func (x *SecurityPolicyDatabases) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityPolicyDatabases) GetSpds() []*SecurityPolicyDatabases_Spd {
	if x != nil {
		return x.Spds
	}
	return nil
}

// Security Association (SA)
type SecurityAssociations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sas []*SecurityAssociations_Sa `protobuf:"bytes,1,rep,name=sas,proto3" json:"sas,omitempty"`
}

func (x *SecurityAssociations) Reset() {
	*x = SecurityAssociations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAssociations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAssociations) ProtoMessage() {}

func (x *SecurityAssociations) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAssociations.ProtoReflect.Descriptor instead.
func (*SecurityAssociations) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityAssociations) GetSas() []*SecurityAssociations_Sa {
	if x != nil {
		return x.Sas
	}
	return nil
}

type ResyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*TunnelInterfaces_Tunnel     `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	Spds    []*SecurityPolicyDatabases_Spd `protobuf:"bytes,2,rep,name=spds,proto3" json:"spds,omitempty"`
	Sas     []*SecurityAssociations_Sa     `protobuf:"bytes,3,rep,name=sas,proto3" json:"sas,omitempty"`
}

func (x *ResyncRequest) Reset() {
	*x = ResyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncRequest) ProtoMessage() {}

func (x *ResyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncRequest.ProtoReflect.Descriptor instead.
func (*ResyncRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

func (x *ResyncRequest) GetTunnels() []*TunnelInterfaces_Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

func (x *ResyncRequest) GetSpds() []*SecurityPolicyDatabases_Spd {
	if x != nil {
		return x.Spds
	}
	return nil
}

func (x *ResyncRequest) GetSas() []*SecurityAssociations_Sa {
	if x != nil {
		return x.Sas
	}
	return nil
}

type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

func (x *Uuid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IPsecCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel *TunnelInterfaces        `protobuf:"bytes,1,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Policy *SecurityPolicyDatabases `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Sa     *SecurityAssociations    `protobuf:"bytes,3,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *IPsecCreateRequest) Reset() {
	*x = IPsecCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecCreateRequest) ProtoMessage() {}

func (x *IPsecCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecCreateRequest.ProtoReflect.Descriptor instead.
func (*IPsecCreateRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

func (x *IPsecCreateRequest) GetTunnel() *TunnelInterfaces {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IPsecCreateRequest) GetPolicy() *SecurityPolicyDatabases {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *IPsecCreateRequest) GetSa() *SecurityAssociations {
	if x != nil {
		return x.Sa
	}
	return nil
}

type IPsecCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecCreateResponse) Reset() {
	*x = IPsecCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecCreateResponse) ProtoMessage() {}

func (x *IPsecCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecCreateResponse.ProtoReflect.Descriptor instead.
func (*IPsecCreateResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

func (x *IPsecCreateResponse) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecDeleteRequest) Reset() {
	*x = IPsecDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecDeleteRequest) ProtoMessage() {}

func (x *IPsecDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecDeleteRequest.ProtoReflect.Descriptor instead.
func (*IPsecDeleteRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

func (x *IPsecDeleteRequest) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecDeleteResponse) Reset() {
	*x = IPsecDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecDeleteResponse) ProtoMessage() {}

func (x *IPsecDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecDeleteResponse.ProtoReflect.Descriptor instead.
func (*IPsecDeleteResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

func (x *IPsecDeleteResponse) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *Uuid                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tunnel *TunnelInterfaces        `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Policy *SecurityPolicyDatabases `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	Sa     *SecurityAssociations    `protobuf:"bytes,4,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *IPsecUpdateRequest) Reset() {
	*x = IPsecUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecUpdateRequest) ProtoMessage() {}

func (x *IPsecUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecUpdateRequest.ProtoReflect.Descriptor instead.
func (*IPsecUpdateRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

func (x *IPsecUpdateRequest) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IPsecUpdateRequest) GetTunnel() *TunnelInterfaces {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IPsecUpdateRequest) GetPolicy() *SecurityPolicyDatabases {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *IPsecUpdateRequest) GetSa() *SecurityAssociations {
	if x != nil {
		return x.Sa
	}
	return nil
}

type IPsecUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecUpdateResponse) Reset() {
	*x = IPsecUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecUpdateResponse) ProtoMessage() {}

func (x *IPsecUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecUpdateResponse.ProtoReflect.Descriptor instead.
func (*IPsecUpdateResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10}
}

func (x *IPsecUpdateResponse) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecListRequest) Reset() {
	*x = IPsecListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListRequest) ProtoMessage() {}

func (x *IPsecListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListRequest.ProtoReflect.Descriptor instead.
func (*IPsecListRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{11}
}

func (x *IPsecListRequest) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipsec []*IPsecListResponse_IPsecData `protobuf:"bytes,1,rep,name=ipsec,proto3" json:"ipsec,omitempty"`
}

func (x *IPsecListResponse) Reset() {
	*x = IPsecListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListResponse) ProtoMessage() {}

func (x *IPsecListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListResponse.ProtoReflect.Descriptor instead.
func (*IPsecListResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12}
}

func (x *IPsecListResponse) GetIpsec() []*IPsecListResponse_IPsecData {
	if x != nil {
		return x.Ipsec
	}
	return nil
}

type IPsecGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IPsecGetRequest) Reset() {
	*x = IPsecGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecGetRequest) ProtoMessage() {}

func (x *IPsecGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecGetRequest.ProtoReflect.Descriptor instead.
func (*IPsecGetRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{13}
}

func (x *IPsecGetRequest) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

type IPsecGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *Uuid                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tunnel *TunnelInterfaces        `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Policy *SecurityPolicyDatabases `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	Sa     *SecurityAssociations    `protobuf:"bytes,4,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *IPsecGetResponse) Reset() {
	*x = IPsecGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecGetResponse) ProtoMessage() {}

func (x *IPsecGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecGetResponse.ProtoReflect.Descriptor instead.
func (*IPsecGetResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{14}
}

func (x *IPsecGetResponse) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IPsecGetResponse) GetTunnel() *TunnelInterfaces {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IPsecGetResponse) GetPolicy() *SecurityPolicyDatabases {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *IPsecGetResponse) GetSa() *SecurityAssociations {
	if x != nil {
		return x.Sa
	}
	return nil
}

type TunnelInterfaces_Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // tunnel name
	Esn             bool            `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`                                 // extended sequence number
	AntiReplay      bool            `protobuf:"varint,3,opt,name=anti_replay,json=antiReplay,proto3" json:"anti_replay,omitempty"` // anti replay option
	LocalIp         string          `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	RemoteIp        string          `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	LocalSpi        uint32          `protobuf:"varint,6,opt,name=local_spi,json=localSpi,proto3" json:"local_spi,omitempty"`
	RemoteSpi       uint32          `protobuf:"varint,7,opt,name=remote_spi,json=remoteSpi,proto3" json:"remote_spi,omitempty"`
	CryptoAlg       CryptoAlgorithm `protobuf:"varint,8,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=opi.security.v1.CryptoAlgorithm" json:"crypto_alg,omitempty"`
	LocalCryptoKey  string          `protobuf:"bytes,9,opt,name=local_crypto_key,json=localCryptoKey,proto3" json:"local_crypto_key,omitempty"`
	RemoteCryptoKey string          `protobuf:"bytes,10,opt,name=remote_crypto_key,json=remoteCryptoKey,proto3" json:"remote_crypto_key,omitempty"`
	IntegAlg        IntegAlgorithm  `protobuf:"varint,11,opt,name=integ_alg,json=integAlg,proto3,enum=opi.security.v1.IntegAlgorithm" json:"integ_alg,omitempty"`
	LocalIntegKey   string          `protobuf:"bytes,12,opt,name=local_integ_key,json=localIntegKey,proto3" json:"local_integ_key,omitempty"`
	RemoteIntegKey  string          `protobuf:"bytes,13,opt,name=remote_integ_key,json=remoteIntegKey,proto3" json:"remote_integ_key,omitempty"`
	// Tunnel or transport mode
	Mode IPsecMode `protobuf:"varint,14,opt,name=mode,proto3,enum=opi.security.v1.IPsecMode" json:"mode,omitempty"`
	// Extra fields related to interface
	Enabled     bool     `protobuf:"varint,100,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IpAddresses []string `protobuf:"bytes,101,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Vrf         uint32   `protobuf:"varint,102,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *TunnelInterfaces_Tunnel) Reset() {
	*x = TunnelInterfaces_Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInterfaces_Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInterfaces_Tunnel) ProtoMessage() {}

func (x *TunnelInterfaces_Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInterfaces_Tunnel.ProtoReflect.Descriptor instead.
func (*TunnelInterfaces_Tunnel) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TunnelInterfaces_Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetEsn() bool {
	if x != nil {
		return x.Esn
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetAntiReplay() bool {
	if x != nil {
		return x.AntiReplay
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetLocalSpi() uint32 {
	if x != nil {
		return x.LocalSpi
	}
	return 0
}

func (x *TunnelInterfaces_Tunnel) GetRemoteSpi() uint32 {
	if x != nil {
		return x.RemoteSpi
	}
	return 0
}

func (x *TunnelInterfaces_Tunnel) GetCryptoAlg() CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlgorithm_NONE_CRYPTO
}

func (x *TunnelInterfaces_Tunnel) GetLocalCryptoKey() string {
	if x != nil {
		return x.LocalCryptoKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteCryptoKey() string {
	if x != nil {
		return x.RemoteCryptoKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetIntegAlg() IntegAlgorithm {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlgorithm_NONE_INTEG
}

func (x *TunnelInterfaces_Tunnel) GetLocalIntegKey() string {
	if x != nil {
		return x.LocalIntegKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetRemoteIntegKey() string {
	if x != nil {
		return x.RemoteIntegKey
	}
	return ""
}

func (x *TunnelInterfaces_Tunnel) GetMode() IPsecMode {
	if x != nil {
		return x.Mode
	}
	return IPsecMode_TUNNEL_MODE
}

func (x *TunnelInterfaces_Tunnel) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TunnelInterfaces_Tunnel) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *TunnelInterfaces_Tunnel) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

type SecurityPolicyDatabases_Spd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interfaces    []*SecurityPolicyDatabases_Spd_Interface   `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`                            // list of interfaces belonging to this SPD
	PolicyEntries []*SecurityPolicyDatabases_Spd_PolicyEntry `protobuf:"bytes,3,rep,name=policy_entries,json=policyEntries,proto3" json:"policy_entries,omitempty"` // list of policy entries belonging to this SPD
}

func (x *SecurityPolicyDatabases_Spd) Reset() {
	*x = SecurityPolicyDatabases_Spd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_Spd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_Spd) ProtoMessage() {}

func (x *SecurityPolicyDatabases_Spd) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_Spd.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_Spd) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SecurityPolicyDatabases_Spd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd) GetInterfaces() []*SecurityPolicyDatabases_Spd_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *SecurityPolicyDatabases_Spd) GetPolicyEntries() []*SecurityPolicyDatabases_Spd_PolicyEntry {
	if x != nil {
		return x.PolicyEntries
	}
	return nil
}

// Interface
type SecurityPolicyDatabases_Spd_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // interface name
}

func (x *SecurityPolicyDatabases_Spd_Interface) Reset() {
	*x = SecurityPolicyDatabases_Spd_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_Spd_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_Spd_Interface) ProtoMessage() {}

func (x *SecurityPolicyDatabases_Spd_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_Spd_Interface.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_Spd_Interface) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *SecurityPolicyDatabases_Spd_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Policy Entry
type SecurityPolicyDatabases_Spd_PolicyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sa              string                                         `protobuf:"bytes,1,opt,name=sa,proto3" json:"sa,omitempty"` // security association name
	Priority        int32                                          `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	IsOutbound      bool                                           `protobuf:"varint,3,opt,name=is_outbound,json=isOutbound,proto3" json:"is_outbound,omitempty"`
	RemoteAddrStart string                                         `protobuf:"bytes,4,opt,name=remote_addr_start,json=remoteAddrStart,proto3" json:"remote_addr_start,omitempty"`
	RemoteAddrStop  string                                         `protobuf:"bytes,5,opt,name=remote_addr_stop,json=remoteAddrStop,proto3" json:"remote_addr_stop,omitempty"`
	LocalAddrStart  string                                         `protobuf:"bytes,6,opt,name=local_addr_start,json=localAddrStart,proto3" json:"local_addr_start,omitempty"`
	LocalAddrStop   string                                         `protobuf:"bytes,7,opt,name=local_addr_stop,json=localAddrStop,proto3" json:"local_addr_stop,omitempty"`
	Protocol        uint32                                         `protobuf:"varint,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RemotePortStart uint32                                         `protobuf:"varint,9,opt,name=remote_port_start,json=remotePortStart,proto3" json:"remote_port_start,omitempty"`
	RemotePortStop  uint32                                         `protobuf:"varint,10,opt,name=remote_port_stop,json=remotePortStop,proto3" json:"remote_port_stop,omitempty"`
	LocalPortStart  uint32                                         `protobuf:"varint,11,opt,name=local_port_start,json=localPortStart,proto3" json:"local_port_start,omitempty"`
	LocalPortStop   uint32                                         `protobuf:"varint,12,opt,name=local_port_stop,json=localPortStop,proto3" json:"local_port_stop,omitempty"`
	Action          SecurityPolicyDatabases_Spd_PolicyEntry_Action `protobuf:"varint,13,opt,name=action,proto3,enum=opi.security.v1.SecurityPolicyDatabases_Spd_PolicyEntry_Action" json:"action,omitempty"` // policy action
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) Reset() {
	*x = SecurityPolicyDatabases_Spd_PolicyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabases_Spd_PolicyEntry) ProtoMessage() {}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabases_Spd_PolicyEntry.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabases_Spd_PolicyEntry) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetSa() string {
	if x != nil {
		return x.Sa
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetRemoteAddrStart() string {
	if x != nil {
		return x.RemoteAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetRemoteAddrStop() string {
	if x != nil {
		return x.RemoteAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetLocalAddrStart() string {
	if x != nil {
		return x.LocalAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetLocalAddrStop() string {
	if x != nil {
		return x.LocalAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetRemotePortStart() uint32 {
	if x != nil {
		return x.RemotePortStart
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetRemotePortStop() uint32 {
	if x != nil {
		return x.RemotePortStop
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetLocalPortStart() uint32 {
	if x != nil {
		return x.LocalPortStart
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetLocalPortStop() uint32 {
	if x != nil {
		return x.LocalPortStop
	}
	return 0
}

func (x *SecurityPolicyDatabases_Spd_PolicyEntry) GetAction() SecurityPolicyDatabases_Spd_PolicyEntry_Action {
	if x != nil {
		return x.Action
	}
	return SecurityPolicyDatabases_Spd_PolicyEntry_BYPASS
}

type SecurityAssociations_Sa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // security association name
	Spi            uint32                                `protobuf:"varint,2,opt,name=spi,proto3" json:"spi,omitempty"`  // security parameter index
	Protocol       SecurityAssociations_Sa_IPsecProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=opi.security.v1.SecurityAssociations_Sa_IPsecProtocol" json:"protocol,omitempty"`
	CryptoAlg      CryptoAlgorithm                       `protobuf:"varint,4,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=opi.security.v1.CryptoAlgorithm" json:"crypto_alg,omitempty"`
	CryptoKey      string                                `protobuf:"bytes,5,opt,name=crypto_key,json=cryptoKey,proto3" json:"crypto_key,omitempty"`
	IntegAlg       IntegAlgorithm                        `protobuf:"varint,6,opt,name=integ_alg,json=integAlg,proto3,enum=opi.security.v1.IntegAlgorithm" json:"integ_alg,omitempty"`
	IntegKey       string                                `protobuf:"bytes,7,opt,name=integ_key,json=integKey,proto3" json:"integ_key,omitempty"`
	UseEsn         bool                                  `protobuf:"varint,8,opt,name=use_esn,json=useEsn,proto3" json:"use_esn,omitempty"`                        // Use extended sequence number
	UseAntiReplay  bool                                  `protobuf:"varint,9,opt,name=use_anti_replay,json=useAntiReplay,proto3" json:"use_anti_replay,omitempty"` // Use anti replay
	TunnelSrcAddr  string                                `protobuf:"bytes,10,opt,name=tunnel_src_addr,json=tunnelSrcAddr,proto3" json:"tunnel_src_addr,omitempty"`
	TunnelDstAddr  string                                `protobuf:"bytes,11,opt,name=tunnel_dst_addr,json=tunnelDstAddr,proto3" json:"tunnel_dst_addr,omitempty"`
	EnableUdpEncap bool                                  `protobuf:"varint,12,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"` // Enable UDP encapsulation for NAT traversal
}

func (x *SecurityAssociations_Sa) Reset() {
	*x = SecurityAssociations_Sa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAssociations_Sa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAssociations_Sa) ProtoMessage() {}

func (x *SecurityAssociations_Sa) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAssociations_Sa.ProtoReflect.Descriptor instead.
func (*SecurityAssociations_Sa) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SecurityAssociations_Sa) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAssociations_Sa) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *SecurityAssociations_Sa) GetProtocol() SecurityAssociations_Sa_IPsecProtocol {
	if x != nil {
		return x.Protocol
	}
	return SecurityAssociations_Sa_AH
}

func (x *SecurityAssociations_Sa) GetCryptoAlg() CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlgorithm_NONE_CRYPTO
}

func (x *SecurityAssociations_Sa) GetCryptoKey() string {
	if x != nil {
		return x.CryptoKey
	}
	return ""
}

func (x *SecurityAssociations_Sa) GetIntegAlg() IntegAlgorithm {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlgorithm_NONE_INTEG
}

func (x *SecurityAssociations_Sa) GetIntegKey() string {
	if x != nil {
		return x.IntegKey
	}
	return ""
}

func (x *SecurityAssociations_Sa) GetUseEsn() bool {
	if x != nil {
		return x.UseEsn
	}
	return false
}

func (x *SecurityAssociations_Sa) GetUseAntiReplay() bool {
	if x != nil {
		return x.UseAntiReplay
	}
	return false
}

func (x *SecurityAssociations_Sa) GetTunnelSrcAddr() string {
	if x != nil {
		return x.TunnelSrcAddr
	}
	return ""
}

func (x *SecurityAssociations_Sa) GetTunnelDstAddr() string {
	if x != nil {
		return x.TunnelDstAddr
	}
	return ""
}

func (x *SecurityAssociations_Sa) GetEnableUdpEncap() bool {
	if x != nil {
		return x.EnableUdpEncap
	}
	return false
}

type IPsecListResponse_IPsecData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel *TunnelInterfaces        `protobuf:"bytes,1,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Policy *SecurityPolicyDatabases `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Sa     *SecurityAssociations    `protobuf:"bytes,3,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *IPsecListResponse_IPsecData) Reset() {
	*x = IPsecListResponse_IPsecData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListResponse_IPsecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListResponse_IPsecData) ProtoMessage() {}

func (x *IPsecListResponse_IPsecData) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListResponse_IPsecData.ProtoReflect.Descriptor instead.
func (*IPsecListResponse_IPsecData) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12, 0}
}

func (x *IPsecListResponse_IPsecData) GetTunnel() *TunnelInterfaces {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IPsecListResponse_IPsecData) GetPolicy() *SecurityPolicyDatabases {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *IPsecListResponse_IPsecData) GetSa() *SecurityAssociations {
	if x != nil {
		return x.Sa
	}
	return nil
}

var File_ipsec_proto protoreflect.FileDescriptor

var file_ipsec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x22, 0xc2,
	0x05, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xe9, 0x04, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x69, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41,
	0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x76, 0x72, 0x66, 0x22, 0xa3, 0x07, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x04, 0x73, 0x70, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x64, 0x52, 0x04, 0x73, 0x70, 0x64,
	0x73, 0x1a, 0xc5, 0x06, 0x0a, 0x03, 0x53, 0x70, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x64, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xcf, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x57, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x64, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0xeb, 0x04, 0x0a, 0x14, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x73, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x52, 0x03, 0x73, 0x61, 0x73, 0x1a, 0x96,
	0x04, 0x0a, 0x02, 0x53, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x52, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x45, 0x73, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x64, 0x70,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x22, 0x20, 0x0a, 0x0d, 0x49, 0x50, 0x73, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x48, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a,
	0x04, 0x73, 0x70, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x64, 0x52, 0x04, 0x73, 0x70, 0x64, 0x73, 0x12,
	0x3a, 0x0a, 0x03, 0x73, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x52, 0x03, 0x73, 0x61, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a,
	0x02, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x02, 0x73, 0x61, 0x22, 0x3c, 0x0a, 0x13, 0x49, 0x50, 0x73, 0x65, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3c, 0x0a, 0x13, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xef, 0x01,
	0x0a, 0x12, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x73, 0x61, 0x22,
	0x3c, 0x0a, 0x13, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a,
	0x10, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x1a, 0xbf, 0x01, 0x0a, 0x09, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a,
	0x02, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x02, 0x73, 0x61, 0x22, 0x38, 0x0a, 0x0f, 0x49, 0x50, 0x73, 0x65, 0x63, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xed,
	0x01, 0x0a, 0x10, 0x49, 0x50, 0x73, 0x65, 0x63, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x73, 0x61, 0x2a, 0x9b,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x31,
	0x32, 0x38, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x31, 0x39, 0x32, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x45, 0x53, 0x5f,
	0x47, 0x4d, 0x41, 0x43, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x45,
	0x53, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x07, 0x2a, 0x7c, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x44, 0x35, 0x5f, 0x39, 0x36, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48,
	0x41, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x5f, 0x32,
	0x35, 0x36, 0x5f, 0x39, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x5f, 0x32,
	0x35, 0x36, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x5f,
	0x33, 0x38, 0x34, 0x5f, 0x31, 0x39, 0x32, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41,
	0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x06, 0x2a, 0x30, 0x0a, 0x09, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x32, 0xc4, 0x03, 0x0a,
	0x05, 0x49, 0x50, 0x73, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x0b, 0x49, 0x50, 0x73, 0x65, 0x63, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0b, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x08, 0x49, 0x50, 0x73, 0x65, 0x63, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipsec_proto_rawDescOnce sync.Once
	file_ipsec_proto_rawDescData = file_ipsec_proto_rawDesc
)

func file_ipsec_proto_rawDescGZIP() []byte {
	file_ipsec_proto_rawDescOnce.Do(func() {
		file_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipsec_proto_rawDescData)
	})
	return file_ipsec_proto_rawDescData
}

var file_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_ipsec_proto_goTypes = []interface{}{
	(CryptoAlgorithm)(0), // 0: opi.security.v1.CryptoAlgorithm
	(IntegAlgorithm)(0),  // 1: opi.security.v1.IntegAlgorithm
	(IPsecMode)(0),       // 2: opi.security.v1.IPsecMode
	(SecurityPolicyDatabases_Spd_PolicyEntry_Action)(0), // 3: opi.security.v1.SecurityPolicyDatabases.Spd.PolicyEntry.Action
	(SecurityAssociations_Sa_IPsecProtocol)(0),          // 4: opi.security.v1.SecurityAssociations.Sa.IPsecProtocol
	(*TunnelInterfaces)(nil),                            // 5: opi.security.v1.TunnelInterfaces
	(*SecurityPolicyDatabases)(nil),                     // 6: opi.security.v1.SecurityPolicyDatabases
	(*SecurityAssociations)(nil),                        // 7: opi.security.v1.SecurityAssociations
	(*ResyncRequest)(nil),                               // 8: opi.security.v1.ResyncRequest
	(*Uuid)(nil),                                        // 9: opi.security.v1.Uuid
	(*IPsecCreateRequest)(nil),                          // 10: opi.security.v1.IPsecCreateRequest
	(*IPsecCreateResponse)(nil),                         // 11: opi.security.v1.IPsecCreateResponse
	(*IPsecDeleteRequest)(nil),                          // 12: opi.security.v1.IPsecDeleteRequest
	(*IPsecDeleteResponse)(nil),                         // 13: opi.security.v1.IPsecDeleteResponse
	(*IPsecUpdateRequest)(nil),                          // 14: opi.security.v1.IPsecUpdateRequest
	(*IPsecUpdateResponse)(nil),                         // 15: opi.security.v1.IPsecUpdateResponse
	(*IPsecListRequest)(nil),                            // 16: opi.security.v1.IPsecListRequest
	(*IPsecListResponse)(nil),                           // 17: opi.security.v1.IPsecListResponse
	(*IPsecGetRequest)(nil),                             // 18: opi.security.v1.IPsecGetRequest
	(*IPsecGetResponse)(nil),                            // 19: opi.security.v1.IPsecGetResponse
	(*TunnelInterfaces_Tunnel)(nil),                     // 20: opi.security.v1.TunnelInterfaces.Tunnel
	(*SecurityPolicyDatabases_Spd)(nil),                 // 21: opi.security.v1.SecurityPolicyDatabases.Spd
	(*SecurityPolicyDatabases_Spd_Interface)(nil),       // 22: opi.security.v1.SecurityPolicyDatabases.Spd.Interface
	(*SecurityPolicyDatabases_Spd_PolicyEntry)(nil),     // 23: opi.security.v1.SecurityPolicyDatabases.Spd.PolicyEntry
	(*SecurityAssociations_Sa)(nil),                     // 24: opi.security.v1.SecurityAssociations.Sa
	(*IPsecListResponse_IPsecData)(nil),                 // 25: opi.security.v1.IPsecListResponse.IPsecData
}
var file_ipsec_proto_depIdxs = []int32{
	20, // 0: opi.security.v1.TunnelInterfaces.tunnels:type_name -> opi.security.v1.TunnelInterfaces.Tunnel
	21, // 1: opi.security.v1.SecurityPolicyDatabases.spds:type_name -> opi.security.v1.SecurityPolicyDatabases.Spd
	24, // 2: opi.security.v1.SecurityAssociations.sas:type_name -> opi.security.v1.SecurityAssociations.Sa
	20, // 3: opi.security.v1.ResyncRequest.tunnels:type_name -> opi.security.v1.TunnelInterfaces.Tunnel
	21, // 4: opi.security.v1.ResyncRequest.spds:type_name -> opi.security.v1.SecurityPolicyDatabases.Spd
	24, // 5: opi.security.v1.ResyncRequest.sas:type_name -> opi.security.v1.SecurityAssociations.Sa
	5,  // 6: opi.security.v1.IPsecCreateRequest.tunnel:type_name -> opi.security.v1.TunnelInterfaces
	6,  // 7: opi.security.v1.IPsecCreateRequest.policy:type_name -> opi.security.v1.SecurityPolicyDatabases
	7,  // 8: opi.security.v1.IPsecCreateRequest.sa:type_name -> opi.security.v1.SecurityAssociations
	9,  // 9: opi.security.v1.IPsecCreateResponse.id:type_name -> opi.security.v1.Uuid
	9,  // 10: opi.security.v1.IPsecDeleteRequest.id:type_name -> opi.security.v1.Uuid
	9,  // 11: opi.security.v1.IPsecDeleteResponse.id:type_name -> opi.security.v1.Uuid
	9,  // 12: opi.security.v1.IPsecUpdateRequest.id:type_name -> opi.security.v1.Uuid
	5,  // 13: opi.security.v1.IPsecUpdateRequest.tunnel:type_name -> opi.security.v1.TunnelInterfaces
	6,  // 14: opi.security.v1.IPsecUpdateRequest.policy:type_name -> opi.security.v1.SecurityPolicyDatabases
	7,  // 15: opi.security.v1.IPsecUpdateRequest.sa:type_name -> opi.security.v1.SecurityAssociations
	9,  // 16: opi.security.v1.IPsecUpdateResponse.id:type_name -> opi.security.v1.Uuid
	9,  // 17: opi.security.v1.IPsecListRequest.id:type_name -> opi.security.v1.Uuid
	25, // 18: opi.security.v1.IPsecListResponse.ipsec:type_name -> opi.security.v1.IPsecListResponse.IPsecData
	9,  // 19: opi.security.v1.IPsecGetRequest.id:type_name -> opi.security.v1.Uuid
	9,  // 20: opi.security.v1.IPsecGetResponse.id:type_name -> opi.security.v1.Uuid
	5,  // 21: opi.security.v1.IPsecGetResponse.tunnel:type_name -> opi.security.v1.TunnelInterfaces
	6,  // 22: opi.security.v1.IPsecGetResponse.policy:type_name -> opi.security.v1.SecurityPolicyDatabases
	7,  // 23: opi.security.v1.IPsecGetResponse.sa:type_name -> opi.security.v1.SecurityAssociations
	0,  // 24: opi.security.v1.TunnelInterfaces.Tunnel.crypto_alg:type_name -> opi.security.v1.CryptoAlgorithm
	1,  // 25: opi.security.v1.TunnelInterfaces.Tunnel.integ_alg:type_name -> opi.security.v1.IntegAlgorithm
	2,  // 26: opi.security.v1.TunnelInterfaces.Tunnel.mode:type_name -> opi.security.v1.IPsecMode
	22, // 27: opi.security.v1.SecurityPolicyDatabases.Spd.interfaces:type_name -> opi.security.v1.SecurityPolicyDatabases.Spd.Interface
	23, // 28: opi.security.v1.SecurityPolicyDatabases.Spd.policy_entries:type_name -> opi.security.v1.SecurityPolicyDatabases.Spd.PolicyEntry
	3,  // 29: opi.security.v1.SecurityPolicyDatabases.Spd.PolicyEntry.action:type_name -> opi.security.v1.SecurityPolicyDatabases.Spd.PolicyEntry.Action
	4,  // 30: opi.security.v1.SecurityAssociations.Sa.protocol:type_name -> opi.security.v1.SecurityAssociations.Sa.IPsecProtocol
	0,  // 31: opi.security.v1.SecurityAssociations.Sa.crypto_alg:type_name -> opi.security.v1.CryptoAlgorithm
	1,  // 32: opi.security.v1.SecurityAssociations.Sa.integ_alg:type_name -> opi.security.v1.IntegAlgorithm
	5,  // 33: opi.security.v1.IPsecListResponse.IPsecData.tunnel:type_name -> opi.security.v1.TunnelInterfaces
	6,  // 34: opi.security.v1.IPsecListResponse.IPsecData.policy:type_name -> opi.security.v1.SecurityPolicyDatabases
	7,  // 35: opi.security.v1.IPsecListResponse.IPsecData.sa:type_name -> opi.security.v1.SecurityAssociations
	10, // 36: opi.security.v1.IPsec.IPsecCreate:input_type -> opi.security.v1.IPsecCreateRequest
	12, // 37: opi.security.v1.IPsec.IPsecDelete:input_type -> opi.security.v1.IPsecDeleteRequest
	14, // 38: opi.security.v1.IPsec.IPsecUpdate:input_type -> opi.security.v1.IPsecUpdateRequest
	16, // 39: opi.security.v1.IPsec.IPsecList:input_type -> opi.security.v1.IPsecListRequest
	18, // 40: opi.security.v1.IPsec.IPsecGet:input_type -> opi.security.v1.IPsecGetRequest
	11, // 41: opi.security.v1.IPsec.IPsecCreate:output_type -> opi.security.v1.IPsecCreateResponse
	13, // 42: opi.security.v1.IPsec.IPsecDelete:output_type -> opi.security.v1.IPsecDeleteResponse
	15, // 43: opi.security.v1.IPsec.IPsecUpdate:output_type -> opi.security.v1.IPsecUpdateResponse
	17, // 44: opi.security.v1.IPsec.IPsecList:output_type -> opi.security.v1.IPsecListResponse
	19, // 45: opi.security.v1.IPsec.IPsecGet:output_type -> opi.security.v1.IPsecGetResponse
	41, // [41:46] is the sub-list for method output_type
	36, // [36:41] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_ipsec_proto_init() }
func file_ipsec_proto_init() {
	if File_ipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAssociations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInterfaces_Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_Spd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_Spd_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabases_Spd_PolicyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAssociations_Sa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListResponse_IPsecData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipsec_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipsec_proto_goTypes,
		DependencyIndexes: file_ipsec_proto_depIdxs,
		EnumInfos:         file_ipsec_proto_enumTypes,
		MessageInfos:      file_ipsec_proto_msgTypes,
	}.Build()
	File_ipsec_proto = out.File
	file_ipsec_proto_rawDesc = nil
	file_ipsec_proto_goTypes = nil
	file_ipsec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPsecClient is the client API for IPsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPsecClient interface {
	IPsecCreate(ctx context.Context, in *IPsecCreateRequest, opts ...grpc.CallOption) (*IPsecCreateResponse, error)
	IPsecDelete(ctx context.Context, in *IPsecDeleteRequest, opts ...grpc.CallOption) (*IPsecDeleteResponse, error)
	IPsecUpdate(ctx context.Context, in *IPsecUpdateRequest, opts ...grpc.CallOption) (*IPsecUpdateResponse, error)
	IPsecList(ctx context.Context, in *IPsecListRequest, opts ...grpc.CallOption) (*IPsecListResponse, error)
	IPsecGet(ctx context.Context, in *IPsecGetRequest, opts ...grpc.CallOption) (*IPsecGetResponse, error)
}

type iPsecClient struct {
	cc grpc.ClientConnInterface
}

func NewIPsecClient(cc grpc.ClientConnInterface) IPsecClient {
	return &iPsecClient{cc}
}

func (c *iPsecClient) IPsecCreate(ctx context.Context, in *IPsecCreateRequest, opts ...grpc.CallOption) (*IPsecCreateResponse, error) {
	out := new(IPsecCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPsec/IPsecCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecDelete(ctx context.Context, in *IPsecDeleteRequest, opts ...grpc.CallOption) (*IPsecDeleteResponse, error) {
	out := new(IPsecDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPsec/IPsecDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecUpdate(ctx context.Context, in *IPsecUpdateRequest, opts ...grpc.CallOption) (*IPsecUpdateResponse, error) {
	out := new(IPsecUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPsec/IPsecUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecList(ctx context.Context, in *IPsecListRequest, opts ...grpc.CallOption) (*IPsecListResponse, error) {
	out := new(IPsecListResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPsec/IPsecList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecGet(ctx context.Context, in *IPsecGetRequest, opts ...grpc.CallOption) (*IPsecGetResponse, error) {
	out := new(IPsecGetResponse)
	err := c.cc.Invoke(ctx, "/opi.security.v1.IPsec/IPsecGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPsecServer is the server API for IPsec service.
type IPsecServer interface {
	IPsecCreate(context.Context, *IPsecCreateRequest) (*IPsecCreateResponse, error)
	IPsecDelete(context.Context, *IPsecDeleteRequest) (*IPsecDeleteResponse, error)
	IPsecUpdate(context.Context, *IPsecUpdateRequest) (*IPsecUpdateResponse, error)
	IPsecList(context.Context, *IPsecListRequest) (*IPsecListResponse, error)
	IPsecGet(context.Context, *IPsecGetRequest) (*IPsecGetResponse, error)
}

// UnimplementedIPsecServer can be embedded to have forward compatible implementations.
type UnimplementedIPsecServer struct {
}

func (*UnimplementedIPsecServer) IPsecCreate(context.Context, *IPsecCreateRequest) (*IPsecCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecCreate not implemented")
}
func (*UnimplementedIPsecServer) IPsecDelete(context.Context, *IPsecDeleteRequest) (*IPsecDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecDelete not implemented")
}
func (*UnimplementedIPsecServer) IPsecUpdate(context.Context, *IPsecUpdateRequest) (*IPsecUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecUpdate not implemented")
}
func (*UnimplementedIPsecServer) IPsecList(context.Context, *IPsecListRequest) (*IPsecListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecList not implemented")
}
func (*UnimplementedIPsecServer) IPsecGet(context.Context, *IPsecGetRequest) (*IPsecGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecGet not implemented")
}

func RegisterIPsecServer(s *grpc.Server, srv IPsecServer) {
	s.RegisterService(&_IPsec_serviceDesc, srv)
}

func _IPsec_IPsecCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPsec/IPsecCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecCreate(ctx, req.(*IPsecCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPsec/IPsecDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecDelete(ctx, req.(*IPsecDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPsec/IPsecUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecUpdate(ctx, req.(*IPsecUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPsec/IPsecList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecList(ctx, req.(*IPsecListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.security.v1.IPsec/IPsecGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecGet(ctx, req.(*IPsecGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.security.v1.IPsec",
	HandlerType: (*IPsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPsecCreate",
			Handler:    _IPsec_IPsecCreate_Handler,
		},
		{
			MethodName: "IPsecDelete",
			Handler:    _IPsec_IPsecDelete_Handler,
		},
		{
			MethodName: "IPsecUpdate",
			Handler:    _IPsec_IPsecUpdate_Handler,
		},
		{
			MethodName: "IPsecList",
			Handler:    _IPsec_IPsecList_Handler,
		},
		{
			MethodName: "IPsecGet",
			Handler:    _IPsec_IPsecGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}
