/*
 * Copyright (C) 2021 Intel Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Major pieces taken from:
 * https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto
 */
syntax = "proto3";
package opi.security.v1;
option go_package = "github.com/opiproject/opi-api/security/proto";

service IPsec {
	rpc IPsecVersion (IPsecVersionReq) returns (IPsecVersionResp) {}
	rpc IPsecStats   (IPsecStatsReq)   returns (IPsecStatsResp)   {}
	rpc IPsecInitiate (IPsecInitiateReq) returns (IPsecInitiateResp) {}
	rpc IPsecTerminate (IPsecTerminateReq) returns (IPsecTerminateResp) {}
	rpc IPsecRekey (IPsecRekeyReq) returns (IPsecRekeyResp) {}
	rpc IPsecListSas (IPsecListSasReq) returns (IPsecListSasResp) {}
	rpc IPsecListConns (IPsecListConnsReq) returns (IPsecListConnsResp) {}
	rpc IPsecListCerts (IPsecListCertsReq) returns (IPsecListCertsResp) {}
	rpc IPsecLoadConn (IPsecLoadConnReq) returns (IPsecLoadConnResp) {}
	rpc IPsecUnloadConn (IPsecUnloadConnReq) returns (IPsecUnloadConnResp) {}
}

/* Cryptographic algorithm for encryption */
enum CryptoAlgorithm {
	NONE_CRYPTO  = 0;
	AES128       = 1;
	AES192       = 2;
	AES256       = 3;
	AES128GCM128 = 4;
	AES256GCM128 = 5;
	AES128GMAC   = 6;
	AES256GMAC   = 7;
}
/* Cryptographic algorithm for authentication */
enum IntegAlgorithm {
	NONE_INTEG = 0;
	MD5        = 1;
	MD5_128    = 2;
	SHA1       = 3;
	SHA1_160   = 4;
	SHA256     = 5;
	SHA384     = 7;
	SHA512     = 8;
	SHA256_96  = 9;
}

/* Diffie Hellman Groups */
enum DiffieHellmanGroups {
	NONE_DH_GROUP = 0;
	MODP768      = 1;
	MODP1024     = 2;
	MODP1536     = 3;
	MODP2048     = 4;
	MODP3072     = 5;
	MODP4096     = 6;
	MODP6144     = 7;
	MODP8192     = 8;
	MODP1024S160 = 9;
	MODP2048S224 = 10;
	MODP2048S256 = 11;
	CURVE25519   = 12;
}

enum PseudoRandomFunction {
	NONE_PRF   = 0;
	PRFMD5     = 1;
	PRFSHA1    = 2;
	PRFAESXCBC = 3;
	PRFAESCMAC = 4;
	PRFSHA256  = 5;
	PRFSHA384  = 6;
	PRFSHA512  = 7;
}

/* Tunnel mode */
enum IPsecMode {
	TUNNEL_MODE = 0;
	TRANSPORT_MODE = 1;
}

/* Authentication Type */
enum AuthType {
	PUBKEY = 0;
	PSK    = 1;
	XAUTH  = 2;
	EAP    = 3;
}

message Proposals {
	repeated CryptoAlgorithm crypto_alg = 1;
	repeated IntegAlgorithm integ_alg = 2;
	repeated PseudoRandomFunction prf = 3;
	repeated DiffieHellmanGroups dhgroups = 4;
}

message Vips {
	repeated string vip = 1;
}

message Pools {
	repeated string pool = 1;
}

message Certs {
	repeated string cert = 1;
}

message PubKeys {
	repeated string pubkey = 1;
}

message Groups {
	repeated string group = 1;
}

message CertPolicy {
	repeated string cert_policy = 1;
}

message CaCerts {
	repeated string cacert = 1;
}

message LocalAuth {
	AuthType auth    = 1;
	string id        = 2;
	string eap_id    = 3;
	string aaa_id    = 4;
	string xauth_id  = 5;
	Certs certs      = 6;
	PubKeys pubkeys  = 7;
}

message RemoteAuth {
	AuthType auth          = 1;
	string id              = 2;
	string eap_id          = 3;
	Groups groups          = 4;
	CertPolicy cert_policy = 5;
	Certs certs            = 6;
	CaCerts ca_certs       = 7;
	PubKeys pubkeys        = 8;
}

message TrafficSelectors {
	message TrafficSelector {
		string cidr  = 1;
		string proto = 2;
		string port  = 3;
	}
	repeated TrafficSelector ts = 1;
}

/* IP addresses or hostanmes */
message Addrs {
	string addr = 1;
}

/* Child SA */
message Child {
	string name                = 1; /* Child SA name */
	Proposals ag_proposals     = 2;
	Proposals esp_proposals    = 3;
	TrafficSelectors local_ts  = 4;
	TrafficSelectors remote_ts = 5;
	uint32 rekey_time          = 6;
	uint32 life_time           = 7;
	uint32 rand_time           = 8;
	string updown              = 9;
	uint32 inactivity          = 10;
	uint32 mark_in             = 11;
	string mark_in_sa          = 12;
	uint32 mark_out            = 13;
	uint32 set_mark_in         = 14;
	uint32 set_mark_out        = 15;
	string hw_offload          = 16;
}

/* IKE connection */
message Connection {
	string name                 = 1; /* connection name */
	string version              = 2;
	repeated Addrs local_addrs  = 3;
	repeated Addrs remote_addrs = 4;
	uint32 local_port           = 5;
	uint32 remote_port          = 6;
	Proposals proposals         = 7;
	Vips vips                   = 8;
	uint64 dscp                 = 9; /* We use only the lower 6 bytes */
	string encap                = 10;
	string mobike               = 11;
	uint32 dpd_delay            = 12;
	uint32 dpd_timeout          = 13;
	uint32 reauth_time          = 14;
	uint32 rekey_time           = 15;
	Pools pools                 = 16;
	LocalAuth local_auth        = 17;
	RemoteAuth remote_auth      = 18;
	repeated Child children     = 19;
}

/* Tunnel Interfaces */
message TunnelInterfaces {
	message Tunnel {
		string name = 1; /* tunnel name */

		bool esn = 2; /* extended sequence number */
		bool anti_replay = 3; /* anti replay option */

		string local_ip = 4;
		string remote_ip = 5;
		uint32 local_spi = 6;
		uint32 remote_spi = 7;

		CryptoAlgorithm crypto_alg = 8;
		string local_crypto_key = 9;
		string remote_crypto_key = 10;

		IntegAlgorithm integ_alg = 11;
		string local_integ_key = 12;
		string remote_integ_key = 13;

		DiffieHellmanGroups dhgroups = 14;

		/* Tunnel or transport mode */
		IPsecMode mode = 15;

		/* Extra fields related to interface */
		bool enabled = 100;
		repeated string ip_addresses = 101;
		uint32 vrf = 102;
	}
	repeated Tunnel tunnels = 1;
}

/* Security Policy Database (SPD) */
message SecurityPolicyDatabases {
	message Spd {
		string name = 1;

		/* Interface */
		message Interface {
			string name = 1;    /* interface name */
		}
		repeated Interface interfaces = 2;    /* list of interfaces belonging to this SPD */

		/* Policy Entry */
		message PolicyEntry {
			string sa = 1;     /* security association name */

			int32 priority = 2;
			bool is_outbound = 3;

			string remote_addr_start = 4;
			string remote_addr_stop = 5;
			string local_addr_start = 6;
			string local_addr_stop = 7;

			uint32 protocol = 8;

			uint32 remote_port_start = 9;
			uint32 remote_port_stop = 10;
			uint32 local_port_start = 11;
			uint32 local_port_stop = 12;

			/* Policy action */
			enum Action {
				BYPASS = 0;
				DISCARD = 1;
				//RESOLVE = 2; // unused in VPP
				PROTECT = 3;
			}
			Action action = 13; /* policy action */
		}
		repeated PolicyEntry policy_entries = 3;   /* list of policy entries belonging to this SPD */
	}
	repeated Spd spds = 1;  /* list of all SPDs */
}

/* Security Association (SA) */
message SecurityAssociations {
	message Sa {
		string name = 1;    /* security association name */
		uint32 spi = 2;     /* security parameter index */

		/* IPsec protocol */
		enum IPsecProtocol {
			AH = 0;
			ESP = 1;
		}
		IPsecProtocol protocol = 3;

		CryptoAlgorithm crypto_alg = 4;
		string crypto_key = 5;

		IntegAlgorithm integ_alg = 6;
		string integ_key = 7;

		DiffieHellmanGroups dhgroups = 8;

		bool use_esn = 9;          /* Use extended sequence number */
		bool use_anti_replay = 10;  /* Use anti replay */

		string tunnel_src_addr = 11;
		string tunnel_dst_addr = 12;

		bool enable_udp_encap = 13; /* Enable UDP encapsulation for NAT traversal */
	}
	repeated Sa sas = 1;
}

message ResyncRequest {
	repeated TunnelInterfaces.Tunnel tunnels = 1;
	repeated SecurityPolicyDatabases.Spd spds = 2;
	repeated SecurityAssociations.Sa sas = 3;
}

message Uuid {
	string value = 1;
}

message IPsecVersionReq {
	/* Intentionally empty */
}

message IPsecVersionResp {
	string daemon  = 1;
	string version = 2;
	string sysname = 3;
	string release = 4;
	string machine = 5;
}

message IPsecStatsReq {
	/* Intentionally empty */
}

message IPsecStatsResp {
	string status = 1; /* Generic status string for now */
}

message IPsecInitiateReq {
	string child    = 1;
	string ike      = 2;
	string timeout  = 3;
	string loglevel = 4;
}

message IPsecInitiateResp {
	/* Intentionally empty */
}

message IPsecTerminateReq {
	string child    = 1;
	string ike      = 2;
	string child_id = 3;
	string ike_id   = 4;
	string force    = 5;
	string timeout  = 6;
	string loglevel = 7;
}

message IPsecTerminateResp {
	string success    = 1;
	uint32 matches    = 2;
	uint32 terminated = 3;
}

message IPsecRekeyReq {
	string child    = 1;
	string ike      = 2;
	string child_id = 3;
	string ike_id   = 4;
	string reauth   = 5;
}

message IPsecRekeyResp {
	string success = 1;
	uint32 matches = 2;
}

message IPsecListSasReq {
	string noblock  = 1;
	string ike      = 2;
	string ike_id   = 3;
	string child    = 4;
	string child_id = 5;
}

message IPsecListSasResp {
	repeated Connection connection = 1;
}

message IPsecListConnsReq {
	string ike = 1;
}

message IPsecListConnsResp {
	repeated Connection connection = 1;
}

message IPsecListCertsReq {
	string type    = 1;
	string flag    = 2;
	string subject = 3;
}

message IPsecListCertsResp {
	repeated Certs cert = 1;
}

message IPsecLoadConnReq {
	Connection connection = 1;
}

message IPsecLoadConnResp {
	string success = 1;
}

message IPsecUnloadConnReq {
	string name = 1;
}

message IPsecUnloadConnResp {
	string success = 1;
}
