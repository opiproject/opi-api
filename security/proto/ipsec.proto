/*
 * Copyright (C) 2021 Intel Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Major pieces taken from:
 * https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto
 */
syntax = "proto3";
package opi.security.v1;
option go_package = "github.com/opiproject/opi-api/security/proto";

service IPsec {
	rpc IPsecCreate (IPsecCreateRequest) returns (IPsecCreateResponse) {}
	rpc IPsecDelete (IPsecDeleteRequest) returns (IPsecDeleteResponse) {}
	rpc IPsecUpdate (IPsecUpdateRequest) returns (IPsecUpdateResponse) {}
	rpc IPsecList   (IPsecListRequest)   returns (IPsecListResponse)   {}
	rpc IPsecGet    (IPsecGetRequest)    returns (IPsecGetResponse)    {}
}

/* Cryptographic algorithm for encryption */
enum CryptoAlgorithm {
	NONE_CRYPTO = 0;
	AES_CBC_128 = 1;
	AES_CBC_192 = 2;
	AES_CBC_256 = 3;
	AES_GCM_128 = 4;
	AES_GCM_256 = 5;
	AES_GMAC_128 = 6;
	AES_GMAC_256 = 7;
}
/* Cryptographic algorithm for authentication */
enum IntegAlgorithm {
	NONE_INTEG = 0;
	MD5_96 = 1;
	SHA1_96 = 2;
	SHA_256_96 = 3;
	SHA_256_128 = 4;
	SHA_384_192 = 5;
	SHA_512_256 = 6;
}
/* Tunnel mode */
enum IPsecMode {
	TUNNEL_MODE = 0;
	TRANSPORT_MODE = 1;
}

/* Tunnel Interfaces */
message TunnelInterfaces {
	message Tunnel {
		string name = 1; /* tunnel name */

		bool esn = 2; /* extended sequence number */
		bool anti_replay = 3; /* anti replay option */

		string local_ip = 4;
		string remote_ip = 5;
		uint32 local_spi = 6;
		uint32 remote_spi = 7;

		CryptoAlgorithm crypto_alg = 8;
		string local_crypto_key = 9;
		string remote_crypto_key = 10;

		IntegAlgorithm integ_alg = 11;
		string local_integ_key = 12;
		string remote_integ_key = 13;

		/* Tunnel or transport mode */
		IPsecMode mode = 14;

		/* Extra fields related to interface */
		bool enabled = 100;
		repeated string ip_addresses = 101;
		uint32 vrf = 102;
	}
	repeated Tunnel tunnels = 1;
}

/* Security Policy Database (SPD) */
message SecurityPolicyDatabases {
	message Spd {
		string name = 1;

		/* Interface */
		message Interface {
			string name = 1;    /* interface name */
		}
		repeated Interface interfaces = 2;    /* list of interfaces belonging to this SPD */

		/* Policy Entry */
		message PolicyEntry {
			string sa = 1;     /* security association name */

			int32 priority = 2;
			bool is_outbound = 3;

			string remote_addr_start = 4;
			string remote_addr_stop = 5;
			string local_addr_start = 6;
			string local_addr_stop = 7;

			uint32 protocol = 8;

			uint32 remote_port_start = 9;
			uint32 remote_port_stop = 10;
			uint32 local_port_start = 11;
			uint32 local_port_stop = 12;

			/* Policy action */
			enum Action {
				BYPASS = 0;
				DISCARD = 1;
				//RESOLVE = 2; // unused in VPP
				PROTECT = 3;
			}
			Action action = 13; /* policy action */
		}
		repeated PolicyEntry policy_entries = 3;   /* list of policy entries belonging to this SPD */
	}
	repeated Spd spds = 1;  /* list of all SPDs */
}

/* Security Association (SA) */
message SecurityAssociations {
	message Sa {
		string name = 1;    /* security association name */
		uint32 spi = 2;     /* security parameter index */

		/* IPsec protocol */
		enum IPsecProtocol {
			AH = 0;
			ESP = 1;
		}
		IPsecProtocol protocol = 3;

		CryptoAlgorithm crypto_alg = 4;
		string crypto_key = 5;

		IntegAlgorithm integ_alg = 6;
		string integ_key = 7;

		bool use_esn = 8;          /* Use extended sequence number */
		bool use_anti_replay = 9;  /* Use anti replay */

		string tunnel_src_addr = 10;
		string tunnel_dst_addr = 11;

		bool enable_udp_encap = 12; /* Enable UDP encapsulation for NAT traversal */
	}
	repeated Sa sas = 1;
}

message ResyncRequest {
	repeated TunnelInterfaces.Tunnel tunnels = 1;
	repeated SecurityPolicyDatabases.Spd spds = 2;
	repeated SecurityAssociations.Sa sas = 3;
}

message IPsecData {
	int64 id = 1;
	TunnelInterfaces tunnel = 2;
	SecurityPolicyDatabases policy = 3;
	SecurityAssociations sa = 4;
}

message IPsecCreateRequest {
	IPsecData ipsec = 1;
}

message IPsecCreateResponse {
	// Intentionally empty for now
}

message IPsecDeleteRequest {
	int64 id = 1;
}

message IPsecDeleteResponse {
	// Intentionally empty for now
}

message IPsecUpdateRequest {
	IPsecData ipsec = 1;
}

message IPsecUpdateResponse {
	// Intentionally empty for now
}

message IPsecListRequest {
	int64 id = 1;
}

message IPsecListResponse {
	repeated IPsecData ipsec = 1;
}

message IPsecGetRequest {
	int64 id = 1;
}

message IPsecGetResponse {
	IPsecData ipsec = 1;
}
