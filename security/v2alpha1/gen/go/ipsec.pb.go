//
// Copyright (C) 2021 Intel Corporation
// Copyright (c) 2023 Dell Inc, or its subsidiaries.
// SPDX-License-Identifier: Apache-2.0
//
// Major pieces taken from:
// https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto
//
// Service functions for IKE.
//
// The configuration model is derived from RFC 9061.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ipsec.proto

package _go

import (
	_go "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm for encryption.
type EncAlgorithm int32

const (
	EncAlgorithm_ENC_ALGORITHM_UNSPECIFIED      EncAlgorithm = 0
	EncAlgorithm_ENC_ALGORITHM_AES128CBC        EncAlgorithm = 1 // AES-CBC with a 128 bit key
	EncAlgorithm_ENC_ALGORITHM_AES192CBC        EncAlgorithm = 2 // AES-CBC with a 192 bit key
	EncAlgorithm_ENC_ALGORITHM_AES256CBC        EncAlgorithm = 3 // AES-CBC with a 256 bit key
	EncAlgorithm_ENC_ALGORITHM_AES128GCM128     EncAlgorithm = 4 // AES-GCM with a 128 bit key and a 128 byte tag
	EncAlgorithm_ENC_ALGORITHM_AES192GCM128     EncAlgorithm = 5 // AES-GCM with a 192 bit key and a 128 byte tag
	EncAlgorithm_ENC_ALGORITHM_AES256GCM128     EncAlgorithm = 6 // AES-GCM with a 256 bit key and a 128 byte tag
	EncAlgorithm_ENC_ALGORITHM_CHACHA20POLY1305 EncAlgorithm = 7
)

// Enum value maps for EncAlgorithm.
var (
	EncAlgorithm_name = map[int32]string{
		0: "ENC_ALGORITHM_UNSPECIFIED",
		1: "ENC_ALGORITHM_AES128CBC",
		2: "ENC_ALGORITHM_AES192CBC",
		3: "ENC_ALGORITHM_AES256CBC",
		4: "ENC_ALGORITHM_AES128GCM128",
		5: "ENC_ALGORITHM_AES192GCM128",
		6: "ENC_ALGORITHM_AES256GCM128",
		7: "ENC_ALGORITHM_CHACHA20POLY1305",
	}
	EncAlgorithm_value = map[string]int32{
		"ENC_ALGORITHM_UNSPECIFIED":      0,
		"ENC_ALGORITHM_AES128CBC":        1,
		"ENC_ALGORITHM_AES192CBC":        2,
		"ENC_ALGORITHM_AES256CBC":        3,
		"ENC_ALGORITHM_AES128GCM128":     4,
		"ENC_ALGORITHM_AES192GCM128":     5,
		"ENC_ALGORITHM_AES256GCM128":     6,
		"ENC_ALGORITHM_CHACHA20POLY1305": 7,
	}
)

func (x EncAlgorithm) Enum() *EncAlgorithm {
	p := new(EncAlgorithm)
	*p = x
	return p
}

func (x EncAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[0].Descriptor()
}

func (EncAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[0]
}

func (x EncAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncAlgorithm.Descriptor instead.
func (EncAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

// Cryptographic algorithm for authentication.
type IntegAlgorithm int32

const (
	IntegAlgorithm_INTEG_ALGORITHM_UNSPECIFIED IntegAlgorithm = 0
	IntegAlgorithm_INTEG_ALGORITHM_SHA1_96     IntegAlgorithm = 1 // SHA-1 with a 96 bit truncated hash output length
	IntegAlgorithm_INTEG_ALGORITHM_SHA256_128  IntegAlgorithm = 2 // SHA-256 with a 128 bit truncated hash output length
	IntegAlgorithm_INTEG_ALGORITHM_SHA384_192  IntegAlgorithm = 3 // SHA-384 with a 192 bit truncated hash output length
	IntegAlgorithm_INTEG_ALGORITHM_SHA512_512  IntegAlgorithm = 4 // SHA-512 with a 256 bit truncated hash output length
	IntegAlgorithm_INTEG_ALGORITHM_AES128GMAC  IntegAlgorithm = 5 // AES-GMAC with a 128 bit key
	IntegAlgorithm_INTEG_ALGORITHM_AES256GMAC  IntegAlgorithm = 6 // AES-GMAC with a 256 bit key
)

// Enum value maps for IntegAlgorithm.
var (
	IntegAlgorithm_name = map[int32]string{
		0: "INTEG_ALGORITHM_UNSPECIFIED",
		1: "INTEG_ALGORITHM_SHA1_96",
		2: "INTEG_ALGORITHM_SHA256_128",
		3: "INTEG_ALGORITHM_SHA384_192",
		4: "INTEG_ALGORITHM_SHA512_512",
		5: "INTEG_ALGORITHM_AES128GMAC",
		6: "INTEG_ALGORITHM_AES256GMAC",
	}
	IntegAlgorithm_value = map[string]int32{
		"INTEG_ALGORITHM_UNSPECIFIED": 0,
		"INTEG_ALGORITHM_SHA1_96":     1,
		"INTEG_ALGORITHM_SHA256_128":  2,
		"INTEG_ALGORITHM_SHA384_192":  3,
		"INTEG_ALGORITHM_SHA512_512":  4,
		"INTEG_ALGORITHM_AES128GMAC":  5,
		"INTEG_ALGORITHM_AES256GMAC":  6,
	}
)

func (x IntegAlgorithm) Enum() *IntegAlgorithm {
	p := new(IntegAlgorithm)
	*p = x
	return p
}

func (x IntegAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[1].Descriptor()
}

func (IntegAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[1]
}

func (x IntegAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlgorithm.Descriptor instead.
func (IntegAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

// Diffie Hellman Groups
type DHGroups int32

const (
	DHGroups_DH_GROUPS_UNSPECIFIED  DHGroups = 0
	DHGroups_DH_GROUPS_MODP768      DHGroups = 1
	DHGroups_DH_GROUPS_MODP1024     DHGroups = 2
	DHGroups_DH_GROUPS_MODP1536     DHGroups = 3
	DHGroups_DH_GROUPS_MODP2048     DHGroups = 4
	DHGroups_DH_GROUPS_MODP3072     DHGroups = 5
	DHGroups_DH_GROUPS_MODP4096     DHGroups = 6
	DHGroups_DH_GROUPS_MODP6144     DHGroups = 7
	DHGroups_DH_GROUPS_MODP8192     DHGroups = 8
	DHGroups_DH_GROUPS_MODP1024S160 DHGroups = 9
	DHGroups_DH_GROUPS_MODP2048S224 DHGroups = 10
	DHGroups_DH_GROUPS_MODP2048S256 DHGroups = 11
	DHGroups_DH_GROUPS_CURVE25519   DHGroups = 12
)

// Enum value maps for DHGroups.
var (
	DHGroups_name = map[int32]string{
		0:  "DH_GROUPS_UNSPECIFIED",
		1:  "DH_GROUPS_MODP768",
		2:  "DH_GROUPS_MODP1024",
		3:  "DH_GROUPS_MODP1536",
		4:  "DH_GROUPS_MODP2048",
		5:  "DH_GROUPS_MODP3072",
		6:  "DH_GROUPS_MODP4096",
		7:  "DH_GROUPS_MODP6144",
		8:  "DH_GROUPS_MODP8192",
		9:  "DH_GROUPS_MODP1024S160",
		10: "DH_GROUPS_MODP2048S224",
		11: "DH_GROUPS_MODP2048S256",
		12: "DH_GROUPS_CURVE25519",
	}
	DHGroups_value = map[string]int32{
		"DH_GROUPS_UNSPECIFIED":  0,
		"DH_GROUPS_MODP768":      1,
		"DH_GROUPS_MODP1024":     2,
		"DH_GROUPS_MODP1536":     3,
		"DH_GROUPS_MODP2048":     4,
		"DH_GROUPS_MODP3072":     5,
		"DH_GROUPS_MODP4096":     6,
		"DH_GROUPS_MODP6144":     7,
		"DH_GROUPS_MODP8192":     8,
		"DH_GROUPS_MODP1024S160": 9,
		"DH_GROUPS_MODP2048S224": 10,
		"DH_GROUPS_MODP2048S256": 11,
		"DH_GROUPS_CURVE25519":   12,
	}
)

func (x DHGroups) Enum() *DHGroups {
	p := new(DHGroups)
	*p = x
	return p
}

func (x DHGroups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHGroups) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[2].Descriptor()
}

func (DHGroups) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[2]
}

func (x DHGroups) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHGroups.Descriptor instead.
func (DHGroups) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

// Pesudo Random Function  (PRF)
type PRF int32

const (
	PRF_PRF_UNSPECIFIED PRF = 0
	PRF_PRF_SHA1        PRF = 1
	PRF_PRF_AESXCBC     PRF = 2
	PRF_PRF_AESCMAC     PRF = 3
	PRF_PRF_SHA256      PRF = 4
	PRF_PRF_SHA384      PRF = 5
	PRF_PRF_SHA512      PRF = 6
)

// Enum value maps for PRF.
var (
	PRF_name = map[int32]string{
		0: "PRF_UNSPECIFIED",
		1: "PRF_SHA1",
		2: "PRF_AESXCBC",
		3: "PRF_AESCMAC",
		4: "PRF_SHA256",
		5: "PRF_SHA384",
		6: "PRF_SHA512",
	}
	PRF_value = map[string]int32{
		"PRF_UNSPECIFIED": 0,
		"PRF_SHA1":        1,
		"PRF_AESXCBC":     2,
		"PRF_AESCMAC":     3,
		"PRF_SHA256":      4,
		"PRF_SHA384":      5,
		"PRF_SHA512":      6,
	}
)

func (x PRF) Enum() *PRF {
	p := new(PRF)
	*p = x
	return p
}

func (x PRF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PRF) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[3].Descriptor()
}

func (PRF) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[3]
}

func (x PRF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PRF.Descriptor instead.
func (PRF) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

// Tunnel mode
type IpsecMode int32

const (
	IpsecMode_IPSEC_MODE_UNSPECIFIED    IpsecMode = 0
	IpsecMode_IPSEC_MODE_TUNNEL_MODE    IpsecMode = 1
	IpsecMode_IPSEC_MODE_TRANSPORT_MODE IpsecMode = 2
)

// Enum value maps for IpsecMode.
var (
	IpsecMode_name = map[int32]string{
		0: "IPSEC_MODE_UNSPECIFIED",
		1: "IPSEC_MODE_TUNNEL_MODE",
		2: "IPSEC_MODE_TRANSPORT_MODE",
	}
	IpsecMode_value = map[string]int32{
		"IPSEC_MODE_UNSPECIFIED":    0,
		"IPSEC_MODE_TUNNEL_MODE":    1,
		"IPSEC_MODE_TRANSPORT_MODE": 2,
	}
)

func (x IpsecMode) Enum() *IpsecMode {
	p := new(IpsecMode)
	*p = x
	return p
}

func (x IpsecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[4].Descriptor()
}

func (IpsecMode) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[4]
}

func (x IpsecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecMode.Descriptor instead.
func (IpsecMode) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

// Authentication Type
type AuthType int32

const (
	AuthType_AUTH_TYPE_UNSPECIFIED AuthType = 0
	AuthType_AUTH_TYPE_PUBKEY      AuthType = 1
	AuthType_AUTH_TYPE_PSK         AuthType = 2
	AuthType_AUTH_TYPE_XAUTH       AuthType = 3
	AuthType_AUTH_TYPE_EAP         AuthType = 4
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "AUTH_TYPE_UNSPECIFIED",
		1: "AUTH_TYPE_PUBKEY",
		2: "AUTH_TYPE_PSK",
		3: "AUTH_TYPE_XAUTH",
		4: "AUTH_TYPE_EAP",
	}
	AuthType_value = map[string]int32{
		"AUTH_TYPE_UNSPECIFIED": 0,
		"AUTH_TYPE_PUBKEY":      1,
		"AUTH_TYPE_PSK":         2,
		"AUTH_TYPE_XAUTH":       3,
		"AUTH_TYPE_EAP":         4,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[5].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[5]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

// IKE connection startup behavior
type AutoStartupMode int32

const (
	AutoStartupMode_AUTO_STARTUP_MODE_UNSPECIFIED AutoStartupMode = 0
	// IKE/IPsec connection configuration is only loaded into the IKE
	// implementation, but IKE/IPsec SA is not started.
	AutoStartupMode_AUTO_STARTUP_MODE_ADD AutoStartupMode = 1
	// IKE/IPsec connection configuration is loaded into the IKE implementation.
	// The IPsec policies are configured but the IKE SAs are not established
	// immediately. The IKE implementation will negotiate the IPsec SAs when they
	// are required.
	AutoStartupMode_AUTO_STARTUP_MODE_ON_DEMAND AutoStartupMode = 2
	// IKE/IPsec connection configuration is loaded and the IKEv2-based IPsec SAs
	// are established immediately without waiting for any packet.
	AutoStartupMode_AUTO_STARTUP_MODE_START AutoStartupMode = 3
)

// Enum value maps for AutoStartupMode.
var (
	AutoStartupMode_name = map[int32]string{
		0: "AUTO_STARTUP_MODE_UNSPECIFIED",
		1: "AUTO_STARTUP_MODE_ADD",
		2: "AUTO_STARTUP_MODE_ON_DEMAND",
		3: "AUTO_STARTUP_MODE_START",
	}
	AutoStartupMode_value = map[string]int32{
		"AUTO_STARTUP_MODE_UNSPECIFIED": 0,
		"AUTO_STARTUP_MODE_ADD":         1,
		"AUTO_STARTUP_MODE_ON_DEMAND":   2,
		"AUTO_STARTUP_MODE_START":       3,
	}
)

func (x AutoStartupMode) Enum() *AutoStartupMode {
	p := new(AutoStartupMode)
	*p = x
	return p
}

func (x AutoStartupMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoStartupMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[6].Descriptor()
}

func (AutoStartupMode) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[6]
}

func (x AutoStartupMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoStartupMode.Descriptor instead.
func (AutoStartupMode) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

// IKE Version
type IkeVersion int32

const (
	IkeVersion_IKE_VERSION_UNSPECIFIED IkeVersion = 0
	IkeVersion_IKE_VERSION_IKEV2       IkeVersion = 2
)

// Enum value maps for IkeVersion.
var (
	IkeVersion_name = map[int32]string{
		0: "IKE_VERSION_UNSPECIFIED",
		2: "IKE_VERSION_IKEV2",
	}
	IkeVersion_value = map[string]int32{
		"IKE_VERSION_UNSPECIFIED": 0,
		"IKE_VERSION_IKEV2":       2,
	}
)

func (x IkeVersion) Enum() *IkeVersion {
	p := new(IkeVersion)
	*p = x
	return p
}

func (x IkeVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IkeVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[7].Descriptor()
}

func (IkeVersion) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[7]
}

func (x IkeVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IkeVersion.Descriptor instead.
func (IkeVersion) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

// ESP Encapsulation method for NAT traversal
type EspEncap int32

const (
	EspEncap_ESP_ENCAP_UNSPECIFIED EspEncap = 0
	EspEncap_ESP_ENCAP_ESP_IN_UDP  EspEncap = 1
)

// Enum value maps for EspEncap.
var (
	EspEncap_name = map[int32]string{
		0: "ESP_ENCAP_UNSPECIFIED",
		1: "ESP_ENCAP_ESP_IN_UDP",
	}
	EspEncap_value = map[string]int32{
		"ESP_ENCAP_UNSPECIFIED": 0,
		"ESP_ENCAP_ESP_IN_UDP":  1,
	}
)

func (x EspEncap) Enum() *EspEncap {
	p := new(EspEncap)
	*p = x
	return p
}

func (x EspEncap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EspEncap) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[8].Descriptor()
}

func (EspEncap) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[8]
}

func (x EspEncap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EspEncap.Descriptor instead.
func (EspEncap) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

// IPsec Security Policy Actions
type IpsecSpdAction int32

const (
	IpsecSpdAction_IPSEC_SPD_ACTION_UNSPECIFIED IpsecSpdAction = 0
	// Protect the traffic with IPsec.
	IpsecSpdAction_IPSEC_SPD_ACTION_PROTECT IpsecSpdAction = 1
	// Bypass the traffic. The packet is forwarded without IPsec protection.
	IpsecSpdAction_IPSEC_SPD_ACTION_BYPASS IpsecSpdAction = 2
	// Discard the traffic. The IP packet is discarded.
	IpsecSpdAction_IPSEC_SPD_ACTION_DISCARD IpsecSpdAction = 3
)

// Enum value maps for IpsecSpdAction.
var (
	IpsecSpdAction_name = map[int32]string{
		0: "IPSEC_SPD_ACTION_UNSPECIFIED",
		1: "IPSEC_SPD_ACTION_PROTECT",
		2: "IPSEC_SPD_ACTION_BYPASS",
		3: "IPSEC_SPD_ACTION_DISCARD",
	}
	IpsecSpdAction_value = map[string]int32{
		"IPSEC_SPD_ACTION_UNSPECIFIED": 0,
		"IPSEC_SPD_ACTION_PROTECT":     1,
		"IPSEC_SPD_ACTION_BYPASS":      2,
		"IPSEC_SPD_ACTION_DISCARD":     3,
	}
)

func (x IpsecSpdAction) Enum() *IpsecSpdAction {
	p := new(IpsecSpdAction)
	*p = x
	return p
}

func (x IpsecSpdAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecSpdAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[9].Descriptor()
}

func (IpsecSpdAction) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[9]
}

func (x IpsecSpdAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecSpdAction.Descriptor instead.
func (IpsecSpdAction) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

// IPsec security protocols
type IpsecProtocol int32

const (
	IpsecProtocol_IPSEC_PROTOCOL_UNSPECIFIED IpsecProtocol = 0
	IpsecProtocol_IPSEC_PROTOCOL_ESP         IpsecProtocol = 1
)

// Enum value maps for IpsecProtocol.
var (
	IpsecProtocol_name = map[int32]string{
		0: "IPSEC_PROTOCOL_UNSPECIFIED",
		1: "IPSEC_PROTOCOL_ESP",
	}
	IpsecProtocol_value = map[string]int32{
		"IPSEC_PROTOCOL_UNSPECIFIED": 0,
		"IPSEC_PROTOCOL_ESP":         1,
	}
)

func (x IpsecProtocol) Enum() *IpsecProtocol {
	p := new(IpsecProtocol)
	*p = x
	return p
}

func (x IpsecProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[10].Descriptor()
}

func (IpsecProtocol) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[10]
}

func (x IpsecProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecProtocol.Descriptor instead.
func (IpsecProtocol) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10}
}

type LifetimeAction int32

const (
	LifetimeAction_LIFETIME_ACTION_UNSPECIFIED LifetimeAction = 0
	// Terminates the IPsec SA and allows the packets through.
	LifetimeAction_LIFETIME_ACTION_TERMINATE_CLEAR LifetimeAction = 1
	// Terminates the IPsec SA and drops the packets.
	LifetimeAction_LIFETIME_ACTION_TERMINATE_HOLD LifetimeAction = 2
	// Replaces the IPsec SA with a new one. Rekey.
	LifetimeAction_LIFETIME_ACTION_REPLACE LifetimeAction = 3
)

// Enum value maps for LifetimeAction.
var (
	LifetimeAction_name = map[int32]string{
		0: "LIFETIME_ACTION_UNSPECIFIED",
		1: "LIFETIME_ACTION_TERMINATE_CLEAR",
		2: "LIFETIME_ACTION_TERMINATE_HOLD",
		3: "LIFETIME_ACTION_REPLACE",
	}
	LifetimeAction_value = map[string]int32{
		"LIFETIME_ACTION_UNSPECIFIED":     0,
		"LIFETIME_ACTION_TERMINATE_CLEAR": 1,
		"LIFETIME_ACTION_TERMINATE_HOLD":  2,
		"LIFETIME_ACTION_REPLACE":         3,
	}
)

func (x LifetimeAction) Enum() *LifetimeAction {
	p := new(LifetimeAction)
	*p = x
	return p
}

func (x LifetimeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifetimeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[11].Descriptor()
}

func (LifetimeAction) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[11]
}

func (x LifetimeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifetimeAction.Descriptor instead.
func (LifetimeAction) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{11}
}

// Don't Fragment (DF) bit handling when encapsulating tunnel mode IPsec
// traffic.
type DfBitAction int32

const (
	DfBitAction_DF_BIT_ACTION_UNSPECIFIED DfBitAction = 0
	// Disable the Don't Fragment (DF) bit in the outer header.
	DfBitAction_DF_BIT_ACTION_CLEAR DfBitAction = 1
	// Enable the DF bit in the outer header
	DfBitAction_DF_BIT_ACTION_SET DfBitAction = 2
	// Copy the DF bit to the outer header
	DfBitAction_DF_BIT_ACTION_COPY DfBitAction = 3
)

// Enum value maps for DfBitAction.
var (
	DfBitAction_name = map[int32]string{
		0: "DF_BIT_ACTION_UNSPECIFIED",
		1: "DF_BIT_ACTION_CLEAR",
		2: "DF_BIT_ACTION_SET",
		3: "DF_BIT_ACTION_COPY",
	}
	DfBitAction_value = map[string]int32{
		"DF_BIT_ACTION_UNSPECIFIED": 0,
		"DF_BIT_ACTION_CLEAR":       1,
		"DF_BIT_ACTION_SET":         2,
		"DF_BIT_ACTION_COPY":        3,
	}
)

func (x DfBitAction) Enum() *DfBitAction {
	p := new(DfBitAction)
	*p = x
	return p
}

func (x DfBitAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DfBitAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[12].Descriptor()
}

func (DfBitAction) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[12]
}

func (x DfBitAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DfBitAction.Descriptor instead.
func (DfBitAction) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12}
}

// Digital Signature Algorithm
// Encoding follows the IANA encoding for IKEv2 Authentication Method
// https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-12
type DSAlgorithm int32

const (
	DSAlgorithm_DS_ALGORITHM_UNSPECIFIED       DSAlgorithm = 0
	DSAlgorithm_DS_ALGORITHM_RSA               DSAlgorithm = 1
	DSAlgorithm_DS_ALGORITHM_ECDSA_SHA256_P256 DSAlgorithm = 9
	DSAlgorithm_DS_ALGORITHM_ECDSA_SHA384_P384 DSAlgorithm = 10
	DSAlgorithm_DS_ALGORITHM_ECDSA_SHA512_P512 DSAlgorithm = 11
)

// Enum value maps for DSAlgorithm.
var (
	DSAlgorithm_name = map[int32]string{
		0:  "DS_ALGORITHM_UNSPECIFIED",
		1:  "DS_ALGORITHM_RSA",
		9:  "DS_ALGORITHM_ECDSA_SHA256_P256",
		10: "DS_ALGORITHM_ECDSA_SHA384_P384",
		11: "DS_ALGORITHM_ECDSA_SHA512_P512",
	}
	DSAlgorithm_value = map[string]int32{
		"DS_ALGORITHM_UNSPECIFIED":       0,
		"DS_ALGORITHM_RSA":               1,
		"DS_ALGORITHM_ECDSA_SHA256_P256": 9,
		"DS_ALGORITHM_ECDSA_SHA384_P384": 10,
		"DS_ALGORITHM_ECDSA_SHA512_P512": 11,
	}
)

func (x DSAlgorithm) Enum() *DSAlgorithm {
	p := new(DSAlgorithm)
	*p = x
	return p
}

func (x DSAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DSAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[13].Descriptor()
}

func (DSAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[13]
}

func (x DSAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DSAlgorithm.Descriptor instead.
func (DSAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{13}
}

// IKEv2 Fragmentation, as per RFC 7383. If IKEv2 fragmentation is enabled, it
// is possible to specify the MTU.
type IkeFragmentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable/Disable IKEv2 fragmentation.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// When fragmentation is enabled, the MTU that IKEv2 can use for IKEv2
	// fragmentation.
	Mtu *uint32 `protobuf:"varint,2,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *IkeFragmentation) Reset() {
	*x = IkeFragmentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkeFragmentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkeFragmentation) ProtoMessage() {}

func (x *IkeFragmentation) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkeFragmentation.ProtoReflect.Descriptor instead.
func (*IkeFragmentation) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *IkeFragmentation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IkeFragmentation) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

// IKE SA soft lifetime. Two lifetime values can be configured, either rekey
// time of the IKE SA or reauth time of the IKE SA. When the rekey lifetime
// expires, a rekey of the IKE SA starts. When reauth lifetime expires, an IKE
// SA re-authentication starts.
type IkeSaLifetimeSoft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in seconds between each IKE SA rekey. The value of 0 means infinite.
	RekeyTime uint32 `protobuf:"varint,1,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	// Time in seconds between each IKE SA re-authentication. The value of 0 means
	// infinite.
	ReauthTime uint32 `protobuf:"varint,2,opt,name=reauth_time,json=reauthTime,proto3" json:"reauth_time,omitempty"`
}

func (x *IkeSaLifetimeSoft) Reset() {
	*x = IkeSaLifetimeSoft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkeSaLifetimeSoft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkeSaLifetimeSoft) ProtoMessage() {}

func (x *IkeSaLifetimeSoft) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkeSaLifetimeSoft.ProtoReflect.Descriptor instead.
func (*IkeSaLifetimeSoft) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *IkeSaLifetimeSoft) GetRekeyTime() uint32 {
	if x != nil {
		return x.RekeyTime
	}
	return 0
}

func (x *IkeSaLifetimeSoft) GetReauthTime() uint32 {
	if x != nil {
		return x.ReauthTime
	}
	return 0
}

// IKE SA hard lifetime. When this time is reached, the IKE SA is removed.
type IkeSaLifetimeHard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in seconds before the IKE SA is removed. The value 0 means infinite.
	OverTime uint32 `protobuf:"varint,1,opt,name=over_time,json=overTime,proto3" json:"over_time,omitempty"`
}

func (x *IkeSaLifetimeHard) Reset() {
	*x = IkeSaLifetimeHard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkeSaLifetimeHard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkeSaLifetimeHard) ProtoMessage() {}

func (x *IkeSaLifetimeHard) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkeSaLifetimeHard.ProtoReflect.Descriptor instead.
func (*IkeSaLifetimeHard) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *IkeSaLifetimeHard) GetOverTime() uint32 {
	if x != nil {
		return x.OverTime
	}
	return 0
}

type CaCerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cacert []string `protobuf:"bytes,1,rep,name=cacert,proto3" json:"cacert,omitempty"`
}

func (x *CaCerts) Reset() {
	*x = CaCerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaCerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaCerts) ProtoMessage() {}

func (x *CaCerts) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaCerts.ProtoReflect.Descriptor instead.
func (*CaCerts) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

func (x *CaCerts) GetCacert() []string {
	if x != nil {
		return x.Cacert
	}
	return nil
}

// Defines the type of encapsulation in case NAT traversal is required and
// includes port information.
type Encap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of encapsulation to use.
	Espencap EspEncap `protobuf:"varint,1,opt,name=espencap,proto3,enum=opi_api.security.v2alpha1.EspEncap" json:"espencap,omitempty"`
	// Encapsulation source port. Default = 4500
	Sport uint32 `protobuf:"varint,2,opt,name=sport,proto3" json:"sport,omitempty"`
	// Encapsulation destination port. Default = 4500
	Dport uint32 `protobuf:"varint,3,opt,name=dport,proto3" json:"dport,omitempty"`
}

func (x *Encap) Reset() {
	*x = Encap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encap) ProtoMessage() {}

func (x *Encap) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encap.ProtoReflect.Descriptor instead.
func (*Encap) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

func (x *Encap) GetEspencap() EspEncap {
	if x != nil {
		return x.Espencap
	}
	return EspEncap_ESP_ENCAP_UNSPECIFIED
}

func (x *Encap) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *Encap) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

// An IKE Connection specification
type IkeConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for this connection entry.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IKE/IPsec connection startup behavior. Default: AUTO_STARTUP_MODE_ADD
	Autostartup AutoStartupMode `protobuf:"varint,2,opt,name=autostartup,proto3,enum=opi_api.security.v2alpha1.AutoStartupMode" json:"autostartup,omitempty"`
	// IKE version. Only version 2 is supported.
	Version IkeVersion `protobuf:"varint,3,opt,name=version,proto3,enum=opi_api.security.v2alpha1.IkeVersion" json:"version,omitempty"`
	// IKE fragmentation
	Fragmentation *IkeFragmentation `protobuf:"bytes,4,opt,name=fragmentation,proto3" json:"fragmentation,omitempty"`
	// IKE SA soft lifetime
	IkeSaLifetimeSoft *IkeSaLifetimeSoft `protobuf:"bytes,5,opt,name=ike_sa_lifetime_soft,json=ikeSaLifetimeSoft,proto3" json:"ike_sa_lifetime_soft,omitempty"`
	// IKE SA hard lifetime
	IkeSaLifetimeHard *IkeSaLifetimeHard `protobuf:"bytes,6,opt,name=ike_sa_lifetime_hard,json=ikeSaLifetimeHard,proto3" json:"ike_sa_lifetime_hard,omitempty"`
	// Cryptographic algorithms
	EncryptionAlg []EncAlgorithm   `protobuf:"varint,7,rep,packed,name=encryption_alg,json=encryptionAlg,proto3,enum=opi_api.security.v2alpha1.EncAlgorithm" json:"encryption_alg,omitempty"`
	IntegrityAlg  []IntegAlgorithm `protobuf:"varint,8,rep,packed,name=integrity_alg,json=integrityAlg,proto3,enum=opi_api.security.v2alpha1.IntegAlgorithm" json:"integrity_alg,omitempty"`
	Prf           []PRF            `protobuf:"varint,9,rep,packed,name=prf,proto3,enum=opi_api.security.v2alpha1.PRF" json:"prf,omitempty"`
	Dhgroups      []DHGroups       `protobuf:"varint,10,rep,packed,name=dhgroups,proto3,enum=opi_api.security.v2alpha1.DHGroups" json:"dhgroups,omitempty"`
	// Local peer name.
	Local string `protobuf:"bytes,11,opt,name=local,proto3" json:"local,omitempty"`
	// Remote peer name.
	Remote string `protobuf:"bytes,12,opt,name=remote,proto3" json:"remote,omitempty"`
	// Configuration information about the encapsulation that should be used when
	// NAT traversal is required. No encapsulation is used if this field is not
	// specified.
	Encap *Encap `protobuf:"bytes,13,opt,name=encap,proto3,oneof" json:"encap,omitempty"`
	// Local UDP port for IKE communication. Defaults to 500 if not specified.
	LocalPort *uint32 `protobuf:"varint,14,opt,name=local_port,json=localPort,proto3,oneof" json:"local_port,omitempty"`
	// Remote UDP port for IKE communication. Defaults to 500 if not specified.
	RemotePort *uint32 `protobuf:"varint,15,opt,name=remote_port,json=remotePort,proto3,oneof" json:"remote_port,omitempty"`
	// Interface that this connection is associated with. Used for route based
	// VPNs.
	IfId string `protobuf:"bytes,16,opt,name=if_id,json=ifId,proto3" json:"if_id,omitempty"`
	// IPsec policies that apply to the connection
	Policies []*IpsecPolicy `protobuf:"bytes,17,rep,name=policies,proto3" json:"policies,omitempty"`
	// Connection state / status
	State *IkeConnectionState `protobuf:"bytes,18,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *IkeConnection) Reset() {
	*x = IkeConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkeConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkeConnection) ProtoMessage() {}

func (x *IkeConnection) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkeConnection.ProtoReflect.Descriptor instead.
func (*IkeConnection) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

func (x *IkeConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IkeConnection) GetAutostartup() AutoStartupMode {
	if x != nil {
		return x.Autostartup
	}
	return AutoStartupMode_AUTO_STARTUP_MODE_UNSPECIFIED
}

func (x *IkeConnection) GetVersion() IkeVersion {
	if x != nil {
		return x.Version
	}
	return IkeVersion_IKE_VERSION_UNSPECIFIED
}

func (x *IkeConnection) GetFragmentation() *IkeFragmentation {
	if x != nil {
		return x.Fragmentation
	}
	return nil
}

func (x *IkeConnection) GetIkeSaLifetimeSoft() *IkeSaLifetimeSoft {
	if x != nil {
		return x.IkeSaLifetimeSoft
	}
	return nil
}

func (x *IkeConnection) GetIkeSaLifetimeHard() *IkeSaLifetimeHard {
	if x != nil {
		return x.IkeSaLifetimeHard
	}
	return nil
}

func (x *IkeConnection) GetEncryptionAlg() []EncAlgorithm {
	if x != nil {
		return x.EncryptionAlg
	}
	return nil
}

func (x *IkeConnection) GetIntegrityAlg() []IntegAlgorithm {
	if x != nil {
		return x.IntegrityAlg
	}
	return nil
}

func (x *IkeConnection) GetPrf() []PRF {
	if x != nil {
		return x.Prf
	}
	return nil
}

func (x *IkeConnection) GetDhgroups() []DHGroups {
	if x != nil {
		return x.Dhgroups
	}
	return nil
}

func (x *IkeConnection) GetLocal() string {
	if x != nil {
		return x.Local
	}
	return ""
}

func (x *IkeConnection) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *IkeConnection) GetEncap() *Encap {
	if x != nil {
		return x.Encap
	}
	return nil
}

func (x *IkeConnection) GetLocalPort() uint32 {
	if x != nil && x.LocalPort != nil {
		return *x.LocalPort
	}
	return 0
}

func (x *IkeConnection) GetRemotePort() uint32 {
	if x != nil && x.RemotePort != nil {
		return *x.RemotePort
	}
	return 0
}

func (x *IkeConnection) GetIfId() string {
	if x != nil {
		return x.IfId
	}
	return ""
}

func (x *IkeConnection) GetPolicies() []*IpsecPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *IkeConnection) GetState() *IkeConnectionState {
	if x != nil {
		return x.State
	}
	return nil
}

// An IPsec Security Association (SA)
type IpsecSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name in the SAD to identify this SA
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This value allows linking this IPsec SA with an IPsec policy with the same
	// reqid
	Reqid uint64 `protobuf:"varint,2,opt,name=reqid,proto3" json:"reqid,omitempty"`
	// IPsec SA configuration
	Config *IpsecSaConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// IPsec SA state
	State *IpsecSaState `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *IpsecSA) Reset() {
	*x = IpsecSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSA) ProtoMessage() {}

func (x *IpsecSA) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSA.ProtoReflect.Descriptor instead.
func (*IpsecSA) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

func (x *IpsecSA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IpsecSA) GetReqid() uint64 {
	if x != nil {
		return x.Reqid
	}
	return 0
}

func (x *IpsecSA) GetConfig() *IpsecSaConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *IpsecSA) GetState() *IpsecSaState {
	if x != nil {
		return x.State
	}
	return nil
}

// IPsec Security Association Configuration
type IpsecSaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPsec SA Security Parameter Index (SPI)
	Spi uint32 `protobuf:"varint,1,opt,name=spi,proto3" json:"spi,omitempty"`
	// True if this IPsec SA is using extended sequence numbers. If true, the
	// 64-bit extended sequence number counter is used. If false, the normal
	// 32-bit sequence number counter is used.
	Esn bool `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`
	// Anti-Replay-Window size. If not set, the default value is 64, following the
	// recommendation in RFC4303.
	ArwSize *uint32 `protobuf:"varint,3,opt,name=arw_size,json=arwSize,proto3,oneof" json:"arw_size,omitempty"`
	// Packets are selected for processing actions based on Traffic Selector
	// values, which refer to IP and inner protocol header information.
	TrafficSelector *TrafficSelector `protobuf:"bytes,4,opt,name=traffic_selector,json=trafficSelector,proto3" json:"traffic_selector,omitempty"`
	// Security protocol of the IPsec SA. Only ESP is supported.
	Protocol IpsecProtocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=opi_api.security.v2alpha1.IpsecProtocol" json:"protocol,omitempty"`
	// IPsec SA has to be processed in transport or tunnel mode. If not specified,
	// transport mode is used.
	Mode IpsecMode `protobuf:"varint,6,opt,name=mode,proto3,enum=opi_api.security.v2alpha1.IpsecMode" json:"mode,omitempty"`
	// IPsec ESP algorithm configuration
	EspAlgorithms *EspAlgorithms `protobuf:"bytes,7,opt,name=esp_algorithms,json=espAlgorithms,proto3" json:"esp_algorithms,omitempty"`
	// Tunnel configuration. Only relevant when mode = Tunnel.
	Tunnel *Tunnel `protobuf:"bytes,8,opt,name=tunnel,proto3,oneof" json:"tunnel,omitempty"`
	// Soft IPsec SA lifetime. After the lifetime, the lifetime action is
	// performed.
	LifetimeSoft *IpsecSaLifetimeSoft `protobuf:"bytes,9,opt,name=lifetime_soft,json=lifetimeSoft,proto3" json:"lifetime_soft,omitempty"`
	// Hard IPsec SA lifetime. The action will be used to terminate the IPsec SA.
	LifetimeHard *IpsecSaLifetimeHard `protobuf:"bytes,10,opt,name=lifetime_hard,json=lifetimeHard,proto3" json:"lifetime_hard,omitempty"`
	// Provides information about the encapsulation that the IPsec SA is using.
	Encap *Encap `protobuf:"bytes,11,opt,name=encap,proto3" json:"encap,omitempty"`
}

func (x *IpsecSaConfig) Reset() {
	*x = IpsecSaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaConfig) ProtoMessage() {}

func (x *IpsecSaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaConfig.ProtoReflect.Descriptor instead.
func (*IpsecSaConfig) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

func (x *IpsecSaConfig) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *IpsecSaConfig) GetEsn() bool {
	if x != nil {
		return x.Esn
	}
	return false
}

func (x *IpsecSaConfig) GetArwSize() uint32 {
	if x != nil && x.ArwSize != nil {
		return *x.ArwSize
	}
	return 0
}

func (x *IpsecSaConfig) GetTrafficSelector() *TrafficSelector {
	if x != nil {
		return x.TrafficSelector
	}
	return nil
}

func (x *IpsecSaConfig) GetProtocol() IpsecProtocol {
	if x != nil {
		return x.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_UNSPECIFIED
}

func (x *IpsecSaConfig) GetMode() IpsecMode {
	if x != nil {
		return x.Mode
	}
	return IpsecMode_IPSEC_MODE_UNSPECIFIED
}

func (x *IpsecSaConfig) GetEspAlgorithms() *EspAlgorithms {
	if x != nil {
		return x.EspAlgorithms
	}
	return nil
}

func (x *IpsecSaConfig) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *IpsecSaConfig) GetLifetimeSoft() *IpsecSaLifetimeSoft {
	if x != nil {
		return x.LifetimeSoft
	}
	return nil
}

func (x *IpsecSaConfig) GetLifetimeHard() *IpsecSaLifetimeHard {
	if x != nil {
		return x.LifetimeHard
	}
	return nil
}

func (x *IpsecSaConfig) GetEncap() *Encap {
	if x != nil {
		return x.Encap
	}
	return nil
}

// IPsec Security Association State
type IpsecSaState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SA Current Lifetime
	Lifetime *Lifetime `protobuf:"bytes,1,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// State about the anti-replay window
	ReplayStats *AntiReplayStats `protobuf:"bytes,2,opt,name=replay_stats,json=replayStats,proto3" json:"replay_stats,omitempty"`
}

func (x *IpsecSaState) Reset() {
	*x = IpsecSaState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaState) ProtoMessage() {}

func (x *IpsecSaState) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaState.ProtoReflect.Descriptor instead.
func (*IpsecSaState) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

func (x *IpsecSaState) GetLifetime() *Lifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *IpsecSaState) GetReplayStats() *AntiReplayStats {
	if x != nil {
		return x.ReplayStats
	}
	return nil
}

type IpsecPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name to identify the IPsec policy in the SPD.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This value allows linking this IPsec policy with the IPsec SAs with the
	// same reqid. A value of 0 (the default) means that the reqid is unused.
	Reqid uint64 `protobuf:"varint,2,opt,name=reqid,proto3" json:"reqid,omitempty"`
	// IPsec Policy configuration
	Config *IpsecPolicyConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *IpsecPolicy) Reset() {
	*x = IpsecPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecPolicy) ProtoMessage() {}

func (x *IpsecPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecPolicy.ProtoReflect.Descriptor instead.
func (*IpsecPolicy) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

func (x *IpsecPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IpsecPolicy) GetReqid() uint64 {
	if x != nil {
		return x.Reqid
	}
	return 0
}

func (x *IpsecPolicy) GetConfig() *IpsecPolicyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Holds configuration information for an IPsec SPD entry.
type IpsecPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Anti-Replay-Window size. If not set, the default value is 64, following the
	// recommendation in RFC4303.
	ArwSize *uint32 `protobuf:"varint,1,opt,name=arw_size,json=arwSize,proto3,oneof" json:"arw_size,omitempty"`
	// Packets are selected for processing actions based on Traffic Selector
	// values, which refer to IP and inner protocol header information.
	TrafficSelector *TrafficSelector `protobuf:"bytes,2,opt,name=traffic_selector,json=trafficSelector,proto3" json:"traffic_selector,omitempty"`
	// SPD processing to be performed on packets that match the traffic selector.
	Processing *SpdProcessingInfo `protobuf:"bytes,3,opt,name=processing,proto3" json:"processing,omitempty"`
}

func (x *IpsecPolicyConfig) Reset() {
	*x = IpsecPolicyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecPolicyConfig) ProtoMessage() {}

func (x *IpsecPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecPolicyConfig.ProtoReflect.Descriptor instead.
func (*IpsecPolicyConfig) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10}
}

func (x *IpsecPolicyConfig) GetArwSize() uint32 {
	if x != nil && x.ArwSize != nil {
		return *x.ArwSize
	}
	return 0
}

func (x *IpsecPolicyConfig) GetTrafficSelector() *TrafficSelector {
	if x != nil {
		return x.TrafficSelector
	}
	return nil
}

func (x *IpsecPolicyConfig) GetProcessing() *SpdProcessingInfo {
	if x != nil {
		return x.Processing
	}
	return nil
}

// A Traffic Selector used in IPsec policies and IPsec SAs.
type TrafficSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local IP address prefix.
	LocalPrefix *_go.IPPrefix `protobuf:"bytes,1,opt,name=local_prefix,json=localPrefix,proto3" json:"local_prefix,omitempty"`
	// Remote IP address prefix.
	RemotePrefix *_go.IPPrefix `protobuf:"bytes,2,opt,name=remote_prefix,json=remotePrefix,proto3" json:"remote_prefix,omitempty"`
	// Inner protocol that is going to be protected with IPsec. If no protocol is
	// specified, all inner protocol will be protected.
	InnerProtocol uint32 `protobuf:"varint,3,opt,name=inner_protocol,json=innerProtocol,proto3" json:"inner_protocol,omitempty"`
	// List of local ports. When the inner protocol is ICMP, this 16-bit value
	// represents code and type. If this list is not defined, it is assumed that
	// start and end are 0 by default (any port).
	LocalPorts []*PortRange `protobuf:"bytes,4,rep,name=local_ports,json=localPorts,proto3" json:"local_ports,omitempty"`
	// List of remote ports. When the inner protocol is ICMP, this 16-bit value
	// represents code and type. If this list is not defined, it is assumed that
	// start and end are 0 by default (any port).
	RemotePorts []*PortRange `protobuf:"bytes,5,rep,name=remote_ports,json=remotePorts,proto3" json:"remote_ports,omitempty"`
}

func (x *TrafficSelector) Reset() {
	*x = TrafficSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSelector) ProtoMessage() {}

func (x *TrafficSelector) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSelector.ProtoReflect.Descriptor instead.
func (*TrafficSelector) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{11}
}

func (x *TrafficSelector) GetLocalPrefix() *_go.IPPrefix {
	if x != nil {
		return x.LocalPrefix
	}
	return nil
}

func (x *TrafficSelector) GetRemotePrefix() *_go.IPPrefix {
	if x != nil {
		return x.RemotePrefix
	}
	return nil
}

func (x *TrafficSelector) GetInnerProtocol() uint32 {
	if x != nil {
		return x.InnerProtocol
	}
	return 0
}

func (x *TrafficSelector) GetLocalPorts() []*PortRange {
	if x != nil {
		return x.LocalPorts
	}
	return nil
}

func (x *TrafficSelector) GetRemotePorts() []*PortRange {
	if x != nil {
		return x.RemotePorts
	}
	return nil
}

// A port range, such as that expressed in RFC 4301, for example 1500 (Start
// Port Number) - 1600 (End Port Number). A port range is used in the Traffic
// Selector. To express a single prot, set the same value as start and end.
type PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start port number.
	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End port number. The end port number must be equal to or greater than the
	// start port number.
	End uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12}
}

func (x *PortRange) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PortRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

// SPD processing. If the required processing action is protect, it contains the
// required information to process the packet.
type SpdProcessingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action IpsecSpdAction `protobuf:"varint,1,opt,name=action,proto3,enum=opi_api.security.v2alpha1.IpsecSpdAction" json:"action,omitempty"`
	// IPsec SA configuration included in the SPD entry.
	SaConfig *IpsecSaTemplate `protobuf:"bytes,2,opt,name=sa_config,json=saConfig,proto3,oneof" json:"sa_config,omitempty"`
}

func (x *SpdProcessingInfo) Reset() {
	*x = SpdProcessingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpdProcessingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpdProcessingInfo) ProtoMessage() {}

func (x *SpdProcessingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpdProcessingInfo.ProtoReflect.Descriptor instead.
func (*SpdProcessingInfo) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{13}
}

func (x *SpdProcessingInfo) GetAction() IpsecSpdAction {
	if x != nil {
		return x.Action
	}
	return IpsecSpdAction_IPSEC_SPD_ACTION_UNSPECIFIED
}

func (x *SpdProcessingInfo) GetSaConfig() *IpsecSaTemplate {
	if x != nil {
		return x.SaConfig
	}
	return nil
}

type IpsecSaTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this IPsec SA is using extended sequence numbers. If true, the
	// 64-bit extended sequence number counter is used. If false, the normal
	// 32-bit sequence number counter is used.
	Esn bool `protobuf:"varint,1,opt,name=esn,proto3" json:"esn,omitempty"`
	// IPsec SA has to be processed in transport or tunnel mode. If not specified,
	// transport mode is used.
	Mode IpsecMode `protobuf:"varint,2,opt,name=mode,proto3,enum=opi_api.security.v2alpha1.IpsecMode" json:"mode,omitempty"`
	// Security protocol of the IPsec SA. Only ESP is supported.
	Protocol IpsecProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=opi_api.security.v2alpha1.IpsecProtocol" json:"protocol,omitempty"`
	// IPsec ESP algorithm configuration
	EspAlgorithms *EspAlgorithms `protobuf:"bytes,4,opt,name=esp_algorithms,json=espAlgorithms,proto3" json:"esp_algorithms,omitempty"`
	// Tunnel configuration. Only relevant when mode = Tunnel.
	Tunnel *Tunnel `protobuf:"bytes,5,opt,name=tunnel,proto3,oneof" json:"tunnel,omitempty"`
}

func (x *IpsecSaTemplate) Reset() {
	*x = IpsecSaTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaTemplate) ProtoMessage() {}

func (x *IpsecSaTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaTemplate.ProtoReflect.Descriptor instead.
func (*IpsecSaTemplate) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{14}
}

func (x *IpsecSaTemplate) GetEsn() bool {
	if x != nil {
		return x.Esn
	}
	return false
}

func (x *IpsecSaTemplate) GetMode() IpsecMode {
	if x != nil {
		return x.Mode
	}
	return IpsecMode_IPSEC_MODE_UNSPECIFIED
}

func (x *IpsecSaTemplate) GetProtocol() IpsecProtocol {
	if x != nil {
		return x.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_UNSPECIFIED
}

func (x *IpsecSaTemplate) GetEspAlgorithms() *EspAlgorithms {
	if x != nil {
		return x.EspAlgorithms
	}
	return nil
}

func (x *IpsecSaTemplate) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

// Configuration of ESP parameters and algorithms
type EspAlgorithms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of ESP authentication based on the specified integrity
	// algorithm. With AEAD encryption algorithms, the integrity node is not used.
	Integrity []IntegAlgorithm `protobuf:"varint,1,rep,packed,name=integrity,proto3,enum=opi_api.security.v2alpha1.IntegAlgorithm" json:"integrity,omitempty"`
	// Encryption of AEAD algorithm for the IPsec SAs. This list is ordered from
	// higher priority to lower priority. The first node of the list will be the
	// algorithm with the higher priority. If the list is empty then AES-256-GCM
	// will be applied.
	Encryption []EncAlgorithm `protobuf:"varint,2,rep,packed,name=encryption,proto3,enum=opi_api.security.v2alpha1.EncAlgorithm" json:"encryption,omitempty"`
	// If Traffic Flow Confidentiality (TFC) padding for ESP encryption can be
	// used (true) or not (false).
	TfcPad *bool `protobuf:"varint,3,opt,name=tfc_pad,json=tfcPad,proto3,oneof" json:"tfc_pad,omitempty"`
}

func (x *EspAlgorithms) Reset() {
	*x = EspAlgorithms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EspAlgorithms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EspAlgorithms) ProtoMessage() {}

func (x *EspAlgorithms) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EspAlgorithms.ProtoReflect.Descriptor instead.
func (*EspAlgorithms) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{15}
}

func (x *EspAlgorithms) GetIntegrity() []IntegAlgorithm {
	if x != nil {
		return x.Integrity
	}
	return nil
}

func (x *EspAlgorithms) GetEncryption() []EncAlgorithm {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *EspAlgorithms) GetTfcPad() bool {
	if x != nil && x.TfcPad != nil {
		return *x.TfcPad
	}
	return false
}

// The parameters required to define the IP tunnel endpoints when IPsec SA
// requires tunnel mode. The tunnel is defined by two endpoints: the local IP
// address and the remote IP address.
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local IP address tunnel endpoint
	Local *_go.IPAddress `protobuf:"bytes,1,opt,name=local,proto3,oneof" json:"local,omitempty"`
	// Remote IP address tunnel endpoint
	Remote *_go.IPAddress `protobuf:"bytes,2,opt,name=remote,proto3,oneof" json:"remote,omitempty"`
	// Allow configuring the DF bit when encapsulating tunnel mode IPsec traffic.
	// RFC 4301 describes three options to handle the DF bit during tunnel
	// encapsulation: clear, set and copy from the inner IP header. This must be
	// ignored or has no meaning when the local/remote IP addresses are IPv6
	// addresses.
	DfBit DfBitAction `protobuf:"varint,3,opt,name=df_bit,json=dfBit,proto3,enum=opi_api.security.v2alpha1.DfBitAction" json:"df_bit,omitempty"`
	// If true, copy the DSCP value from the inner header to the outer header. If
	// false, map the DSCP values from an inner header to values in an outer
	// header following the dscp_mapping.
	BypassDscp bool `protobuf:"varint,4,opt,name=bypass_dscp,json=bypassDscp,proto3" json:"bypass_dscp,omitempty"`
	// A list that represents an array with the mapping from the inner DSCP value
	// to outer DSCP value when bypass_dscp is false. To express a default mapping
	// in the list where any other inner dscp value is not matching a node in the
	// list, a new node has to be included at the end of the list where the
	// inner-dscp is not defined (ANY) and the outer-dscp includes the value of
	// the mapping. If there is no value set in the outer-dscp, the default value
	// for this leaf is 0.
	DscpMapping []*DscpMapping `protobuf:"bytes,5,rep,name=dscp_mapping,json=dscpMapping,proto3" json:"dscp_mapping,omitempty"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{16}
}

func (x *Tunnel) GetLocal() *_go.IPAddress {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *Tunnel) GetRemote() *_go.IPAddress {
	if x != nil {
		return x.Remote
	}
	return nil
}

func (x *Tunnel) GetDfBit() DfBitAction {
	if x != nil {
		return x.DfBit
	}
	return DfBitAction_DF_BIT_ACTION_UNSPECIFIED
}

func (x *Tunnel) GetBypassDscp() bool {
	if x != nil {
		return x.BypassDscp
	}
	return false
}

func (x *Tunnel) GetDscpMapping() []*DscpMapping {
	if x != nil {
		return x.DscpMapping
	}
	return nil
}

type DscpMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list entry index with the different mappings.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The DSCP value of the inner IP packet.
	InnerDscp uint32 `protobuf:"varint,2,opt,name=inner_dscp,json=innerDscp,proto3" json:"inner_dscp,omitempty"`
	// The DSCP value of the outer IP packet.
	OuterDscp uint32 `protobuf:"varint,3,opt,name=outer_dscp,json=outerDscp,proto3" json:"outer_dscp,omitempty"`
}

func (x *DscpMapping) Reset() {
	*x = DscpMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DscpMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DscpMapping) ProtoMessage() {}

func (x *DscpMapping) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DscpMapping.ProtoReflect.Descriptor instead.
func (*DscpMapping) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{17}
}

func (x *DscpMapping) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DscpMapping) GetInnerDscp() uint32 {
	if x != nil {
		return x.InnerDscp
	}
	return 0
}

func (x *DscpMapping) GetOuterDscp() uint32 {
	if x != nil {
		return x.OuterDscp
	}
	return 0
}

// Specific information for IPsec SAs. It includes Perfect Forward Secrecy (PFS)
// group and IPsec SA rekey lifetimes.
type ChildSaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-zero, forward secrecy is required when a new IPsec SA is being
	// created. The non-zero value indicates the DH group number to use for the
	// key exchange process used to achieve forward secrecy. The list is ordered
	// following from the higher priority to lower priority. The first node of the
	// list will be the algorithm with higher priority.
	FsGroups []uint32 `protobuf:"varint,1,rep,packed,name=fs_groups,json=fsGroups,proto3" json:"fs_groups,omitempty"`
	// Soft IPsec SA lifetime. After the lifetime, the lifetime action is
	// performed.
	LifetimeSoft *IpsecSaLifetimeSoft `protobuf:"bytes,2,opt,name=lifetime_soft,json=lifetimeSoft,proto3" json:"lifetime_soft,omitempty"`
	// Hard IPsec SA lifetime. The action will be used to terminate the IPsec SA.
	LifetimeHard *IpsecSaLifetimeHard `protobuf:"bytes,3,opt,name=lifetime_hard,json=lifetimeHard,proto3" json:"lifetime_hard,omitempty"`
}

func (x *ChildSaInfo) Reset() {
	*x = ChildSaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildSaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildSaInfo) ProtoMessage() {}

func (x *ChildSaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildSaInfo.ProtoReflect.Descriptor instead.
func (*ChildSaInfo) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{18}
}

func (x *ChildSaInfo) GetFsGroups() []uint32 {
	if x != nil {
		return x.FsGroups
	}
	return nil
}

func (x *ChildSaInfo) GetLifetimeSoft() *IpsecSaLifetimeSoft {
	if x != nil {
		return x.LifetimeSoft
	}
	return nil
}

func (x *ChildSaInfo) GetLifetimeHard() *IpsecSaLifetimeHard {
	if x != nil {
		return x.LifetimeHard
	}
	return nil
}

type IpsecSaLifetimeSoft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lifetime *Lifetime      `protobuf:"bytes,1,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Action   LifetimeAction `protobuf:"varint,2,opt,name=action,proto3,enum=opi_api.security.v2alpha1.LifetimeAction" json:"action,omitempty"`
}

func (x *IpsecSaLifetimeSoft) Reset() {
	*x = IpsecSaLifetimeSoft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaLifetimeSoft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaLifetimeSoft) ProtoMessage() {}

func (x *IpsecSaLifetimeSoft) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaLifetimeSoft.ProtoReflect.Descriptor instead.
func (*IpsecSaLifetimeSoft) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{19}
}

func (x *IpsecSaLifetimeSoft) GetLifetime() *Lifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *IpsecSaLifetimeSoft) GetAction() LifetimeAction {
	if x != nil {
		return x.Action
	}
	return LifetimeAction_LIFETIME_ACTION_UNSPECIFIED
}

type IpsecSaLifetimeHard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lifetime *Lifetime `protobuf:"bytes,1,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
}

func (x *IpsecSaLifetimeHard) Reset() {
	*x = IpsecSaLifetimeHard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaLifetimeHard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaLifetimeHard) ProtoMessage() {}

func (x *IpsecSaLifetimeHard) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaLifetimeHard.ProtoReflect.Descriptor instead.
func (*IpsecSaLifetimeHard) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{20}
}

func (x *IpsecSaLifetimeHard) GetLifetime() *Lifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type Lifetime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in seconds since the IPsec SA was added. For example, if this value is
	// 180 seconds, it means the IPsec SA expires in 180 seconds after it was
	// added. A value of 0 implies infinite.
	Time uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// If the IPsec SA processes the number of bytes expressed in this field, the
	// IPsec SA expires and should be rekeyed. A value of 0 implies infinite.
	Bytes uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// If the IPsec SA processes the number of packets expressed in this field,
	// the IPsec SA expires and should be rekeyed. A value of 0 implies infinite.
	Packets uint64 `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	// If the IPsec SA is idle during this number of seconds, the IPsec SA should
	// be removed. A value of 0 implies infinite.
	Idle uint32 `protobuf:"varint,4,opt,name=idle,proto3" json:"idle,omitempty"`
}

func (x *Lifetime) Reset() {
	*x = Lifetime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lifetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lifetime) ProtoMessage() {}

func (x *Lifetime) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lifetime.ProtoReflect.Descriptor instead.
func (*Lifetime) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{21}
}

func (x *Lifetime) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Lifetime) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *Lifetime) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *Lifetime) GetIdle() uint32 {
	if x != nil {
		return x.Idle
	}
	return 0
}

// Anti-replay stats
type AntiReplayStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ARW state
	ReplayWindow *AntiReplayWindow `protobuf:"bytes,1,opt,name=replay_window,json=replayWindow,proto3" json:"replay_window,omitempty"`
	// Packets dropped because they are replay packets
	PacketDropped uint64 `protobuf:"varint,2,opt,name=packet_dropped,json=packetDropped,proto3" json:"packet_dropped,omitempty"`
	// Number of packets detected out of the replay window
	Failed uint64 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Current value of the sequence number
	SeqNumCounter uint64 `protobuf:"varint,4,opt,name=seq_num_counter,json=seqNumCounter,proto3" json:"seq_num_counter,omitempty"`
}

func (x *AntiReplayStats) Reset() {
	*x = AntiReplayStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiReplayStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiReplayStats) ProtoMessage() {}

func (x *AntiReplayStats) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiReplayStats.ProtoReflect.Descriptor instead.
func (*AntiReplayStats) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{22}
}

func (x *AntiReplayStats) GetReplayWindow() *AntiReplayWindow {
	if x != nil {
		return x.ReplayWindow
	}
	return nil
}

func (x *AntiReplayStats) GetPacketDropped() uint64 {
	if x != nil {
		return x.PacketDropped
	}
	return 0
}

func (x *AntiReplayStats) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *AntiReplayStats) GetSeqNumCounter() uint64 {
	if x != nil {
		return x.SeqNumCounter
	}
	return 0
}

// Anti-replay window state. Three parameters define the state of the replay
// window: window size (w), highest sequence number authenticated (t), and lower
// bound of the window (b), according to Appendix A2.1 in RFC 4303 (w = t - b +
// 1)
type AntiReplayWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the replay window
	W uint32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	// Highest sequence number authenticated so far, upper bound of window
	T uint64 `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
	// Lower bound of window
	B uint64 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *AntiReplayWindow) Reset() {
	*x = AntiReplayWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiReplayWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiReplayWindow) ProtoMessage() {}

func (x *AntiReplayWindow) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiReplayWindow.ProtoReflect.Descriptor instead.
func (*AntiReplayWindow) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{23}
}

func (x *AntiReplayWindow) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *AntiReplayWindow) GetT() uint64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *AntiReplayWindow) GetB() uint64 {
	if x != nil {
		return x.B
	}
	return 0
}

// IKE state data for an IKE connection
type IkeConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the local endpoint is acting as the initiator for this connection.
	Initiator bool `protobuf:"varint,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Initiator's IKE SA SPI
	InitiatorIkeSpi uint32 `protobuf:"varint,2,opt,name=initiator_ike_spi,json=initiatorIkeSpi,proto3" json:"initiator_ike_spi,omitempty"`
	// Responder's IKE SA SPI
	ResponderIkeSa uint32 `protobuf:"varint,3,opt,name=responder_ike_sa,json=responderIkeSa,proto3" json:"responder_ike_sa,omitempty"`
	// True if the local endpoint is behind a NAT.
	NatLocal bool `protobuf:"varint,4,opt,name=nat_local,json=natLocal,proto3" json:"nat_local,omitempty"`
	// True if the remote endpoint is behind a NAT.
	NatRemote bool `protobuf:"varint,5,opt,name=nat_remote,json=natRemote,proto3" json:"nat_remote,omitempty"`
	// Provides information about the encapsulation that IKE is using.
	Encap *Encap `protobuf:"bytes,6,opt,name=encap,proto3" json:"encap,omitempty"`
	// Seconds since this IKE SA has been established.
	Established uint64 `protobuf:"varint,7,opt,name=established,proto3" json:"established,omitempty"`
	// Seconds before IKE SA is rekeyed
	CurrentRekeyTime uint64 `protobuf:"varint,8,opt,name=current_rekey_time,json=currentRekeyTime,proto3" json:"current_rekey_time,omitempty"`
	// Seconds before IKE SA is re-authenticated
	CurrentReauthTime uint64 `protobuf:"varint,9,opt,name=current_reauth_time,json=currentReauthTime,proto3" json:"current_reauth_time,omitempty"`
}

func (x *IkeConnectionState) Reset() {
	*x = IkeConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkeConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkeConnectionState) ProtoMessage() {}

func (x *IkeConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkeConnectionState.ProtoReflect.Descriptor instead.
func (*IkeConnectionState) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{24}
}

func (x *IkeConnectionState) GetInitiator() bool {
	if x != nil {
		return x.Initiator
	}
	return false
}

func (x *IkeConnectionState) GetInitiatorIkeSpi() uint32 {
	if x != nil {
		return x.InitiatorIkeSpi
	}
	return 0
}

func (x *IkeConnectionState) GetResponderIkeSa() uint32 {
	if x != nil {
		return x.ResponderIkeSa
	}
	return 0
}

func (x *IkeConnectionState) GetNatLocal() bool {
	if x != nil {
		return x.NatLocal
	}
	return false
}

func (x *IkeConnectionState) GetNatRemote() bool {
	if x != nil {
		return x.NatRemote
	}
	return false
}

func (x *IkeConnectionState) GetEncap() *Encap {
	if x != nil {
		return x.Encap
	}
	return nil
}

func (x *IkeConnectionState) GetEstablished() uint64 {
	if x != nil {
		return x.Established
	}
	return 0
}

func (x *IkeConnectionState) GetCurrentRekeyTime() uint64 {
	if x != nil {
		return x.CurrentRekeyTime
	}
	return 0
}

func (x *IkeConnectionState) GetCurrentReauthTime() uint64 {
	if x != nil {
		return x.CurrentReauthTime
	}
	return 0
}

// General information about the IKE SAs. In particular, it provides the number
// of IKE SAs.
type NumberIkeSAs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of active IKE SAs.
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Number of half-open active IKE SAs.
	HalfOpen uint64 `protobuf:"varint,2,opt,name=half_open,json=halfOpen,proto3" json:"half_open,omitempty"`
}

func (x *NumberIkeSAs) Reset() {
	*x = NumberIkeSAs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberIkeSAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberIkeSAs) ProtoMessage() {}

func (x *NumberIkeSAs) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberIkeSAs.ProtoReflect.Descriptor instead.
func (*NumberIkeSAs) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{25}
}

func (x *NumberIkeSAs) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NumberIkeSAs) GetHalfOpen() uint64 {
	if x != nil {
		return x.HalfOpen
	}
	return 0
}

// Digital Signature Authentication
type DSAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digital signature algorithm
	Algorithm    DSAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=opi_api.security.v2alpha1.DSAlgorithm" json:"algorithm,omitempty"`
	RawPublicKey string      `protobuf:"bytes,2,opt,name=raw_public_key,json=rawPublicKey,proto3" json:"raw_public_key,omitempty"`
	Cert         string      `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	PrivateKey   string      `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	CaCerts      *CaCerts    `protobuf:"bytes,5,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
}

func (x *DSAuth) Reset() {
	*x = DSAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSAuth) ProtoMessage() {}

func (x *DSAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSAuth.ProtoReflect.Descriptor instead.
func (*DSAuth) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{26}
}

func (x *DSAuth) GetAlgorithm() DSAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return DSAlgorithm_DS_ALGORITHM_UNSPECIFIED
}

func (x *DSAuth) GetRawPublicKey() string {
	if x != nil {
		return x.RawPublicKey
	}
	return ""
}

func (x *DSAuth) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *DSAuth) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DSAuth) GetCaCerts() *CaCerts {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

// IKE Peer Authentication
type IkePeerAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authentication method
	AuthMethod AuthType `protobuf:"varint,1,opt,name=auth_method,json=authMethod,proto3,enum=opi_api.security.v2alpha1.AuthType" json:"auth_method,omitempty"`
	// EAP method type specified with a value extracted from the IANA registry.
	// This information provides the particular EAP method to be used. Depending
	// on the EAP method, pre-shared keys or certificates may be used.
	EapType *uint32 `protobuf:"varint,2,opt,name=eap_type,json=eapType,proto3,oneof" json:"eap_type,omitempty"`
	// Pre-shared secret value. This value MUST be set of the EAP method uses a
	// pre-shared key or pre-shared authentication has been chosen.
	Psk *string `protobuf:"bytes,3,opt,name=psk,proto3,oneof" json:"psk,omitempty"`
	// Digital signature
	DigitalSignature *DSAuth `protobuf:"bytes,4,opt,name=digital_signature,json=digitalSignature,proto3,oneof" json:"digital_signature,omitempty"`
}

func (x *IkePeerAuthentication) Reset() {
	*x = IkePeerAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkePeerAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkePeerAuthentication) ProtoMessage() {}

func (x *IkePeerAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkePeerAuthentication.ProtoReflect.Descriptor instead.
func (*IkePeerAuthentication) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{27}
}

func (x *IkePeerAuthentication) GetAuthMethod() AuthType {
	if x != nil {
		return x.AuthMethod
	}
	return AuthType_AUTH_TYPE_UNSPECIFIED
}

func (x *IkePeerAuthentication) GetEapType() uint32 {
	if x != nil && x.EapType != nil {
		return *x.EapType
	}
	return 0
}

func (x *IkePeerAuthentication) GetPsk() string {
	if x != nil && x.Psk != nil {
		return *x.Psk
	}
	return ""
}

func (x *IkePeerAuthentication) GetDigitalSignature() *DSAuth {
	if x != nil {
		return x.DigitalSignature
	}
	return nil
}

// IKE Peer
type IkePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name to uniquely identify the peer.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IPv4 or IPv6 address of the peer.
	IpAddress *_go.IPAddress `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
	// FQDN of the peer.
	Fqdn     *string                `protobuf:"bytes,3,opt,name=fqdn,proto3,oneof" json:"fqdn,omitempty"`
	PeerAuth *IkePeerAuthentication `protobuf:"bytes,4,opt,name=peer_auth,json=peerAuth,proto3,oneof" json:"peer_auth,omitempty"`
}

func (x *IkePeer) Reset() {
	*x = IkePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IkePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IkePeer) ProtoMessage() {}

func (x *IkePeer) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IkePeer.ProtoReflect.Descriptor instead.
func (*IkePeer) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{28}
}

func (x *IkePeer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IkePeer) GetIpAddress() *_go.IPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *IkePeer) GetFqdn() string {
	if x != nil && x.Fqdn != nil {
		return *x.Fqdn
	}
	return ""
}

func (x *IkePeer) GetPeerAuth() *IkePeerAuthentication {
	if x != nil {
		return x.PeerAuth
	}
	return nil
}

type CreateIkePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *IkePeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *CreateIkePeerRequest) Reset() {
	*x = CreateIkePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIkePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIkePeerRequest) ProtoMessage() {}

func (x *CreateIkePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIkePeerRequest.ProtoReflect.Descriptor instead.
func (*CreateIkePeerRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{29}
}

func (x *CreateIkePeerRequest) GetPeer() *IkePeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type CreateIkePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateIkePeerResponse) Reset() {
	*x = CreateIkePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIkePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIkePeerResponse) ProtoMessage() {}

func (x *CreateIkePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIkePeerResponse.ProtoReflect.Descriptor instead.
func (*CreateIkePeerResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{30}
}

type UpdateIkePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name identifying the IKE peer to update
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Updated IKE peer specification
	Peer *IkePeer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *UpdateIkePeerRequest) Reset() {
	*x = UpdateIkePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIkePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIkePeerRequest) ProtoMessage() {}

func (x *UpdateIkePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIkePeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateIkePeerRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateIkePeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIkePeerRequest) GetPeer() *IkePeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type UpdateIkePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIkePeerResponse) Reset() {
	*x = UpdateIkePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIkePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIkePeerResponse) ProtoMessage() {}

func (x *UpdateIkePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIkePeerResponse.ProtoReflect.Descriptor instead.
func (*UpdateIkePeerResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{32}
}

type DeleteIkePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the IKE peer to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIkePeerRequest) Reset() {
	*x = DeleteIkePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIkePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIkePeerRequest) ProtoMessage() {}

func (x *DeleteIkePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIkePeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteIkePeerRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteIkePeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteIkePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIkePeerResponse) Reset() {
	*x = DeleteIkePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIkePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIkePeerResponse) ProtoMessage() {}

func (x *DeleteIkePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIkePeerResponse.ProtoReflect.Descriptor instead.
func (*DeleteIkePeerResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{34}
}

type GetIkePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the IKE peer to retrieve
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIkePeerRequest) Reset() {
	*x = GetIkePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIkePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIkePeerRequest) ProtoMessage() {}

func (x *GetIkePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIkePeerRequest.ProtoReflect.Descriptor instead.
func (*GetIkePeerRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{35}
}

func (x *GetIkePeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetIkePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *IkePeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *GetIkePeerResponse) Reset() {
	*x = GetIkePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIkePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIkePeerResponse) ProtoMessage() {}

func (x *GetIkePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIkePeerResponse.ProtoReflect.Descriptor instead.
func (*GetIkePeerResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{36}
}

func (x *GetIkePeerResponse) GetPeer() *IkePeer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type ListIkePeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIkePeersRequest) Reset() {
	*x = ListIkePeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIkePeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIkePeersRequest) ProtoMessage() {}

func (x *ListIkePeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIkePeersRequest.ProtoReflect.Descriptor instead.
func (*ListIkePeersRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{37}
}

type ListIkePeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*IkePeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *ListIkePeersResponse) Reset() {
	*x = ListIkePeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIkePeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIkePeersResponse) ProtoMessage() {}

func (x *ListIkePeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIkePeersResponse.ProtoReflect.Descriptor instead.
func (*ListIkePeersResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{38}
}

func (x *ListIkePeersResponse) GetPeers() []*IkePeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type CreateIkeConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *IkeConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateIkeConnRequest) Reset() {
	*x = CreateIkeConnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIkeConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIkeConnRequest) ProtoMessage() {}

func (x *CreateIkeConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIkeConnRequest.ProtoReflect.Descriptor instead.
func (*CreateIkeConnRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{39}
}

func (x *CreateIkeConnRequest) GetConnection() *IkeConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateIkeConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateIkeConnResponse) Reset() {
	*x = CreateIkeConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIkeConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIkeConnResponse) ProtoMessage() {}

func (x *CreateIkeConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIkeConnResponse.ProtoReflect.Descriptor instead.
func (*CreateIkeConnResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{40}
}

type UpdateIkeConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection name identifying the IKE connection to update
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Updated IKE connection specification
	Connection *IkeConnection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateIkeConnRequest) Reset() {
	*x = UpdateIkeConnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIkeConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIkeConnRequest) ProtoMessage() {}

func (x *UpdateIkeConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIkeConnRequest.ProtoReflect.Descriptor instead.
func (*UpdateIkeConnRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateIkeConnRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIkeConnRequest) GetConnection() *IkeConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateIkeConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIkeConnResponse) Reset() {
	*x = UpdateIkeConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIkeConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIkeConnResponse) ProtoMessage() {}

func (x *UpdateIkeConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIkeConnResponse.ProtoReflect.Descriptor instead.
func (*UpdateIkeConnResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{42}
}

type DeleteIkeConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection name identifying the IKE connection to delete
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIkeConnRequest) Reset() {
	*x = DeleteIkeConnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIkeConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIkeConnRequest) ProtoMessage() {}

func (x *DeleteIkeConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIkeConnRequest.ProtoReflect.Descriptor instead.
func (*DeleteIkeConnRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteIkeConnRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type DeleteIkeConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIkeConnResponse) Reset() {
	*x = DeleteIkeConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIkeConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIkeConnResponse) ProtoMessage() {}

func (x *DeleteIkeConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIkeConnResponse.ProtoReflect.Descriptor instead.
func (*DeleteIkeConnResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{44}
}

type GetIkeConnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection name identifying the IKE connection to retrieve
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIkeConnRequest) Reset() {
	*x = GetIkeConnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIkeConnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIkeConnRequest) ProtoMessage() {}

func (x *GetIkeConnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIkeConnRequest.ProtoReflect.Descriptor instead.
func (*GetIkeConnRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{45}
}

func (x *GetIkeConnRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetIkeConnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *IkeConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *GetIkeConnResponse) Reset() {
	*x = GetIkeConnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIkeConnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIkeConnResponse) ProtoMessage() {}

func (x *GetIkeConnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIkeConnResponse.ProtoReflect.Descriptor instead.
func (*GetIkeConnResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{46}
}

func (x *GetIkeConnResponse) GetConnection() *IkeConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type ListIkeConnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIkeConnsRequest) Reset() {
	*x = ListIkeConnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIkeConnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIkeConnsRequest) ProtoMessage() {}

func (x *ListIkeConnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIkeConnsRequest.ProtoReflect.Descriptor instead.
func (*ListIkeConnsRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{47}
}

type ListIkeConnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*IkeConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListIkeConnsResponse) Reset() {
	*x = ListIkeConnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIkeConnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIkeConnsResponse) ProtoMessage() {}

func (x *ListIkeConnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIkeConnsResponse.ProtoReflect.Descriptor instead.
func (*ListIkeConnsResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{48}
}

func (x *ListIkeConnsResponse) GetConnections() []*IkeConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ListIpsecSasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIpsecSasRequest) Reset() {
	*x = ListIpsecSasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpsecSasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpsecSasRequest) ProtoMessage() {}

func (x *ListIpsecSasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpsecSasRequest.ProtoReflect.Descriptor instead.
func (*ListIpsecSasRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{49}
}

type ListIpsecSasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sas []*IpsecSA `protobuf:"bytes,1,rep,name=sas,proto3" json:"sas,omitempty"`
}

func (x *ListIpsecSasResponse) Reset() {
	*x = ListIpsecSasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpsecSasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpsecSasResponse) ProtoMessage() {}

func (x *ListIpsecSasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpsecSasResponse.ProtoReflect.Descriptor instead.
func (*ListIpsecSasResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{50}
}

func (x *ListIpsecSasResponse) GetSas() []*IpsecSA {
	if x != nil {
		return x.Sas
	}
	return nil
}

type GetIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the SA to retrieve
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIpsecSaRequest) Reset() {
	*x = GetIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaRequest) ProtoMessage() {}

func (x *GetIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{51}
}

func (x *GetIpsecSaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sa *IpsecSA `protobuf:"bytes,1,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *GetIpsecSaResponse) Reset() {
	*x = GetIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaResponse) ProtoMessage() {}

func (x *GetIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{52}
}

func (x *GetIpsecSaResponse) GetSa() *IpsecSA {
	if x != nil {
		return x.Sa
	}
	return nil
}

type CreateIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sa *IpsecSA `protobuf:"bytes,1,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *CreateIpsecSaRequest) Reset() {
	*x = CreateIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecSaRequest) ProtoMessage() {}

func (x *CreateIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*CreateIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{53}
}

func (x *CreateIpsecSaRequest) GetSa() *IpsecSA {
	if x != nil {
		return x.Sa
	}
	return nil
}

type CreateIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateIpsecSaResponse) Reset() {
	*x = CreateIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecSaResponse) ProtoMessage() {}

func (x *CreateIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*CreateIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{54}
}

type UpdateIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the SA to update
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sa   *IpsecSA `protobuf:"bytes,2,opt,name=sa,proto3" json:"sa,omitempty"`
}

func (x *UpdateIpsecSaRequest) Reset() {
	*x = UpdateIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIpsecSaRequest) ProtoMessage() {}

func (x *UpdateIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*UpdateIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateIpsecSaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIpsecSaRequest) GetSa() *IpsecSA {
	if x != nil {
		return x.Sa
	}
	return nil
}

type UpdateIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIpsecSaResponse) Reset() {
	*x = UpdateIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIpsecSaResponse) ProtoMessage() {}

func (x *UpdateIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*UpdateIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{56}
}

type DeleteIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the SA to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIpsecSaRequest) Reset() {
	*x = DeleteIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIpsecSaRequest) ProtoMessage() {}

func (x *DeleteIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*DeleteIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteIpsecSaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIpsecSaResponse) Reset() {
	*x = DeleteIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIpsecSaResponse) ProtoMessage() {}

func (x *DeleteIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*DeleteIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{58}
}

var File_ipsec_proto protoreflect.FileDescriptor

var file_ipsec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x10,
	0x49, 0x6b, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0x53, 0x0a, 0x11, 0x49, 0x6b, 0x65,
	0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30,
	0x0a, 0x11, 0x49, 0x6b, 0x65, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48,
	0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x21, 0x0a, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x63,
	0x65, 0x72, 0x74, 0x22, 0x74, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x08,
	0x65, 0x73, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x73, 0x70, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x52, 0x08, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd2, 0x08, 0x0a, 0x0d, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x3f, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6b, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x53,
	0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x11, 0x69,
	0x6b, 0x65, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74,
	0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x53, 0x61,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72, 0x64, 0x52, 0x11, 0x69, 0x6b,
	0x65, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72, 0x64, 0x12,
	0x4e, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x12,
	0x4e, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x67,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x67, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x72, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x52, 0x46, 0x52, 0x03, 0x70, 0x72,
	0x66, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x48, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x08, 0x64, 0x68, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x66, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb4,
	0x01, 0x0a, 0x07, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x41, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x05, 0x0a, 0x0d, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x72, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x72, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x73, 0x70, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x73, 0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x73, 0x52, 0x0d, 0x65, 0x73, 0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72, 0x64, 0x52,
	0x0c, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a,
	0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x72, 0x77, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9e, 0x01,
	0x0a, 0x0c, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7d,
	0x0a, 0x0b, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe5, 0x01,
	0x0a, 0x11, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x72, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x61, 0x72, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x72, 0x77,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x54, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0xb2, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x70, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xbf, 0x02, 0x0a, 0x0f, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x73,
	0x70, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x73, 0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x0d, 0x65, 0x73,
	0x70, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x45, 0x73, 0x70, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x6e, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x66,
	0x63, 0x5f, 0x70, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x66, 0x63, 0x50, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x66, 0x63,
	0x5f, 0x70, 0x61, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x4b, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x64,
	0x66, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x66, 0x42, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x66, 0x42, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x44, 0x73, 0x63, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x73,
	0x63, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x73, 0x63, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x0b, 0x44,
	0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x73, 0x63, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x73, 0x63, 0x70, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x53, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x0c, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x72, 0x64, 0x22,
	0x99, 0x01, 0x0a, 0x13, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x13, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61,
	0x72, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x74, 0x69,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x10, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x01, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x01, 0x62, 0x22, 0xfc, 0x02, 0x0a, 0x12, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6b, 0x65,
	0x53, 0x70, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6b, 0x65, 0x53, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6e, 0x61, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x61, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6b, 0x65, 0x53, 0x41,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6c, 0x66, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66,
	0x4f, 0x70, 0x65, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x06, 0x44, 0x53, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x44, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x53, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x61, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x08, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x07, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22,
	0x94, 0x02, 0x0a, 0x15, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1e, 0x0a, 0x08, 0x65, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x65, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x70, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03,
	0x70, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x53,
	0x41, 0x75, 0x74, 0x68, 0x48, 0x02, 0x52, 0x10, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x73, 0x6b,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x07, 0x49, 0x6b, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x66, 0x71, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x71, 0x64,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22,
	0x4e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x17, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x15, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x53, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x03,
	0x73, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x41, 0x52, 0x03, 0x73,
	0x61, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x41, 0x52, 0x02, 0x73, 0x61, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x02, 0x73, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x41, 0x52, 0x02, 0x73,
	0x61, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x41, 0x52, 0x02, 0x73, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x73,
	0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x88, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x63,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38,
	0x43, 0x42, 0x43, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x39, 0x32, 0x43, 0x42, 0x43,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x47, 0x43, 0x4d, 0x31, 0x32, 0x38, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x41, 0x45, 0x53, 0x31, 0x39, 0x32, 0x47, 0x43, 0x4d, 0x31, 0x32, 0x38, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x47, 0x43, 0x4d, 0x31, 0x32, 0x38, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30,
	0x35, 0x10, 0x07, 0x2a, 0xee, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x5f,
	0x39, 0x36, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x31,
	0x32, 0x38, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x5f, 0x31,
	0x39, 0x32, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x35,
	0x31, 0x32, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x47, 0x4d,
	0x41, 0x43, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x47, 0x4d,
	0x41, 0x43, 0x10, 0x06, 0x2a, 0xd2, 0x02, 0x0a, 0x08, 0x44, 0x48, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x37, 0x36,
	0x38, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x30, 0x32, 0x34, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x35, 0x33,
	0x36, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x32, 0x30, 0x34, 0x38, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x33, 0x30, 0x37,
	0x32, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x34, 0x30, 0x39, 0x36, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x36, 0x31, 0x34,
	0x34, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x38, 0x31, 0x39, 0x32, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x30, 0x32,
	0x34, 0x53, 0x31, 0x36, 0x30, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x48, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x32, 0x30, 0x34, 0x38, 0x53, 0x32, 0x32,
	0x34, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x32, 0x30, 0x34, 0x38, 0x53, 0x32, 0x35, 0x36, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x0c, 0x2a, 0x7a, 0x0a, 0x03, 0x50, 0x52, 0x46,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x46, 0x5f, 0x53, 0x48, 0x41,
	0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x46, 0x5f, 0x41, 0x45, 0x53, 0x58, 0x43,
	0x42, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x46, 0x5f, 0x41, 0x45, 0x53, 0x43,
	0x4d, 0x41, 0x43, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x46, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x46, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x46, 0x5f, 0x53, 0x48, 0x41,
	0x35, 0x31, 0x32, 0x10, 0x06, 0x2a, 0x62, 0x0a, 0x09, 0x49, 0x70, 0x73, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x08, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55,
	0x42, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x41, 0x55, 0x54, 0x48, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41, 0x50, 0x10,
	0x04, 0x2a, 0x8d, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x03, 0x2a, 0x40, 0x0a, 0x0a, 0x49, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4b, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4b, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4b, 0x45, 0x56,
	0x32, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x08, 0x45, 0x73, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x53, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53,
	0x50, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x53, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x55,
	0x44, 0x50, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x0e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x70,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x50, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x53,
	0x45, 0x43, 0x5f, 0x53, 0x50, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x50, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x50, 0x41,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x50,
	0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x03, 0x2a, 0x47, 0x0a, 0x0d, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x53, 0x50, 0x10, 0x01, 0x2a, 0x97, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x1b, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x46, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x0b, 0x44, 0x66, 0x42, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x46, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x46, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x46, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x46, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x03, 0x2a, 0xad, 0x01, 0x0a, 0x0b,
	0x44, 0x53, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x53, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x53, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x50, 0x32, 0x35,
	0x36, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x5f, 0x50, 0x33, 0x38, 0x34, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x53, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x48,
	0x41, 0x35, 0x31, 0x32, 0x5f, 0x50, 0x35, 0x31, 0x32, 0x10, 0x0b, 0x32, 0xd4, 0x0d, 0x0a, 0x0c,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x2e, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x73, 0x12,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipsec_proto_rawDescOnce sync.Once
	file_ipsec_proto_rawDescData = file_ipsec_proto_rawDesc
)

func file_ipsec_proto_rawDescGZIP() []byte {
	file_ipsec_proto_rawDescOnce.Do(func() {
		file_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipsec_proto_rawDescData)
	})
	return file_ipsec_proto_rawDescData
}

var file_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_ipsec_proto_goTypes = []interface{}{
	(EncAlgorithm)(0),             // 0: opi_api.security.v2alpha1.EncAlgorithm
	(IntegAlgorithm)(0),           // 1: opi_api.security.v2alpha1.IntegAlgorithm
	(DHGroups)(0),                 // 2: opi_api.security.v2alpha1.DHGroups
	(PRF)(0),                      // 3: opi_api.security.v2alpha1.PRF
	(IpsecMode)(0),                // 4: opi_api.security.v2alpha1.IpsecMode
	(AuthType)(0),                 // 5: opi_api.security.v2alpha1.AuthType
	(AutoStartupMode)(0),          // 6: opi_api.security.v2alpha1.AutoStartupMode
	(IkeVersion)(0),               // 7: opi_api.security.v2alpha1.IkeVersion
	(EspEncap)(0),                 // 8: opi_api.security.v2alpha1.EspEncap
	(IpsecSpdAction)(0),           // 9: opi_api.security.v2alpha1.IpsecSpdAction
	(IpsecProtocol)(0),            // 10: opi_api.security.v2alpha1.IpsecProtocol
	(LifetimeAction)(0),           // 11: opi_api.security.v2alpha1.LifetimeAction
	(DfBitAction)(0),              // 12: opi_api.security.v2alpha1.DfBitAction
	(DSAlgorithm)(0),              // 13: opi_api.security.v2alpha1.DSAlgorithm
	(*IkeFragmentation)(nil),      // 14: opi_api.security.v2alpha1.IkeFragmentation
	(*IkeSaLifetimeSoft)(nil),     // 15: opi_api.security.v2alpha1.IkeSaLifetimeSoft
	(*IkeSaLifetimeHard)(nil),     // 16: opi_api.security.v2alpha1.IkeSaLifetimeHard
	(*CaCerts)(nil),               // 17: opi_api.security.v2alpha1.CaCerts
	(*Encap)(nil),                 // 18: opi_api.security.v2alpha1.Encap
	(*IkeConnection)(nil),         // 19: opi_api.security.v2alpha1.IkeConnection
	(*IpsecSA)(nil),               // 20: opi_api.security.v2alpha1.IpsecSA
	(*IpsecSaConfig)(nil),         // 21: opi_api.security.v2alpha1.IpsecSaConfig
	(*IpsecSaState)(nil),          // 22: opi_api.security.v2alpha1.IpsecSaState
	(*IpsecPolicy)(nil),           // 23: opi_api.security.v2alpha1.IpsecPolicy
	(*IpsecPolicyConfig)(nil),     // 24: opi_api.security.v2alpha1.IpsecPolicyConfig
	(*TrafficSelector)(nil),       // 25: opi_api.security.v2alpha1.TrafficSelector
	(*PortRange)(nil),             // 26: opi_api.security.v2alpha1.PortRange
	(*SpdProcessingInfo)(nil),     // 27: opi_api.security.v2alpha1.SpdProcessingInfo
	(*IpsecSaTemplate)(nil),       // 28: opi_api.security.v2alpha1.IpsecSaTemplate
	(*EspAlgorithms)(nil),         // 29: opi_api.security.v2alpha1.EspAlgorithms
	(*Tunnel)(nil),                // 30: opi_api.security.v2alpha1.Tunnel
	(*DscpMapping)(nil),           // 31: opi_api.security.v2alpha1.DscpMapping
	(*ChildSaInfo)(nil),           // 32: opi_api.security.v2alpha1.ChildSaInfo
	(*IpsecSaLifetimeSoft)(nil),   // 33: opi_api.security.v2alpha1.IpsecSaLifetimeSoft
	(*IpsecSaLifetimeHard)(nil),   // 34: opi_api.security.v2alpha1.IpsecSaLifetimeHard
	(*Lifetime)(nil),              // 35: opi_api.security.v2alpha1.Lifetime
	(*AntiReplayStats)(nil),       // 36: opi_api.security.v2alpha1.AntiReplayStats
	(*AntiReplayWindow)(nil),      // 37: opi_api.security.v2alpha1.AntiReplayWindow
	(*IkeConnectionState)(nil),    // 38: opi_api.security.v2alpha1.IkeConnectionState
	(*NumberIkeSAs)(nil),          // 39: opi_api.security.v2alpha1.NumberIkeSAs
	(*DSAuth)(nil),                // 40: opi_api.security.v2alpha1.DSAuth
	(*IkePeerAuthentication)(nil), // 41: opi_api.security.v2alpha1.IkePeerAuthentication
	(*IkePeer)(nil),               // 42: opi_api.security.v2alpha1.IkePeer
	(*CreateIkePeerRequest)(nil),  // 43: opi_api.security.v2alpha1.CreateIkePeerRequest
	(*CreateIkePeerResponse)(nil), // 44: opi_api.security.v2alpha1.CreateIkePeerResponse
	(*UpdateIkePeerRequest)(nil),  // 45: opi_api.security.v2alpha1.UpdateIkePeerRequest
	(*UpdateIkePeerResponse)(nil), // 46: opi_api.security.v2alpha1.UpdateIkePeerResponse
	(*DeleteIkePeerRequest)(nil),  // 47: opi_api.security.v2alpha1.DeleteIkePeerRequest
	(*DeleteIkePeerResponse)(nil), // 48: opi_api.security.v2alpha1.DeleteIkePeerResponse
	(*GetIkePeerRequest)(nil),     // 49: opi_api.security.v2alpha1.GetIkePeerRequest
	(*GetIkePeerResponse)(nil),    // 50: opi_api.security.v2alpha1.GetIkePeerResponse
	(*ListIkePeersRequest)(nil),   // 51: opi_api.security.v2alpha1.ListIkePeersRequest
	(*ListIkePeersResponse)(nil),  // 52: opi_api.security.v2alpha1.ListIkePeersResponse
	(*CreateIkeConnRequest)(nil),  // 53: opi_api.security.v2alpha1.CreateIkeConnRequest
	(*CreateIkeConnResponse)(nil), // 54: opi_api.security.v2alpha1.CreateIkeConnResponse
	(*UpdateIkeConnRequest)(nil),  // 55: opi_api.security.v2alpha1.UpdateIkeConnRequest
	(*UpdateIkeConnResponse)(nil), // 56: opi_api.security.v2alpha1.UpdateIkeConnResponse
	(*DeleteIkeConnRequest)(nil),  // 57: opi_api.security.v2alpha1.DeleteIkeConnRequest
	(*DeleteIkeConnResponse)(nil), // 58: opi_api.security.v2alpha1.DeleteIkeConnResponse
	(*GetIkeConnRequest)(nil),     // 59: opi_api.security.v2alpha1.GetIkeConnRequest
	(*GetIkeConnResponse)(nil),    // 60: opi_api.security.v2alpha1.GetIkeConnResponse
	(*ListIkeConnsRequest)(nil),   // 61: opi_api.security.v2alpha1.ListIkeConnsRequest
	(*ListIkeConnsResponse)(nil),  // 62: opi_api.security.v2alpha1.ListIkeConnsResponse
	(*ListIpsecSasRequest)(nil),   // 63: opi_api.security.v2alpha1.ListIpsecSasRequest
	(*ListIpsecSasResponse)(nil),  // 64: opi_api.security.v2alpha1.ListIpsecSasResponse
	(*GetIpsecSaRequest)(nil),     // 65: opi_api.security.v2alpha1.GetIpsecSaRequest
	(*GetIpsecSaResponse)(nil),    // 66: opi_api.security.v2alpha1.GetIpsecSaResponse
	(*CreateIpsecSaRequest)(nil),  // 67: opi_api.security.v2alpha1.CreateIpsecSaRequest
	(*CreateIpsecSaResponse)(nil), // 68: opi_api.security.v2alpha1.CreateIpsecSaResponse
	(*UpdateIpsecSaRequest)(nil),  // 69: opi_api.security.v2alpha1.UpdateIpsecSaRequest
	(*UpdateIpsecSaResponse)(nil), // 70: opi_api.security.v2alpha1.UpdateIpsecSaResponse
	(*DeleteIpsecSaRequest)(nil),  // 71: opi_api.security.v2alpha1.DeleteIpsecSaRequest
	(*DeleteIpsecSaResponse)(nil), // 72: opi_api.security.v2alpha1.DeleteIpsecSaResponse
	(*_go.IPPrefix)(nil),          // 73: opi_api.network.opinetcommon.v1alpha1.IPPrefix
	(*_go.IPAddress)(nil),         // 74: opi_api.network.opinetcommon.v1alpha1.IPAddress
}
var file_ipsec_proto_depIdxs = []int32{
	8,  // 0: opi_api.security.v2alpha1.Encap.espencap:type_name -> opi_api.security.v2alpha1.EspEncap
	6,  // 1: opi_api.security.v2alpha1.IkeConnection.autostartup:type_name -> opi_api.security.v2alpha1.AutoStartupMode
	7,  // 2: opi_api.security.v2alpha1.IkeConnection.version:type_name -> opi_api.security.v2alpha1.IkeVersion
	14, // 3: opi_api.security.v2alpha1.IkeConnection.fragmentation:type_name -> opi_api.security.v2alpha1.IkeFragmentation
	15, // 4: opi_api.security.v2alpha1.IkeConnection.ike_sa_lifetime_soft:type_name -> opi_api.security.v2alpha1.IkeSaLifetimeSoft
	16, // 5: opi_api.security.v2alpha1.IkeConnection.ike_sa_lifetime_hard:type_name -> opi_api.security.v2alpha1.IkeSaLifetimeHard
	0,  // 6: opi_api.security.v2alpha1.IkeConnection.encryption_alg:type_name -> opi_api.security.v2alpha1.EncAlgorithm
	1,  // 7: opi_api.security.v2alpha1.IkeConnection.integrity_alg:type_name -> opi_api.security.v2alpha1.IntegAlgorithm
	3,  // 8: opi_api.security.v2alpha1.IkeConnection.prf:type_name -> opi_api.security.v2alpha1.PRF
	2,  // 9: opi_api.security.v2alpha1.IkeConnection.dhgroups:type_name -> opi_api.security.v2alpha1.DHGroups
	18, // 10: opi_api.security.v2alpha1.IkeConnection.encap:type_name -> opi_api.security.v2alpha1.Encap
	23, // 11: opi_api.security.v2alpha1.IkeConnection.policies:type_name -> opi_api.security.v2alpha1.IpsecPolicy
	38, // 12: opi_api.security.v2alpha1.IkeConnection.state:type_name -> opi_api.security.v2alpha1.IkeConnectionState
	21, // 13: opi_api.security.v2alpha1.IpsecSA.config:type_name -> opi_api.security.v2alpha1.IpsecSaConfig
	22, // 14: opi_api.security.v2alpha1.IpsecSA.state:type_name -> opi_api.security.v2alpha1.IpsecSaState
	25, // 15: opi_api.security.v2alpha1.IpsecSaConfig.traffic_selector:type_name -> opi_api.security.v2alpha1.TrafficSelector
	10, // 16: opi_api.security.v2alpha1.IpsecSaConfig.protocol:type_name -> opi_api.security.v2alpha1.IpsecProtocol
	4,  // 17: opi_api.security.v2alpha1.IpsecSaConfig.mode:type_name -> opi_api.security.v2alpha1.IpsecMode
	29, // 18: opi_api.security.v2alpha1.IpsecSaConfig.esp_algorithms:type_name -> opi_api.security.v2alpha1.EspAlgorithms
	30, // 19: opi_api.security.v2alpha1.IpsecSaConfig.tunnel:type_name -> opi_api.security.v2alpha1.Tunnel
	33, // 20: opi_api.security.v2alpha1.IpsecSaConfig.lifetime_soft:type_name -> opi_api.security.v2alpha1.IpsecSaLifetimeSoft
	34, // 21: opi_api.security.v2alpha1.IpsecSaConfig.lifetime_hard:type_name -> opi_api.security.v2alpha1.IpsecSaLifetimeHard
	18, // 22: opi_api.security.v2alpha1.IpsecSaConfig.encap:type_name -> opi_api.security.v2alpha1.Encap
	35, // 23: opi_api.security.v2alpha1.IpsecSaState.lifetime:type_name -> opi_api.security.v2alpha1.Lifetime
	36, // 24: opi_api.security.v2alpha1.IpsecSaState.replay_stats:type_name -> opi_api.security.v2alpha1.AntiReplayStats
	24, // 25: opi_api.security.v2alpha1.IpsecPolicy.config:type_name -> opi_api.security.v2alpha1.IpsecPolicyConfig
	25, // 26: opi_api.security.v2alpha1.IpsecPolicyConfig.traffic_selector:type_name -> opi_api.security.v2alpha1.TrafficSelector
	27, // 27: opi_api.security.v2alpha1.IpsecPolicyConfig.processing:type_name -> opi_api.security.v2alpha1.SpdProcessingInfo
	73, // 28: opi_api.security.v2alpha1.TrafficSelector.local_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	73, // 29: opi_api.security.v2alpha1.TrafficSelector.remote_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	26, // 30: opi_api.security.v2alpha1.TrafficSelector.local_ports:type_name -> opi_api.security.v2alpha1.PortRange
	26, // 31: opi_api.security.v2alpha1.TrafficSelector.remote_ports:type_name -> opi_api.security.v2alpha1.PortRange
	9,  // 32: opi_api.security.v2alpha1.SpdProcessingInfo.action:type_name -> opi_api.security.v2alpha1.IpsecSpdAction
	28, // 33: opi_api.security.v2alpha1.SpdProcessingInfo.sa_config:type_name -> opi_api.security.v2alpha1.IpsecSaTemplate
	4,  // 34: opi_api.security.v2alpha1.IpsecSaTemplate.mode:type_name -> opi_api.security.v2alpha1.IpsecMode
	10, // 35: opi_api.security.v2alpha1.IpsecSaTemplate.protocol:type_name -> opi_api.security.v2alpha1.IpsecProtocol
	29, // 36: opi_api.security.v2alpha1.IpsecSaTemplate.esp_algorithms:type_name -> opi_api.security.v2alpha1.EspAlgorithms
	30, // 37: opi_api.security.v2alpha1.IpsecSaTemplate.tunnel:type_name -> opi_api.security.v2alpha1.Tunnel
	1,  // 38: opi_api.security.v2alpha1.EspAlgorithms.integrity:type_name -> opi_api.security.v2alpha1.IntegAlgorithm
	0,  // 39: opi_api.security.v2alpha1.EspAlgorithms.encryption:type_name -> opi_api.security.v2alpha1.EncAlgorithm
	74, // 40: opi_api.security.v2alpha1.Tunnel.local:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	74, // 41: opi_api.security.v2alpha1.Tunnel.remote:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	12, // 42: opi_api.security.v2alpha1.Tunnel.df_bit:type_name -> opi_api.security.v2alpha1.DfBitAction
	31, // 43: opi_api.security.v2alpha1.Tunnel.dscp_mapping:type_name -> opi_api.security.v2alpha1.DscpMapping
	33, // 44: opi_api.security.v2alpha1.ChildSaInfo.lifetime_soft:type_name -> opi_api.security.v2alpha1.IpsecSaLifetimeSoft
	34, // 45: opi_api.security.v2alpha1.ChildSaInfo.lifetime_hard:type_name -> opi_api.security.v2alpha1.IpsecSaLifetimeHard
	35, // 46: opi_api.security.v2alpha1.IpsecSaLifetimeSoft.lifetime:type_name -> opi_api.security.v2alpha1.Lifetime
	11, // 47: opi_api.security.v2alpha1.IpsecSaLifetimeSoft.action:type_name -> opi_api.security.v2alpha1.LifetimeAction
	35, // 48: opi_api.security.v2alpha1.IpsecSaLifetimeHard.lifetime:type_name -> opi_api.security.v2alpha1.Lifetime
	37, // 49: opi_api.security.v2alpha1.AntiReplayStats.replay_window:type_name -> opi_api.security.v2alpha1.AntiReplayWindow
	18, // 50: opi_api.security.v2alpha1.IkeConnectionState.encap:type_name -> opi_api.security.v2alpha1.Encap
	13, // 51: opi_api.security.v2alpha1.DSAuth.algorithm:type_name -> opi_api.security.v2alpha1.DSAlgorithm
	17, // 52: opi_api.security.v2alpha1.DSAuth.ca_certs:type_name -> opi_api.security.v2alpha1.CaCerts
	5,  // 53: opi_api.security.v2alpha1.IkePeerAuthentication.auth_method:type_name -> opi_api.security.v2alpha1.AuthType
	40, // 54: opi_api.security.v2alpha1.IkePeerAuthentication.digital_signature:type_name -> opi_api.security.v2alpha1.DSAuth
	74, // 55: opi_api.security.v2alpha1.IkePeer.ip_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	41, // 56: opi_api.security.v2alpha1.IkePeer.peer_auth:type_name -> opi_api.security.v2alpha1.IkePeerAuthentication
	42, // 57: opi_api.security.v2alpha1.CreateIkePeerRequest.peer:type_name -> opi_api.security.v2alpha1.IkePeer
	42, // 58: opi_api.security.v2alpha1.UpdateIkePeerRequest.peer:type_name -> opi_api.security.v2alpha1.IkePeer
	42, // 59: opi_api.security.v2alpha1.GetIkePeerResponse.peer:type_name -> opi_api.security.v2alpha1.IkePeer
	42, // 60: opi_api.security.v2alpha1.ListIkePeersResponse.peers:type_name -> opi_api.security.v2alpha1.IkePeer
	19, // 61: opi_api.security.v2alpha1.CreateIkeConnRequest.connection:type_name -> opi_api.security.v2alpha1.IkeConnection
	19, // 62: opi_api.security.v2alpha1.UpdateIkeConnRequest.connection:type_name -> opi_api.security.v2alpha1.IkeConnection
	19, // 63: opi_api.security.v2alpha1.GetIkeConnResponse.connection:type_name -> opi_api.security.v2alpha1.IkeConnection
	19, // 64: opi_api.security.v2alpha1.ListIkeConnsResponse.connections:type_name -> opi_api.security.v2alpha1.IkeConnection
	20, // 65: opi_api.security.v2alpha1.ListIpsecSasResponse.sas:type_name -> opi_api.security.v2alpha1.IpsecSA
	20, // 66: opi_api.security.v2alpha1.GetIpsecSaResponse.sa:type_name -> opi_api.security.v2alpha1.IpsecSA
	20, // 67: opi_api.security.v2alpha1.CreateIpsecSaRequest.sa:type_name -> opi_api.security.v2alpha1.IpsecSA
	20, // 68: opi_api.security.v2alpha1.UpdateIpsecSaRequest.sa:type_name -> opi_api.security.v2alpha1.IpsecSA
	43, // 69: opi_api.security.v2alpha1.IpsecService.CreateIkePeer:input_type -> opi_api.security.v2alpha1.CreateIkePeerRequest
	45, // 70: opi_api.security.v2alpha1.IpsecService.UpdateIkePeer:input_type -> opi_api.security.v2alpha1.UpdateIkePeerRequest
	47, // 71: opi_api.security.v2alpha1.IpsecService.DeleteIkePeer:input_type -> opi_api.security.v2alpha1.DeleteIkePeerRequest
	49, // 72: opi_api.security.v2alpha1.IpsecService.GetIkePeer:input_type -> opi_api.security.v2alpha1.GetIkePeerRequest
	51, // 73: opi_api.security.v2alpha1.IpsecService.ListIkePeers:input_type -> opi_api.security.v2alpha1.ListIkePeersRequest
	53, // 74: opi_api.security.v2alpha1.IpsecService.CreateIkeConn:input_type -> opi_api.security.v2alpha1.CreateIkeConnRequest
	55, // 75: opi_api.security.v2alpha1.IpsecService.UpdateIkeConn:input_type -> opi_api.security.v2alpha1.UpdateIkeConnRequest
	57, // 76: opi_api.security.v2alpha1.IpsecService.DeleteIkeConn:input_type -> opi_api.security.v2alpha1.DeleteIkeConnRequest
	59, // 77: opi_api.security.v2alpha1.IpsecService.GetIkeConn:input_type -> opi_api.security.v2alpha1.GetIkeConnRequest
	61, // 78: opi_api.security.v2alpha1.IpsecService.ListIkeConns:input_type -> opi_api.security.v2alpha1.ListIkeConnsRequest
	67, // 79: opi_api.security.v2alpha1.IpsecService.CreateIpsecSa:input_type -> opi_api.security.v2alpha1.CreateIpsecSaRequest
	69, // 80: opi_api.security.v2alpha1.IpsecService.UpdateIpsecSa:input_type -> opi_api.security.v2alpha1.UpdateIpsecSaRequest
	71, // 81: opi_api.security.v2alpha1.IpsecService.DeleteIpsecSa:input_type -> opi_api.security.v2alpha1.DeleteIpsecSaRequest
	65, // 82: opi_api.security.v2alpha1.IpsecService.GetIpsecSa:input_type -> opi_api.security.v2alpha1.GetIpsecSaRequest
	63, // 83: opi_api.security.v2alpha1.IpsecService.ListIpsecSas:input_type -> opi_api.security.v2alpha1.ListIpsecSasRequest
	44, // 84: opi_api.security.v2alpha1.IpsecService.CreateIkePeer:output_type -> opi_api.security.v2alpha1.CreateIkePeerResponse
	46, // 85: opi_api.security.v2alpha1.IpsecService.UpdateIkePeer:output_type -> opi_api.security.v2alpha1.UpdateIkePeerResponse
	48, // 86: opi_api.security.v2alpha1.IpsecService.DeleteIkePeer:output_type -> opi_api.security.v2alpha1.DeleteIkePeerResponse
	50, // 87: opi_api.security.v2alpha1.IpsecService.GetIkePeer:output_type -> opi_api.security.v2alpha1.GetIkePeerResponse
	52, // 88: opi_api.security.v2alpha1.IpsecService.ListIkePeers:output_type -> opi_api.security.v2alpha1.ListIkePeersResponse
	54, // 89: opi_api.security.v2alpha1.IpsecService.CreateIkeConn:output_type -> opi_api.security.v2alpha1.CreateIkeConnResponse
	56, // 90: opi_api.security.v2alpha1.IpsecService.UpdateIkeConn:output_type -> opi_api.security.v2alpha1.UpdateIkeConnResponse
	58, // 91: opi_api.security.v2alpha1.IpsecService.DeleteIkeConn:output_type -> opi_api.security.v2alpha1.DeleteIkeConnResponse
	60, // 92: opi_api.security.v2alpha1.IpsecService.GetIkeConn:output_type -> opi_api.security.v2alpha1.GetIkeConnResponse
	62, // 93: opi_api.security.v2alpha1.IpsecService.ListIkeConns:output_type -> opi_api.security.v2alpha1.ListIkeConnsResponse
	68, // 94: opi_api.security.v2alpha1.IpsecService.CreateIpsecSa:output_type -> opi_api.security.v2alpha1.CreateIpsecSaResponse
	70, // 95: opi_api.security.v2alpha1.IpsecService.UpdateIpsecSa:output_type -> opi_api.security.v2alpha1.UpdateIpsecSaResponse
	72, // 96: opi_api.security.v2alpha1.IpsecService.DeleteIpsecSa:output_type -> opi_api.security.v2alpha1.DeleteIpsecSaResponse
	66, // 97: opi_api.security.v2alpha1.IpsecService.GetIpsecSa:output_type -> opi_api.security.v2alpha1.GetIpsecSaResponse
	64, // 98: opi_api.security.v2alpha1.IpsecService.ListIpsecSas:output_type -> opi_api.security.v2alpha1.ListIpsecSasResponse
	84, // [84:99] is the sub-list for method output_type
	69, // [69:84] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_ipsec_proto_init() }
func file_ipsec_proto_init() {
	if File_ipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkeFragmentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkeSaLifetimeSoft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkeSaLifetimeHard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaCerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkeConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecPolicyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpdProcessingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EspAlgorithms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DscpMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildSaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaLifetimeSoft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaLifetimeHard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lifetime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiReplayStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiReplayWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkeConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberIkeSAs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkePeerAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IkePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIkePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIkePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIkePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIkePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIkePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIkePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIkePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIkePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIkePeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIkePeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIkeConnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIkeConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIkeConnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIkeConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIkeConnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIkeConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIkeConnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIkeConnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIkeConnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIkeConnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpsecSasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpsecSasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ipsec_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_ipsec_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipsec_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipsec_proto_goTypes,
		DependencyIndexes: file_ipsec_proto_depIdxs,
		EnumInfos:         file_ipsec_proto_enumTypes,
		MessageInfos:      file_ipsec_proto_msgTypes,
	}.Build()
	File_ipsec_proto = out.File
	file_ipsec_proto_rawDesc = nil
	file_ipsec_proto_goTypes = nil
	file_ipsec_proto_depIdxs = nil
}
