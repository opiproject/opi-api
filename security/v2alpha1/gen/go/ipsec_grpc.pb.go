//
// Copyright (C) 2021 Intel Corporation
// Copyright (c) 2023 Dell Inc, or its subsidiaries.
// SPDX-License-Identifier: Apache-2.0
//
// Major pieces taken from:
// https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto
//
// Service functions for IKE.
//
// The configuration model is derived from RFC 9061.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ipsec.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IpsecService_CreateIkePeer_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/CreateIkePeer"
	IpsecService_UpdateIkePeer_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/UpdateIkePeer"
	IpsecService_DeleteIkePeer_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/DeleteIkePeer"
	IpsecService_GetIkePeer_FullMethodName    = "/opi_api.security.v2alpha1.IpsecService/GetIkePeer"
	IpsecService_ListIkePeers_FullMethodName  = "/opi_api.security.v2alpha1.IpsecService/ListIkePeers"
	IpsecService_CreateIkeConn_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/CreateIkeConn"
	IpsecService_UpdateIkeConn_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/UpdateIkeConn"
	IpsecService_DeleteIkeConn_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/DeleteIkeConn"
	IpsecService_GetIkeConn_FullMethodName    = "/opi_api.security.v2alpha1.IpsecService/GetIkeConn"
	IpsecService_ListIkeConns_FullMethodName  = "/opi_api.security.v2alpha1.IpsecService/ListIkeConns"
	IpsecService_CreateIpsecSa_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/CreateIpsecSa"
	IpsecService_UpdateIpsecSa_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/UpdateIpsecSa"
	IpsecService_DeleteIpsecSa_FullMethodName = "/opi_api.security.v2alpha1.IpsecService/DeleteIpsecSa"
	IpsecService_GetIpsecSa_FullMethodName    = "/opi_api.security.v2alpha1.IpsecService/GetIpsecSa"
	IpsecService_ListIpsecSas_FullMethodName  = "/opi_api.security.v2alpha1.IpsecService/ListIpsecSas"
)

// IpsecServiceClient is the client API for IpsecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpsecServiceClient interface {
	// Create an IKE peer. This request includes the specification of the keys and certificates
	// associated with the peer.
	CreateIkePeer(ctx context.Context, in *CreateIkePeerRequest, opts ...grpc.CallOption) (*CreateIkePeerResponse, error)
	// Update an existing IKE peer specification.
	UpdateIkePeer(ctx context.Context, in *UpdateIkePeerRequest, opts ...grpc.CallOption) (*UpdateIkePeerResponse, error)
	// Delete an existing IKE peer specification.
	DeleteIkePeer(ctx context.Context, in *DeleteIkePeerRequest, opts ...grpc.CallOption) (*DeleteIkePeerResponse, error)
	// Get an existing IKE peer specification.
	GetIkePeer(ctx context.Context, in *GetIkePeerRequest, opts ...grpc.CallOption) (*GetIkePeerResponse, error)
	// List existing IKE peers.
	ListIkePeers(ctx context.Context, in *ListIkePeersRequest, opts ...grpc.CallOption) (*ListIkePeersResponse, error)
	// Create an IKE connection. The request includes specification of the local
	// and remote IKE peers and the specification of the IPsec SAs (aka child SAs)
	// from this IKE connection.
	CreateIkeConn(ctx context.Context, in *CreateIkeConnRequest, opts ...grpc.CallOption) (*CreateIkeConnResponse, error)
	// Update an existing IKE connection.
	UpdateIkeConn(ctx context.Context, in *UpdateIkeConnRequest, opts ...grpc.CallOption) (*UpdateIkeConnResponse, error)
	// Delete an existing IKE connection.
	DeleteIkeConn(ctx context.Context, in *DeleteIkeConnRequest, opts ...grpc.CallOption) (*DeleteIkeConnResponse, error)
	// Retrieve an IKE connection.
	GetIkeConn(ctx context.Context, in *GetIkeConnRequest, opts ...grpc.CallOption) (*GetIkeConnResponse, error)
	// List existing IKE connections
	ListIkeConns(ctx context.Context, in *ListIkeConnsRequest, opts ...grpc.CallOption) (*ListIkeConnsResponse, error)
	// Create an IPsec Security Association
	CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error)
	// Update an existing IPsec Security Association
	UpdateIpsecSa(ctx context.Context, in *UpdateIpsecSaRequest, opts ...grpc.CallOption) (*UpdateIpsecSaResponse, error)
	// Delete an existing IPsec Security Association
	DeleteIpsecSa(ctx context.Context, in *DeleteIpsecSaRequest, opts ...grpc.CallOption) (*DeleteIpsecSaResponse, error)
	// Get an IPsec Security Association
	GetIpsecSa(ctx context.Context, in *GetIpsecSaRequest, opts ...grpc.CallOption) (*GetIpsecSaResponse, error)
	// List existing IPsec Security Associations
	ListIpsecSas(ctx context.Context, in *ListIpsecSasRequest, opts ...grpc.CallOption) (*ListIpsecSasResponse, error)
}

type ipsecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpsecServiceClient(cc grpc.ClientConnInterface) IpsecServiceClient {
	return &ipsecServiceClient{cc}
}

func (c *ipsecServiceClient) CreateIkePeer(ctx context.Context, in *CreateIkePeerRequest, opts ...grpc.CallOption) (*CreateIkePeerResponse, error) {
	out := new(CreateIkePeerResponse)
	err := c.cc.Invoke(ctx, IpsecService_CreateIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) UpdateIkePeer(ctx context.Context, in *UpdateIkePeerRequest, opts ...grpc.CallOption) (*UpdateIkePeerResponse, error) {
	out := new(UpdateIkePeerResponse)
	err := c.cc.Invoke(ctx, IpsecService_UpdateIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) DeleteIkePeer(ctx context.Context, in *DeleteIkePeerRequest, opts ...grpc.CallOption) (*DeleteIkePeerResponse, error) {
	out := new(DeleteIkePeerResponse)
	err := c.cc.Invoke(ctx, IpsecService_DeleteIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) GetIkePeer(ctx context.Context, in *GetIkePeerRequest, opts ...grpc.CallOption) (*GetIkePeerResponse, error) {
	out := new(GetIkePeerResponse)
	err := c.cc.Invoke(ctx, IpsecService_GetIkePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) ListIkePeers(ctx context.Context, in *ListIkePeersRequest, opts ...grpc.CallOption) (*ListIkePeersResponse, error) {
	out := new(ListIkePeersResponse)
	err := c.cc.Invoke(ctx, IpsecService_ListIkePeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) CreateIkeConn(ctx context.Context, in *CreateIkeConnRequest, opts ...grpc.CallOption) (*CreateIkeConnResponse, error) {
	out := new(CreateIkeConnResponse)
	err := c.cc.Invoke(ctx, IpsecService_CreateIkeConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) UpdateIkeConn(ctx context.Context, in *UpdateIkeConnRequest, opts ...grpc.CallOption) (*UpdateIkeConnResponse, error) {
	out := new(UpdateIkeConnResponse)
	err := c.cc.Invoke(ctx, IpsecService_UpdateIkeConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) DeleteIkeConn(ctx context.Context, in *DeleteIkeConnRequest, opts ...grpc.CallOption) (*DeleteIkeConnResponse, error) {
	out := new(DeleteIkeConnResponse)
	err := c.cc.Invoke(ctx, IpsecService_DeleteIkeConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) GetIkeConn(ctx context.Context, in *GetIkeConnRequest, opts ...grpc.CallOption) (*GetIkeConnResponse, error) {
	out := new(GetIkeConnResponse)
	err := c.cc.Invoke(ctx, IpsecService_GetIkeConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) ListIkeConns(ctx context.Context, in *ListIkeConnsRequest, opts ...grpc.CallOption) (*ListIkeConnsResponse, error) {
	out := new(ListIkeConnsResponse)
	err := c.cc.Invoke(ctx, IpsecService_ListIkeConns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error) {
	out := new(CreateIpsecSaResponse)
	err := c.cc.Invoke(ctx, IpsecService_CreateIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) UpdateIpsecSa(ctx context.Context, in *UpdateIpsecSaRequest, opts ...grpc.CallOption) (*UpdateIpsecSaResponse, error) {
	out := new(UpdateIpsecSaResponse)
	err := c.cc.Invoke(ctx, IpsecService_UpdateIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) DeleteIpsecSa(ctx context.Context, in *DeleteIpsecSaRequest, opts ...grpc.CallOption) (*DeleteIpsecSaResponse, error) {
	out := new(DeleteIpsecSaResponse)
	err := c.cc.Invoke(ctx, IpsecService_DeleteIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) GetIpsecSa(ctx context.Context, in *GetIpsecSaRequest, opts ...grpc.CallOption) (*GetIpsecSaResponse, error) {
	out := new(GetIpsecSaResponse)
	err := c.cc.Invoke(ctx, IpsecService_GetIpsecSa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecServiceClient) ListIpsecSas(ctx context.Context, in *ListIpsecSasRequest, opts ...grpc.CallOption) (*ListIpsecSasResponse, error) {
	out := new(ListIpsecSasResponse)
	err := c.cc.Invoke(ctx, IpsecService_ListIpsecSas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpsecServiceServer is the server API for IpsecService service.
// All implementations must embed UnimplementedIpsecServiceServer
// for forward compatibility
type IpsecServiceServer interface {
	// Create an IKE peer. This request includes the specification of the keys and certificates
	// associated with the peer.
	CreateIkePeer(context.Context, *CreateIkePeerRequest) (*CreateIkePeerResponse, error)
	// Update an existing IKE peer specification.
	UpdateIkePeer(context.Context, *UpdateIkePeerRequest) (*UpdateIkePeerResponse, error)
	// Delete an existing IKE peer specification.
	DeleteIkePeer(context.Context, *DeleteIkePeerRequest) (*DeleteIkePeerResponse, error)
	// Get an existing IKE peer specification.
	GetIkePeer(context.Context, *GetIkePeerRequest) (*GetIkePeerResponse, error)
	// List existing IKE peers.
	ListIkePeers(context.Context, *ListIkePeersRequest) (*ListIkePeersResponse, error)
	// Create an IKE connection. The request includes specification of the local
	// and remote IKE peers and the specification of the IPsec SAs (aka child SAs)
	// from this IKE connection.
	CreateIkeConn(context.Context, *CreateIkeConnRequest) (*CreateIkeConnResponse, error)
	// Update an existing IKE connection.
	UpdateIkeConn(context.Context, *UpdateIkeConnRequest) (*UpdateIkeConnResponse, error)
	// Delete an existing IKE connection.
	DeleteIkeConn(context.Context, *DeleteIkeConnRequest) (*DeleteIkeConnResponse, error)
	// Retrieve an IKE connection.
	GetIkeConn(context.Context, *GetIkeConnRequest) (*GetIkeConnResponse, error)
	// List existing IKE connections
	ListIkeConns(context.Context, *ListIkeConnsRequest) (*ListIkeConnsResponse, error)
	// Create an IPsec Security Association
	CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error)
	// Update an existing IPsec Security Association
	UpdateIpsecSa(context.Context, *UpdateIpsecSaRequest) (*UpdateIpsecSaResponse, error)
	// Delete an existing IPsec Security Association
	DeleteIpsecSa(context.Context, *DeleteIpsecSaRequest) (*DeleteIpsecSaResponse, error)
	// Get an IPsec Security Association
	GetIpsecSa(context.Context, *GetIpsecSaRequest) (*GetIpsecSaResponse, error)
	// List existing IPsec Security Associations
	ListIpsecSas(context.Context, *ListIpsecSasRequest) (*ListIpsecSasResponse, error)
	mustEmbedUnimplementedIpsecServiceServer()
}

// UnimplementedIpsecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpsecServiceServer struct {
}

func (UnimplementedIpsecServiceServer) CreateIkePeer(context.Context, *CreateIkePeerRequest) (*CreateIkePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIkePeer not implemented")
}
func (UnimplementedIpsecServiceServer) UpdateIkePeer(context.Context, *UpdateIkePeerRequest) (*UpdateIkePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIkePeer not implemented")
}
func (UnimplementedIpsecServiceServer) DeleteIkePeer(context.Context, *DeleteIkePeerRequest) (*DeleteIkePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIkePeer not implemented")
}
func (UnimplementedIpsecServiceServer) GetIkePeer(context.Context, *GetIkePeerRequest) (*GetIkePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIkePeer not implemented")
}
func (UnimplementedIpsecServiceServer) ListIkePeers(context.Context, *ListIkePeersRequest) (*ListIkePeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIkePeers not implemented")
}
func (UnimplementedIpsecServiceServer) CreateIkeConn(context.Context, *CreateIkeConnRequest) (*CreateIkeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIkeConn not implemented")
}
func (UnimplementedIpsecServiceServer) UpdateIkeConn(context.Context, *UpdateIkeConnRequest) (*UpdateIkeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIkeConn not implemented")
}
func (UnimplementedIpsecServiceServer) DeleteIkeConn(context.Context, *DeleteIkeConnRequest) (*DeleteIkeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIkeConn not implemented")
}
func (UnimplementedIpsecServiceServer) GetIkeConn(context.Context, *GetIkeConnRequest) (*GetIkeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIkeConn not implemented")
}
func (UnimplementedIpsecServiceServer) ListIkeConns(context.Context, *ListIkeConnsRequest) (*ListIkeConnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIkeConns not implemented")
}
func (UnimplementedIpsecServiceServer) CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecSa not implemented")
}
func (UnimplementedIpsecServiceServer) UpdateIpsecSa(context.Context, *UpdateIpsecSaRequest) (*UpdateIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpsecSa not implemented")
}
func (UnimplementedIpsecServiceServer) DeleteIpsecSa(context.Context, *DeleteIpsecSaRequest) (*DeleteIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpsecSa not implemented")
}
func (UnimplementedIpsecServiceServer) GetIpsecSa(context.Context, *GetIpsecSaRequest) (*GetIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSa not implemented")
}
func (UnimplementedIpsecServiceServer) ListIpsecSas(context.Context, *ListIpsecSasRequest) (*ListIpsecSasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpsecSas not implemented")
}
func (UnimplementedIpsecServiceServer) mustEmbedUnimplementedIpsecServiceServer() {}

// UnsafeIpsecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpsecServiceServer will
// result in compilation errors.
type UnsafeIpsecServiceServer interface {
	mustEmbedUnimplementedIpsecServiceServer()
}

func RegisterIpsecServiceServer(s grpc.ServiceRegistrar, srv IpsecServiceServer) {
	s.RegisterService(&IpsecService_ServiceDesc, srv)
}

func _IpsecService_CreateIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).CreateIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_CreateIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).CreateIkePeer(ctx, req.(*CreateIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_UpdateIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).UpdateIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_UpdateIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).UpdateIkePeer(ctx, req.(*UpdateIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_DeleteIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).DeleteIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_DeleteIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).DeleteIkePeer(ctx, req.(*DeleteIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_GetIkePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIkePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).GetIkePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_GetIkePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).GetIkePeer(ctx, req.(*GetIkePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_ListIkePeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIkePeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).ListIkePeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_ListIkePeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).ListIkePeers(ctx, req.(*ListIkePeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_CreateIkeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIkeConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).CreateIkeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_CreateIkeConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).CreateIkeConn(ctx, req.(*CreateIkeConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_UpdateIkeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIkeConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).UpdateIkeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_UpdateIkeConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).UpdateIkeConn(ctx, req.(*UpdateIkeConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_DeleteIkeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIkeConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).DeleteIkeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_DeleteIkeConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).DeleteIkeConn(ctx, req.(*DeleteIkeConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_GetIkeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIkeConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).GetIkeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_GetIkeConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).GetIkeConn(ctx, req.(*GetIkeConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_ListIkeConns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIkeConnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).ListIkeConns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_ListIkeConns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).ListIkeConns(ctx, req.(*ListIkeConnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_CreateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).CreateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_CreateIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).CreateIpsecSa(ctx, req.(*CreateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_UpdateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).UpdateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_UpdateIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).UpdateIpsecSa(ctx, req.(*UpdateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_DeleteIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).DeleteIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_DeleteIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).DeleteIpsecSa(ctx, req.(*DeleteIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_GetIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).GetIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_GetIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).GetIpsecSa(ctx, req.(*GetIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecService_ListIpsecSas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpsecSasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServiceServer).ListIpsecSas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpsecService_ListIpsecSas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServiceServer).ListIpsecSas(ctx, req.(*ListIpsecSasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpsecService_ServiceDesc is the grpc.ServiceDesc for IpsecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpsecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v2alpha1.IpsecService",
	HandlerType: (*IpsecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIkePeer",
			Handler:    _IpsecService_CreateIkePeer_Handler,
		},
		{
			MethodName: "UpdateIkePeer",
			Handler:    _IpsecService_UpdateIkePeer_Handler,
		},
		{
			MethodName: "DeleteIkePeer",
			Handler:    _IpsecService_DeleteIkePeer_Handler,
		},
		{
			MethodName: "GetIkePeer",
			Handler:    _IpsecService_GetIkePeer_Handler,
		},
		{
			MethodName: "ListIkePeers",
			Handler:    _IpsecService_ListIkePeers_Handler,
		},
		{
			MethodName: "CreateIkeConn",
			Handler:    _IpsecService_CreateIkeConn_Handler,
		},
		{
			MethodName: "UpdateIkeConn",
			Handler:    _IpsecService_UpdateIkeConn_Handler,
		},
		{
			MethodName: "DeleteIkeConn",
			Handler:    _IpsecService_DeleteIkeConn_Handler,
		},
		{
			MethodName: "GetIkeConn",
			Handler:    _IpsecService_GetIkeConn_Handler,
		},
		{
			MethodName: "ListIkeConns",
			Handler:    _IpsecService_ListIkeConns_Handler,
		},
		{
			MethodName: "CreateIpsecSa",
			Handler:    _IpsecService_CreateIpsecSa_Handler,
		},
		{
			MethodName: "UpdateIpsecSa",
			Handler:    _IpsecService_UpdateIpsecSa_Handler,
		},
		{
			MethodName: "DeleteIpsecSa",
			Handler:    _IpsecService_DeleteIpsecSa_Handler,
		},
		{
			MethodName: "GetIpsecSa",
			Handler:    _IpsecService_GetIpsecSa_Handler,
		},
		{
			MethodName: "ListIpsecSas",
			Handler:    _IpsecService_ListIpsecSas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}
