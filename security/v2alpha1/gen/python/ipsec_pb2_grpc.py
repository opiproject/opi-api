# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ipsec_pb2 as ipsec__pb2


class IpsecServiceStub(object):
    """The IPsec service defines operations on:
    - IKE Peer Association Database (PAD)
    - IKE Connections
    - IPsec Security Associations (SAs)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateIkePeer = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/CreateIkePeer',
                request_serializer=ipsec__pb2.CreateIkePeerRequest.SerializeToString,
                response_deserializer=ipsec__pb2.CreateIkePeerResponse.FromString,
                )
        self.UpdateIkePeer = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/UpdateIkePeer',
                request_serializer=ipsec__pb2.UpdateIkePeerRequest.SerializeToString,
                response_deserializer=ipsec__pb2.UpdateIkePeerResponse.FromString,
                )
        self.DeleteIkePeer = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/DeleteIkePeer',
                request_serializer=ipsec__pb2.DeleteIkePeerRequest.SerializeToString,
                response_deserializer=ipsec__pb2.DeleteIkePeerResponse.FromString,
                )
        self.GetIkePeer = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/GetIkePeer',
                request_serializer=ipsec__pb2.GetIkePeerRequest.SerializeToString,
                response_deserializer=ipsec__pb2.GetIkePeerResponse.FromString,
                )
        self.ListIkePeers = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/ListIkePeers',
                request_serializer=ipsec__pb2.ListIkePeersRequest.SerializeToString,
                response_deserializer=ipsec__pb2.ListIkePeersResponse.FromString,
                )
        self.CreateIkeConn = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/CreateIkeConn',
                request_serializer=ipsec__pb2.CreateIkeConnRequest.SerializeToString,
                response_deserializer=ipsec__pb2.CreateIkeConnResponse.FromString,
                )
        self.UpdateIkeConn = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/UpdateIkeConn',
                request_serializer=ipsec__pb2.UpdateIkeConnRequest.SerializeToString,
                response_deserializer=ipsec__pb2.UpdateIkeConnResponse.FromString,
                )
        self.DeleteIkeConn = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/DeleteIkeConn',
                request_serializer=ipsec__pb2.DeleteIkeConnRequest.SerializeToString,
                response_deserializer=ipsec__pb2.DeleteIkeConnResponse.FromString,
                )
        self.GetIkeConn = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/GetIkeConn',
                request_serializer=ipsec__pb2.GetIkeConnRequest.SerializeToString,
                response_deserializer=ipsec__pb2.GetIkeConnResponse.FromString,
                )
        self.ListIkeConns = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/ListIkeConns',
                request_serializer=ipsec__pb2.ListIkeConnsRequest.SerializeToString,
                response_deserializer=ipsec__pb2.ListIkeConnsResponse.FromString,
                )
        self.CreateIpsecSa = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/CreateIpsecSa',
                request_serializer=ipsec__pb2.CreateIpsecSaRequest.SerializeToString,
                response_deserializer=ipsec__pb2.CreateIpsecSaResponse.FromString,
                )
        self.UpdateIpsecSa = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/UpdateIpsecSa',
                request_serializer=ipsec__pb2.UpdateIpsecSaRequest.SerializeToString,
                response_deserializer=ipsec__pb2.UpdateIpsecSaResponse.FromString,
                )
        self.DeleteIpsecSa = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/DeleteIpsecSa',
                request_serializer=ipsec__pb2.DeleteIpsecSaRequest.SerializeToString,
                response_deserializer=ipsec__pb2.DeleteIpsecSaResponse.FromString,
                )
        self.GetIpsecSa = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/GetIpsecSa',
                request_serializer=ipsec__pb2.GetIpsecSaRequest.SerializeToString,
                response_deserializer=ipsec__pb2.GetIpsecSaResponse.FromString,
                )
        self.ListIpsecSas = channel.unary_unary(
                '/opi_api.security.v2alpha1.IpsecService/ListIpsecSas',
                request_serializer=ipsec__pb2.ListIpsecSasRequest.SerializeToString,
                response_deserializer=ipsec__pb2.ListIpsecSasResponse.FromString,
                )


class IpsecServiceServicer(object):
    """The IPsec service defines operations on:
    - IKE Peer Association Database (PAD)
    - IKE Connections
    - IPsec Security Associations (SAs)
    """

    def CreateIkePeer(self, request, context):
        """Create an IKE peer. This request includes the specification of the keys and certificates
        associated with the peer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIkePeer(self, request, context):
        """Update an existing IKE peer specification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteIkePeer(self, request, context):
        """Delete an existing IKE peer specification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIkePeer(self, request, context):
        """Get an existing IKE peer specification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIkePeers(self, request, context):
        """List existing IKE peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIkeConn(self, request, context):
        """Create an IKE connection. The request includes specification of the local
        and remote IKE peers and the specification of the IPsec SAs (aka child SAs)
        from this IKE connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIkeConn(self, request, context):
        """Update an existing IKE connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteIkeConn(self, request, context):
        """Delete an existing IKE connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIkeConn(self, request, context):
        """Retrieve an IKE connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIkeConns(self, request, context):
        """List existing IKE connections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIpsecSa(self, request, context):
        """Create an IPsec Security Association
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIpsecSa(self, request, context):
        """Update an existing IPsec Security Association
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteIpsecSa(self, request, context):
        """Delete an existing IPsec Security Association
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIpsecSa(self, request, context):
        """Get an IPsec Security Association
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIpsecSas(self, request, context):
        """List existing IPsec Security Associations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IpsecServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateIkePeer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIkePeer,
                    request_deserializer=ipsec__pb2.CreateIkePeerRequest.FromString,
                    response_serializer=ipsec__pb2.CreateIkePeerResponse.SerializeToString,
            ),
            'UpdateIkePeer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIkePeer,
                    request_deserializer=ipsec__pb2.UpdateIkePeerRequest.FromString,
                    response_serializer=ipsec__pb2.UpdateIkePeerResponse.SerializeToString,
            ),
            'DeleteIkePeer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteIkePeer,
                    request_deserializer=ipsec__pb2.DeleteIkePeerRequest.FromString,
                    response_serializer=ipsec__pb2.DeleteIkePeerResponse.SerializeToString,
            ),
            'GetIkePeer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIkePeer,
                    request_deserializer=ipsec__pb2.GetIkePeerRequest.FromString,
                    response_serializer=ipsec__pb2.GetIkePeerResponse.SerializeToString,
            ),
            'ListIkePeers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIkePeers,
                    request_deserializer=ipsec__pb2.ListIkePeersRequest.FromString,
                    response_serializer=ipsec__pb2.ListIkePeersResponse.SerializeToString,
            ),
            'CreateIkeConn': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIkeConn,
                    request_deserializer=ipsec__pb2.CreateIkeConnRequest.FromString,
                    response_serializer=ipsec__pb2.CreateIkeConnResponse.SerializeToString,
            ),
            'UpdateIkeConn': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIkeConn,
                    request_deserializer=ipsec__pb2.UpdateIkeConnRequest.FromString,
                    response_serializer=ipsec__pb2.UpdateIkeConnResponse.SerializeToString,
            ),
            'DeleteIkeConn': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteIkeConn,
                    request_deserializer=ipsec__pb2.DeleteIkeConnRequest.FromString,
                    response_serializer=ipsec__pb2.DeleteIkeConnResponse.SerializeToString,
            ),
            'GetIkeConn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIkeConn,
                    request_deserializer=ipsec__pb2.GetIkeConnRequest.FromString,
                    response_serializer=ipsec__pb2.GetIkeConnResponse.SerializeToString,
            ),
            'ListIkeConns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIkeConns,
                    request_deserializer=ipsec__pb2.ListIkeConnsRequest.FromString,
                    response_serializer=ipsec__pb2.ListIkeConnsResponse.SerializeToString,
            ),
            'CreateIpsecSa': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIpsecSa,
                    request_deserializer=ipsec__pb2.CreateIpsecSaRequest.FromString,
                    response_serializer=ipsec__pb2.CreateIpsecSaResponse.SerializeToString,
            ),
            'UpdateIpsecSa': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIpsecSa,
                    request_deserializer=ipsec__pb2.UpdateIpsecSaRequest.FromString,
                    response_serializer=ipsec__pb2.UpdateIpsecSaResponse.SerializeToString,
            ),
            'DeleteIpsecSa': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteIpsecSa,
                    request_deserializer=ipsec__pb2.DeleteIpsecSaRequest.FromString,
                    response_serializer=ipsec__pb2.DeleteIpsecSaResponse.SerializeToString,
            ),
            'GetIpsecSa': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIpsecSa,
                    request_deserializer=ipsec__pb2.GetIpsecSaRequest.FromString,
                    response_serializer=ipsec__pb2.GetIpsecSaResponse.SerializeToString,
            ),
            'ListIpsecSas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIpsecSas,
                    request_deserializer=ipsec__pb2.ListIpsecSasRequest.FromString,
                    response_serializer=ipsec__pb2.ListIpsecSasResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.security.v2alpha1.IpsecService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IpsecService(object):
    """The IPsec service defines operations on:
    - IKE Peer Association Database (PAD)
    - IKE Connections
    - IPsec Security Associations (SAs)
    """

    @staticmethod
    def CreateIkePeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/CreateIkePeer',
            ipsec__pb2.CreateIkePeerRequest.SerializeToString,
            ipsec__pb2.CreateIkePeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIkePeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/UpdateIkePeer',
            ipsec__pb2.UpdateIkePeerRequest.SerializeToString,
            ipsec__pb2.UpdateIkePeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteIkePeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/DeleteIkePeer',
            ipsec__pb2.DeleteIkePeerRequest.SerializeToString,
            ipsec__pb2.DeleteIkePeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIkePeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/GetIkePeer',
            ipsec__pb2.GetIkePeerRequest.SerializeToString,
            ipsec__pb2.GetIkePeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListIkePeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/ListIkePeers',
            ipsec__pb2.ListIkePeersRequest.SerializeToString,
            ipsec__pb2.ListIkePeersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIkeConn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/CreateIkeConn',
            ipsec__pb2.CreateIkeConnRequest.SerializeToString,
            ipsec__pb2.CreateIkeConnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIkeConn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/UpdateIkeConn',
            ipsec__pb2.UpdateIkeConnRequest.SerializeToString,
            ipsec__pb2.UpdateIkeConnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteIkeConn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/DeleteIkeConn',
            ipsec__pb2.DeleteIkeConnRequest.SerializeToString,
            ipsec__pb2.DeleteIkeConnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIkeConn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/GetIkeConn',
            ipsec__pb2.GetIkeConnRequest.SerializeToString,
            ipsec__pb2.GetIkeConnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListIkeConns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/ListIkeConns',
            ipsec__pb2.ListIkeConnsRequest.SerializeToString,
            ipsec__pb2.ListIkeConnsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIpsecSa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/CreateIpsecSa',
            ipsec__pb2.CreateIpsecSaRequest.SerializeToString,
            ipsec__pb2.CreateIpsecSaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIpsecSa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/UpdateIpsecSa',
            ipsec__pb2.UpdateIpsecSaRequest.SerializeToString,
            ipsec__pb2.UpdateIpsecSaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteIpsecSa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/DeleteIpsecSa',
            ipsec__pb2.DeleteIpsecSaRequest.SerializeToString,
            ipsec__pb2.DeleteIpsecSaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIpsecSa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/GetIpsecSa',
            ipsec__pb2.GetIpsecSaRequest.SerializeToString,
            ipsec__pb2.GetIpsecSaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListIpsecSas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.security.v2alpha1.IpsecService/ListIpsecSas',
            ipsec__pb2.ListIpsecSasRequest.SerializeToString,
            ipsec__pb2.ListIpsecSasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
